from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel
from typing_extensions import Annotated


class AddNextHopCountToReceivedBgpRoutesLeaf1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=128)]
    """
    Determines the weight that is internally added to the received PE-CE BGP routes

    The configured weight is added to all received BGP PE-CE routes for the purpose of EVPN unequal ECMP.
    This weight is internal and not added into any link-bandwidth extended community when readvertising
    the received routes to other ipv4 or ipv6 neighbors.
    """


class AddNextHopCountToReceivedBgpRoutesLeaf21(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=128)]
    """
    Determines the weight that is internally added to the received PE-CE BGP routes

    The configured weight is added to all received BGP PE-CE routes for the purpose of EVPN unequal ECMP.
    This weight is internal and not added into any link-bandwidth extended community when readvertising
    the received routes to other ipv4 or ipv6 neighbors.
    """


class AddNextHopCountToReceivedBgpRoutesLeaf31(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=128)]
    """
    Determines the weight that is internally added to the received PE-CE BGP routes

    The configured weight is added to all received BGP PE-CE routes for the purpose of EVPN unequal ECMP.
    This weight is internal and not added into any link-bandwidth extended community when readvertising
    the received routes to other ipv4 or ipv6 neighbors.
    """


class AddNextHopCountToReceivedBgpRoutesLeaf41(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=128)]
    """
    Determines the weight that is internally added to the received PE-CE BGP routes

    The configured weight is added to all received BGP PE-CE routes for the purpose of EVPN unequal ECMP.
    This weight is internal and not added into any link-bandwidth extended community when readvertising
    the received routes to other ipv4 or ipv6 neighbors.
    """


class AdjacenciesLeaf(BaseModel):
    """
    Enable tracing all adjacency events.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class AdjacenciesLeaf2(BaseModel):
    """
    Enable tracing all adjacency events.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class AdjacencySidHoldTimeLeaf1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=300)]
    """
    Timer to maintain the operational state of the adjacency SID following a failure of the adjacency.
    """


class AdjacencyContainer(BaseModel):
    """
    Enable tracing for adjacency events
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class AdminGroupLeafList(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    The administrative group sub-TLV contains a 4-octet bit mask assigned by the network administrator

    Each set bit corresponds to one administrative group assigned to the interface. By convention, the least significant bit is referred to as group 0, and the most significant bit is referred to as group 31.
    """


class AdminGroupLeafList2(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    The administrative group sub-TLV contains a 4-octet bit mask assigned by the network administrator

    Each set bit corresponds to one administrative group assigned to the interface. By convention, the least significant bit is referred to as group 0, and the most significant bit is referred to as group 31.
    """


class AdminGroupLeafList3(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    The administrative group sub-TLV contains a 4-octet bit mask assigned by the network administrator

    Each set bit corresponds to one administrative group assigned to the interface. By convention, the least significant bit is referred to as group 0, and the most significant bit is referred to as group 31.
    """


class AdminGroupLeafList4(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    The administrative group sub-TLV contains a 4-octet bit mask assigned by the network administrator

    Each set bit corresponds to one administrative group assigned to the interface. By convention, the least significant bit is referred to as group 0, and the most significant bit is referred to as group 31.
    """


class AdministrativeTagsLeafList(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    The set of administrative tags assigned to the local system by
    the network operator. The meaning of these tags is opaque to OSPF
    - and their interpretation is per-domain specific
    """


class AdministrativeTagsLeafList2(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    The set of administrative tags assigned to the local system by
    the network operator. The meaning of these tags is opaque to OSPF
    - and their interpretation is per-domain specific
    """


class AdministrativeTagsLeafList3(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    The set of administrative tags assigned to the local system by
    the network operator. The meaning of these tags is opaque to OSPF
    - and their interpretation is per-domain specific
    """


class AgeTimeLeaf21(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=60, le=86400)]
    """
    Aging timer value for the proxy entries

    When the aging expires, the entry is flushed.
    """


class AgeTimeLeaf31(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=60, le=86400)]
    """
    Aging timer value for the proxy entries

    When the aging expires, the entry is flushed.
    """


class AgingLeaf1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=18446744073709551615)]
    """
    remaining age time for learnt macs
    """


class AgingLeaf21(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=18446744073709551615)]
    """
    The remaining age time for learnt proxy entry
    """


class AgingLeaf31(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=18446744073709551615)]
    """
    The remaining age time for learnt proxy entry
    """


class AgingLeaf41(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=18446744073709551615)]
    """
    remaining age time for learnt macs
    """


class AlgorithmLeafList2(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=255)]
    """
    List of algorithm types supported by the router. Algorithm 0 should always be in the list
    """


class AllInterfacesLeaf(BaseModel):
    """
    Enable packet tracing for all interfaces
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class AllInterfacesLeaf2(BaseModel):
    """
    Enable packet tracing for all interfaces
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class AllInterfacesLeaf3(BaseModel):
    """
    Enable packet tracing for all interfaces
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class AllInterfacesLeaf4(BaseModel):
    """
    Enable packet tracing for all interfaces
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class AllInterfacesLeaf5(BaseModel):
    """
    Enable packet tracing for all interfaces
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class AllInterfacesLeaf6(BaseModel):
    """
    Enable packet tracing for all interfaces
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class AllLeaf(BaseModel):
    """
    Trace for all interfaces
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class AllLeaf2(BaseModel):
    """
    Trace for all interfaces
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class AllLeaf3(BaseModel):
    """
    Trace for all interfaces
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class AllLeaf4(BaseModel):
    """
    Trace for all interfaces
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class AllowedPeerAsLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str, Field(pattern='^(?=^([1-9][0-9]*)|([1-9][0-9]*)\\.\\.([1-9][0-9]*)$).*$')
    ]
    """
    The allowed AS numbers that can establish incoming BGP sessions from this prefix and group-id-range combination

    If the OPEN message from a peer matched to this prefix contains a MyAS number that is not in this allowed list then a NOTIFICATION is sent to the peer with the indication Bad Peer AS. Each entry in this list can be a single AS number or a range of AS numbers in the format as1..as2
    """


class AllowedPeerAsLeafList2(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str, Field(pattern='^(?=^([1-9][0-9]*)|([1-9][0-9]*)\\.\\.([1-9][0-9]*)$).*$')
    ]
    """
    Specifies the allowed AS numbers of dynamic BGP neighbors on this interface. If the OPEN message from a peer on this interface contains a MyAS number that is not in this allowed list then a NOTIFICATION is sent to the peer with the indication Bad Peer AS. Each entry in this list can be a single AS number or a range of AS numbers in the string format as1..as2.
    """


class BestPathSelectionContainer(BaseModel):
    """
    Container with options that control the BGP decision process (tie break between routes for the same NLRI).
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    always_compare_med: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:always-compare-med')
    ] = False
    """
    Compare multi-exit discriminator (MED) value from different ASes when selecting the best route. The default behavior is to only compare MEDs for paths received from the same AS.
    """
    advertise_inactive: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:advertise-inactive')
    ] = False
    """
    Advertise the best BGP route even if it is inactive due to the programming of a better non-BGP route
    """


class BestPathSelectionContainer2(BaseModel):
    """
    Container with options that control the BGP decision process for a specific AFI-SAFI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    accumulated_igp: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:accumulated-igp')
    ] = None
    """
    Set to true to enable AIGP metric comparison for all routes of the AFI-SAFI, and to add AIGP attribute to all imported/redistributed routes
    """


class BgpExtCommunityTypeType1(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^target:(6553[0-5]|655[0-2][0-9]|654[0-9]{2}|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9]):(429496729[0-5]|42949672[0-8][0-9]|4294967[0-1][0-9]{2}|429496[0-6][0-9]{3}|42949[0-5][0-9]{4}|4294[0-8][0-9]{5}|429[0-3][0-9]{6}|42[0-8][0-9]{7}|4[0-1][0-9]{8}|[1-3][0-9]{9}|[1-9][0-9]{1,8}|[0-9])$).*$'
        ),
    ]
    """
    Type definition for extended community attributes. In the case that
    common communities are utilised, they are represented as a string
    of the form:
     - target:<2b AS>:<4b value> per RFC4360 section 4
     - target:<4b IPv4>:<2b value> per RFC4360 section 4
     - origin:<2b ASN>:<4b value> per RFC4360 section 5
     - origin:<4b IPv4>:<2b value> per RFC4360 section 5
     - color:<CO bits>:<4b value> per draft-ietf-idr-segment-routing-te-policy
       section 3
     - bgp-tunnel-encap:VXLAN, bgp-tunnel-encap:MPLS
    """


class BgpExtCommunityTypeType2(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^target:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6553[0-5]|655[0-2][0-9]|654[0-9]{2}|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])$).*$'
        ),
    ]
    """
    Type definition for extended community attributes. In the case that
    common communities are utilised, they are represented as a string
    of the form:
     - target:<2b AS>:<4b value> per RFC4360 section 4
     - target:<4b IPv4>:<2b value> per RFC4360 section 4
     - origin:<2b ASN>:<4b value> per RFC4360 section 5
     - origin:<4b IPv4>:<2b value> per RFC4360 section 5
     - color:<CO bits>:<4b value> per draft-ietf-idr-segment-routing-te-policy
       section 3
     - bgp-tunnel-encap:VXLAN, bgp-tunnel-encap:MPLS
    """


class BgpExtCommunityTypeType3(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^target:(429496729[0-5]|42949672[0-8][0-9]|4294967[0-1][0-9]{2}|429496[0-6][0-9]{3}|42949[0-5][0-9]{4}|4294[0-8][0-9]{5}|429[0-3][0-9]{6}|42[0-8][0-9]{7}|4[0-1][0-9]{8}|[1-3][0-9]{9}|[1-9][0-9]{1,8}|[0-9]):(6553[0-5]|655[0-2][0-9]|654[0-9]{2}|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])$).*$'
        ),
    ]
    """
    Type definition for extended community attributes. In the case that
    common communities are utilised, they are represented as a string
    of the form:
     - target:<2b AS>:<4b value> per RFC4360 section 4
     - target:<4b IPv4>:<2b value> per RFC4360 section 4
     - origin:<2b ASN>:<4b value> per RFC4360 section 5
     - origin:<4b IPv4>:<2b value> per RFC4360 section 5
     - color:<CO bits>:<4b value> per draft-ietf-idr-segment-routing-te-policy
       section 3
     - bgp-tunnel-encap:VXLAN, bgp-tunnel-encap:MPLS
    """


class BgpExtCommunityTypeType4(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^origin:(6553[0-5]|655[0-2][0-9]|654[0-9]{2}|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9]):(429496729[0-5]|42949672[0-8][0-9]|4294967[0-1][0-9]{2}|429496[0-6][0-9]{3}|42949[0-5][0-9]{4}|4294[0-8][0-9]{5}|429[0-3][0-9]{6}|42[0-8][0-9]{7}|4[0-1][0-9]{8}|[1-3][0-9]{9}|[1-9][0-9]{1,8}|[0-9])$).*$'
        ),
    ]
    """
    Type definition for extended community attributes. In the case that
    common communities are utilised, they are represented as a string
    of the form:
     - target:<2b AS>:<4b value> per RFC4360 section 4
     - target:<4b IPv4>:<2b value> per RFC4360 section 4
     - origin:<2b ASN>:<4b value> per RFC4360 section 5
     - origin:<4b IPv4>:<2b value> per RFC4360 section 5
     - color:<CO bits>:<4b value> per draft-ietf-idr-segment-routing-te-policy
       section 3
     - bgp-tunnel-encap:VXLAN, bgp-tunnel-encap:MPLS
    """


class BgpExtCommunityTypeType5(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^origin:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6553[0-5]|655[0-2][0-9]|654[0-9]{2}|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])$).*$'
        ),
    ]
    """
    Type definition for extended community attributes. In the case that
    common communities are utilised, they are represented as a string
    of the form:
     - target:<2b AS>:<4b value> per RFC4360 section 4
     - target:<4b IPv4>:<2b value> per RFC4360 section 4
     - origin:<2b ASN>:<4b value> per RFC4360 section 5
     - origin:<4b IPv4>:<2b value> per RFC4360 section 5
     - color:<CO bits>:<4b value> per draft-ietf-idr-segment-routing-te-policy
       section 3
     - bgp-tunnel-encap:VXLAN, bgp-tunnel-encap:MPLS
    """


class BgpExtCommunityTypeType6(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^origin:(429496729[0-5]|42949672[0-8][0-9]|4294967[0-1][0-9]{2}|429496[0-6][0-9]{3}|42949[0-5][0-9]{4}|4294[0-8][0-9]{5}|429[0-3][0-9]{6}|42[0-8][0-9]{7}|4[0-1][0-9]{8}|[1-3][0-9]{9}|[1-9][0-9]{1,8}|[0-9]):(6553[0-5]|655[0-2][0-9]|654[0-9]{2}|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])$).*$'
        ),
    ]
    """
    Type definition for extended community attributes. In the case that
    common communities are utilised, they are represented as a string
    of the form:
     - target:<2b AS>:<4b value> per RFC4360 section 4
     - target:<4b IPv4>:<2b value> per RFC4360 section 4
     - origin:<2b ASN>:<4b value> per RFC4360 section 5
     - origin:<4b IPv4>:<2b value> per RFC4360 section 5
     - color:<CO bits>:<4b value> per draft-ietf-idr-segment-routing-te-policy
       section 3
     - bgp-tunnel-encap:VXLAN, bgp-tunnel-encap:MPLS
    """


class BgpExtCommunityTypeType7(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^color:[0-1]{2}:(429496729[0-5]|42949672[0-8][0-9]|4294967[0-1][0-9]{2}|429496[0-6][0-9]{3}|42949[0-5][0-9]{4}|4294[0-8][0-9]{5}|429[0-3][0-9]{6}|42[0-8][0-9]{7}|4[0-1][0-9]{8}|[1-3][0-9]{9}|[1-9][0-9]{1,8}|[0-9])$).*$'
        ),
    ]
    """
    Type definition for extended community attributes. In the case that
    common communities are utilised, they are represented as a string
    of the form:
     - target:<2b AS>:<4b value> per RFC4360 section 4
     - target:<4b IPv4>:<2b value> per RFC4360 section 4
     - origin:<2b ASN>:<4b value> per RFC4360 section 5
     - origin:<4b IPv4>:<2b value> per RFC4360 section 5
     - color:<CO bits>:<4b value> per draft-ietf-idr-segment-routing-te-policy
       section 3
     - bgp-tunnel-encap:VXLAN, bgp-tunnel-encap:MPLS
    """


class BgpExtCommunityTypeType8(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[str, Field(pattern='^(?=^bgp-tunnel-encap:(VXLAN|MPLS)$).*$')]
    """
    Type definition for extended community attributes. In the case that
    common communities are utilised, they are represented as a string
    of the form:
     - target:<2b AS>:<4b value> per RFC4360 section 4
     - target:<4b IPv4>:<2b value> per RFC4360 section 4
     - origin:<2b ASN>:<4b value> per RFC4360 section 5
     - origin:<4b IPv4>:<2b value> per RFC4360 section 5
     - color:<CO bits>:<4b value> per draft-ietf-idr-segment-routing-te-policy
       section 3
     - bgp-tunnel-encap:VXLAN, bgp-tunnel-encap:MPLS
    """


class BgpLargeCommunityTypeType(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(429496729[0-5]|42949672[0-8][0-9]|4294967[0-1][0-9]{2}|429496[0-6][0-9]{3}|42949[0-5][0-9]{4}|4294[0-8][0-9]{5}|429[0-3][0-9]{6}|42[0-8][0-9]{7}|4[0-1][0-9]{8}|[1-3][0-9]{9}|[1-9][0-9]{1,8}|[0-9]):(429496729[0-5]|42949672[0-8][0-9]|4294967[0-1][0-9]{2}|429496[0-6][0-9]{3}|42949[0-5][0-9]{4}|4294[0-8][0-9]{5}|429[0-3][0-9]{6}|42[0-8][0-9]{7}|4[0-1][0-9]{8}|[1-3][0-9]{9}|[1-9][0-9]{1,8}|[0-9]):(429496729[0-5]|42949672[0-8][0-9]|4294967[0-1][0-9]{2}|429496[0-6][0-9]{3}|42949[0-5][0-9]{4}|4294[0-8][0-9]{5}|429[0-3][0-9]{6}|42[0-8][0-9]{7}|4[0-1][0-9]{8}|[1-3][0-9]{9}|[1-9][0-9]{1,8}|[0-9])$).*$'
        ),
    ]
    """
    Type definition for large commmunity values represented as a string of the form A:B:C where A, B and C are integers between 0 and 4294967295
    """


class BgpStdCommunityTypeType(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(6553[0-5]|655[0-2][0-9]|654[0-9]{2}|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9]):(6553[0-5]|655[0-2][0-9]|654[0-9]{2}|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])$).*$'
        ),
    ]
    """
    Type definition for standard commmunity values represented as a string of the form N:M where N and M are integers between 0 and 65535
    """


class BmiMsdLeafList(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=65535)]
    """
    Base MPLS Imposition MSD (BMI-MSD) signals the total number of MPLS
    labels that can be imposed, including all service/transport/special
    labels. sub-tlv 1
    """


class ClusterIdTypeType1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=4294967295)]


class CombinedEcmpContainer(BaseModel):
    """
    Combine BGP owners into the same ECMP set

    When enabled, candidate BGP PE-CE routes and BGP VPN routes (EVPN IFL or VPN-IP) to the same prefix are
    combined into a single ECMP set. A single route with a combined next hop group is installed in the
    route table. If different BGP owners are combined and have different configured ecmp maximum values,
    the minimum of the maximum configured values is considered for the combined ECMP set.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class DelayMetricLimitType1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=16777215)]


class DetailLeaf10(BaseModel):
    """
    To enable detailed tracing. Includes both received and sent packets.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class DetailLeaf9(BaseModel):
    """
    To enable detailed tracing. Includes both received and sent packets.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class DisableLeaf2(BaseModel):
    """
    Disable LDP-IGP synchronization procedures on this interface, even if synchronization is enabled globally
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class DisableLeaf3(BaseModel):
    """
    Disable LDP-IGP synchronization procedures on this interface, even if synchronization is enabled globally
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class DiscriminatorLeafList(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    Advertised Seamless BFD (S-BFD) Discriminator.
    """


class DottedQuadType(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    An unsigned 32-bit number expressed in the dotted-quad
    notation, i.e., four octets written as decimal numbers
    and separated with the '.' (full stop) character.
    """


class DottedQuadType2(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    An unsigned 32-bit number expressed in the dotted-quad
    notation, i.e., four octets written as decimal numbers
    and separated with the '.' (full stop) character.
    """


class DscpValueType(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=63)]
    """
    A DiffServ Code Point represented numerically.
    """


class DynamicAdjacencySidsContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    all_interfaces: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:all-interfaces')
    ] = False
    """
    When true, IS-IS is instructed to assign a dynamic adjacency SID to all IS-IS interfaces in all levels, except for the interfaces configured with an adjacency SID assignment of 'none' or 'static'.
    """


class EntropyLabelContainer2(BaseModel):
    """
    Options for configuring control and data plane aspects of entropy label
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise_capability: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:advertise-capability')
    ] = False
    """
    Advertise the Entropy Label Capability
    """


class ErldMsdLeafList(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=65535)]
    """
    Entropy capable Readable Label Depth MSD (ERLD-MSD), is defined to advertise
    the ERLD [RFC8662] of a given router. sub-tlv 2.
    """


class ExtendedAdminGroupLeafList(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    The extended-admin-group sub-TLV is used in addition to the Administrative Groups when it is desirable to make more than 32 colors available for advertisement in a network.
    """


class ExtendedAdminGroupLeafList2(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    The extended-admin-group sub-TLV is used in addition to the Administrative Groups when it is desirable to make more than 32 colors available for advertisement in a network.
    """


class ExtendedAdminGroupLeafList3(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    The extended-admin-group sub-TLV is used in addition to the Administrative Groups when it is desirable to make more than 32 colors available for advertisement in a network.
    """


class ExtendedAdminGroupLeafList4(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    The extended-admin-group sub-TLV is used in addition to the Administrative Groups when it is desirable to make more than 32 colors available for advertisement in a network.
    """


class ExtendedProfilesLeafList(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    List of extended identifiers associated with the path profile identifier.
    """


class FailedSlotsLeafList(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=16)]
    """
    The list of slot IDs corresponding to the linecards that did not successfully program the mac
    """


class FailedSlotsLeafList2(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=16)]
    """
    The list of slot IDs corresponding to the linecards that did not successfully program the mac
    """


class FailedSlotsLeafList3(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=16)]
    """
    The list of slot IDs corresponding to the linecards that did not successfully program the mac
    """


class FailedSlotsLeafList4(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=16)]
    """
    The list of slot IDs corresponding to the linecards that did not successfully program the mac
    """


class FailureDetectionContainer4(BaseModel):
    """
    Options related to methods of detecting BGP session failure
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    enable_bfd: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:enable-bfd')] = (
        False
    )
    """
    Enables the use of BFD for livliness detection
    """


class GracefulRestartLeaf(BaseModel):
    """
    Enable tracing all graceful-restart events.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class HexStringType(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[str, Field(pattern='^(?=^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?$).*$')]
    """
    A hexadecimal string with octets represented as hex digits
    separated by colons.  The canonical representation uses
    lowercase characters.
    """


class HoldDownTimeRemainingLeaf1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=18446744073709551615)]
    """
    remaining hold down time for duplicate mac
    """


class HoldDownTimeRemainingLeaf21(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=18446744073709551615)]
    """
    Remaining hold down time for the duplicate proxy entry
    """


class HoldDownTimeRemainingLeaf31(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=18446744073709551615)]
    """
    Remaining hold down time for the duplicate proxy entry
    """


class HoldDownTimeRemainingLeaf41(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=18446744073709551615)]
    """
    remaining hold down time for duplicate mac
    """


class HoldDownTimeLeaf1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=2, le=60)]
    """
    Time to wait from the moment a mac is declared duplicate to the mac is flushed from the bridge table.
    When the duplicate mac is flushed, the monitoring process for the mac is restarted.
    """


class HoldDownTimeLeaf21(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=2, le=60)]
    """
    Time to wait from the moment an IP is declared duplicate to the time the IP is removed from the proxy ARP/ND table

    When the duplicate IP is removed, the monitoring process for the IP address is restarted.
    """


class HoldDownTimeLeaf31(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=2, le=60)]
    """
    Time to wait from the moment an IP is declared duplicate to the time the IP is removed from the proxy ARP/ND table

    When the duplicate IP is removed, the monitoring process for the IP address is restarted.
    """


class HoldDownTimerLeaf61(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=500)]
    """
    Specifies a hold-down timer value when seamless-bfd is enabled

    The timer is started when the number of S-BFD sessions that are up drops below the threshold. The TE-policy path is not considered to be up again until the hold-down timer has expired and the number of S-BFD sessions that are up equals or exceeds the threshold.
    A grace preiod after session down such that sBFD session flaps does not impact active path.

    The default is 4 seconds.
    """


class InterfacesLeaf(BaseModel):
    """
    Enable tracing all interface events.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class InterfacesLeaf2(BaseModel):
    """
    Enable tracing all interface events.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class IpProtocolTypeType1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=255)]
    """
    The IP protocol number or next-header value.
    """


class Ipv4AddressWithZoneType(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    The ipv4-address-with-zone type represents an IPv4 address in dotted quad notation (added only for symmetry)
    """


class Ipv4NodeSidContainer(BaseModel):
    """
    Configuration of IPv4 node SID.

    The (primary) IPv4 address of this interface is advertised as a prefix SID with the node-SID flag set. The associated label is derived from the label index configured in this container.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    index: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:index', ge=0, le=1048575)
    ] = None
    """
    Label index to add to SRGB base.

    This causes the V-flag and L-flag in the prefix SID subTLV to be set to zero.
    """


class Ipv4PrefixType(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$'
        ),
    ]
    """
    An IPv4 prefix represented in dotted quad notation followed by a slash and a CIDR mask (0 <= mask <= 32).
    """


class Ipv4UnicastContainer4(BaseModel):
    """
    Configuration of IPv4 unicast backup paths
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    install: Annotated[Optional[bool], Field(alias='srl_nokia-bgp-vpn:install')] = False
    """
    Install a backup path for every NLRI in the address family, when a suitable one exists
    """


class Ipv6AddressWithZoneType(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%.+)?$)(?=^(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?$)(?=^([^%]+)(%(mgmt0\\.0|system0\\.0|sync0\\.0|lo(0|1[0-9][0-9]|2([0-4][0-9]|5[0-5])|[1-9][0-9]|[1-9])\\.(0|[1-9](\\d){0,3})|lif-.*\\.(0|[1-9](\\d){0,3})|vhn-.*\\.(0|[1-9](\\d){0,3})|enp(0|1[0-9][0-9]|2([0-4][0-9]|5[0-5])|[1-9][0-9]|[1-9])s(0|[1-9]|[1-2][0-9]|3[0-1])f[0-7]\\.(0|[1-9](\\d){0,3})|ethernet-([1-9](\\d){0,1}(/[abcdef])?(/[1-9](\\d){0,1})?/(([1-9](\\d){0,1})|(1[0-1]\\d)|(12[0-8])))\\.([0]|[1-9](\\d){0,3})|irb(0|1[0-9][0-9]|2([0-4][0-9]|5[0-5])|[1-9][0-9]|[1-9])\\.(0|[1-9](\\d){0,3})|lag(([1-9](\\d){0,2})|(1000))\\.(0|[1-9](\\d){0,3})))?$).*$'
        ),
    ]
    """
    The ipv6-address-with-zone type represents an IPv6 address in full, mixed, shortened, and
    shortened-mixed notation.  The IPv6 address may include a zone index, separated by
    a % sign. The zone index is used to disambiguate identical address values.  For link-local
    addresses, the zone index is expected to be the name of a subinterface. An example of
    a link-local address is:

    fe80::1234%ethernet-1/1.1
    """


class Ipv6NodeSidContainer(BaseModel):
    """
    Configuration of IPv6 node SID.

    The (primary) IPv6 address of this interface is advertised as a prefix SID with the node-SID flag set. The associated label is derived from the label index configured in this container.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    index: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:index', ge=0, le=1048575)
    ] = None
    """
    Label index to add to SRGB base.

    This causes the V-flag and L-flag in the prefix SID subTLV to be set to zero.
    """


class Ipv6PrefixType(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))$).*$'
        ),
    ]
    """
    An IPv6 prefix represented in full, shortened, or mixed shortened format followed by a slash and CIDR mask (0 <= mask <=
    128).
    """


class Ipv6UnicastContainer4(BaseModel):
    """
    Configuration of IPv6 unicast backup paths
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    install: Annotated[Optional[bool], Field(alias='srl_nokia-bgp-vpn:install')] = False
    """
    Install a backup path for every NLRI in the address family, when a suitable one exists
    """


class L4PortTypeType1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=65535)]
    """
    The IP protocol number may be expressed as a valid protocol
    number (integer) or using a protocol type defined by the
    IP_PROTOCOL identity
    """


class LargeCommunityLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[str, Field(max_length=72, min_length=1)]
    """
    List of large 12-byte community values in the LARGE_COMMUNITY path
    attribute. Each should be displayed in the format: <0..4294967295>:<0..4294967295>:<
    0..4294967295>
    """


class LastFailedComplexesLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str, Field(pattern='^(?=^(\\(([0-9]|[1][0-9]|[2][0-4]),[0-1]\\))$).*$')
    ]
    """
    List of forwarding complexes that reported a failure for the last operation. They appear in the format (slot-number,complex-number).
    """


class LastFailedComplexesLeafList2(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str, Field(pattern='^(?=^(\\(([0-9]|[1][0-9]|[2][0-4]),[0-1]\\))$).*$')
    ]
    """
    List of forwarding complexes that reported a failure for the last operation. They appear in the format (slot-number,complex-number).
    """


class LastFailedComplexesLeafList3(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str, Field(pattern='^(?=^(\\(([0-9]|[1][0-9]|[2][0-4]),[0-1]\\))$).*$')
    ]
    """
    List of forwarding complexes that reported a failure for the last operation. They appear in the format (slot-number,complex-number).
    """


class LdpSynchronizationContainer(BaseModel):
    """
    Enable LDP-IGP synchronization procedures on all P2P interfaces and all LAN interfaces with a single adjancency, except on interfaces where the functionality is explicitly disabled
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    hold_down_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:hold-down-timer', ge=1, le=1800)
    ] = 60
    """
    The maximum amount of time that the IGP advertises a maximum metric for an interface, measured from the time that the LDP adjacency is re-established after going down
    """
    end_of_lib: Annotated[Optional[bool], Field(alias='srl_nokia-isis:end-of-lib')] = (
        False
    )
    """
    When set to true, the IGP restores the normal metric for the IGP adjacency when learning from LDP that all label-FEC mappings have been received from the LDP peer, even if there is remaining time on the hold-down-timer.

    When set to false, the IGP always waits for the full duration of the hold-down-timer to restore the normal metric for the IGP adjacency
    """


class LdpSynchronizationContainer3(BaseModel):
    """
    Enable LDP-IGP synchronization procedures on all P2P interfaces and all LAN interfaces with a single adjancency, except on interfaces where the functionality is explicitly disabled
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    hold_down_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:hold-down-timer', ge=1, le=1800)
    ] = 60
    """
    The maximum amount of time that the IGP advertises a maximum metric for an interface, measured from the time that the LDP adjacency is re-established after going down
    """
    end_of_lib: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:end-of-lib')] = (
        False
    )
    """
    When set to true, the IGP restores the normal metric for the IGP adjacency when learning from LDP that all label-FEC mappings have been received from the LDP peer, even if there is remaining time on the hold-down-timer.

    When set to false, the IGP always waits for the full duration of the hold-down-timer to restore the normal metric for the IGP adjacency
    """


class LinkDataLeaf1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    The data associated with the link type. The value is
    dependent upon the subtype of the LSA. When the connection is
    to a stub network it represents the mask; for p2p connections
    that are unnumbered it represents the ifIndex value of the
    router's interface; for all other connections it represents
    the local system's IP address
    """


class LinkDataLeaf21(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    The data associated with the link type. The value is
    dependent upon the subtype of the LSA. When the connection is
    to a stub network it represents the mask; for p2p connections
    that are unnumbered it represents the ifIndex value of the
    router's interface; for all other connections it represents
    the local system's IP address
    """


class LinkDataLeaf31(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    The data associated with the link type. The value is
    dependent upon the subtype of the LSA. When the connection is
    to a stub network it represents the mask; for p2p connections
    that are unnumbered it represents the ifIndex value of the
    router's interface; for all other connections it represents
    the local system's IP address
    """


class LinkDataLeaf41(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    The data associated with the link type. The value is
    dependent upon the subtype of the LSA. When the connection is
    to a stub network it represents the mask; for p2p connections
    that are unnumbered it represents the ifIndex value of the
    router's interface; for all other connections it represents
    the local system's IP address
    """


class LinkDelayVariationContainer(BaseModel):
    """
    This container defines unidirectional link delay variation.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:delay', ge=0, le=4294967295)
    ] = None
    """
    Average link delay between two directly connected IS-IS neighbors over a configurable interval.
    """


class LinkDelayVariationContainer2(BaseModel):
    """
    This container defines unidirectional link delay variation.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:delay', ge=0, le=4294967295)
    ] = None
    """
    Average link delay between two directly connected IS-IS neighbors over a configurable interval.
    """


class LinkDelayVariationContainer3(BaseModel):
    """
    This container defines unidirectional link delay variation.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:delay', ge=0, le=4294967295)
    ] = None
    """
    Average link delay between two directly connected IS-IS neighbors over a configurable interval.
    """


class LinkDelayVariationContainer4(BaseModel):
    """
    This container defines unidirectional link delay variation.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:delay', ge=0, le=4294967295)
    ] = None
    """
    Average link delay between two directly connected IS-IS neighbors over a configurable interval.
    """


class LinkDelayContainer(BaseModel):
    """
    This container defines unidirectional link delay.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    a_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:a-bit')] = None
    """
    The A bit is set when the measured value of this parameter exceeds its configured maximum threshold. The A bit is cleared when the measured value falls below its configured reuse threshold.
    """
    delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:delay', ge=0, le=4294967295)
    ] = None
    """
    Average link delay value (in microseconds) between two directly connected IS-IS neighbors over a configurable interval.
    """


class LinkDelayContainer2(BaseModel):
    """
    This container defines unidirectional link delay.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    a_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:a-bit')] = None
    """
    The A bit is set when the measured value of this parameter exceeds its configured maximum threshold. The A bit is cleared when the measured value falls below its configured reuse threshold.
    """
    delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:delay', ge=0, le=4294967295)
    ] = None
    """
    Average link delay value (in microseconds) between two directly connected IS-IS neighbors over a configurable interval.
    """


class LinkDelayContainer3(BaseModel):
    """
    This container defines unidirectional link delay.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    a_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:a-bit')] = None
    """
    The A bit is set when the measured value of this parameter exceeds its configured maximum threshold. The A bit is cleared when the measured value falls below its configured reuse threshold.
    """
    delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:delay', ge=0, le=4294967295)
    ] = None
    """
    Average link delay value (in microseconds) between two directly connected IS-IS neighbors over a configurable interval.
    """


class LinkDelayContainer4(BaseModel):
    """
    This container defines unidirectional link delay.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    a_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:a-bit')] = None
    """
    The A bit is set when the measured value of this parameter exceeds its configured maximum threshold. The A bit is cleared when the measured value falls below its configured reuse threshold.
    """
    delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:delay', ge=0, le=4294967295)
    ] = None
    """
    Average link delay value (in microseconds) between two directly connected IS-IS neighbors over a configurable interval.
    """


class LinuxContainer(BaseModel):
    """
    Enables routing interaction with the Linux kernel
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    import_routes: Annotated[
        Optional[bool], Field(alias='srl_nokia-linux:import-routes')
    ] = False
    """
    Import routes from linux routing table
    """
    export_routes: Annotated[
        Optional[bool], Field(alias='srl_nokia-linux:export-routes')
    ] = False
    """
    Export routes to linux routing table
    """
    export_neighbors: Annotated[
        Optional[bool], Field(alias='srl_nokia-linux:export-neighbors')
    ] = True
    """
    Export neighbors to linux routing table
    """


class LoadBalancingWeightLeaf1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=4294967295)]
    """
    The load-balancing weight of the interface, which applies when weighted ECMP is enabled and the interface is part of a multipath set.
    """


class LspRefreshContainer(BaseModel):
    """
    Configure LSP refresh timers.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interval: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:interval', ge=150, le=65535)
    ] = 600
    """
    Time interval in seconds since the last advertisement of its LSP when the router attempts to refresh the LSP.
    Must not exceed 90% of the lsp-lifetime.
    This value is ignored when half-lifetime is set to true.
    """
    half_lifetime: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:half-lifetime')
    ] = True
    """
    When set to true, the LSP refresh interval is half the lsp-lifetime
    """


class MacIpContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp-evpn:advertise')
    ] = True
    """
    If set to true then local mac's and local mac-ip pairs will be advertised in this evpn instance
    """
    advertise_arp_nd_only_with_mac_table_entry: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-bgp-evpn:advertise-arp-nd-only-with-mac-table-entry'),
    ] = False
    """
    If set to true then local mac-ip records will be advertised in this evpn instance only when we have a local mac in the mac-table
    """
    advertise_arp_nd_extended_community: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-bgp-evpn:advertise-arp-nd-extended-community'),
    ] = False
    """
    ARP/ND extended community
    """


class MacIpContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise_gateway_mac: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp-evpn:advertise-gateway-mac')
    ] = False
    """
    If set to true in an ip-vrf where bgp-evpn is enabled, a MAC/IP route containing the gateway-MAC
    is advertised.

    This gateway-MAC matches the MAC advertised along with the EVPN IFL routes type 5 for the ip-vrf
    network-instance. This advertisement is needed so that the EVPN IFL (Interface-Less) model in the
    ip-vrf can interoperate with a remote system working in EVPN IFF (Interface-ful) Unnumbered mode.
    """


class MemberLeafList(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    A list of AS numbers (each of which is a 2byte-ASN or a 4byte-ASN) that belong
    to the AS path segment.
    """


class MessagingContainer(BaseModel):
    """
    Enable tracing for msg events
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class MinMaxLinkDelayContainer(BaseModel):
    """
    This container defines min/max link delay.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    a_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:a-bit')] = None
    """
    The A bit is set when the measured value of this parameter exceeds its configured maximum threshold. The A bit is cleared when the measured value falls below its configured reuse threshold.
    """
    min_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:min-delay', ge=0, le=4294967295)
    ] = None
    """
    Minimum measured link delay value(in microseconds) between two directly connected IS-IS neighbors over a configurable interval.
    """
    max_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:max-delay', ge=0, le=4294967295)
    ] = None
    """
    Maximum measured link delay value(in microseconds) between two directly connected IS-IS neighbors over a configurable interval.
    """


class MinMaxLinkDelayContainer2(BaseModel):
    """
    This container defines min/max link delay.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    a_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:a-bit')] = None
    """
    The A bit is set when the measured value of this parameter exceeds its configured maximum threshold. The A bit is cleared when the measured value falls below its configured reuse threshold.
    """
    min_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:min-delay', ge=0, le=4294967295)
    ] = None
    """
    Minimum measured link delay value(in microseconds) between two directly connected IS-IS neighbors over a configurable interval.
    """
    max_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:max-delay', ge=0, le=4294967295)
    ] = None
    """
    Maximum measured link delay value(in microseconds) between two directly connected IS-IS neighbors over a configurable interval.
    """


class MinMaxLinkDelayContainer3(BaseModel):
    """
    This container defines min/max link delay.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    a_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:a-bit')] = None
    """
    The A bit is set when the measured value of this parameter exceeds its configured maximum threshold. The A bit is cleared when the measured value falls below its configured reuse threshold.
    """
    min_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:min-delay', ge=0, le=4294967295)
    ] = None
    """
    Minimum measured link delay value(in microseconds) between two directly connected IS-IS neighbors over a configurable interval.
    """
    max_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:max-delay', ge=0, le=4294967295)
    ] = None
    """
    Maximum measured link delay value(in microseconds) between two directly connected IS-IS neighbors over a configurable interval.
    """


class MinMaxLinkDelayContainer4(BaseModel):
    """
    This container defines min/max link delay.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    a_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:a-bit')] = None
    """
    The A bit is set when the measured value of this parameter exceeds its configured maximum threshold. The A bit is cleared when the measured value falls below its configured reuse threshold.
    """
    min_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:min-delay', ge=0, le=4294967295)
    ] = None
    """
    Minimum measured link delay value(in microseconds) between two directly connected IS-IS neighbors over a configurable interval.
    """
    max_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:max-delay', ge=0, le=4294967295)
    ] = None
    """
    Maximum measured link delay value(in microseconds) between two directly connected IS-IS neighbors over a configurable interval.
    """


class MinMaxUnidirectionalLinkDelayContainer(BaseModel):
    """
    The minimum and maximum delay between two directly connected IS-IS neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    anomolous: Annotated[Optional[bool], Field(alias='srl_nokia-isis:anomolous')] = None
    """
    If the A bit is cleared, the values represent steady-state link performance.
    """
    min_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:min-delay', ge=0, le=4294967295)
    ] = None
    """
    Minimum forward-path delay (from the advertising router to the remote neighbor)
    """
    max_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:max-delay', ge=0, le=4294967295)
    ] = None
    """
    Maximum forward-path delay (from the advertising router to the remote neighbor)
    """


class MinMaxUnidirectionalLinkDelayContainer2(BaseModel):
    """
    The minimum and maximum delay between two directly connected IS-IS neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    anomolous: Annotated[Optional[bool], Field(alias='srl_nokia-isis:anomolous')] = None
    """
    If the A bit is cleared, the values represent steady-state link performance.
    """
    min_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:min-delay', ge=0, le=4294967295)
    ] = None
    """
    Minimum forward-path delay (from the advertising router to the remote neighbor)
    """
    max_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:max-delay', ge=0, le=4294967295)
    ] = None
    """
    Maximum forward-path delay (from the advertising router to the remote neighbor)
    """


class MinMaxUnidirectionalLinkDelayContainer3(BaseModel):
    """
    The minimum and maximum delay between two directly connected IS-IS neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    anomolous: Annotated[Optional[bool], Field(alias='srl_nokia-isis:anomolous')] = None
    """
    If the A bit is cleared, the values represent steady-state link performance.
    """
    min_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:min-delay', ge=0, le=4294967295)
    ] = None
    """
    Minimum forward-path delay (from the advertising router to the remote neighbor)
    """
    max_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:max-delay', ge=0, le=4294967295)
    ] = None
    """
    Maximum forward-path delay (from the advertising router to the remote neighbor)
    """


class MinMaxUnidirectionalLinkDelayContainer4(BaseModel):
    """
    The minimum and maximum delay between two directly connected IS-IS neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    anomolous: Annotated[Optional[bool], Field(alias='srl_nokia-isis:anomolous')] = None
    """
    If the A bit is cleared, the values represent steady-state link performance.
    """
    min_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:min-delay', ge=0, le=4294967295)
    ] = None
    """
    Minimum forward-path delay (from the advertising router to the remote neighbor)
    """
    max_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:max-delay', ge=0, le=4294967295)
    ] = None
    """
    Maximum forward-path delay (from the advertising router to the remote neighbor)
    """


class MinMaxUnidirectionalLinkDelayContainer5(BaseModel):
    """
    The minimum and maximum delay between two directly connected IS-IS neighbors. Sub-TLV = 34.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    anomolous: Annotated[Optional[bool], Field(alias='srl_nokia-isis:anomolous')] = None
    """
    If the A bit is cleared, the values represent steady-state link performance.
    """
    min_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:min-delay', ge=0, le=4294967295)
    ] = None
    """
    Minimum forward-path delay (from the advertising router to the remote neighbor)
    """
    max_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:max-delay', ge=0, le=4294967295)
    ] = None
    """
    Maximum forward-path delay (from the advertising router to the remote neighbor)
    """


class MinMaxUnidirectionalLinkDelayContainer6(BaseModel):
    """
    The minimum and maximum delay between two directly connected IS-IS neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    anomolous: Annotated[Optional[bool], Field(alias='srl_nokia-isis:anomolous')] = None
    """
    If the A bit is cleared, the values represent steady-state link performance.
    """
    min_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:min-delay', ge=0, le=4294967295)
    ] = None
    """
    Minimum forward-path delay (from the advertising router to the remote neighbor)
    """
    max_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:max-delay', ge=0, le=4294967295)
    ] = None
    """
    Maximum forward-path delay (from the advertising router to the remote neighbor)
    """


class MinMaxUnidirectionalLinkDelayContainer7(BaseModel):
    """
    The minimum and maximum delay between two directly connected IS-IS neighbors. Sub-TLV = 34.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    anomolous: Annotated[Optional[bool], Field(alias='srl_nokia-isis:anomolous')] = None
    """
    If the A bit is cleared, the values represent steady-state link performance.
    """
    min_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:min-delay', ge=0, le=4294967295)
    ] = None
    """
    Minimum forward-path delay (from the advertising router to the remote neighbor)
    """
    max_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:max-delay', ge=0, le=4294967295)
    ] = None
    """
    Maximum forward-path delay (from the advertising router to the remote neighbor)
    """


class MiscLeaf(BaseModel):
    """
    Enable tracing all Config events.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class MplsForwardingContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    forward_received_packets: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-network-instance:forward-received-packets'),
    ] = None
    """
    When set to true, MPLS packets received on any subinterface of the network-instance will be forwarded according to the matching ILM entries.

    When set to false, MPLS packets are discarded if received on any subinterface of the network-instance.

    In the default network-instance the default is 'true'.
    """


class MplsLabelNonReservedType(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=16, le=1048575)]


class MsdTypeLeaf1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=2, le=254)]
    """
    MSD type
    """


class MsdTypeLeaf21(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=2, le=254)]
    """
    MSD type
    """


class MsdTypeLeaf31(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=2, le=254)]
    """
    MSD type
    """


class MstVlanRangeListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mst_vlan_range: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-stp:mst-vlan-range',
            pattern='^(?=^([0-9]+\\-[0-9]+)|exact$).*$',
        ),
    ] = None
    """
    Range of VLANs managed by this Multiple Spanning Tree instance.
    If no VLAN-ranges are defined in any mst-instances, then all
    VLANs are mapped to the CIST. range: 1..1024
    """


class MulticastLimitContainer(BaseModel):
    """
    Multicast limits per vxlan interface.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    maximum_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations:maximum-entries',
            ge=-2147483648,
            le=2147483647,
        ),
    ] = None
    """
    Maximum number of multicast vxlan-destinations allowed on a bgp-evpn mpls instance.
    """
    current_usage: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations:current-usage',
            ge=-2147483648,
            le=2147483647,
        ),
    ] = None
    """
    Maximum number of multicast vxlan-destinations in use on this bgp-evpn mpls instance.
    """


class MultipathContainer3(BaseModel):
    """
    Container with options to configure load-balancing over equal-cost paths
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_paths: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:max-paths', ge=1, le=64)
    ] = 1
    """
    Specifies the maximum number of next-hops used for load-balancing toward towards a given FEC
    """


class NameType(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    A user provided name
    """


class NetLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str, Field(pattern='^(?=^[a-fA-F0-9]{2}(\\.[a-fA-F0-9]{4}){3,9}\\.[0]{2}$).*$')
    ]
    """
    ISIS network entity title (NET)
    """


class NodeAdministrativeTagsContainer(BaseModel):
    """
    Per-node administrative tags associated with the local system
    specified by the operator
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    administrative_tags: Annotated[
        Optional[List[AdministrativeTagsLeafList]],
        Field(alias='srl_nokia-ospf:administrative-tags'),
    ] = []
    """
    The set of administrative tags assigned to the local system by
    the network operator. The meaning of these tags is opaque to OSPF
    - and their interpretation is per-domain specific
    """


class NodeAdministrativeTagsContainer2(BaseModel):
    """
    Per-node administrative tags associated with the local system
    specified by the operator
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    administrative_tags: Annotated[
        Optional[List[AdministrativeTagsLeafList2]],
        Field(alias='srl_nokia-ospf:administrative-tags'),
    ] = []
    """
    The set of administrative tags assigned to the local system by
    the network operator. The meaning of these tags is opaque to OSPF
    - and their interpretation is per-domain specific
    """


class NodeAdministrativeTagsContainer3(BaseModel):
    """
    Per-node administrative tags associated with the local system
    specified by the operator
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    administrative_tags: Annotated[
        Optional[List[AdministrativeTagsLeafList3]],
        Field(alias='srl_nokia-ospf:administrative-tags'),
    ] = []
    """
    The set of administrative tags assigned to the local system by
    the network operator. The meaning of these tags is opaque to OSPF
    - and their interpretation is per-domain specific
    """


class NodeMsdsContainer(BaseModel):
    """
    The Maximum Segment Depth (MSD) values supported by the advertising node. sub-tlv 23.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bmi_msd: Annotated[
        Optional[List[BmiMsdLeafList]], Field(alias='srl_nokia-isis:bmi-msd')
    ] = []
    """
    Base MPLS Imposition MSD (BMI-MSD) signals the total number of MPLS
    labels that can be imposed, including all service/transport/special
    labels. sub-tlv 1
    """
    erld_msd: Annotated[
        Optional[List[ErldMsdLeafList]], Field(alias='srl_nokia-isis:erld-msd')
    ] = []
    """
    Entropy capable Readable Label Depth MSD (ERLD-MSD), is defined to advertise
    the ERLD [RFC8662] of a given router. sub-tlv 2.
    """


class OperAreaIdLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str, Field(pattern='^(?=^[0-9A-Fa-f]{2}(\\.[0-9A-Fa-f]{4}){0,6}$).*$')
    ]
    """
    The list of area IDs associated with this IS router
    """


class OptionalAttributesContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    block_prefix_sid: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:block-prefix-sid')
    ] = False
    """
    Remove the prefix SID optional transitive attribute in all received and sent routes to this peer, or group of peers
    """


class OptionalAttributesContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    block_prefix_sid: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:block-prefix-sid')
    ] = None
    """
    Remove the prefix SID optional transitive attribute in all received and sent routes to this peer, or group of peers
    """


class OutgoingInterfaceListEntry2(BaseModel):
    """
    List of the outgoing interfaces for this MFIB entry
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    index: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-multicast-mfib-tables:index', ge=0, le=18446744073709551615
        ),
    ] = None
    """
    network instance allocated sub interface index
    """
    forward: Annotated[
        Optional[bool], Field(alias='srl_nokia-multicast-mfib-tables:forward')
    ] = None
    """
    Whether the outgoing interface is in forwarding state
    """


class OutgoingNextHopGroupListEntry(BaseModel):
    """
    List of the outgoing tunnel next-hop-groups associated with this MFIB entry
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    index: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-multicast-mfib-tables:index', ge=0, le=18446744073709551615
        ),
    ] = None
    """
    Next-hop-group allocated index
    """
    forward: Annotated[
        Optional[bool], Field(alias='srl_nokia-multicast-mfib-tables:forward')
    ] = None
    """
    Whether the outgoing next-hop-group is in forwarding state
    """


class PimRouteTableContainer(BaseModel):
    """
    Enable tracing for rtm events
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    detail: Annotated[Optional[bool], Field(alias='srl_nokia-pim:detail')] = False
    """
    Enable detail tracing.
    """


class PortRangeType1(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(0{0,4}[0-9]|0{0,3}[1-9][0-9]|0{0,2}[1-9][0-9]{2}|0?[1-9][0-9]{3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])\\.\\.(0{0,4}[0-9]|0{0,3}[1-9][0-9]|0{0,2}[1-9][0-9]{2}|0?[1-9][0-9]{3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$).*$'
        ),
    ]
    """
    Port(s) may be represented as a single value, as a name,
    or as an inclusive range as <lower>..<higher>
    """


class PreferenceContainer(BaseModel):
    """
    Options for controlling the route table preference of BGP routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ebgp: Annotated[Optional[int], Field(alias='srl_nokia-bgp:ebgp', ge=1, le=255)] = (
        170
    )
    """
    The default route table preference for all EBGP learned routes

    BGP import policies can override this preference value on a route by route basis.
    """
    ibgp: Annotated[Optional[int], Field(alias='srl_nokia-bgp:ibgp', ge=1, le=255)] = (
        170
    )
    """
    The default route table preference for all IBGP learned routes

    BGP import policies can override this preference value on a route by route basis.
    """


class ProfilesLeafList(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    List of path profile identifiers
    """


class ReOptimizationTimerLeaf1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=30, le=10800)]
    """
    Re-optimizaion timer for the TE policy
    """


class RestartReasonTypeType1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=4, le=4294967295)]
    """
    the value of restart-reason indicates the OSPF neighbor's graceful restart reason.
    """


class RevertTimerLeaf1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=4320)]
    """
    Revert timer for the segment-list.

    Timer till a revert to primary/best path after it is recovered from a failure. In case of uncolored te-policy, applies to primary segment-list and in case of colored te-policy applies to best candidate path.

    The default is 0 seconds.
    """


class RouteDistinguisherType0Type(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(6553[0-5]|655[0-2][0-9]|654[0-9]{2}|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9]):(429496729[0-5]|42949672[0-8][0-9]|4294967[0-1][0-9]{2}|429496[0-6][0-9]{3}|42949[0-5][0-9]{4}|4294[0-8][0-9]{5}|429[0-3][0-9]{6}|42[0-8][0-9]{7}|4[0-1][0-9]{8}|[1-3][0-9]{9}|[1-9][0-9]{1,8}|[0-9])$).*$'
        ),
    ]


class RouteDistinguisherType1Type(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6553[0-5]|655[0-2][0-9]|654[0-9]{2}|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])$).*$'
        ),
    ]


class RouteDistinguisherType2Type(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(429496729[0-5]|42949672[0-8][0-9]|4294967[0-1][0-9]{2}|429496[0-6][0-9]{3}|42949[0-5][0-9]{4}|4294[0-8][0-9]{5}|429[0-3][0-9]{6}|42[0-8][0-9]{7}|4[0-1][0-9]{8}|[1-3][0-9]{9}|[1-9][0-9]{1,8}|[0-9]):(6553[0-5]|655[0-2][0-9]|654[0-9]{2}|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])$).*$'
        ),
    ]


class RouteDistinguisherType2bType(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(6553[0-5]|655[0-2][0-9]|654[0-9]{2}|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9]).(6553[0-5]|655[0-2][0-9]|654[0-9]{2}|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9]):(6553[0-5]|655[0-2][0-9]|654[0-9]{2}|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])$).*$'
        ),
    ]


class RoutePreferenceContainer(BaseModel):
    """
    Specify the route preference (admin distance) for IP routes asssociated with the level
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    external: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:external', ge=1, le=255)
    ] = None
    """
    Specify the route preference of external routes carried in this level.
    By default the route preference of external L1 routes is 160.
    By default the route preference of external L2 routes is 165.
    """
    internal: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:internal', ge=1, le=255)
    ] = None
    """
    Specify the route preference of internal routes carried in this level.
    By default the route preference of internal L1 routes is 15.
    By default the route preference of internal L2 routes is 18.
    """


class RouteTag32bitLeafList(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=4294967295)]
    """
    List of 32-bit administrative tag values associated with the IPv4 prefix.
    """


class RouteTag32bitLeafList2(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=4294967295)]
    """
    List of 32-bit administrative tag values associated with the IPv4 prefix.
    """


class RouteTag32bitLeafList3(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=4294967295)]
    """
    List of 32-bit administrative tag values associated with the IPv4 prefix.
    """


class RouteTag32bitLeafList4(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=4294967295)]
    """
    List of 32-bit administrative tag values associated with the IPv4 prefix.
    """


class RouteTag64bitLeafList(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=18446744073709551615)]
    """
    List of 64-bit administrative tag values associated with the IPv4 prefix.
    """


class RouteTag64bitLeafList2(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=18446744073709551615)]
    """
    List of 64-bit administrative tag values associated with the IPv4 prefix.
    """


class RouteTag64bitLeafList3(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=18446744073709551615)]
    """
    List of 64-bit administrative tag values associated with the IPv4 prefix.
    """


class RouteTag64bitLeafList4(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=18446744073709551615)]
    """
    List of 64-bit administrative tag values associated with the IPv4 prefix.
    """


class RouteTypeListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ip_route_type_name: Annotated[
        Optional[str], Field(alias='srl_nokia-ip-route-tables:ip-route-type-name')
    ] = None
    """
    IP route type
    """
    active_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ip-route-tables:active-routes', ge=0, le=4294967295),
    ] = None
    """
    Total number of prefixes associated with this route type that were submitted to fib-mgr and that fib-mgr successfully installed as active routes
    """


class RouteTypeListEntry2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ip_route_type_name: Annotated[
        Optional[str], Field(alias='srl_nokia-ip-route-tables:ip-route-type-name')
    ] = None
    """
    IP route type
    """
    active_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ip-route-tables:active-routes', ge=0, le=4294967295),
    ] = None
    """
    Total number of prefixes associated with this route type that were submitted to fib-mgr and that fib-mgr successfully installed as active routes
    """


class SbfdDiscriminatorsContainer(BaseModel):
    """
    This container defines sbfd discriminators sub-TLV 20.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    discriminator: Annotated[
        Optional[List[DiscriminatorLeafList]],
        Field(alias='srl_nokia-isis:discriminator'),
    ] = []
    """
    Advertised Seamless BFD (S-BFD) Discriminator.
    """


class SelectiveLabeledUnicastInstallContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    program_label_swap: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:program-label-swap')
    ] = False
    """
    When true, program a label swap entry even when the route is not installed as a tunnel
    """
    program_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:program-route')
    ] = False
    """
    When true, program IP FIB entry even when the route is not installed as a tunnel
    """


class SendMultipathLeaf(BaseModel):
    """
    Send the used paths for a single NLRI, including all paths that are multipaths.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class SendMultipathLeaf2(BaseModel):
    """
    Send the used paths for a single NLRI, including all paths that are multipaths.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class SendMultipathLeaf3(BaseModel):
    """
    Send the used paths for a single NLRI, including all paths that are multipaths.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class SendRefreshLeaf1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=120, le=86400)]
    """
    Configures the proxy refresh interval

    The interval determines the frequency at which the system generates three ARP Requests or Neighbor Solicitations
    with the intend to refresh the proxy entry. The refresh is sent within the age-time window.
    """


class SendRefreshLeaf21(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=120, le=86400)]
    """
    Configures the proxy refresh interval

    The interval determines the frequency at which the system generates three ARP Requests or Neighbor Solicitations
    with the intend to refresh the proxy entry. The refresh is sent within the age-time window.
    """


class SessionHoldtimeContainer(BaseModel):
    """
    Session holdtime state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    peer_proposed: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:peer-proposed', ge=0, le=65535)
    ] = None
    """
    Peer holdtime
    """
    negotiated: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:negotiated', ge=0, le=65535)
    ] = None
    """
    Negotiated holdtime
    """
    remaining: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:remaining', ge=0, le=65535)
    ] = None
    """
    Remaining holdtime
    """


class SharedRiskLinkGroupLeafList(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    List of SRLGs that apply to the adjacency with this neighbor
    """


class SharedRiskLinkGroupLeafList2(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    List of SRLGs that apply to the adjacency with this neighbor
    """


class SharedRiskLinkGroupLeafList3(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    List of SRLGs that apply to the adjacency with this neighbor
    """


class SidValueContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mpls_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:mpls-label', ge=0, le=4294967295),
    ] = None
    """
    Label recorded for this hop.
    """


class SidValueContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mpls_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:mpls-label', ge=0, le=4294967295),
    ] = None
    """
    Label recorded for this hop.
    """


class SourceIpContainer(BaseModel):
    """
    Packet matching criteria based on source IPv4 address
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-policy-forwarding:prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$',
        ),
    ] = None
    """
    Match a packet if its source IP address is within the specified IPv4 prefix.
    """


class SourceIpContainer2(BaseModel):
    """
    Packet matching criteria based on source IPv6 address
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-policy-forwarding:prefix',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))$).*$',
        ),
    ] = None
    """
    Match a packet if its source IP address is within the specified IPv6 prefix.
    """


class SourceMacListEntry(BaseModel):
    """
    List of source mac addresses to trace
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source_mac: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:source-mac',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The mac-address type represents an IEEE 802 MAC address.
    The canonical representation uses lowercase characters.

    In the value set and its semantics, this type is equivalent
    to the MacAddress textual convention of the SMIv2.
    """


class SourceMacListEntry2(BaseModel):
    """
    List of source mac addresses to trace
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source_mac: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:source-mac',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The mac-address type represents an IEEE 802 MAC address.
    The canonical representation uses lowercase characters.

    In the value set and its semantics, this type is equivalent
    to the MacAddress textual convention of the SMIv2.
    """


class SpfWaitContainer(BaseModel):
    """
    Enter the spf-wait context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    spf_max_wait: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:spf-max-wait', ge=10, le=120000)
    ] = 10000
    """
    Maximum interval between two consecutive SPF calculations
    """
    spf_initial_wait: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:spf-initial-wait', ge=10, le=100000)
    ] = 1000
    """
    Initial SPF calculation delay after a topology change
    """
    spf_second_wait: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:spf-second-wait', ge=10, le=100000)
    ] = 1000
    """
    Hold time between the first and second SPF calculation
    """


class SpfContainer(BaseModel):
    """
    Container with options for specifying SPF timer values
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    initial_wait: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:initial-wait', ge=10, le=100000)
    ] = 1000
    """
    Time interval between the detection of topology change and when the SPF algorithm runs.

    The timer granularity is 100 ms. Timer values are rounded down to the nearest granularity, for example a configured value of 550 ms is internally rounded down to 500 ms
    """
    second_wait: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:second-wait', ge=10, le=100000)
    ] = 1000
    """
    Time interval between the the first and second SPF run.

    The timer granularity is 100 ms. Timer values are rounded down to the nearest granularity, for example a configured value of 550 ms is internally rounded down to 500 ms
    """
    max_wait: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:max-wait', ge=10, le=120000)
    ] = 10000
    """
    Specifies the maximum interval between two consecutive SPF calculations in milliseconds.

    The timer granularity is 100 ms. Timer values are rounded down to the nearest granularity, for example a configured value of 550 ms is internally rounded down to 500 ms
    """


class SrAlgorithmContainer(BaseModel):
    """
    Advertises the IGP algorithms that the router is using
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    algorithm: Annotated[
        Optional[List[AlgorithmLeafList2]], Field(alias='srl_nokia-isis:algorithm')
    ] = []
    """
    List of algorithm types supported by the router. Algorithm 0 should always be in the list
    """


class SrgbDescriptorListEntry2(BaseModel):
    """
    List of Segment Routing Global Block descriptors
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    sr_index_or_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:sr-index-or-label', ge=0, le=4294967295),
    ] = None
    """
    An index representing the first value of the SRGB. The meaning (index or label) is determined from the length of the sub-tlv.
    """
    range: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:range', ge=1, le=16777215)
    ] = None
    """
    The number of SRGB elements
    """


class SrgbLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[str, Field(pattern='^(?=^[0-9]+:[0-9]+$).*$')]
    """
    List of SRGB ranges, each in the format <first-label>:<number-of-labels>
    """


class SrlbDescriptorListEntry(BaseModel):
    """
    List of Segment Routing Local Block descriptors
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    sr_index_or_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:sr-index-or-label', ge=0, le=4294967295),
    ] = None
    """
    An index representing the first value of the SRLB. The meaning (index or label) is determined from the length of the sub-tlv.
    """
    range: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:range', ge=1, le=16777215)
    ] = None
    """
    The number of SRLB elements
    """


class SrlgValueLeafList(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    List of SRLG values.
    """


class SrlgValueLeafList2(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    SRLG values.
    """


class StargLeaf(BaseModel):
    """
    any source address (*,G)
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class StargLeaf2(BaseModel):
    """
    any source address (*,G)
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class StargLeaf3(BaseModel):
    """
    any source address (*,G)
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class StargLeaf4(BaseModel):
    """
    any source address (*,G)
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )


class StateAdvertisementControlContainer(BaseModel):
    """
    State advertisement control capability. TLV 0x050D
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_prefix_disable: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:ipv4-prefix-disable')
    ] = None
    """
    Indicates desire to not receive IPv4 prefix FECs
    """
    ipv6_prefix_disable: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:ipv6-prefix-disable')
    ] = None
    """
    Indicates desire to not receive IPv6 prefix FECs
    """
    p2p_pseudowire_fec_128_disable: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:p2p-pseudowire-fec-128-disable')
    ] = None
    """
    Indicates desire to not receive P2P PW FEC 128 FECs
    """
    p2p_pseudowire_fec_129_disable: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:p2p-pseudowire-fec-129-disable')
    ] = None
    """
    Indicates desire to not receive P2P PW FEC 129 FECs
    """


class TagTypeType1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=4294967295)]
    """
    Type for expressing route tags on a local system, including IS-IS and OSPF

    May be expressed as either decimal or hexidecimal integer
    """


class Tag32LeafList(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    List of 32-bit tags associated with the prefix. Example uses of these tags include carrying BGP standard (or extended) communities and controlling redistribution between levels and areas, different routing protocols, or multiple instances of IS-IS running on the same router.
    """


class Tag32LeafList2(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    List of 32-bit tags associated with the prefix. Example uses of these tags include carrying BGP standard (or extended) communities and controlling redistribution between levels and areas, different routing protocols, or multiple instances of IS-IS running on the same router.
    """


class Tag32LeafList3(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    List of 32-bit tags associated with the prefix. Example uses of these tags include carrying BGP standard (or extended) communities and controlling redistribution between levels and areas, different routing protocols, or multiple instances of IS-IS running on the same router.
    """


class Tag32LeafList4(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=4294967295)]
    """
    List of 32-bit tags associated with the prefix. Example uses of these tags include carrying BGP standard (or extended) communities and controlling redistribution between levels and areas, different routing protocols, or multiple instances of IS-IS running on the same router.
    """


class Tag64LeafList(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=18446744073709551615)]
    """
    List of 64-bit tags associated with the prefix. Example uses of these tags include carrying BGP standard (or extended) communities and controlling redistribution between levels and areas, different routing protocols, or multiple instances of IS-IS running on the same router.
    """


class Tag64LeafList2(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=18446744073709551615)]
    """
    List of 64-bit tags associated with the prefix. Example uses of these tags include carrying BGP standard (or extended) communities and controlling redistribution between levels and areas, different routing protocols, or multiple instances of IS-IS running on the same router.
    """


class Tag64LeafList3(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=18446744073709551615)]
    """
    List of 64-bit tags associated with the prefix. Example uses of these tags include carrying BGP standard (or extended) communities and controlling redistribution between levels and areas, different routing protocols, or multiple instances of IS-IS running on the same router.
    """


class Tag64LeafList4(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=18446744073709551615)]
    """
    List of 64-bit tags associated with the prefix. Example uses of these tags include carrying BGP standard (or extended) communities and controlling redistribution between levels and areas, different routing protocols, or multiple instances of IS-IS running on the same router.
    """


class TagContainer(BaseModel):
    """
    Next-hop resolution constraints based on internal tags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mandatory: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp-evpn:mandatory')
    ] = False
    """
    If true, a tunnel can resolve the next-hop only if it has all the same tags as the route

    If false, it is possible to select a tunnel that has none or only some of the same tags as the route.
    """


class TagContainer10(BaseModel):
    """
    Next-hop resolution constraints based on internal tags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mandatory: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:mandatory')] = False
    """
    If true, a tunnel can resolve the next-hop only if it has all the same tags as the route

    If false, it is possible to select a tunnel that has none or only some of the same tags as the route.
    """


class TagContainer11(BaseModel):
    """
    Next-hop resolution constraints based on internal tags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mandatory: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:mandatory')] = False
    """
    If true, a tunnel can resolve the next-hop only if it has all the same tags as the route

    If false, it is possible to select a tunnel that has none or only some of the same tags as the route.
    """


class TagContainer12(BaseModel):
    """
    Next-hop resolution constraints based on internal tags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mandatory: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:mandatory')] = False
    """
    If true, a tunnel can resolve the next-hop only if it has all the same tags as the route

    If false, it is possible to select a tunnel that has none or only some of the same tags as the route.
    """


class TagContainer13(BaseModel):
    """
    Next-hop resolution constraints based on internal tags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mandatory: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:mandatory')] = False
    """
    If true, a tunnel can resolve the next-hop only if it has all the same tags as the route

    If false, it is possible to select a tunnel that has none or only some of the same tags as the route.
    """


class TagContainer14(BaseModel):
    """
    Next-hop resolution constraints based on internal tags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mandatory: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:mandatory')] = False
    """
    If true, a tunnel can resolve the next-hop only if it has all the same tags as the route

    If false, it is possible to select a tunnel that has none or only some of the same tags as the route.
    """


class TagContainer15(BaseModel):
    """
    This container defines sub-TLV 1.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag32: Annotated[
        Optional[List[Tag32LeafList]], Field(alias='srl_nokia-isis:tag32')
    ] = []
    """
    List of 32-bit tags associated with the prefix. Example uses of these tags include carrying BGP standard (or extended) communities and controlling redistribution between levels and areas, different routing protocols, or multiple instances of IS-IS running on the same router.
    """


class TagContainer16(BaseModel):
    """
    This container defines sub-TLV 1.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag32: Annotated[
        Optional[List[Tag32LeafList2]], Field(alias='srl_nokia-isis:tag32')
    ] = []
    """
    List of 32-bit tags associated with the prefix. Example uses of these tags include carrying BGP standard (or extended) communities and controlling redistribution between levels and areas, different routing protocols, or multiple instances of IS-IS running on the same router.
    """


class TagContainer17(BaseModel):
    """
    This container defines sub-TLV 1.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag32: Annotated[
        Optional[List[Tag32LeafList3]], Field(alias='srl_nokia-isis:tag32')
    ] = []
    """
    List of 32-bit tags associated with the prefix. Example uses of these tags include carrying BGP standard (or extended) communities and controlling redistribution between levels and areas, different routing protocols, or multiple instances of IS-IS running on the same router.
    """


class TagContainer18(BaseModel):
    """
    This container defines sub-TLV 1.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag32: Annotated[
        Optional[List[Tag32LeafList4]], Field(alias='srl_nokia-isis:tag32')
    ] = []
    """
    List of 32-bit tags associated with the prefix. Example uses of these tags include carrying BGP standard (or extended) communities and controlling redistribution between levels and areas, different routing protocols, or multiple instances of IS-IS running on the same router.
    """


class TagContainer2(BaseModel):
    """
    Next-hop resolution constraints based on internal tags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mandatory: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp-ipvpn:mandatory')
    ] = False
    """
    If true, a tunnel can resolve the next-hop only if it has all the same tags as the route

    If false, it is possible to select a tunnel that has none or only some of the same tags as the route.
    """


class TagContainer3(BaseModel):
    """
    Next-hop resolution constraints based on internal tags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mandatory: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:mandatory')] = False
    """
    If true, a tunnel can resolve the next-hop only if it has all the same tags as the route

    If false, it is possible to select a tunnel that has none or only some of the same tags as the route.
    """


class TagContainer4(BaseModel):
    """
    Next-hop resolution constraints based on internal tags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mandatory: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:mandatory')] = False
    """
    If true, a tunnel can resolve the next-hop only if it has all the same tags as the route

    If false, it is possible to select a tunnel that has none or only some of the same tags as the route.
    """


class TagContainer5(BaseModel):
    """
    Next-hop resolution constraints based on internal tags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mandatory: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:mandatory')] = False
    """
    If true, a tunnel can resolve the next-hop only if it has all the same tags as the route

    If false, it is possible to select a tunnel that has none or only some of the same tags as the route.
    """


class TagContainer6(BaseModel):
    """
    Next-hop resolution constraints based on internal tags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mandatory: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:mandatory')] = False
    """
    If true, a tunnel can resolve the next-hop only if it has all the same tags as the route

    If false, it is possible to select a tunnel that has none or only some of the same tags as the route.
    """


class TagContainer7(BaseModel):
    """
    Next-hop resolution constraints based on internal tags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mandatory: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:mandatory')] = False
    """
    If true, a tunnel can resolve the next-hop only if it has all the same tags as the route

    If false, it is possible to select a tunnel that has none or only some of the same tags as the route.
    """


class TagContainer8(BaseModel):
    """
    Next-hop resolution constraints based on internal tags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mandatory: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:mandatory')] = False
    """
    If true, a tunnel can resolve the next-hop only if it has all the same tags as the route

    If false, it is possible to select a tunnel that has none or only some of the same tags as the route.
    """


class TagContainer9(BaseModel):
    """
    Next-hop resolution constraints based on internal tags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mandatory: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:mandatory')] = False
    """
    If true, a tunnel can resolve the next-hop only if it has all the same tags as the route

    If false, it is possible to select a tunnel that has none or only some of the same tags as the route.
    """


class TeDefaultMetricContainer(BaseModel):
    """
    This container defines sub-TLV 18.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=0, le=4294967295)
    ] = None
    """
    This metric is administratively assigned and can be used to present a differently weighted topology to traffic engineering SPF calculations. To preclude overflow within a traffic engineering SPF implementation, all metrics greater than or equal to MAX_PATH_METRIC SHALL be considered to have a metric of MAX_PATH_METRIC.
    """


class TeDefaultMetricContainer2(BaseModel):
    """
    This container defines sub-TLV 18.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=0, le=4294967295)
    ] = None
    """
    This metric is administratively assigned and can be used to present a differently weighted topology to traffic engineering SPF calculations. To preclude overflow within a traffic engineering SPF implementation, all metrics greater than or equal to MAX_PATH_METRIC SHALL be considered to have a metric of MAX_PATH_METRIC.
    """


class TeDefaultMetricContainer3(BaseModel):
    """
    This container defines sub-TLV 18.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=0, le=4294967295)
    ] = None
    """
    This metric is administratively assigned and can be used to present a differently weighted topology to traffic engineering SPF calculations. To preclude overflow within a traffic engineering SPF implementation, all metrics greater than or equal to MAX_PATH_METRIC SHALL be considered to have a metric of MAX_PATH_METRIC.
    """


class TeDefaultMetricContainer4(BaseModel):
    """
    This container defines sub-TLV 18.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=0, le=4294967295)
    ] = None
    """
    This metric is administratively assigned and can be used to present a differently weighted topology to traffic engineering SPF calculations. To preclude overflow within a traffic engineering SPF implementation, all metrics greater than or equal to MAX_PATH_METRIC SHALL be considered to have a metric of MAX_PATH_METRIC.
    """


class ThresholdLeaf1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=4294967294)]
    """
    SPT switchover threshold in kbps
    """


class TimersContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    connect_retry: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:connect-retry', ge=1, le=65535)
    ] = 120
    """
    The time interval in seconds between successive attempts to establish a session with a peer
    """
    hold_time: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:hold-time', ge=0, le=65535)
    ] = 90
    """
    The hold-time interval in seconds that the router proposes to the peer in its OPEN message

    The actual in-use hold-time is negotiated to the lowest value proposed by the two peers. A negotiated value of 0 suppresses the sending of keepalives by both peers.
    """
    keepalive_interval: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:keepalive-interval', ge=0, le=21845)
    ] = None
    """
    The interval in seconds between successive keepalive messages sent to the peer

    The period between one keepalive message and the next is the minimum of this configured value and 1/3 of the negotiated hold-time duration. A value of 0 suppresses the sending of keepalives to the peer.
    """
    minimum_advertisement_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:minimum-advertisement-interval', ge=1, le=255),
    ] = 5
    """
    The value assigned to the MinRouteAdvertisementIntervalTimer of RFC 4271, for both EBGP and IBGP sessions

    Each session runs its own independent timer and the timer affects both route advertisements and route withdrawals, regardless of address family. For route withdrawals only, this timer is bypassed if rapid-withdrawal is set to true.
    """
    prefix_limit_restart_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:prefix-limit-restart-timer', ge=0, le=65535),
    ] = 0
    """
    Time interval in seconds after which the BGP session is re-established after being torn down due to exceeding any prefix limit (of any address family)

    This only applies if prevent-teardown is false.
    """


class TimersContainer4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    csnp_interval: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:csnp-interval', ge=1, le=65535)
    ] = 10
    """
    The interval, specified in seconds, at which periodic CSNP packets should be transmitted by the local IS on this interface.
    """
    lsp_pacing_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:lsp-pacing-interval', ge=0, le=100000),
    ] = 100
    """
    Controls the interval between (bursts of) LSPs sent from the interface.
    The interval applies to all LSPs: LSPs generated by the router, and LSPs received from other routers and re-flooded.

    The burst interval is 100 ms if the lsp-pacing-interval < 100 ms and otherwise it is 1 second. For example, if the lsp-pacing-interval is 2 ms, at most 50 LSPs are sent every 100 ms. On the other hand, if the
    lsp-pacing-interval is 100 ms, at most 10 LSPs are sent every 1 second.

    If a value of 0 is configured, no LSPs are sent from the interface.

    The default pacing interval of 100 milliseconds means that a maximum of 10 LSPs are sent in a burst every second.
    """


class TimersContainer5(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    hello_interval: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:hello-interval', ge=1, le=20000)
    ] = 9
    """
    ISIS hello-interval value.
    The default is 3 seconds on Designated IS interfaces and 9 seconds for non-DIS and p2p interfaces
    """
    hello_multiplier: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:hello-multiplier', ge=2, le=100)
    ] = 3
    """
    ISIS hello-multiplier value.

    The neighbor hold time is (hello multiplier x hello interval) on non-designated intermediate system broadcast interfaces and point-to-point interfaces and (hello multiplier x hello interval / 3) on designated intermediate system broadcast interfaces.

    The hold time is the time in which the neighbor expects to receive the next Hello PDU. If the neighbor receives a Hello within this time, the hold time is reset. If the neighbor does not receive a Hello within the hold time, it brings the adjacency down.
    """


class TldpMacFlushContainer(BaseModel):
    """
    Targeted Label Distribution Protocol MAC Flush parameters
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    send_flush_on_failure: Annotated[
        Optional[bool], Field(alias='srl_nokia-network-instance:send-flush-on-failure')
    ] = False
    """
    Triggers a MAC address flush-all-from-me indication to the TLDP peers upon failure

    This command enables sending out flush-all-from-me messages to all
    Targeted LDP peers included in the MAC-VRF, in the event of a failure of
    at least one MAC-VRF subinterface or a pseudowire or the BGP EVPN destinations.
    This feature provides an LDP-based mechanism for recovering a link
    failure in a dual-homed connection to a MAC-VRF.
    """


class TopologyIdLeafList(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=65535)]
    """
    Instance-Specific Topology Identifiers (ITIDs).
    """


class TopologyListEntry2(BaseModel):
    """
    The list of multi-topology IDs that the router is participating in
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mt_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:mt-id', ge=0, le=4095)
    ] = None
    """
    A multi-topology ID.
    """
    overload: Annotated[Optional[bool], Field(alias='srl_nokia-isis:overload')] = None
    """
    Reads true when the topology is in overload state.
    """
    attached: Annotated[Optional[bool], Field(alias='srl_nokia-isis:attached')] = None
    """
    Reads true when the topology is attached to Level 2
    """


class TracePathLeaf1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=0, le=31)]
    """
    Domain identity
    """


class TrafficEngineeringContainer2(BaseModel):
    """
    container for traffic engineering information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertisement: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:advertisement')
    ] = False
    """
    A setting of false means that no TE-related TLVs and subTLVs should be added to LSAs or LSPs originated by this IGP instance.
    A setting of true means that TE-related TLVs and subTLVs should be added to LSAs or LSPs originated by this IGP instance.
    """


class TransportContainer(BaseModel):
    """
    Options related to the TCP transport of BGP sessions
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    single_hop_connected_check: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:single-hop-connected-check')
    ] = True
    """
    Control whether a single-hop BGP session should be allowed to setup if its 'related interface' is down.

    If single-hop-connected-check is false, a single-hop BGP session (EBGP or IBGP) to any IPv4 or IPv6 neighbor address is permitted to establish if there is ANY valid (IPv6 global unicast, IPv4 link-local, or IPv4 global) route to that neighbor address, regardless of whether the 'related interface' is up or down.

    If single-hop-connected-check is true (default value), a single-hop BGP session (EBGP or IBGP) to any IPv4 or IPv6 neighbor address is only permitted to transition from idle to a higher state if the 'related interface' is up.

    The 'related interface' of a single hop peer is the subinterface associated with the IPv6 link local neighbor address or else the subinterface with a primary or secondary IP address and prefix-length that covers the neighbor address.
    """
    mtu_discovery: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:mtu-discovery')
    ] = None
    """
    Turns path mtu discovery for BGP TCP sessions on (true) or off (false)

    If this is unconfigured then the setting comes from network-instance/mtu/path-mtu-discovery.

    Changing the value of network-instance/mtu/path-mtu-discovery takes effect only for new connections established after the change
    """
    tcp_mss: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:tcp-mss', ge=536, le=9446)
    ] = 1024
    """
    The maximum segment size of BGP TCP packets

    The actual value used in the transmit direction towards a particular peer should be checked at the neighbor level.
    """


class TransportContainer4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsp_mtu_size: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:lsp-mtu-size', ge=490, le=9490)
    ] = 1492
    """
    Sets the maximum size of LSPs generated by this router
    """


class UnconstrainedLspContainer(BaseModel):
    """
    This container defines sub-TLV 23.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    count: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:count', ge=0, le=65535)
    ] = None
    """
    Unconstrained TE LSP count(TE Label Switched Paths (LSPs) signalled with zero bandwidth).
    """


class UnconstrainedLspContainer2(BaseModel):
    """
    This container defines sub-TLV 23.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    count: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:count', ge=0, le=65535)
    ] = None
    """
    Unconstrained TE LSP count(TE Label Switched Paths (LSPs) signalled with zero bandwidth).
    """


class UnconstrainedLspContainer3(BaseModel):
    """
    This container defines sub-TLV 23.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    count: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:count', ge=0, le=65535)
    ] = None
    """
    Unconstrained TE LSP count(TE Label Switched Paths (LSPs) signalled with zero bandwidth).
    """


class UnconstrainedLspContainer4(BaseModel):
    """
    This container defines sub-TLV 23.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    count: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:count', ge=0, le=65535)
    ] = None
    """
    Unconstrained TE LSP count(TE Label Switched Paths (LSPs) signalled with zero bandwidth).
    """


class UndefinedTlvsLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[str, Field(pattern='^(?=^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?$).*$')]
    """
    Undefined TLV-s as contents of the LSP.
    """


class UnknownAttributeListEntry(BaseModel):
    """
    List of unknown BGP path attributes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    unknown_attr_index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:unknown-attr-index', ge=0, le=4294967295),
    ] = None
    """
    RIB attribute unknown attribute index
    """
    attr_type: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:attr-type', ge=0, le=255)
    ] = None
    """
    The type code of the unknown path
    attribute
    """
    attr_len: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:attr-len', ge=0, le=65535)
    ] = None
    """
    The length of the unknown path
    attribute
    """
    optional: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:optional')] = (
        None
    )
    """
    Set to true if the unknown path
    attribute has the optional flag is set to
    1.
    """
    transitive: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:transitive')
    ] = None
    """
    Set to true if the unknown path
    attribute has the transitive flag is set to
    1.
    """
    partial: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:partial')] = None
    """
    Set to true if the unknown path
    attribute has the partial flag is set to 1.
    """
    extended: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:extended')] = (
        None
    )
    """
    Set to true if the unknown path attribute has the extended length flag
    is set to 1.
    """


class UnknownAttributesContainer(BaseModel):
    """
    Container for unknown path attributes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    unknown_attribute: Annotated[
        Optional[List[UnknownAttributeListEntry]],
        Field(alias='srl_nokia-rib-bgp:unknown-attribute'),
    ] = None


class UsersListEntry(BaseModel):
    """
    applications reserving this mac
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    application: Annotated[
        Optional[str], Field(alias='srl_nokia-bridge-table-reserved-macs:application')
    ] = None


class WeightLeaf1(RootModel[int]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[int, Field(ge=1, le=128)]
    """
    Determines the weight to be advertised in the evpn-link-bandwidth extended community

    If set to dynamic, the weight is dynamically set based on the number of BGP PE-CE paths
    for the IP Prefix that is advertised in an EVPN IP Prefix route. Alternatively, the
    weight can be set to a fixed integer value in the range 1..128. The dynamic weight only
    considers BGP PE-CE paths.
    """


class EnumerationEnum(Enum):
    enable = 'enable'
    disable = 'disable'


class EnumerationEnum10(Enum):
    echo_reply = 'echo-reply'
    dest_unreachable = 'dest-unreachable'
    redirect = 'redirect'
    echo = 'echo'
    rtr_advertisement = 'rtr-advertisement'
    rtr_selection = 'rtr-selection'
    time_exceeded = 'time-exceeded'
    param_problem = 'param-problem'
    timestamp = 'timestamp'
    timestamp_reply = 'timestamp-reply'


class EnumerationEnum100(Enum):
    ethernet = 'ethernet'
    vlan = 'vlan'


class EnumerationEnum101(Enum):
    up = 'up'
    down = 'down'


class EnumerationEnum102(Enum):
    vc_type_mismatch = 'vc-type-mismatch'
    control_word_mismatch = 'control-word-mismatch'
    transport_tunnel_oper_down = 'transport-tunnel-oper-down'
    ldp_resource_exhausted = 'ldp-resource-exhausted'
    no_egress_label = 'no-egress-label'


class EnumerationEnum103(Enum):
    in_use_pop = 'in-use-pop'
    released = 'released'
    withdrawn = 'withdrawn'
    withdraw_pending = 'withdraw-pending'


class EnumerationEnum104(Enum):
    pseudowire_forwarding = 'pseudowire-forwarding'
    pseudowire_not_forwarding = 'pseudowire-not-forwarding'
    local_attachment_circuit_ingress_fault = 'local-attachment-circuit-ingress-fault'
    local_attachment_circuit_egress_fault = 'local-attachment-circuit-egress-fault'
    provider_service_network_ingress_fault = 'provider-service-network-ingress-fault'
    provider_service_network_egress_fault = 'provider-service-network-egress-fault'
    pseudowire_forwarding_standby = 'pseudowire-forwarding-standby'
    pseudowire_request_switchover = 'pseudowire-request-switchover'


class EnumerationEnum105(Enum):
    none = 'none'
    local_fault = 'local-fault'


class EnumerationEnum106(Enum):
    in_use_push = 'in-use-push'
    released = 'released'
    withdrawn = 'withdrawn'
    withdraw_pending = 'withdraw-pending'


class EnumerationEnum107(Enum):
    ldp_admin_disabled = 'ldp-admin-disabled'
    mpls_admin_disabled = 'mpls-admin-disabled'
    no_system_ipv6_address = 'no-system-ipv6-address'
    net_instance_mgr_down = 'net-instance-mgr-down'
    label_block_unavailable = 'label-block-unavailable'
    no_resource = 'no-resource'
    unknown = 'unknown'


class EnumerationEnum108(Enum):
    primary = 'primary'
    alternate = 'alternate'
    rlfa = 'rlfa'


class EnumerationEnum109(Enum):
    rejected_on_rx = 'rejected-on-rx'
    exceeds_multipath_limit = 'exceeds-multipath-limit'
    exceeds_fec_limit = 'exceeds-fec-limit'
    fec_unresolved = 'fec-unresolved'


class EnumerationEnum11(Enum):
    dest_unreachable = 'dest-unreachable'
    packet_too_big = 'packet-too-big'
    time_exceeded = 'time-exceeded'
    param_problem = 'param-problem'
    echo_request = 'echo-request'
    echo_reply = 'echo-reply'
    rtr_solicitation = 'rtr-solicitation'
    rtr_advertisement = 'rtr-advertisement'
    nbr_solicitation = 'nbr-solicitation'
    nbr_advertisement = 'nbr-advertisement'
    redirect = 'redirect'


class EnumerationEnum110(Enum):
    released = 'released'
    withdrawn = 'withdrawn'
    wdraw_pending = 'wdraw-pending'


class EnumerationEnum111(Enum):
    up = 'up'
    down = 'down'


class EnumerationEnum112(Enum):
    vc_type_mismatch = 'vc-type-mismatch'
    control_word_mismatch = 'control-word-mismatch'
    transport_tunnel_oper_down = 'transport-tunnel-oper-down'
    ldp_resource_exhausted = 'ldp-resource-exhausted'
    no_egress_label = 'no-egress-label'


class EnumerationEnum113(Enum):
    in_use_pop = 'in-use-pop'
    released = 'released'
    withdrawn = 'withdrawn'
    withdraw_pending = 'withdraw-pending'


class EnumerationEnum114(Enum):
    in_use_push = 'in-use-push'
    released = 'released'
    withdrawn = 'withdrawn'
    withdraw_pending = 'withdraw-pending'


class EnumerationEnum115(Enum):
    all = 'all'
    events_discovery = 'events-discovery'
    messages_hello = 'messages-hello'
    messages_hello_detail = 'messages-hello-detail'


class EnumerationEnum116(Enum):
    ldp_interface_admin_down = 'ldp-interface-admin-down'
    ldp_instance_oper_down = 'ldp-instance-oper-down'
    network_instance_subinterface_down = 'network-instance-subinterface-down'
    out_of_resources = 'out-of-resources'
    unknown = 'unknown'


class EnumerationEnum117(Enum):
    up = 'up'
    down = 'down'


class EnumerationEnum118(Enum):
    ipv4 = 'ipv4'


class EnumerationEnum119(Enum):
    ldp_interface_admin_down = 'ldp-interface-admin-down'
    ldp_instance_oper_down = 'ldp-instance-oper-down'
    network_instance_subinterface_down = 'network-instance-subinterface-down'
    out_of_resources = 'out-of-resources'
    unknown = 'unknown'


class EnumerationEnum12(Enum):
    vxlan = 'vxlan'
    mpls = 'mpls'


class EnumerationEnum120(Enum):
    up = 'up'
    down = 'down'


class EnumerationEnum121(Enum):
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'


class EnumerationEnum122(Enum):
    target_admin_down = 'target-admin-down'
    ldp_instance_oper_down = 'ldp-instance-oper-down'
    out_of_resources = 'out-of-resources'
    unknown = 'unknown'


class EnumerationEnum123(Enum):
    up = 'up'
    down = 'down'


class EnumerationEnum124(Enum):
    manual = 'manual'
    service = 'service'
    auto_tx = 'auto-tx'
    auto_rx = 'auto-rx'


class EnumerationEnum125(Enum):
    target_admin_down = 'target-admin-down'
    ldp_instance_oper_down = 'ldp-instance-oper-down'
    out_of_resources = 'out-of-resources'
    unknown = 'unknown'


class EnumerationEnum126(Enum):
    up = 'up'
    down = 'down'


class EnumerationEnum127(Enum):
    manual = 'manual'
    service = 'service'
    auto_tx = 'auto-tx'
    auto_rx = 'auto-rx'


class EnumerationEnum128(Enum):
    all = 'all'
    events_all = 'events-all'
    events_session = 'events-session'
    events_binding = 'events-binding'
    messages_all = 'messages-all'
    messages_all_detail = 'messages-all-detail'
    messages_initialization = 'messages-initialization'
    messages_initialization_detail = 'messages-initialization-detail'
    messages_keepalive = 'messages-keepalive'
    messages_label = 'messages-label'
    messages_label_detail = 'messages-label-detail'
    messages_hello = 'messages-hello'
    messages_hello_detail = 'messages-hello-detail'


class EnumerationEnum129(Enum):
    link = 'link'
    targeted = 'targeted'
    both = 'both'


class EnumerationEnum13(Enum):
    no_destination_index = 'no-destination-index'


class EnumerationEnum130(Enum):
    downstream_unsolicited = 'downstream-unsolicited'
    downstream_on_demand = 'downstream-on-demand'


class EnumerationEnum131(Enum):
    non_existent = 'non-existent'
    initialized = 'initialized'
    openrec = 'openrec'
    opensent = 'opensent'
    operational = 'operational'


class EnumerationEnum132(Enum):
    available = 'available'
    unavailable = 'unavailable'


class EnumerationEnum133(Enum):
    l1 = 'L1'
    l2 = 'L2'
    l1_l2 = 'L1L2'


class EnumerationEnum134(Enum):
    strict = 'strict'
    loose = 'loose'
    adaptive = 'adaptive'
    disable = 'disable'


class EnumerationEnum135(Enum):
    adjacencies = 'adjacencies'
    graceful_restart = 'graceful-restart'
    interfaces = 'interfaces'
    packets_all = 'packets-all'
    packets_p2p_hello = 'packets-p2p-hello'
    packets_l1_hello = 'packets-l1-hello'
    packets_l2_hello = 'packets-l2-hello'
    packets_l1_psnp = 'packets-l1-psnp'
    packets_l2_psnp = 'packets-l2-psnp'
    packets_l1_csnp = 'packets-l1-csnp'
    packets_l2_csnp = 'packets-l2-csnp'
    packets_l1_lsp = 'packets-l1-lsp'
    packets_l2_lsp = 'packets-l2-lsp'
    routes = 'routes'
    summary_addresses = 'summary-addresses'


class EnumerationEnum136(Enum):
    none = 'none'
    all = 'all'


class EnumerationEnum137(Enum):
    strict = 'strict'
    loose = 'loose'
    disable = 'disable'


class EnumerationEnum138(Enum):
    cleartext = 'cleartext'
    hmac_md5 = 'hmac-md5'
    hmac_sha_256 = 'hmac-sha-256'


class EnumerationEnum139(Enum):
    lsp = 'LSP'
    iih = 'IIH'
    csnp = 'CSNP'
    psnp = 'PSNP'
    unknown = 'Unknown'


class EnumerationEnum14(Enum):
    no_destination_index = 'no-destination-index'


class EnumerationEnum140(Enum):
    enable = 'enable'
    disable = 'disable'


class EnumerationEnum141(Enum):
    available = 'available'
    unavailable = 'unavailable'


class EnumerationEnum142(Enum):
    none = 'none'


class EnumerationEnum143(Enum):
    point_to_point = 'point-to-point'
    broadcast = 'broadcast'


class EnumerationEnum144(Enum):
    static = 'static'
    dynamic = 'dynamic'
    static_preferred = 'static-preferred'
    dynamic_preferred = 'dynamic-preferred'


class EnumerationEnum145(Enum):
    adjacencies = 'adjacencies'
    packets_all = 'packets-all'
    packets_p2p_hello = 'packets-p2p-hello'
    packets_l1_hello = 'packets-l1-hello'
    packets_l2_hello = 'packets-l2-hello'
    packets_l1_psnp = 'packets-l1-psnp'
    packets_l2_psnp = 'packets-l2-psnp'
    packets_l1_csnp = 'packets-l1-csnp'
    packets_l2_csnp = 'packets-l2-csnp'
    packets_l1_lsp = 'packets-l1-lsp'
    packets_l2_lsp = 'packets-l2-lsp'


class EnumerationEnum146(Enum):
    static = 'static'
    dynamic = 'dynamic'
    none = 'none'


class EnumerationEnum147(Enum):
    static = 'static'
    dynamic = 'dynamic'
    none = 'none'


class EnumerationEnum148(Enum):
    auto = 'auto'
    none = 'none'


class EnumerationEnum149(Enum):
    up = 'up'
    down = 'down'
    init = 'init'
    failed = 'failed'


class EnumerationEnum15(Enum):
    admin_disabled = 'admin-disabled'
    no_nexthop_address = 'no-nexthop-address'
    no_evi = 'no-evi'
    network_instance_oper_down = 'network-instance-oper-down'
    no_vxlan_interface = 'no-vxlan-interface'
    ethernet_segment_multiple_subinterfaces = 'ethernet-segment-multiple-subinterfaces'
    vxlan_interface_no_source_ip_address = 'vxlan_interface_no_source_ip_address'
    bgp_vpn_instance_oper_down = 'bgp-vpn-instance-oper-down'
    no_mpls_label = 'no-mpls-label'
    no_mcid = 'no-mcid'
    no_local_attachment_circuit = 'no-local-attachment-circuit'
    no_remote_attachment_circuit = 'no-remote-attachment-circuit'
    tag_set_not_resolved = 'tag-set-not-resolved'


class EnumerationEnum150(Enum):
    field_3_way_handshake_failed = '3-way-handshake-failed'
    address_mismatch = 'address-mismatch'
    hold_timer_expired = 'hold-timer-expired'
    area_mismatch = 'area-mismatch'
    bad_hello = 'bad-hello'
    bfd_session_down = 'bfd-session-down'
    interface_down = 'interface-down'
    interface_level_disabled = 'interface-level-disabled'
    level_changed = 'level-changed'
    level_mismatch = 'level-mismatch'
    mt_topology_changed = 'mt-topology-changed'
    mt_topology_mismatch = 'mt-topology-mismatch'
    remote_system_id_changed = 'remote-system-id-changed'
    isis_protocol_disabled = 'isis-protocol-disabled'
    unknown = 'unknown'


class EnumerationEnum151(Enum):
    not_helping = 'not-helping'
    helping = 'helping'


class EnumerationEnum152(Enum):
    never = 'never'


class EnumerationEnum153(Enum):
    i_pv4 = 'IPv4'
    i_pv6 = 'IPv6'
    clns = 'CLNS'


class EnumerationEnum154(Enum):
    wait_for_ldp_adjacency = 'wait-for-LDP-adjacency'
    hold_down_timer_active = 'hold-down-timer-active'
    end_of_lib_received = 'end-of-lib-received'
    hold_down_timer_expired = 'hold-down-timer-expired'
    manual_exit = 'manual-exit'
    disabled = 'disabled'


class EnumerationEnum155(Enum):
    narrow = 'narrow'
    wide = 'wide'


class EnumerationEnum156(Enum):
    adjacencies = 'adjacencies'
    lsdb = 'lsdb'
    routes = 'routes'
    spf = 'spf'


class EnumerationEnum157(Enum):
    level_1 = 'level-1'
    level_2 = 'level-2'


class EnumerationEnum158(Enum):
    partition_repair = 'partition-repair'
    attached_error = 'attached-error'
    attached_expense = 'attached-expense'
    attached_delay = 'attached-delay'
    attached_default = 'attached-default'
    overload = 'overload'


class EnumerationEnum159(Enum):
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'


class EnumerationEnum16(Enum):
    no_destination_index = 'no-destination-index'
    multicast_limit = 'multicast-limit'


class EnumerationEnum160(Enum):
    numbered = 'numbered'


class EnumerationEnum161(Enum):
    na = 'na'


class EnumerationEnum162(Enum):
    flood = 'flood'
    down = 'down'


class EnumerationEnum163(Enum):
    spf = 'spf'
    strict_spf = 'strict-spf'


class EnumerationEnum164(Enum):
    ipv4_mpls = 'ipv4-mpls'
    ipv6_mpls = 'ipv6-mpls'
    ipv6_sr = 'ipv6-sr'


class EnumerationEnum165(Enum):
    internal = 'internal'


class EnumerationEnum166(Enum):
    internal = 'internal'
    unsupported = 'unsupported'


class EnumerationEnum167(Enum):
    internal = 'internal'


class EnumerationEnum168(Enum):
    internal = 'internal'


class EnumerationEnum169(Enum):
    cleartext = 'cleartext'
    crypto = 'crypto'
    hmac_md5 = 'hmac-md5'


class EnumerationEnum17(Enum):
    static = 'static'
    duplicate = 'duplicate'
    learnt = 'learnt'
    irb_interface = 'irb-interface'
    evpn = 'evpn'
    evpn_static = 'evpn-static'
    irb_interface_anycast = 'irb-interface-anycast'
    proxy_anti_spoof = 'proxy-anti-spoof'
    reserved = 'reserved'
    eth_cfm = 'eth-cfm'
    irb_interface_vrrp = 'irb-interface-vrrp'


class EnumerationEnum170(Enum):
    local_protection = 'local-protection'
    link_excluded = 'link-excluded'


class EnumerationEnum171(Enum):
    extra_traffic = 'extra-traffic'
    unprotected = 'unprotected'
    shared = 'shared'
    one_one = 'one-one'
    plus_one = 'plus-one'
    enhanced = 'enhanced'


class EnumerationEnum172(Enum):
    address_family = 'address-family'
    backup = 'backup'
    value = 'value'
    local = 'local'
    set = 'set'


class EnumerationEnum173(Enum):
    address_family = 'address-family'
    backup = 'backup'
    value = 'value'
    local = 'local'
    set = 'set'


class EnumerationEnum174(Enum):
    external_flag = 'external-flag'
    readvertisement_flag = 'readvertisement-flag'
    node_flag = 'node-flag'
    elc_flag = 'elc-flag'


class EnumerationEnum175(Enum):
    readvertisement = 'readvertisement'
    node = 'node'
    no_php = 'no-php'
    explicit_null = 'explicit-null'
    value = 'value'
    local = 'local'


class EnumerationEnum176(Enum):
    external_flag = 'external-flag'
    readvertisement_flag = 'readvertisement-flag'
    node_flag = 'node-flag'
    elc_flag = 'elc-flag'


class EnumerationEnum177(Enum):
    readvertisement = 'readvertisement'
    node = 'node'
    no_php = 'no-php'
    explicit_null = 'explicit-null'
    value = 'value'
    local = 'local'


class EnumerationEnum178(Enum):
    overload = 'overload'
    attached = 'attached'


class EnumerationEnum179(Enum):
    local_protection = 'local-protection'
    link_excluded = 'link-excluded'


class EnumerationEnum18(Enum):
    no_destination_index = 'no-destination-index'


class EnumerationEnum180(Enum):
    extra_traffic = 'extra-traffic'
    unprotected = 'unprotected'
    shared = 'shared'
    one_one = 'one-one'
    plus_one = 'plus-one'
    enhanced = 'enhanced'


class EnumerationEnum181(Enum):
    address_family = 'address-family'
    backup = 'backup'
    value = 'value'
    local = 'local'
    set = 'set'


class EnumerationEnum182(Enum):
    address_family = 'address-family'
    backup = 'backup'
    value = 'value'
    local = 'local'
    set = 'set'


class EnumerationEnum183(Enum):
    local_protection = 'local-protection'
    link_excluded = 'link-excluded'


class EnumerationEnum184(Enum):
    extra_traffic = 'extra-traffic'
    unprotected = 'unprotected'
    shared = 'shared'
    one_one = 'one-one'
    plus_one = 'plus-one'
    enhanced = 'enhanced'


class EnumerationEnum185(Enum):
    address_family = 'address-family'
    backup = 'backup'
    value = 'value'
    local = 'local'
    set = 'set'


class EnumerationEnum186(Enum):
    address_family = 'address-family'
    backup = 'backup'
    value = 'value'
    local = 'local'
    set = 'set'


class EnumerationEnum187(Enum):
    local_protection = 'local-protection'
    link_excluded = 'link-excluded'


class EnumerationEnum188(Enum):
    extra_traffic = 'extra-traffic'
    unprotected = 'unprotected'
    shared = 'shared'
    one_one = 'one-one'
    plus_one = 'plus-one'
    enhanced = 'enhanced'


class EnumerationEnum189(Enum):
    address_family = 'address-family'
    backup = 'backup'
    value = 'value'
    local = 'local'
    set = 'set'


class EnumerationEnum19(Enum):
    mac_limit = 'mac-limit'
    failed_on_slots = 'failed-on-slots'
    no_destination_index = 'no-destination-index'
    reserved = 'reserved'


class EnumerationEnum190(Enum):
    address_family = 'address-family'
    backup = 'backup'
    value = 'value'
    local = 'local'
    set = 'set'


class EnumerationEnum191(Enum):
    external_flag = 'external-flag'
    readvertisement_flag = 'readvertisement-flag'
    node_flag = 'node-flag'
    elc_flag = 'elc-flag'


class EnumerationEnum192(Enum):
    readvertisement = 'readvertisement'
    node = 'node'
    no_php = 'no-php'
    explicit_null = 'explicit-null'
    value = 'value'
    local = 'local'


class EnumerationEnum193(Enum):
    external_flag = 'external-flag'
    readvertisement_flag = 'readvertisement-flag'
    node_flag = 'node-flag'
    elc_flag = 'elc-flag'


class EnumerationEnum194(Enum):
    readvertisement = 'readvertisement'
    node = 'node'
    no_php = 'no-php'
    explicit_null = 'explicit-null'
    value = 'value'
    local = 'local'


class EnumerationEnum195(Enum):
    cleartext = 'cleartext'
    crypto = 'crypto'
    hmac_md5 = 'hmac-md5'


class EnumerationEnum196(Enum):
    internal = 'internal'
    external = 'external'


class EnumerationEnum197(Enum):
    base_mpls_imposition_msd = 'base-mpls-imposition-msd'


class EnumerationEnum198(Enum):
    internal = 'internal'
    external = 'external'


class EnumerationEnum199(Enum):
    spf = 'spf'
    strict_spf = 'strict-spf'


class EnumerationEnum2(Enum):
    up = 'up'
    down = 'down'
    empty = 'empty'
    downloading = 'downloading'
    booting = 'booting'
    starting = 'starting'
    failed = 'failed'
    synchronizing = 'synchronizing'
    upgrading = 'upgrading'
    low_power = 'low-power'
    degraded = 'degraded'
    warm_reboot = 'warm-reboot'
    waiting = 'waiting'


class EnumerationEnum20(Enum):
    mac_limit = 'mac-limit'
    failed_on_slots = 'failed-on-slots'
    no_destination_index = 'no-destination-index'
    reserved = 'reserved'


class EnumerationEnum200(Enum):
    spf = 'spf'
    strict_spf = 'strict-spf'


class EnumerationEnum201(Enum):
    base_mpls_imposition_msd = 'base-mpls-imposition-msd'


class EnumerationEnum202(Enum):
    spf = 'spf'
    strict_spf = 'strict-spf'


class EnumerationEnum203(Enum):
    spf = 'spf'
    strict_spf = 'strict-spf'


class EnumerationEnum204(Enum):
    base_mpls_imposition_msd = 'base-mpls-imposition-msd'


class EnumerationEnum205(Enum):
    dropped = 'dropped'
    ingress_and_dropped = 'ingress-and-dropped'
    egress_ingress_and_dropped = 'egress-ingress-and-dropped'


class EnumerationEnum206(Enum):
    field_1 = '1'
    field_2 = '2'
    field_3 = '3'


class EnumerationEnum207(Enum):
    dropped = 'dropped'
    ingress_and_dropped = 'ingress-and-dropped'
    egress_ingress_and_dropped = 'egress-ingress-and-dropped'


class EnumerationEnum208(Enum):
    false = 'false'
    link = 'link'
    area = 'area'
    as_ = 'as'


class EnumerationEnum209(Enum):
    none = 'none'


class EnumerationEnum21(Enum):
    use_system_ipv4_address = 'use-system-ipv4-address'


class EnumerationEnum210(Enum):
    all = 'all'
    hello = 'hello'
    dbdescr = 'dbdescr'
    ls_request = 'ls-request'
    ls_update = 'ls-update'
    ls_ack = 'ls-ack'


class EnumerationEnum211(Enum):
    ingress = 'ingress'
    egress = 'egress'
    in_and_egress = 'in-and-egress'
    drop = 'drop'


class EnumerationEnum212(Enum):
    all = 'all'
    router = 'router'
    network = 'network'
    summary = 'summary'
    nssa = 'nssa'
    external = 'external'
    opaque = 'opaque'
    inter_area_prefix = 'inter-area-prefix'
    inter_area_router = 'inter-area-router'
    intra_area_prefix = 'intra-area-prefix'


class EnumerationEnum213(Enum):
    overload = 'overload'
    no_overload = 'no-overload'


class EnumerationEnum214(Enum):
    none = 'none'
    spf_failed = 'spf-failed'
    boot_overload = 'boot-overload'
    manual_overload = 'manual-overload'
    sfm_overload = 'sfm-overload'
    fib_add_fail = 'fib-add-fail'
    rtm_add_fail = 'rtm-add-fail'
    rtr_adv_lsa_limit = 'rtr-adv-lsa-limit'


class EnumerationEnum215(Enum):
    none = 'none'
    bgp_sig_recv = 'bgp-sig-recv'
    timer_expired = 'timer-expired'
    manual_exit = 'manual-exit'
    sfm_overload_done = 'sfm-overload-done'


class EnumerationEnum216(Enum):
    type_1 = 'TYPE_1'
    type_2 = 'TYPE_2'


class EnumerationEnum217(Enum):
    link = 'LINK'
    area = 'AREA'
    as_ = 'AS'


class EnumerationEnum218(Enum):
    unknown = 'UNKNOWN'
    software_restart = 'SOFTWARE_RESTART'
    software_reload_upgrade = 'SOFTWARE_RELOAD_UPGRADE'
    control_processor_switch = 'CONTROL_PROCESSOR_SWITCH'


class EnumerationEnum219(Enum):
    unknown = 'UNKNOWN'


class EnumerationEnum22(Enum):
    dynamic = 'dynamic'


class EnumerationEnum220(Enum):
    unspecified = 'UNSPECIFIED'
    intra_area = 'INTRA_AREA'
    inter_area = 'INTER_AREA'
    as_external = 'AS_EXTERNAL'
    nssa_external = 'NSSA_EXTERNAL'


class EnumerationEnum221(Enum):
    ipv4_unicast = 'IPV4_UNICAST'


class EnumerationEnum222(Enum):
    ipv4_unicast = 'IPV4_UNICAST'


class EnumerationEnum223(Enum):
    broadcast = 'broadcast'
    point_to_point = 'point-to-point'


class EnumerationEnum224(Enum):
    none = 'none'
    all = 'all'
    except_own_rtrlsa = 'except-own-rtrlsa'
    except_own_rtrlsa_and_defaults = 'except-own-rtrlsa-and-defaults'


class EnumerationEnum225(Enum):
    all = 'all'
    hello = 'hello'
    dbdescr = 'dbdescr'
    ls_request = 'ls-request'
    ls_update = 'ls-update'
    ls_ack = 'ls-ack'


class EnumerationEnum226(Enum):
    ingress = 'ingress'
    egress = 'egress'
    in_and_egress = 'in-and-egress'
    drop = 'drop'


class EnumerationEnum227(Enum):
    not_helping = 'not-helping'
    helping = 'helping'


class EnumerationEnum228(Enum):
    none = 'none'
    in_progress = 'in-progress'
    completed = 'completed'
    timed_out = 'timed-out'
    topology_changed = 'topology-changed'
    bfd_down = 'bfd-down'


class EnumerationEnum229(Enum):
    unknown = 'unknown'
    sw_restart = 'sw-restart'
    sw_reload = 'sw-reload'
    switch_red = 'switch-red'


class EnumerationEnum23(Enum):
    mpls = 'mpls'


class EnumerationEnum230(Enum):
    down = 'down'
    loopback = 'loopback'
    waiting = 'waiting'
    point_to_point = 'point-to-point'
    designated_router = 'designated-router'
    backup_designated_router = 'backup-designated-router'
    other_designated_router = 'other-designated-router'


class EnumerationEnum231(Enum):
    link = 'LINK'
    area = 'AREA'
    as_ = 'AS'


class EnumerationEnum232(Enum):
    unknown = 'UNKNOWN'
    software_restart = 'SOFTWARE_RESTART'
    software_reload_upgrade = 'SOFTWARE_RELOAD_UPGRADE'
    control_processor_switch = 'CONTROL_PROCESSOR_SWITCH'


class EnumerationEnum233(Enum):
    unknown = 'UNKNOWN'


class EnumerationEnum234(Enum):
    unspecified = 'UNSPECIFIED'
    intra_area = 'INTRA_AREA'
    inter_area = 'INTER_AREA'
    as_external = 'AS_EXTERNAL'
    nssa_external = 'NSSA_EXTERNAL'


class EnumerationEnum235(Enum):
    ipv4_unicast = 'IPV4_UNICAST'


class EnumerationEnum236(Enum):
    ipv4_unicast = 'IPV4_UNICAST'


class EnumerationEnum237(Enum):
    wait_for_ldp_adjacency = 'wait-for-LDP-adjacency'
    hold_down_timer_active = 'hold-down-timer-active'
    end_of_lib_received = 'end-of-lib-received'
    hold_down_timer_expired = 'hold-down-timer-expired'
    manual_exit = 'manual-exit'
    disabled = 'disabled'


class EnumerationEnum238(Enum):
    type_1 = 'TYPE_1'
    type_2 = 'TYPE_2'


class EnumerationEnum239(Enum):
    link = 'LINK'
    area = 'AREA'
    as_ = 'AS'


class EnumerationEnum24(Enum):
    admin_disabled = 'admin-disabled'
    no_nexthop_address = 'no-nexthop-address'
    network_instance_oper_down = 'network-instance-oper-down'
    bgp_vpn_instance_oper_down = 'bgp-vpn-instance-oper-down'
    no_mpls_label = 'no-mpls-label'
    tag_set_not_resolved = 'tag-set-not-resolved'


class EnumerationEnum240(Enum):
    unknown = 'UNKNOWN'
    software_restart = 'SOFTWARE_RESTART'
    software_reload_upgrade = 'SOFTWARE_RELOAD_UPGRADE'
    control_processor_switch = 'CONTROL_PROCESSOR_SWITCH'


class EnumerationEnum241(Enum):
    unknown = 'UNKNOWN'


class EnumerationEnum242(Enum):
    unspecified = 'UNSPECIFIED'
    intra_area = 'INTRA_AREA'
    inter_area = 'INTER_AREA'
    as_external = 'AS_EXTERNAL'
    nssa_external = 'NSSA_EXTERNAL'


class EnumerationEnum243(Enum):
    ipv4_unicast = 'IPV4_UNICAST'


class EnumerationEnum244(Enum):
    ipv4_unicast = 'IPV4_UNICAST'


class EnumerationEnum245(Enum):
    none = 'none'
    remove = 'remove'


class EnumerationEnum246(Enum):
    strict = 'strict'
    loose = 'loose'


class EnumerationEnum247(Enum):
    none = 'none'
    link = 'link'
    node = 'node'
    srlg_link = 'srlg-link'
    srlg_node = 'srlg-node'


class EnumerationEnum248(Enum):
    stateful_delegate = 'stateful-delegate'
    stateful_pce = 'stateful-pce'
    stateful_optimize = 'stateful-optimize'
    segment_routing_path = 'segment-routing-path'
    rsvp_path = 'rsvp-path'
    optical_gmpls = 'optical-gmpls'
    pce_initiated_lsp = 'pce-initiated-lsp'
    stateless = 'stateless'
    p2mp = 'p2mp'
    p2mp_delegate = 'p2mp-delegate'
    p2mp_initiate = 'p2mp-initiate'
    association = 'association'
    multipath = 'multipath'


class EnumerationEnum249(Enum):
    up = 'up'
    down = 'down'
    going_up = 'going-up'
    going_down = 'going-down'
    failed = 'failed'
    failed_permanently = 'failed-permanently'


class EnumerationEnum25(Enum):
    up = 'up'
    down = 'down'


class EnumerationEnum250(Enum):
    rsvp_p2p = 'rsvp-p2p'
    rsvp_p2mp = 'rsvp-p2mp'
    segment_routing = 'segment-routing'
    pce_initiated_segment_routing = 'pce-initiated-segment-routing'


class EnumerationEnum251(Enum):
    down = 'down'
    up = 'up'
    active = 'active'
    going_down = 'going-down'
    going_up = 'going-up'


class EnumerationEnum252(Enum):
    not_applicable = 'not-applicable'
    mbb_in_progress = 'mbb-in-progress'
    mbb_fail = 'mbb-fail'
    mbb_success = 'mbb-success'
    update_delegation = 'update-delegation'
    lsp_down = 'lsp-down'


class EnumerationEnum253(Enum):
    current = 'current'
    in_progress = 'in-progress'
    pending = 'pending'


class EnumerationEnum254(Enum):
    not_applicable = 'not-applicable'
    unknown_reason = 'unknown-reason'
    limit_reached_for_pce_lsps = 'limit-reached-for-pce-lsps'
    too_many_pending_lsp_updates = 'too-many-pending-lsp-updates'
    unacceptable_parameters = 'unacceptable-parameters'
    internal_error = 'internal-error'
    lsp_admin_down = 'lsp-admin-down'
    lsp_preempted = 'lsp-preempted'
    rsvp_signaling_error = 'rsvp-signaling-error'


class EnumerationEnum255(Enum):
    strict = 'strict'
    loose = 'loose'


class EnumerationEnum256(Enum):
    strict = 'strict'
    loose = 'loose'


class EnumerationEnum257(Enum):
    strict = 'strict'
    loose = 'loose'


class EnumerationEnum258(Enum):
    none = 'none'
    link = 'link'
    node = 'node'
    srlg_link = 'srlg-link'
    srlg_node = 'srlg-node'


class EnumerationEnum259(Enum):
    diversity = 'diversity'
    policy = 'policy'


class EnumerationEnum26(Enum):
    disabled = 'disabled'
    delete = 'delete'
    replace = 'replace'


class EnumerationEnum260(Enum):
    unknown = 'unknown'
    request_parameter = 'request-parameter'
    sent_for_compute = 'sent-for-compute'
    error_received = 'error-received'
    notify_received = 'notify-received'
    cancel = 'cancel'
    compute_received = 'compute-received'


class EnumerationEnum261(Enum):
    igp_metric = 'igp-metric'
    te_metric = 'te-metric'
    hop_count = 'hop-count'


class EnumerationEnum262(Enum):
    not_initialized = 'not-initialized'
    in_progress = 'in-progress'
    done = 'done'


class EnumerationEnum263(Enum):
    all = 'all'
    query = 'query'
    v1_report = 'v1-report'
    v2_report = 'v2-report'
    v2_leave = 'v2-leave'
    v3_report = 'v3-report'


class EnumerationEnum264(Enum):
    dropped = 'dropped'
    ingress_and_dropped = 'ingress-and-dropped'
    egress_ingress_and_dropped = 'egress-ingress-and-dropped'


class EnumerationEnum265(Enum):
    admin_disabled = 'admin-disabled'


class EnumerationEnum266(Enum):
    disabled = 'disabled'


class EnumerationEnum267(Enum):
    indefinite = 'indefinite'


class EnumerationEnum268(Enum):
    stop_learning = 'stop-learning'
    blackhole = 'blackhole'
    oper_down = 'oper-down'


class EnumerationEnum269(Enum):
    sub_interface = 'sub-interface'
    blackhole = 'blackhole'
    irb_interface = 'irb-interface'
    vxlan = 'vxlan'
    reserved = 'reserved'
    evpn_mpls = 'evpn-mpls'
    connection_point = 'connection-point'


class EnumerationEnum27(Enum):
    available = 'available'
    unavailable = 'unavailable'


class EnumerationEnum270(Enum):
    indefinite = 'indefinite'


class EnumerationEnum271(Enum):
    admin_down = 'admin-down'
    no_mcid = 'no-mcid'
    tag_set_not_resolved = 'tag-set-not-resolved'


class EnumerationEnum272(Enum):
    never = 'never'


class EnumerationEnum273(Enum):
    never = 'never'


class EnumerationEnum274(Enum):
    indefinite = 'indefinite'


class EnumerationEnum275(Enum):
    request = 'request'
    reply = 'reply'


class EnumerationEnum276(Enum):
    detail = 'detail'
    receive = 'receive'
    send = 'send'


class EnumerationEnum277(Enum):
    active = 'active'
    in_active = 'in-active'
    pending = 'pending'


class EnumerationEnum278(Enum):
    indefinite = 'indefinite'


class EnumerationEnum279(Enum):
    disabled = 'disabled'


class EnumerationEnum28(Enum):
    enable = 'enable'
    disable = 'disable'


class EnumerationEnum280(Enum):
    static = 'static'
    dynamic = 'dynamic'
    evpn = 'evpn'
    duplicate = 'duplicate'


class EnumerationEnum281(Enum):
    admin_down = 'admin-down'
    no_mcid = 'no-mcid'
    tag_set_not_resolved = 'tag-set-not-resolved'


class EnumerationEnum282(Enum):
    never = 'never'


class EnumerationEnum283(Enum):
    never = 'never'


class EnumerationEnum284(Enum):
    indefinite = 'indefinite'


class EnumerationEnum285(Enum):
    router = 'router'
    host = 'host'
    router_host = 'router-host'


class EnumerationEnum286(Enum):
    solicitation = 'solicitation'
    advertisement = 'advertisement'


class EnumerationEnum287(Enum):
    detail = 'detail'
    receive = 'receive'
    send = 'send'


class EnumerationEnum288(Enum):
    router = 'router'
    host = 'host'


class EnumerationEnum289(Enum):
    indefinite = 'indefinite'


class EnumerationEnum29(Enum):
    available = 'available'
    unavailable = 'unavailable'


class EnumerationEnum290(Enum):
    disabled = 'disabled'


class EnumerationEnum291(Enum):
    blackhole = 'blackhole'


class EnumerationEnum292(Enum):
    mac_limit = 'mac-limit'
    failed_on_slots = 'failed-on-slots'
    no_destination_index = 'no-destination-index'
    reserved = 'reserved'


class EnumerationEnum293(Enum):
    add = 'add'
    delete = 'delete'
    modify = 'modify'
    none = 'none'


class EnumerationEnum294(Enum):
    true = 'true'
    false = 'false'
    not_applicable = 'not-applicable'


class EnumerationEnum295(Enum):
    true = 'true'
    false = 'false'
    not_applicable = 'not-applicable'


class EnumerationEnum296(Enum):
    gre = 'gre'
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'
    mpls = 'mpls'


class EnumerationEnum297(Enum):
    pop = 'pop'
    swap = 'swap'


class EnumerationEnum298(Enum):
    vxlan = 'vxlan'
    mpls = 'mpls'


class EnumerationEnum299(Enum):
    active = 'active'
    inactive = 'inactive'


class EnumerationEnum3(Enum):
    admin_down = 'admin-down'
    no_mcid = 'no-mcid'


class EnumerationEnum30(Enum):
    waiting = 'waiting'
    started = 'started'
    partial = 'partial'
    timeout = 'timeout'
    converged = 'converged'


class EnumerationEnum300(Enum):
    out_of_tunnel_resources = 'out-of-tunnel-resources'


class EnumerationEnum301(Enum):
    vxlan = 'vxlan'
    mpls = 'mpls'


class EnumerationEnum302(Enum):
    active = 'active'
    inactive = 'inactive'


class EnumerationEnum303(Enum):
    out_of_tunnel_resources = 'out-of-tunnel-resources'


class EnumerationEnum304(Enum):
    disabled = 'disabled'


class EnumerationEnum305(Enum):
    use_net_instance_action = 'use-net-instance-action'
    stop_learning = 'stop-learning'
    blackhole = 'blackhole'
    oper_down = 'oper-down'


class EnumerationEnum306(Enum):
    indefinite = 'indefinite'


class EnumerationEnum307(Enum):
    mac_limit = 'mac-limit'
    failed_on_slots = 'failed-on-slots'
    no_destination_index = 'no-destination-index'
    reserved = 'reserved'


class EnumerationEnum308(Enum):
    mac_dup_detected = 'mac-dup-detected'
    associations_oper_down = 'associations-oper-down'
    no_associations = 'no-associations'


class EnumerationEnum309(Enum):
    admin_disabled = 'admin-disabled'
    network_instance_oper_down = 'network-instance-oper-down'
    no_ingress_vc_label = 'no-ingress-vc-label'
    no_egress_vc_label = 'no-egress-vc-label'
    network_instance_mtu_mismatch = 'network-instance-mtu-mismatch'
    remote_system_fault_status_bits = 'remote-system-fault-status-bits'
    evpn_route_conflict = 'evpn-route-conflict'
    transport_tunnel_oper_down = 'transport-tunnel-oper-down'
    no_destination_id = 'no-destination-id'
    connection_point_dup_detect = 'connection-point-dup-detect'


class EnumerationEnum31(Enum):
    prefer = 'prefer'
    require = 'require'
    disabled = 'disabled'


class EnumerationEnum310(Enum):
    ethernet = 'ethernet'
    vlan = 'vlan'


class EnumerationEnum311(Enum):
    pseudowire_forwarding = 'pseudowire-forwarding'
    pseudowire_not_forwarding = 'pseudowire-not-forwarding'
    local_attachment_circuit_ingress_fault = 'local-attachment-circuit-ingress-fault'
    local_attachment_circuit_egress_fault = 'local-attachment-circuit-egress-fault'
    provider_service_network_ingress_fault = 'provider-service-network-ingress-fault'
    provider_service_network_egress_fault = 'provider-service-network-egress-fault'
    pseudowire_forwarding_standby = 'pseudowire-forwarding-standby'
    pseudowire_request_switchover = 'pseudowire-request-switchover'


class EnumerationEnum312(Enum):
    available = 'available'
    unavailable = 'unavailable'


class EnumerationEnum313(Enum):
    isis = 'isis'
    direct = 'direct'


class EnumerationEnum314(Enum):
    bgp = 'bgp'


class EnumerationEnum315(Enum):
    bgp = 'bgp'


class EnumerationEnum316(Enum):
    pbr_policy = 'pbr-policy'
    vrf_selection_policy = 'vrf-selection-policy'


class EnumerationEnum317(Enum):
    ipv6_hop = 'ipv6-hop'
    icmp = 'icmp'
    igmp = 'igmp'
    ggp = 'ggp'
    ipv4 = 'ipv4'
    st = 'st'
    tcp = 'tcp'
    egp = 'egp'
    igp = 'igp'
    udp = 'udp'
    ipv6 = 'ipv6'
    idrp = 'idrp'
    rsvp = 'rsvp'
    gre = 'gre'
    esp = 'esp'
    ah = 'ah'
    icmp6 = 'icmp6'
    no_next_hdr = 'no-next-hdr'
    ipv6_dest_opts = 'ipv6-dest-opts'
    eigrp = 'eigrp'
    ospf = 'ospf'
    pim = 'pim'
    vrrp = 'vrrp'
    l2tp = 'l2tp'
    sctp = 'sctp'
    mpls_in_ip = 'mpls-in-ip'
    rohc = 'rohc'


class EnumerationEnum318(Enum):
    cs0 = 'CS0'
    le = 'LE'
    cs1 = 'CS1'
    af11 = 'AF11'
    af12 = 'AF12'
    af13 = 'AF13'
    cs2 = 'CS2'
    af21 = 'AF21'
    af22 = 'AF22'
    af23 = 'AF23'
    cs3 = 'CS3'
    af31 = 'AF31'
    af32 = 'AF32'
    af33 = 'AF33'
    cs4 = 'CS4'
    af41 = 'AF41'
    af42 = 'AF42'
    af43 = 'AF43'
    cs5 = 'CS5'
    ef = 'EF'
    cs6 = 'CS6'
    cs7 = 'CS7'


class EnumerationEnum319(Enum):
    acap = 'acap'
    afp_tcp = 'afp-tcp'
    arns = 'arns'
    asf_rmcp = 'asf-rmcp'
    ashare = 'ashare'
    atalk_rm = 'atalk-rm'
    aurp = 'aurp'
    auth = 'auth'
    bfd = 'bfd'
    bfd_echo = 'bfd-echo'
    bftp = 'bftp'
    bgmp = 'bgmp'
    bgp = 'bgp'
    bootpc = 'bootpc'
    bootps = 'bootps'
    ccso_ns = 'ccso-ns'
    chargen = 'chargen'
    cisco_tdp = 'cisco-tdp'
    citadel = 'citadel'
    clearcase = 'clearcase'
    commerce = 'commerce'
    courier = 'courier'
    daytime = 'daytime'
    dhcpv6_client = 'dhcpv6-client'
    dhcpv6_server = 'dhcpv6-server'
    dhcp_failover = 'dhcp-failover'
    dicom = 'dicom'
    discard = 'discard'
    dnsix = 'dnsix'
    domain = 'domain'
    dsp = 'dsp'
    echo = 'echo'
    epp = 'epp'
    esro = 'esro'
    exec = 'exec'
    finger = 'finger'
    ftp = 'ftp'
    ftp_data = 'ftp-data'
    ftps = 'ftps'
    ftps_data = 'ftps-data'
    godi = 'godi'
    gopher = 'gopher'
    gtp_c = 'gtp-c'
    gtp_prime = 'gtp-prime'
    gtp_u = 'gtp-u'
    ha_cluster = 'ha-cluster'
    hostname = 'hostname'
    hp_alarm_mgr = 'hp-alarm-mgr'
    http = 'http'
    http_alt = 'http-alt'
    http_mgmt = 'http-mgmt'
    http_rpc = 'http-rpc'
    https = 'https'
    ieee_mms_ssl = 'ieee-mms-ssl'
    imap = 'imap'
    imap3 = 'imap3'
    imaps = 'imaps'
    ipp = 'ipp'
    ipsec = 'ipsec'
    ipx = 'ipx'
    irc = 'irc'
    iris_beep = 'iris-beep'
    isakmp = 'isakmp'
    isakmp_nat = 'isakmp-nat'
    iscsi = 'iscsi'
    iso_tsap = 'iso-tsap'
    kerberos = 'kerberos'
    kerberos_adm = 'kerberos-adm'
    klogin = 'klogin'
    kpasswd = 'kpasswd'
    kshell = 'kshell'
    l2tp = 'l2tp'
    ldap = 'ldap'
    ldaps = 'ldaps'
    ldp = 'ldp'
    lmp = 'lmp'
    login = 'login'
    lpd = 'lpd'
    lsp_ping = 'lsp-ping'
    mac_server_adm = 'mac-server-adm'
    matip_a = 'matip-a'
    matip_b = 'matip-b'
    micro_bfd = 'micro-bfd'
    microsoft_ds = 'microsoft-ds'
    mobile_ip = 'mobile-ip'
    monitor = 'monitor'
    mpp = 'mpp'
    mssql_m = 'mssql-m'
    mssql_s = 'mssql-s'
    msdp = 'msdp'
    ms_exchange = 'ms-exchange'
    msp = 'msp'
    multihop_bfd = 'multihop-bfd'
    nas = 'nas'
    ncp = 'ncp'
    netrjs_1 = 'netrjs-1'
    netrjs_2 = 'netrjs-2'
    netrjs_3 = 'netrjs-3'
    netrjs_4 = 'netrjs-4'
    netbios_data = 'netbios-data'
    netbios_ns = 'netbios-ns'
    netbios_ss = 'netbios-ss'
    netnews = 'netnews'
    netwall = 'netwall'
    new_rwho = 'new-rwho'
    nfs = 'nfs'
    nntp = 'nntp'
    nntps = 'nntps'
    ntp = 'ntp'
    odmr = 'odmr'
    olsr = 'olsr'
    openvpn = 'openvpn'
    pim_auto_rp = 'pim-auto-rp'
    pkix_timestamp = 'pkix-timestamp'
    pop2 = 'pop2'
    pop3 = 'pop3'
    pop3s = 'pop3s'
    pptp = 'pptp'
    ptp_event = 'ptp-event'
    ptp_general = 'ptp-general'
    print_srv = 'print-srv'
    qmtp = 'qmtp'
    qotd = 'qotd'
    radius = 'radius'
    radius_acct = 'radius-acct'
    remote_mail = 'remote-mail'
    remotefs = 'remotefs'
    remotecmd = 'remotecmd'
    rip = 'rip'
    rje = 'rje'
    rlp = 'rlp'
    rlzdb = 'rlzdb'
    rmc = 'rmc'
    rmonitor = 'rmonitor'
    rpc2portmap = 'rpc2portmap'
    rsync = 'rsync'
    rtelnet = 'rtelnet'
    rtsp = 'rtsp'
    sgmp = 'sgmp'
    silc = 'silc'
    smux = 'smux'
    sna_gw = 'sna-gw'
    snmp = 'snmp'
    snmp_trap = 'snmp-trap'
    snpp = 'snpp'
    smtp = 'smtp'
    sql_svcs = 'sql-svcs'
    sql = 'sql'
    ssh = 'ssh'
    submission = 'submission'
    sunrpc = 'sunrpc'
    svcloc = 'svcloc'
    syslog = 'syslog'
    systat = 'systat'
    tacacs = 'tacacs'
    talk = 'talk'
    tcpmux = 'tcpmux'
    tcpnethaspsrv = 'tcpnethaspsrv'
    tftp = 'tftp'
    time = 'time'
    timed = 'timed'
    ups = 'ups'
    xdmcp = 'xdmcp'
    xns_ch = 'xns-ch'
    xns_mail = 'xns-mail'
    xns_time = 'xns-time'
    z3950 = 'z3950'


class EnumerationEnum32(Enum):
    prefer = 'prefer'
    require = 'require'
    disabled = 'disabled'


class EnumerationEnum320(Enum):
    gre = 'gre'


class EnumerationEnum321(Enum):
    available = 'available'
    unavailable = 'unavailable'


class EnumerationEnum322(Enum):
    pop = 'pop'
    swap = 'swap'


class EnumerationEnum323(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum324(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum325(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum326(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum327(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum328(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum329(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum33(Enum):
    waiting = 'waiting'
    started = 'started'
    partial = 'partial'
    timeout = 'timeout'
    converged = 'converged'


class EnumerationEnum330(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum331(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum332(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum333(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum334(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum335(Enum):
    mpls_label = 'mpls-label'
    vni = 'vni'
    transposed_srv6_function = 'transposed-srv6-function'


class EnumerationEnum336(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum337(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum338(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum339(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum34(Enum):
    waiting = 'waiting'
    started = 'started'
    partial = 'partial'
    timeout = 'timeout'
    converged = 'converged'


class EnumerationEnum340(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum341(Enum):
    field_0 = '0'
    field_1 = '1'


class EnumerationEnum342(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum343(Enum):
    field_0 = '0'
    field_1 = '1'


class EnumerationEnum344(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum345(Enum):
    field_0 = '0'
    field_1 = '1'


class EnumerationEnum346(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum347(Enum):
    field_0 = '0'
    field_1 = '1'


class EnumerationEnum348(Enum):
    field_0 = '0'
    field_1 = '1'


class EnumerationEnum349(Enum):
    field_0 = '0'
    field_1 = '1'


class EnumerationEnum35(Enum):
    waiting = 'waiting'
    started = 'started'
    partial = 'partial'
    timeout = 'timeout'
    converged = 'converged'


class EnumerationEnum350(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum351(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum352(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum353(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum354(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum355(Enum):
    field_0 = '0'
    field_1 = '1'


class EnumerationEnum356(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum357(Enum):
    field_0 = '0'
    field_1 = '1'


class EnumerationEnum358(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum359(Enum):
    field_0 = '0'
    field_1 = '1'


class EnumerationEnum36(Enum):
    prefer = 'prefer'
    require = 'require'
    disabled = 'disabled'


class EnumerationEnum360(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum361(Enum):
    field_0 = '0'
    field_1 = '1'


class EnumerationEnum362(Enum):
    field_0 = '0'
    field_1 = '1'


class EnumerationEnum363(Enum):
    field_0 = '0'
    field_1 = '1'


class EnumerationEnum364(Enum):
    unknown = 'unknown'
    none = 'none'
    origin = 'origin'
    as_path_length = 'as-path-length'
    next_hop_cost = 'next-hop-cost'
    med = 'med'
    local_pref = 'local-pref'
    aggregate = 'aggregate'
    originator_id = 'originator-id'
    cluster_list = 'cluster-list'
    extended_community = 'extended-community'
    aigp = 'aigp'
    missing_attribute = 'missing-attribute'
    rtm_pref = 'rtm-pref'
    owner = 'owner'
    eigp_labeled = 'eigp-labeled'
    vpn_route = 'vpn-route'
    ebgp_route = 'ebgp-route'
    peer_ip = 'peer-ip'
    local_peer = 'local-peer'
    multi_path = 'multi-path'
    vpn_rd = 'vpn-rd'
    next_hop_type = 'next-hop-type'
    invalid_route = 'invalid-route'
    origin_validation = 'origin-validation'
    long_live_gr_stale = 'long-live-gr-stale'
    default_originate = 'default-originate'
    fib_install_disabled = 'fib-install-disabled'
    peer_router_id = 'peer-router-id'
    path_identifier = 'path-identifier'


class EnumerationEnum365(Enum):
    as_set = 'as-set'
    as_sequence = 'as-sequence'
    as_confed_sequence = 'as-confed-sequence'
    as_confed_set = 'as-confed-set'


class EnumerationEnum366(Enum):
    igp = 'igp'
    egp = 'egp'
    incomplete = 'incomplete'


class EnumerationEnum367(Enum):
    no_tunnel = 'no-tunnel'
    rsvp_te_p2mp = 'rsvp-te-p2mp'
    mldp_p2mp = 'mldp-p2mp'
    pim_ssm = 'pim-ssm'
    pim_sm = 'pim-sm'
    bidir_pim = 'bidir-pim'
    ingress_replication = 'ingress-replication'
    mldp_mp2mp = 'mldp-mp2mp'
    assisted_replication = 'assisted-replication'
    bier = 'bier'


class EnumerationEnum368(Enum):
    none = 'none'
    ar_replicator = 'ar-replicator'
    ar_leaf = 'ar-leaf'
    reserved = 'reserved'


class EnumerationEnum369(Enum):
    field_0 = '0'
    field_1 = '1'


class EnumerationEnum37(Enum):
    prefer = 'prefer'
    require = 'require'
    disabled = 'disabled'


class EnumerationEnum370(Enum):
    field_0 = '0'
    field_1 = '1'


class EnumerationEnum371(Enum):
    closed = 'closed'
    syn_sent = 'syn-sent'
    syn_received = 'syn-received'
    established = 'established'
    fin_wait1 = 'fin-wait1'
    fin_wait2 = 'fin-wait2'
    close_wait = 'close-wait'
    last_ack = 'last-ack'
    closing = 'closing'
    time_wait = 'time-wait'
    delete_tcb = 'delete-tcb'


class EnumerationEnum372(Enum):
    disable = 'disable'


class EnumerationEnum373(Enum):
    disable = 'disable'


class EnumerationEnum374(Enum):
    none = 'none'
    ecmp_protected = 'ecmp-protected'
    linear = 'linear'


class EnumerationEnum375(Enum):
    available = 'available'
    unavailable = 'unavailable'


class EnumerationEnum376(Enum):
    strict = 'strict'
    loose = 'loose'


class EnumerationEnum377(Enum):
    sr_mpls_colored = 'sr-mpls-colored'
    sr_mpls_uncolored = 'sr-mpls-uncolored'


class EnumerationEnum378(Enum):
    enable = 'enable'
    disable = 'disable'


class EnumerationEnum379(Enum):
    local = 'local'


class EnumerationEnum38(Enum):
    waiting = 'waiting'
    started = 'started'
    partial = 'partial'
    timeout = 'timeout'
    converged = 'converged'


class EnumerationEnum380(Enum):
    disable = 'disable'


class EnumerationEnum381(Enum):
    up = 'up'
    down = 'down'


class EnumerationEnum382(Enum):
    primary = 'primary'
    secondary = 'secondary'
    standby = 'standby'


class EnumerationEnum383(Enum):
    local_cspf = 'local-cspf'
    pce = 'pce'


class EnumerationEnum384(Enum):
    igp = 'igp'
    te = 'te'
    delay = 'delay'


class EnumerationEnum385(Enum):
    no_limit = 'no-limit'


class EnumerationEnum386(Enum):
    none = 'none'
    preferred = 'preferred'
    mandated = 'mandated'


class EnumerationEnum387(Enum):
    up = 'up'
    down = 'down'


class EnumerationEnum388(Enum):
    active = 'active'
    inactive = 'inactive'
    backup = 'backup'


class EnumerationEnum389(Enum):
    pcep = 'pcep'
    bgp = 'bgp'
    local = 'local'


class EnumerationEnum39(Enum):
    waiting = 'waiting'
    started = 'started'
    partial = 'partial'
    timeout = 'timeout'
    converged = 'converged'


class EnumerationEnum390(Enum):
    best = 'best'
    primary = 'primary'
    secondary = 'secondary'
    tertiary = 'tertiary'
    other = 'other'


class EnumerationEnum391(Enum):
    active = 'active'
    inactive = 'inactive'
    backup = 'backup'


class EnumerationEnum392(Enum):
    primary = 'primary'
    secondary = 'secondary'
    standby = 'standby'


class EnumerationEnum393(Enum):
    not_applicable = 'not-applicable'
    down = 'down'
    up = 'up'


class EnumerationEnum394(Enum):
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'
    unnum = 'unnum'


class EnumerationEnum395(Enum):
    not_applicable = 'not-applicable'
    node_sid = 'node-sid'
    adjacency_sid = 'adjacency-sid'


class EnumerationEnum396(Enum):
    none = 'none'
    timer_based_reoptimization = 'timer-based-reoptimization'
    manual_resignal = 'manual-resignal'
    pce_update = 'pce-update'


class EnumerationEnum397(Enum):
    success = 'success'
    failure = 'failure'
    path_optimal = 'path-optimal'


class EnumerationEnum398(Enum):
    none = 'none'
    timer_based_reoptimization = 'timer-based-reoptimization'
    manual_resignal = 'manual-resignal'
    pce_update = 'pce-update'


class EnumerationEnum399(Enum):
    success = 'success'
    failure = 'failure'


class EnumerationEnum4(Enum):
    ip_addr_missing = 'ip-addr-missing'
    ip_addr_overlap = 'ip-addr-overlap'
    subif_down = 'subif-down'
    net_inst_down = 'net-inst-down'
    vrf_type_mismatch = 'vrf-type-mismatch'
    mac_dup_detected = 'mac-dup-detected'
    associated_mac_vrf_down = 'associated-mac-vrf-down'
    mac_vrf_association_missing = 'mac-vrf-association-missing'
    ip_vrf_association_missing = 'ip-vrf-association-missing'
    associated_ip_vrf_down = 'associated-ip-vrf-down'
    evpn_mh_standby = 'evpn-mh-standby'
    interface_ref_missing = 'interface-ref-missing'


class EnumerationEnum40(Enum):
    vxlan = 'vxlan'
    mpls = 'mpls'


class EnumerationEnum400(Enum):
    active = 'active'
    inactive = 'inactive'
    backup = 'backup'


class EnumerationEnum401(Enum):
    primary = 'primary'
    secondary = 'secondary'
    standby = 'standby'


class EnumerationEnum402(Enum):
    not_applicable = 'not-applicable'
    down = 'down'
    up = 'up'


class EnumerationEnum403(Enum):
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'
    unnum = 'unnum'


class EnumerationEnum404(Enum):
    not_applicable = 'not-applicable'
    node_sid = 'node-sid'
    adjacency_sid = 'adjacency-sid'


class EnumerationEnum405(Enum):
    none = 'none'
    timer_based_reoptimization = 'timer-based-reoptimization'
    manual_resignal = 'manual-resignal'
    pce_update = 'pce-update'


class EnumerationEnum406(Enum):
    success = 'success'
    failure = 'failure'
    path_optimal = 'path-optimal'


class EnumerationEnum407(Enum):
    none = 'none'
    timer_based_reoptimization = 'timer-based-reoptimization'
    manual_resignal = 'manual-resignal'
    pce_update = 'pce-update'


class EnumerationEnum408(Enum):
    success = 'success'
    failure = 'failure'


class EnumerationEnum409(Enum):
    mpls = 'mpls'
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'


class EnumerationEnum41(Enum):
    none = 'none'
    standard = 'standard'
    extended = 'extended'
    large = 'large'


class EnumerationEnum410(Enum):
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'


class EnumerationEnum411(Enum):
    accept = 'accept'
    reject = 'reject'


class EnumerationEnum42(Enum):
    events = 'events'
    packets = 'packets'
    open = 'open'
    keepalive = 'keepalive'
    graceful_restart = 'graceful-restart'
    timers = 'timers'
    route = 'route'
    notification = 'notification'
    socket = 'socket'
    update = 'update'


class EnumerationEnum43(Enum):
    detail = 'detail'
    receive = 'receive'
    send = 'send'


class EnumerationEnum44(Enum):
    disabled = 'disabled'
    delete = 'delete'
    replace = 'replace'


class EnumerationEnum45(Enum):
    disable = 'disable'


class EnumerationEnum46(Enum):
    disable = 'disable'


class EnumerationEnum47(Enum):
    vxlan = 'vxlan'
    mpls = 'mpls'


class EnumerationEnum48(Enum):
    events = 'events'
    packets = 'packets'
    open = 'open'
    keepalive = 'keepalive'
    graceful_restart = 'graceful-restart'
    timers = 'timers'
    route = 'route'
    notification = 'notification'
    socket = 'socket'
    update = 'update'


class EnumerationEnum49(Enum):
    detail = 'detail'
    receive = 'receive'
    send = 'send'


class EnumerationEnum5(Enum):
    none = 'none'
    bum = 'BUM'
    unknown_unicast = 'unknown-unicast'
    broadcast_mcast = 'broadcast-mcast'


class EnumerationEnum50(Enum):
    ibgp = 'ibgp'
    ebgp = 'ebgp'


class EnumerationEnum51(Enum):
    disabled = 'disabled'
    delete = 'delete'
    replace = 'replace'


class EnumerationEnum52(Enum):
    up = 'up'
    down = 'down'


class EnumerationEnum53(Enum):
    disable = 'disable'


class EnumerationEnum54(Enum):
    disable = 'disable'


class EnumerationEnum55(Enum):
    vxlan = 'vxlan'
    mpls = 'mpls'


class EnumerationEnum56(Enum):
    events = 'events'
    packets = 'packets'
    open = 'open'
    keepalive = 'keepalive'
    graceful_restart = 'graceful-restart'
    timers = 'timers'
    route = 'route'
    notification = 'notification'
    socket = 'socket'
    update = 'update'


class EnumerationEnum57(Enum):
    detail = 'detail'
    receive = 'receive'
    send = 'send'


class EnumerationEnum58(Enum):
    idle = 'idle'
    connect = 'connect'
    active = 'active'
    opensent = 'opensent'
    openconfirm = 'openconfirm'
    established = 'established'


class EnumerationEnum59(Enum):
    idle = 'idle'
    connect = 'connect'
    active = 'active'
    opensent = 'opensent'
    openconfirm = 'openconfirm'
    established = 'established'


class EnumerationEnum6(Enum):
    admin_disabled = 'admin-disabled'
    mac_dup_detected = 'mac-dup-detected'


class EnumerationEnum60(Enum):
    none = 'none'
    start = 'start'
    stop = 'stop'
    open = 'open'
    close = 'close'
    open_fail = 'openFail'
    error = 'error'
    connect_retry = 'connectRetry'
    hold_time = 'holdTime'
    keep_alive = 'keepAlive'
    recv_open = 'recvOpen'
    recv_keep_alive = 'recvKeepAlive'
    recv_update = 'recvUpdate'
    recv_notify = 'recvNotify'
    start_passive = 'startPassive'
    parse_error = 'parseError'
    out_of_memory = 'outOfMemory'
    rtm_limit_exceed = 'rtmLimitExceed'
    out_of_prot_nh_index = 'outOfProtNHIndex'
    out_of_nh_index = 'outOfNHIndex'
    label_alloc_failed = 'labelAllocFailed'
    lsp_id_alloc_failed = 'lspIdAllocFailed'
    collision_resolution = 'collisionResolution'
    admin_shutdown = 'adminShutdown'
    admin_reset = 'adminReset'
    config_change = 'configChange'
    max_prefix_exceed = 'maxPrefixExceed'
    max_pfx_excd_log = 'maxPfxExcdLog'
    tracking_pol_mismatch = 'trackingPolMismatch'
    received_malformed_attr = 'receivedMalformedAttr'
    admin_reset_hard = 'adminResetHard'
    peer_damping = 'peerDamping'


class EnumerationEnum61(Enum):
    mp_bgp = 'MP_BGP'
    route_refresh = 'ROUTE_REFRESH'
    ext_nh_encoding = 'EXT_NH_ENCODING'
    graceful_restart = 'GRACEFUL_RESTART'
    field_4_octet_asn = '4-OCTET_ASN'
    orf_send_excomm = 'ORF_SEND_EXCOMM'
    orf_receive_excomm = 'ORF_RECEIVE_EXCOMM'


class EnumerationEnum62(Enum):
    mp_bgp = 'MP_BGP'
    route_refresh = 'ROUTE_REFRESH'
    ext_nh_encoding = 'EXT_NH_ENCODING'
    graceful_restart = 'GRACEFUL_RESTART'
    field_4_octet_asn = '4-OCTET_ASN'
    orf_send_excomm = 'ORF_SEND_EXCOMM'
    orf_receive_excomm = 'ORF_RECEIVE_EXCOMM'
    add_path = 'ADD_PATH'
    long_lived_gr = 'LONG_LIVED_GR'


class EnumerationEnum63(Enum):
    yes = 'yes'
    no = 'no'
    unknown = 'unknown'


class EnumerationEnum64(Enum):
    message_header_error = 'Message Header Error'
    open_message_error = 'Open Message Error'
    update_message_error = 'Update Message Error'
    hold_timer_error = 'Hold Timer Error'
    finite_state_machine_error = 'Finite State Machine Error'
    cease = 'Cease'


class EnumerationEnum65(Enum):
    connection_not_synchronized = 'Connection Not Synchronized'
    bad_message_length = 'Bad Message Length'
    bad_message_type = 'Bad Message Type'
    unsupported_version_number = 'Unsupported Version Number'
    bad_peer_as = 'Bad Peer As'
    bad_bgp_identifier = 'Bad BGP Identifier'
    unsupported_optional_parameter = 'Unsupported Optional Parameter'
    unacceptable_hold_time = 'Unacceptable Hold Time'
    update_message_error_subcodes = 'UPDATE Message Error subcodes'
    malformed_attribute_list = 'Malformed Attribute List'
    unrecognized_well_known_attribute = 'Unrecognized Well-known Attribute'
    missing_well_known_attribute = 'Missing Well-known Attribute'
    attribute_flags_error = 'Attribute Flags Error'
    attribute_length_error = 'Attribute Length Error'
    invalid_origin_attribute = 'Invalid ORIGIN Attribute'
    invalid_next_hop_attribute = 'Invalid NEXT_HOP Attribute'
    optional_attribute_error = 'Optional Attribute Error'
    invalid_network_field = 'Invalid Network Field'
    malformed_as_path = 'Malformed AS_PATH'
    maximum_number_of_prefixes_reached = 'Maximum Number of Prefixes Reached'
    administrative_shutdown = 'Administrative Shutdown'
    peer_de_configured = 'Peer De-configured'
    administrative_reset = 'Administrative Reset'
    connection_rejected = 'Connection Rejected'
    other_configuration_change = 'Other Configuration Change'
    connection_collision_resolution = 'Connection Collision Resolution'
    out_of_resources = 'Out of Resources'
    unspecific = 'Unspecific'
    hard_reset = 'Hard Reset'
    unsupported_capability = 'Unsupported Capability'


class EnumerationEnum66(Enum):
    message_header_error = 'Message Header Error'
    open_message_error = 'Open Message Error'
    update_message_error = 'Update Message Error'
    hold_timer_error = 'Hold Timer Error'
    finite_state_machine_error = 'Finite State Machine Error'
    cease = 'Cease'


class EnumerationEnum67(Enum):
    connection_not_synchronized = 'Connection Not Synchronized'
    bad_message_length = 'Bad Message Length'
    bad_message_type = 'Bad Message Type'
    unsupported_version_number = 'Unsupported Version Number'
    bad_peer_as = 'Bad Peer As'
    bad_bgp_identifier = 'Bad BGP Identifier'
    unsupported_optional_parameter = 'Unsupported Optional Parameter'
    unacceptable_hold_time = 'Unacceptable Hold Time'
    update_message_error_subcodes = 'UPDATE Message Error subcodes'
    malformed_attribute_list = 'Malformed Attribute List'
    unrecognized_well_known_attribute = 'Unrecognized Well-known Attribute'
    missing_well_known_attribute = 'Missing Well-known Attribute'
    attribute_flags_error = 'Attribute Flags Error'
    attribute_length_error = 'Attribute Length Error'
    invalid_origin_attribute = 'Invalid ORIGIN Attribute'
    invalid_next_hop_attribute = 'Invalid NEXT_HOP Attribute'
    optional_attribute_error = 'Optional Attribute Error'
    invalid_network_field = 'Invalid Network Field'
    malformed_as_path = 'Malformed AS_PATH'
    maximum_number_of_prefixes_reached = 'Maximum Number of Prefixes Reached'
    administrative_shutdown = 'Administrative Shutdown'
    peer_de_configured = 'Peer De-configured'
    administrative_reset = 'Administrative Reset'
    connection_rejected = 'Connection Rejected'
    other_configuration_change = 'Other Configuration Change'
    connection_collision_resolution = 'Connection Collision Resolution'
    out_of_resources = 'Out of Resources'
    unspecific = 'Unspecific'
    hard_reset = 'Hard Reset'
    unsupported_capability = 'Unsupported Capability'


class EnumerationEnum68(Enum):
    auto_derived_from_evi = 'auto-derived-from-evi'
    auto_derived_from_system_ip_0 = 'auto-derived-from-system-ip:0'
    manual = 'manual'
    none = 'none'


class EnumerationEnum69(Enum):
    auto_derived_from_evi = 'auto-derived-from-evi'
    auto_derived_from_esi_bytes_1_6 = 'auto-derived-from-esi-bytes-1-6'
    from_export_policy = 'from-export-policy'
    manual = 'manual'
    none = 'none'


class EnumerationEnum7(Enum):
    system_interface_not_bound = 'system-interface-not-bound'
    system_interface_has_no_ipv4_address = 'system-interface-has-no-ipv4-address'


class EnumerationEnum70(Enum):
    auto_derived_from_evi = 'auto-derived-from-evi'
    auto_derived_from_esi_bytes_1_6 = 'auto-derived-from-esi-bytes-1-6'
    from_import_policy = 'from-import-policy'
    manual = 'manual'
    none = 'none'


class EnumerationEnum71(Enum):
    no_loopback_address_or_rd = 'no-loopback-address-or-rd'
    no_autonomous_system_or_rt = 'no-autonomous-system-or-rt'
    network_instance_oper_down = 'network-instance-oper-down'
    bad_rd_format = 'bad-rd-format'
    none = 'none'


class EnumerationEnum72(Enum):
    triggered = 'triggered'
    operator_forced = 'operator-forced'


class EnumerationEnum73(Enum):
    star_star_rp = 'star-star-rp'
    star_g = 'star-g'
    sg = 'sg'


class EnumerationEnum74(Enum):
    no_info = 'no-info'
    joined = 'joined'
    prune_pend = 'prune-pend'
    pruned = 'pruned'


class EnumerationEnum75(Enum):
    no_info = 'no-info'
    joined = 'joined'
    prune_pend = 'prune-pend'
    pruned = 'pruned'


class EnumerationEnum76(Enum):
    no_info = 'no-info'
    lost_assert = 'lost-assert'
    won_assert = 'won-assert'


class EnumerationEnum77(Enum):
    star_star_rp = 'star-star-rp'
    star_g = 'star-g'
    sg = 'sg'


class EnumerationEnum78(Enum):
    none = 'none'
    active = 'active'
    standby = 'standby'


class EnumerationEnum79(Enum):
    none = 'none'
    multicast_route_table = 'multicast-route-table'
    unicast_route_table = 'unicast-route-table'


class EnumerationEnum8(Enum):
    system_interface_not_bound = 'system-interface-not-bound'
    system_interface_has_no_ipv6_address = 'system-interface-has-no-ipv6-address'


class EnumerationEnum80(Enum):
    not_joined = 'not-joined'
    joined = 'joined'


class EnumerationEnum81(Enum):
    not_joined_star_g = 'not-joined-star-g'
    not_pruned = 'not-pruned'
    pruned = 'pruned'


class EnumerationEnum82(Enum):
    no_info = 'no-info'
    join = 'join'
    join_pending = 'join-pending'
    prune = 'prune'
    null_join = 'null-join'


class EnumerationEnum83(Enum):
    pmsi_rx = 'pmsi-rx'
    pmsi_tx = 'pmsi-tx'


class EnumerationEnum84(Enum):
    tx_join_pending = 'tx-join-pending'
    tx_joined = 'tx-joined'
    rx_not_joined = 'rx-not-joined'
    rx_joined = 'rx-joined'
    rx_joined_tracking = 'rx-joined-tracking'


class EnumerationEnum85(Enum):
    infinity = 'infinity'


class EnumerationEnum86(Enum):
    rstp = 'rstp'
    dot1w = 'dot1w'
    mstp = 'mstp'
    pmstp = 'pmstp'


class EnumerationEnum87(Enum):
    all = 'all'
    query = 'query'
    v1_report = 'v1-report'
    v1_done = 'v1-done'
    v2_report = 'v2-report'


class EnumerationEnum88(Enum):
    dropped = 'dropped'
    ingress_and_dropped = 'ingress-and-dropped'
    egress_ingress_and_dropped = 'egress-ingress-and-dropped'


class EnumerationEnum89(Enum):
    static = 'static'
    dynamic = 'dynamic'
    bgp_smet = 'bgp-smet'
    bgp_sync = 'bgp-sync'


class EnumerationEnum9(Enum):
    vxlan_tunnel_down = 'vxlan-tunnel-down'
    net_inst_down = 'net-inst-down'
    vxlan_if_default_net_inst_source_address_missing = (
        'vxlan-if-default-net-inst-source-address-missing'
    )
    vxlan_if_default_net_inst_source_if_down = (
        'vxlan-if-default-net-inst-source-if-down'
    )
    vrf_type_mismatch = 'vrf-type-mismatch'
    no_mcid = 'no-mcid'


class EnumerationEnum90(Enum):
    include = 'include'
    exclude = 'exclude'


class EnumerationEnum91(Enum):
    field_1 = '1'
    field_2 = '2'


class EnumerationEnum92(Enum):
    forward = 'forward'
    block = 'block'


class EnumerationEnum93(Enum):
    available = 'available'
    unavailable = 'unavailable'


class EnumerationEnum94(Enum):
    ldp_admin_disabled = 'ldp-admin-disabled'
    mpls_admin_disabled = 'mpls-admin-disabled'
    no_system_ipv4_address = 'no-system-ipv4-address'
    net_instance_mgr_down = 'net-instance-mgr-down'
    label_block_unavailable = 'label-block-unavailable'
    no_resource = 'no-resource'
    unknown = 'unknown'


class EnumerationEnum95(Enum):
    ipv4_explicit_null = 'IPV4_EXPLICIT_NULL'
    ipv6_explicit_null = 'IPV6_EXPLICIT_NULL'
    implicit_null = 'IMPLICIT_NULL'


class EnumerationEnum96(Enum):
    primary = 'primary'
    alternate = 'alternate'
    rlfa = 'rlfa'


class EnumerationEnum97(Enum):
    rejected_on_rx = 'rejected-on-rx'
    exceeds_multipath_limit = 'exceeds-multipath-limit'
    exceeds_fec_limit = 'exceeds-fec-limit'
    fec_unresolved = 'fec-unresolved'


class EnumerationEnum98(Enum):
    pop = 'pop'
    swap = 'swap'


class EnumerationEnum99(Enum):
    released = 'released'
    withdrawn = 'withdrawn'
    wdraw_pending = 'wdraw-pending'


class AddressLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str, Field(pattern='^(?=^[0-9A-Fa-f]{2}(\\.[0-9A-Fa-f]{4}){0,6}$).*$')
    ]
    """
    Area adress(es) of the IS. Set of manual area addresses of this IS.
    """


class AdminGroupContainer(BaseModel):
    """
    This container defines sub-TLV 3.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_group: Annotated[
        Optional[List[AdminGroupLeafList]], Field(alias='srl_nokia-isis:admin-group')
    ] = []
    """
    The administrative group sub-TLV contains a 4-octet bit mask assigned by the network administrator

    Each set bit corresponds to one administrative group assigned to the interface. By convention, the least significant bit is referred to as group 0, and the most significant bit is referred to as group 31.
    """


class AdminGroupContainer2(BaseModel):
    """
    This container defines sub-TLV 3.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_group: Annotated[
        Optional[List[AdminGroupLeafList2]], Field(alias='srl_nokia-isis:admin-group')
    ] = []
    """
    The administrative group sub-TLV contains a 4-octet bit mask assigned by the network administrator

    Each set bit corresponds to one administrative group assigned to the interface. By convention, the least significant bit is referred to as group 0, and the most significant bit is referred to as group 31.
    """


class AdminGroupContainer3(BaseModel):
    """
    This container defines sub-TLV 3.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_group: Annotated[
        Optional[List[AdminGroupLeafList3]], Field(alias='srl_nokia-isis:admin-group')
    ] = []
    """
    The administrative group sub-TLV contains a 4-octet bit mask assigned by the network administrator

    Each set bit corresponds to one administrative group assigned to the interface. By convention, the least significant bit is referred to as group 0, and the most significant bit is referred to as group 31.
    """


class AdminGroupContainer4(BaseModel):
    """
    This container defines sub-TLV 3.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_group: Annotated[
        Optional[List[AdminGroupLeafList4]], Field(alias='srl_nokia-isis:admin-group')
    ] = []
    """
    The administrative group sub-TLV contains a 4-octet bit mask assigned by the network administrator

    Each set bit corresponds to one administrative group assigned to the interface. By convention, the least significant bit is referred to as group 0, and the most significant bit is referred to as group 31.
    """


class AfiSafiListEntry3(BaseModel):
    """
    List of AFI/SAFI TLVs that were contained in the neighbor's last GR capability
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[Optional[str], Field(alias='srl_nokia-bgp:name')] = None
    forwarding_preserved: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:forwarding-preserved')
    ] = None
    """
    The F-bit setting in the AFI/SAFI TLV
    """


class AllInterfacesCase(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    all_interfaces: Annotated[
        Optional[AllInterfacesLeaf], Field(alias='srl_nokia-pim:all-interfaces')
    ] = None


class AllInterfacesCase2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    all_interfaces: Annotated[
        Optional[AllInterfacesLeaf2], Field(alias='srl_nokia-pim:all-interfaces')
    ] = None


class AllInterfacesCase3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    all_interfaces: Annotated[
        Optional[AllInterfacesLeaf3], Field(alias='srl_nokia-pim:all-interfaces')
    ] = None


class AllInterfacesCase4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    all_interfaces: Annotated[
        Optional[AllInterfacesLeaf4], Field(alias='srl_nokia-pim:all-interfaces')
    ] = None


class AllInterfacesCase5(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    all_interfaces: Annotated[
        Optional[AllInterfacesLeaf5], Field(alias='srl_nokia-pim:all-interfaces')
    ] = None


class AllInterfacesCase6(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    all_interfaces: Annotated[
        Optional[AllInterfacesLeaf6], Field(alias='srl_nokia-pim:all-interfaces')
    ] = None


class AllCase(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    all: Annotated[Optional[AllLeaf], Field(alias='srl_nokia-mld:all')] = None


class AllCase2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    all: Annotated[Optional[AllLeaf2], Field(alias='srl_nokia-mld:all')] = None


class AllCase3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    all: Annotated[Optional[AllLeaf3], Field(alias='srl_nokia-igmp:all')] = None


class AllCase4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    all: Annotated[Optional[AllLeaf4], Field(alias='srl_nokia-igmp:all')] = None


class AreaAddressContainer(BaseModel):
    """
    This container defines TLV 1.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    Area adress(es) of the IS. Set of manual area addresses of this IS.
    """


class AreaAddressLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str, Field(pattern='^(?=^[0-9A-Fa-f]{2}(\\.[0-9A-Fa-f]{4}){0,6}$).*$')
    ]
    """
    Area address of the neighbor.
    """


class AreaAddressesLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str, Field(pattern='^(?=^[0-9A-Fa-f]{2}(\\.[0-9A-Fa-f]{4}){0,6}$).*$')
    ]
    """
    Each item represents an area address advertised by the LSP.
    """


class AttachedBitContainer(BaseModel):
    """
    This container provides option for handling the ATTached bit in L1 LSPs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ignore: Annotated[Optional[bool], Field(alias='srl_nokia-isis:ignore')] = False
    """
    When set to true, if the attached bit is set on an incoming Level 1 LSP, the local system ignores it.
    In this case the local system does not set a default route to the L1L2 router advertising the PDU with the attached bit set.
    """
    suppress: Annotated[Optional[bool], Field(alias='srl_nokia-isis:suppress')] = False
    """
    When set to true, if the local IS acts as a L1L2 router, then the attached bit is not advertised in locally generated L1 LSPs.
    """


class AttachedRouterLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    A list of the router ID of the routers that are attached to
    the network described by the Network LSA
    """


class AttachedRouterLeafList2(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    List of the routers attached to the network.
    """


class AttachedRoutersContainer(BaseModel):
    """
    All attached routers.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    attached_router: Annotated[
        Optional[List[AttachedRouterLeafList2]],
        Field(alias='srl_nokia-ospf:attached-router'),
    ] = []
    """
    List of the routers attached to the network.
    """


class AttributesContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    attached: Annotated[Optional[bool], Field(alias='srl_nokia-isis:attached')] = None
    """
    Set to true in the L1 LSP when the IS has a Level 2 adjacency.
    """
    overload: Annotated[Optional[bool], Field(alias='srl_nokia-isis:overload')] = None
    """
    Set to true when the IS is in overload state and should be avoided for transit.
    """
    level1_is_type: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:level1-is-type')
    ] = None
    """
    Set to true when the router participates in L1
    """
    level2_is_type: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:level2-is-type')
    ] = None
    """
    Set to true when the router participates in L2
    """


class AuthenticationContainer9(BaseModel):
    """
    Authentication TLV. TLV type = 10
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    auth_type: Annotated[
        Optional[EnumerationEnum195], Field(alias='srl_nokia-isis:auth-type')
    ] = None
    auth_data: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:auth-data',
            pattern='^(?=^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?$).*$',
        ),
    ] = None
    """
    The authentication data
    """


class AutoCostContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    reference_bandwidth: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:reference-bandwidth', ge=1, le=8000000000),
    ] = None
    """
    Configures the reference bandwidth that provides the basis for interface metrics based on link bandwidth.

    If the reference bandwidth is defined, then the cost is calculated using the following formula:
        cost = reference-bandwidth / bandwidth

    When a large reference-bandwidth value is configured, a metric calculation may result in a value higher than the supported protocol cost value. If this occurs, IS-IS automatically reverts to the maximum configurable cost metric.

    If the reference bandwidth is not configured then all interfaces have a default metric of 10.

    Note: To use metrics in excess of 63, wide metrics must be deployed
    """


class BackupPathsContainer(BaseModel):
    """
    Configure backup paths support for the AFI/SAFI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    install: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:install')] = False
    """
    Install a backup path for every NLRI in the address family, when a suitable one exists
    """


class BackupPathsContainer2(BaseModel):
    """
    Configure backup paths support for the AFI/SAFI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    install: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:install')] = False
    """
    Install a backup path for every NLRI in the address family, when a suitable one exists
    """


class BackupPathsContainer3(BaseModel):
    """
    Configure backup paths support for the AFI/SAFI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    install: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:install')] = False
    """
    Install a backup path for every NLRI in the address family, when a suitable one exists
    """


class BackupPathsContainer4(BaseModel):
    """
    Configure backup paths support for the AFI/SAFI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    install: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:install')] = False
    """
    Install a backup path for every NLRI in the address family, when a suitable one exists
    """


class BackupPathsContainer5(BaseModel):
    """
    Configuration of BGP VPN fast reroute
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_unicast: Annotated[
        Optional[Ipv4UnicastContainer4], Field(alias='srl_nokia-bgp-vpn:ipv4-unicast')
    ] = None
    ipv6_unicast: Annotated[
        Optional[Ipv6UnicastContainer4], Field(alias='srl_nokia-bgp-vpn:ipv6-unicast')
    ] = None


class BgpLsContainer(BaseModel):
    """
    When present, topology and TE information related to this protocol instance is installed into the TE database in a format that supports export as BGP-LS routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bgp_ls_identifier: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-traffic-engineering:bgp-ls-identifier', ge=0, le=4294967295
        ),
    ] = None
    """
    BGP-LS identifier value that is sent in the BGP-LS NLRI
    """
    igp_identifier: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-traffic-engineering:igp-identifier',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    Unique identifier of the IGP instance that is sent in the BGP-LS NLRI
    """


class BgpLsContainer2(BaseModel):
    """
    When present, topology and TE information related to this protocol instance is installed into the TE database in a format that supports export as BGP-LS routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bgp_ls_identifier: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:bgp-ls-identifier', ge=0, le=4294967295),
    ] = None
    """
    BGP-LS identifier value that is sent in the BGP-LS NLRI
    """
    igp_identifier: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:igp-identifier', ge=0, le=18446744073709551615),
    ] = None
    """
    Unique identifier of the IGP instance that is sent in the BGP-LS NLRI
    """


class BgpLsContainer3(BaseModel):
    """
    When present, topology and TE information related to this protocol instance is installed into the TE database in a format that supports export as BGP-LS routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bgp_ls_identifier: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:bgp-ls-identifier', ge=0, le=4294967295),
    ] = None
    """
    BGP-LS identifier value that is sent in the BGP-LS NLRI
    """
    igp_identifier: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:igp-identifier', ge=0, le=18446744073709551615),
    ] = None
    """
    Unique identifier of the IGP instance that is sent in the BGP-LS NLRI
    """


class BindingSidContainer2(BaseModel):
    """
    Identifier that opaquely represents the Uncolored Traffic Engineering Policy (a.k.a. SR-TE LSP) to upstream routers
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mpls_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:mpls-label', ge=16, le=1048575),
    ] = None
    """
    MPLS label that represents the Uncolored Traffic Engineering Policy to upstream routers
    """


class BindingSidContainer3(BaseModel):
    """
    Identifier that opaquely represents the Uncolored Traffic Engineering Policy (a.k.a. SR-TE LSP) to upstream routers
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mpls_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:mpls-label', ge=16, le=1048575),
    ] = None
    """
    MPLS label that represents the Uncolored Traffic Engineering Policy to upstream routers
    """


class BlackholeContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    generate_icmp: Annotated[
        Optional[bool], Field(alias='srl_nokia-next-hop-groups:generate-icmp')
    ] = False
    """
    When set to true the router generates ICMP unreachable messages for the dropped packets
    """


class CommunitiesContainer(BaseModel):
    """
    Container for different types of BGP communities
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    community: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:community')
    ] = []
    """
    List of standard 4-byte community values in the COMMUNITY path
    attribute. Each should be displayed in the format <0..65355>:<0..65535>
    """
    ext_community: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:ext-community')
    ] = []
    """
    List of extended 8-byte community values in the COMMUNITY path
    attribute.
    """
    large_community: Annotated[
        Optional[List[LargeCommunityLeafList]],
        Field(alias='srl_nokia-rib-bgp:large-community'),
    ] = []
    """
    List of large 12-byte community values in the LARGE_COMMUNITY path
    attribute. Each should be displayed in the format: <0..4294967295>:<0..4294967295>:<
    0..4294967295>
    """


class CommunitiesContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    add: Annotated[
        Optional[List[Union[BgpStdCommunityTypeType, BgpLargeCommunityTypeType, str]]],
        Field(alias='srl_nokia-aggregate-routes:add'),
    ] = []


class ConstraintListEntry(BaseModel):
    """
    List of the constraints within the Bandwidth Constraints sub-TLV. The BC0 level is indicated by the constraint-id leaf being set to 0, with BCN being indicated by constraint-id N.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    constraint_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:constraint-id', ge=0, le=4294967295)
    ] = None
    """
    Unique reference for the bandwidth constraint level. BC0 is indicated by this leaf being set to zero, with BCN represented by this leaf being set to N.
    """
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The bandwidth constraint, expressed as a 32-bit IEEE floating point number expressed in bytes per second.
    """


class ConstraintListEntry2(BaseModel):
    """
    List of the constraints within the Bandwidth Constraints sub-TLV. The BC0 level is indicated by the constraint-id leaf being set to 0, with BCN being indicated by constraint-id N.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    constraint_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:constraint-id', ge=0, le=4294967295)
    ] = None
    """
    Unique reference for the bandwidth constraint level. BC0 is indicated by this leaf being set to zero, with BCN represented by this leaf being set to N.
    """
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The bandwidth constraint, expressed as a 32-bit IEEE floating point number expressed in bytes per second.
    """


class ConstraintListEntry3(BaseModel):
    """
    List of the constraints within the Bandwidth Constraints sub-TLV. The BC0 level is indicated by the constraint-id leaf being set to 0, with BCN being indicated by constraint-id N.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    constraint_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:constraint-id', ge=0, le=4294967295)
    ] = None
    """
    Unique reference for the bandwidth constraint level. BC0 is indicated by this leaf being set to zero, with BCN represented by this leaf being set to N.
    """
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The bandwidth constraint, expressed as a 32-bit IEEE floating point number expressed in bytes per second.
    """


class ConstraintListEntry4(BaseModel):
    """
    List of the constraints within the Bandwidth Constraints sub-TLV. The BC0 level is indicated by the constraint-id leaf being set to 0, with BCN being indicated by constraint-id N.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    constraint_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:constraint-id', ge=0, le=4294967295)
    ] = None
    """
    Unique reference for the bandwidth constraint level. BC0 is indicated by this leaf being set to zero, with BCN represented by this leaf being set to N.
    """
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The bandwidth constraint, expressed as a 32-bit IEEE floating point number expressed in bytes per second.
    """


class ConstraintsContainer(BaseModel):
    """
    Constraints contained within the Bandwidth Constraints sub-TLV
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    constraint: Annotated[
        Optional[List[ConstraintListEntry]], Field(alias='srl_nokia-isis:constraint')
    ] = None


class ConstraintsContainer2(BaseModel):
    """
    Constraints contained within the Bandwidth Constraints sub-TLV
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    constraint: Annotated[
        Optional[List[ConstraintListEntry2]], Field(alias='srl_nokia-isis:constraint')
    ] = None


class ConstraintsContainer3(BaseModel):
    """
    Constraints contained within the Bandwidth Constraints sub-TLV
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    constraint: Annotated[
        Optional[List[ConstraintListEntry3]], Field(alias='srl_nokia-isis:constraint')
    ] = None


class ConstraintsContainer4(BaseModel):
    """
    Constraints contained within the Bandwidth Constraints sub-TLV
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    constraint: Annotated[
        Optional[List[ConstraintListEntry4]], Field(alias='srl_nokia-isis:constraint')
    ] = None


class ConvergenceContainer(BaseModel):
    """
    Options for configuring address family independent BGP convergence parameters
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    min_wait_to_advertise: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:min-wait-to-advertise', ge=0, le=3600)
    ] = 0
    """
    The minimum amount of time, in seconds, measured from the moment when the first session (configured or dynamic) comes up after a BGP restart, until BGP is allowed to advertise any routes to any peer

    The sessions that are established when this timer expires determines the set of peers from which EOR is expected in order to declare convergence for an address family. A value of 0 means the feature is disabled and all routes are advertised immediately.

    This timer and associated state machine are only restarted by one of the following triggers:
    - BGP instance admin disable/enable
    - tools clear network-instance protocols bgp reset-peer
    - bgp application restart
    - node reboot
    """


class DateAndTimeDeltaType(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$'
        ),
    ]
    """
    When this type is used to store a date and time, show routines should display it as a delta
    with respect to the current date and time in the format 'dddd:hh:mm:ss ago' (for a past
    event) or 'in dddd:hh:mm:ss' (future event), where dddd is the number of days, hh is the
    number of  hours, mm is the number of  minutes and ss is the number of seconds.
    """


class DelayContainer(BaseModel):
    """
    Enter the delay context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    delay_selection: Annotated[
        Optional[EnumerationEnum144], Field(alias='srl_nokia-isis:delay-selection')
    ] = 'static-preferred'
    """
    Delay source advertised by IGP for the interface
    """
    unidirectional_minimum_link_delay: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-isis:unidirectional-minimum-link-delay',
            ge=0,
            le=4294967295,
        ),
    ] = None
    """
    Operational Unidirectional link delay advertised by ISIS
    """


class DestinationIpContainer(BaseModel):
    """
    Packet matching criteria based on destination IPv4 address
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-policy-forwarding:prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$',
        ),
    ] = None
    """
    Match a packet if its destination IP address is within the specified IPv4 prefix.
    """


class DestinationIpContainer2(BaseModel):
    """
    Packet matching criteria based on destination IPv6 address
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-policy-forwarding:prefix',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))$).*$',
        ),
    ] = None
    """
    Match a packet if its destination IP address is within the specified IPv6 prefix.
    """


class EbgpDefaultPolicyContainer(BaseModel):
    """
    Options for controlling the default policies that apply to EBGP sessions
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    import_reject_all: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:import-reject-all')
    ] = True
    """
    When set to true, all inbound routes from any EBGP peer to which no explicit import policy is applied are treated as though they were rejected by policy
    """
    export_reject_all: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:export-reject-all')
    ] = True
    """
    When set to true, all outbound routes towards any EBGP peer to which no explicit export policy is applied are treated as though they were rejected by policy
    """


class EcmpHashingContainer(BaseModel):
    """
    Enables hashing for multicast streams

    This command enables hash-based multicast balancing of traffic over ECMP links and causes PIM joins to be distributed over the multiple ECMP paths based on a hash of S and G (and possibly next-hop IP address).
    When a link in the ECMP set is removed, the multicast flows that were using that link are redistributed over the remaining ECMP links using the same hash algorithm.
    When a link is added to the ECMP set new joins may be allocated to the new link based on the hash algorithm, but existing.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rebalance: Annotated[Optional[bool], Field(alias='srl_nokia-pim:rebalance')] = False
    """
    Enables rebalance for ecmp hashing
    """


class ExportLimitContainer(BaseModel):
    """
    Enter the export-limit context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    number: Annotated[int, Field(alias='srl_nokia-ospf:number', ge=1, le=4294967295)]
    """
    Maximum number of routes or prefixes to be exported into IGP instance from route table
    """
    log_percent: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:log-percent', ge=1, le=100)
    ] = None
    """
    Export limit at which warning a log message and SNMP notification are sent
    """


class ExportRtContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rt: Annotated[
        Optional[
            Union[
                BgpExtCommunityTypeType1,
                BgpExtCommunityTypeType2,
                BgpExtCommunityTypeType3,
                BgpExtCommunityTypeType4,
                BgpExtCommunityTypeType5,
                BgpExtCommunityTypeType6,
                BgpExtCommunityTypeType7,
                BgpExtCommunityTypeType8,
            ]
        ],
        Field(alias='srl_nokia-mvpn-l3:rt'),
    ] = None
    """
    Import this specific Route Target (RT) in the  l3 multicast vpn instance
    """
    unicast: Annotated[Optional[bool], Field(alias='srl_nokia-mvpn-l3:unicast')] = False
    """
    Enable the unicast vrf-target for the MVPN

    When enabled, the l3 multicast vpn will export routes with bgp-vpn route target
    """


class ExtendedAdminGroupContainer(BaseModel):
    """
    This container defines sub-TLV 14.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    extended_admin_group: Annotated[
        Optional[List[ExtendedAdminGroupLeafList]],
        Field(alias='srl_nokia-isis:extended-admin-group'),
    ] = []
    """
    The extended-admin-group sub-TLV is used in addition to the Administrative Groups when it is desirable to make more than 32 colors available for advertisement in a network.
    """


class ExtendedAdminGroupContainer2(BaseModel):
    """
    This container defines sub-TLV 14.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    extended_admin_group: Annotated[
        Optional[List[ExtendedAdminGroupLeafList2]],
        Field(alias='srl_nokia-isis:extended-admin-group'),
    ] = []
    """
    The extended-admin-group sub-TLV is used in addition to the Administrative Groups when it is desirable to make more than 32 colors available for advertisement in a network.
    """


class ExtendedAdminGroupContainer3(BaseModel):
    """
    This container defines sub-TLV 14.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    extended_admin_group: Annotated[
        Optional[List[ExtendedAdminGroupLeafList3]],
        Field(alias='srl_nokia-isis:extended-admin-group'),
    ] = []
    """
    The extended-admin-group sub-TLV is used in addition to the Administrative Groups when it is desirable to make more than 32 colors available for advertisement in a network.
    """


class ExtendedAdminGroupContainer4(BaseModel):
    """
    This container defines sub-TLV 14.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    extended_admin_group: Annotated[
        Optional[List[ExtendedAdminGroupLeafList4]],
        Field(alias='srl_nokia-isis:extended-admin-group'),
    ] = []
    """
    The extended-admin-group sub-TLV is used in addition to the Administrative Groups when it is desirable to make more than 32 colors available for advertisement in a network.
    """


class ExtendedPrefixRangeContainer(BaseModel):
    """
    State parameters relating to the extended prefix range
    sub-TLV of the extended prefix LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:prefix-length', ge=0, le=32)
    ] = None
    """
    The length of the IPv4 prefix contained in the Extended Prefix LSA
    """
    address_family: Annotated[
        Optional[EnumerationEnum222], Field(alias='srl_nokia-ospf:address-family')
    ] = None
    """
    The address family of the prefix contained in the Extended Prefix
    LSA
    """
    range_size: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:range-size', ge=0, le=65535)
    ] = None
    """
    The number of prefixes that are covered by the advertisement.
    """
    inter_area: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:inter-area')] = (
        False
    )
    """
    When this leaf is set to true, then the prefix range is inter-area -
    the flag is set by the ABR that advertises the Extended Prefix Range
    TLV
    """
    prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$',
        ),
    ] = None
    """
    The first prefix in the range of prefixes being described by the
    extended prefix range sub-TLV
    """


class ExtendedPrefixRangeContainer2(BaseModel):
    """
    State parameters relating to the extended prefix range
    sub-TLV of the extended prefix LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:prefix-length', ge=0, le=32)
    ] = None
    """
    The length of the IPv4 prefix contained in the Extended Prefix LSA
    """
    address_family: Annotated[
        Optional[EnumerationEnum236], Field(alias='srl_nokia-ospf:address-family')
    ] = None
    """
    The address family of the prefix contained in the Extended Prefix
    LSA
    """
    range_size: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:range-size', ge=0, le=65535)
    ] = None
    """
    The number of prefixes that are covered by the advertisement.
    """
    inter_area: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:inter-area')] = (
        False
    )
    """
    When this leaf is set to true, then the prefix range is inter-area -
    the flag is set by the ABR that advertises the Extended Prefix Range
    TLV
    """
    prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$',
        ),
    ] = None
    """
    The first prefix in the range of prefixes being described by the
    extended prefix range sub-TLV
    """


class ExtendedPrefixRangeContainer3(BaseModel):
    """
    State parameters relating to the extended prefix range
    sub-TLV of the extended prefix LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:prefix-length', ge=0, le=32)
    ] = None
    """
    The length of the IPv4 prefix contained in the Extended Prefix LSA
    """
    address_family: Annotated[
        Optional[EnumerationEnum244], Field(alias='srl_nokia-ospf:address-family')
    ] = None
    """
    The address family of the prefix contained in the Extended Prefix
    LSA
    """
    range_size: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:range-size', ge=0, le=65535)
    ] = None
    """
    The number of prefixes that are covered by the advertisement.
    """
    inter_area: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:inter-area')] = (
        False
    )
    """
    When this leaf is set to true, then the prefix range is inter-area -
    the flag is set by the ABR that advertises the Extended Prefix Range
    TLV
    """
    prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$',
        ),
    ] = None
    """
    The first prefix in the range of prefixes being described by the
    extended prefix range sub-TLV
    """


class ExternalDbOverflowContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interval: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:interval', ge=0, le=2147483647)
    ] = 0
    limit: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:limit', ge=0, le=2147483647)
    ] = 0


class FailureDetectionContainer(BaseModel):
    """
    Options related to methods of detecting BGP session failure
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    enable_bfd: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:enable-bfd')] = (
        False
    )
    """
    The true setting enables Bi-directional Forwarding Detection on BGP sessions belonging to the peer group
    """
    fast_failover: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:fast-failover')
    ] = True
    """
    The true setting causes EBGP and IBGP sessions to drop immediately (and not wait for hold timer expiry) when the local interface that they depend upon for neighbor reachability goes down
    """


class FailureDetectionContainer2(BaseModel):
    """
    Options related to methods of detecting BGP session failure
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    enable_bfd: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:enable-bfd')] = (
        None
    )
    """
    The true setting enables Bi-directional Forwarding Detection on BGP sessions belonging to the peer group
    """
    fast_failover: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:fast-failover')
    ] = None
    """
    The true setting causes EBGP and IBGP sessions in the peer group to drop immediately (and not wait for hold timer expiry) when the local interface that they depend upon for neighbor reachability goes down
    """


class FailureDetectionContainer3(BaseModel):
    """
    Options related to methods of detecting BGP session failure
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    enable_bfd: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:enable-bfd')] = (
        None
    )
    """
    The true setting enables Bi-directional Forwarding Detection on BGP sessions belonging to the peer group
    """
    fast_failover: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:fast-failover')
    ] = None
    """
    The true setting the EBGP or IBGP session to drop immediately (and not wait for hold timer expiry) when the local interface that it depends upon for neighbor reachability goes down
    """


class FecResolutionContainer(BaseModel):
    """
    Container with options for controlling IP prefix FEC resolution
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    longest_prefix: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:longest-prefix')
    ] = False
    """
    When this is set to true IPv4/IPv6 prefix FECs can be resolved by less-specific IPv4/IPv6 routes in the route table, as long as the prefix bits of the route match the prefix bits of the FEC; the IP route with the longest prefix match is the route that is used to resolve the FEC.

    When this is set to false, IPv4/IPv6 prefix FECs can only be resolved by routes that are an exact match of the FEC in terms of prefix length
    """


class FlagsContainer(BaseModel):
    """
    Flags that characterize the prefix SID
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    re_advertised: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:re-advertised')
    ] = None
    """
    If set the prefix to which this Prefix-SID is attached was propagated from another level or from another protocol.
    """
    node_sid: Annotated[Optional[bool], Field(alias='srl_nokia-isis:node-sid')] = None
    """
    If set the prefix SID refers to the router identified by the prefix.
    """
    penultimate_hop_popping: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:penultimate-hop-popping')
    ] = None
    """
    If set the penultimate hop MUST NOT pop the Prefix-SID before delivering the packet to the node that advertised the Prefix-SID.
    """
    explicit_null: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:explicit-null')
    ] = None
    """
    If set any upstream neighbor of the Prefix-SID originator MUST replace the Prefix-SID with a Prefix-SID that has an Explicit NULL value (0 for IPv4 and 2 for IPv6) before forwarding the packet
    """
    local: Annotated[Optional[bool], Field(alias='srl_nokia-isis:local')] = None
    """
    If set, then the value/index carried by the Prefix-SID has local significance.
    """


class FloodContainer(BaseModel):
    """
    How ARP frames received on a proxy service are flooded into the EVPN network
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    unknown_arp_req: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:unknown-arp-req'),
    ] = True
    """
    Whether to flood ARP requests (with source squelching) when there is no hit in the bridge-table-proxy-arp table
    """
    gratuitous_arp: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:gratuitous-arp'),
    ] = True
    """
    Whether to flood GARP requests or replies into EVPN
    """


class FloodContainer2(BaseModel):
    """
    How Neighbor Discovery frames received on a proxy service are flooded into the EVPN network
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    unknown_neighbor_solicitation: Annotated[
        Optional[bool],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:unknown-neighbor-solicitation'
        ),
    ] = True
    """
    Whether to flood Neighbor Solicitation (NS) messages (with source squelching) into the EVPN network
    """
    unknown_neighbor_advertise_router: Annotated[
        Optional[bool],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:unknown-neighbor-advertise-router'
        ),
    ] = True
    """
    Whether to flood Neighbor Advertisement (NA) replies, for type router, into the EVPN network
    """
    unknown_neighbor_advertise_host: Annotated[
        Optional[bool],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:unknown-neighbor-advertise-host'
        ),
    ] = True
    """
    Whether to flood Neighbor Advertisement (NA) replies, for type host, into the EVPN network
    """


class ForwardingComplexListEntry(BaseModel):
    """
    List of forwarding complexes in the system
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    complex_identifier: Annotated[
        Optional[str], Field(alias='srl_nokia-policy-forwarding:complex-identifier')
    ] = None
    """
    A forwarding complex in the format (slot-number,complex-number).
    """
    tcam_entries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-policy-forwarding:tcam-entries', ge=0, le=65535),
    ] = None
    """
    The number of TCAM entries required to implement this rule.
    """


class GracefulRestartContainer4(BaseModel):
    """
    Attributes for graceful restart
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    helper_enable: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:helper-enable')
    ] = False
    """
    Enable or disable graceful restart as a helper
    """
    max_reconnect_time: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:max-reconnect-time', ge=10, le=1800)
    ] = 120
    """
    Specifies the maximum time interval, in seconds, that this router is willing to wait for the remote LDP peer to reconnect after an LDP communication failure
    """
    max_recovery_time: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:max-recovery-time', ge=30, le=3600)
    ] = 120
    """
    Specifies the maximum time interval, in seconds, that this router is willing to preserve its MPLS forwarding state after receiving the Initialization message from the restarted LDP peer
    """


class GracefulRestartContainer5(BaseModel):
    """
    Graceful restart operational state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    peer_reconnect_time: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:peer-reconnect-time', ge=10, le=1800)
    ] = None
    """
    The requested reconnect time
    """
    peer_recovery_time: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:peer-recovery-time', ge=30, le=3600)
    ] = 120
    """
    The requested recovery time
    """
    peer_restarting: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:peer-restarting')
    ] = None
    """
    If true, the peer is currently in the process of restarting
    """


class GracefulRestartContainer6(BaseModel):
    """
    Container for options related to IS-IS graceful restart
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    helper_mode: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:helper-mode')
    ] = False
    """
    Enable or disable the IS-IS graceful restart helper function

    When this leaf is set, the local system supports retaining forwarding information during a neighbor router's restart.
    """
    acceptable_duration: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:acceptable-duration', ge=1, le=20000)
    ] = 60
    """
    Initial value of the Remaining Time that is advertised in the Restart TLV with Restart Acknowledgement flag set when this router starts to help another router that has just (re)entered Restart mode.
    """


class GracefulRestartContainer7(BaseModel):
    """
    Container for options related to OSPF graceful restart
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    helper_mode: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:helper-mode')
    ] = False
    """
    Enable or disable the OSPF graceful restart helper function
    When this leaf is set, the local system supports retaining
    forwarding information during a neighbor router's restart.
    """
    strict_lsa_checking: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:strict-lsa-checking')
    ] = False


class HelloHoldtimeContainer(BaseModel):
    """
    Container for hello holdtime state information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor_proposed: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:neighbor-proposed', ge=0, le=65535)
    ] = None
    """
    The holdtime value learned from the adjacent LSR
    """
    negotiated: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:negotiated', ge=0, le=65535)
    ] = None
    """
    The holdtime negotiated between this LSR and the adjacent LSR
    """
    remaining: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:remaining', ge=0, le=65535)
    ] = None
    """
    The time remaining until the holdtime timer expires
    """


class HelloHoldtimeContainer2(BaseModel):
    """
    Container for hello holdtime state information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor_proposed: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:neighbor-proposed', ge=0, le=65535)
    ] = None
    """
    The holdtime value learned from the adjacent LSR
    """
    negotiated: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:negotiated', ge=0, le=65535)
    ] = None
    """
    The holdtime negotiated between this LSR and the adjacent LSR
    """
    remaining: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:remaining', ge=0, le=65535)
    ] = None
    """
    The time remaining until the holdtime timer expires
    """


class HelloHoldtimeContainer3(BaseModel):
    """
    Container for hello holdtime state information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor_proposed: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:neighbor-proposed', ge=0, le=65535)
    ] = None
    """
    The holdtime value learned from the adjacent LSR
    """
    negotiated: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:negotiated', ge=0, le=65535)
    ] = None
    """
    The holdtime negotiated between this LSR and the adjacent LSR
    """
    remaining: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:remaining', ge=0, le=65535)
    ] = None
    """
    The time remaining until the holdtime timer expires
    """


class HelloHoldtimeContainer4(BaseModel):
    """
    Container for hello holdtime state information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor_proposed: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:neighbor-proposed', ge=0, le=65535)
    ] = None
    """
    The holdtime value learned from the adjacent LSR
    """
    negotiated: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:negotiated', ge=0, le=65535)
    ] = None
    """
    The holdtime negotiated between this LSR and the adjacent LSR
    """
    remaining: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:remaining', ge=0, le=65535)
    ] = None
    """
    The time remaining until the holdtime timer expires
    """


class HostnameContainer(BaseModel):
    """
    This container defines TLV 137.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    hostname: Annotated[Optional[List[str]], Field(alias='srl_nokia-isis:hostname')] = (
        []
    )
    """
    Name of the node.
    """


class IgmpV3StatesContainer(BaseModel):
    """
    Enter the igmp-v3-states context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    general_query_interval: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:general-query-interval', ge=0, le=4294967295
        ),
    ] = None
    """
    The General Query Interval used by this multicast router
    """
    general_response_interval: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:general-response-interval',
            ge=0,
            le=4294967295,
        ),
    ] = None
    """
    The General Query Response interval used by this multicast router
    """
    robust_count: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:robust-count', ge=0, le=4294967295),
    ] = None
    """
    The Robust Count value used by this multicast router
    """


class IgmpV3StatesContainer2(BaseModel):
    """
    Enter the igmp-v3-states context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    general_query_interval: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:general-query-interval', ge=0, le=4294967295
        ),
    ] = None
    """
    The General Query Interval used by this multicast router
    """
    general_response_interval: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:general-response-interval',
            ge=0,
            le=4294967295,
        ),
    ] = None
    """
    The General Query Response interval used by this multicast router
    """
    robust_count: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:robust-count', ge=0, le=4294967295),
    ] = None
    """
    The Robust Count value used by this multicast router
    """


class ImmediateContainer(BaseModel):
    """
    Options for advertising an overloaded state immediately
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    set_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:set-bit')] = False
    """
    When set to true, the Overload bit is set
    """
    max_metric: Annotated[Optional[bool], Field(alias='srl_nokia-isis:max-metric')] = (
        False
    )
    """
    When set to true transit links are advertised with a wide metric of 0xffffffe and a narrow metric of 0x3f
    """


class ImportRtContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rt: Annotated[
        Optional[
            Union[
                BgpExtCommunityTypeType1,
                BgpExtCommunityTypeType2,
                BgpExtCommunityTypeType3,
                BgpExtCommunityTypeType4,
                BgpExtCommunityTypeType5,
                BgpExtCommunityTypeType6,
                BgpExtCommunityTypeType7,
                BgpExtCommunityTypeType8,
            ]
        ],
        Field(alias='srl_nokia-mvpn-l3:rt'),
    ] = None
    """
    Import Route Target (RT) in the l3 multicast vpn instance
    """
    unicast: Annotated[Optional[bool], Field(alias='srl_nokia-mvpn-l3:unicast')] = False
    """
    Enable the unicast vrf-target for the MVPN

    when enabled the l3 multicast vpn will import routes with bgp-vpn route target
    """


class InformationalCapabilitiesContainer(BaseModel):
    """
    Information related to the capabilities of the advertising
    router within the scope that the opaque RI LSA is being
    advertised
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    graceful_restart_capable: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:graceful-restart-capable')
    ] = False
    """
    When this leaf is set to true, the advertising system is capable of
    OSPF graceful restart.
    """
    graceful_restart_helper: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:graceful-restart-helper')
    ] = False
    """
    When this leaf is set to true, the advertising system is capable of
    being a helper for OSPF graceful restart
    """
    stub_router: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:stub-router')
    ] = False
    """
    When this leaf is set to true, the advertising system is able to
    advertise its status as a stub router
    """
    point_to_point_over_lan: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:point-to-point-over-lan')
    ] = False
    """
    When this leaf is set to true, the advertising system supports treating
    LAN adjacencies as though they were point to point
    """
    experimental_te: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:experimental-te')
    ] = False
    """
    When this leaf is set to ture, the advertising system supports the
    experimental extensions to OSPF for TE described in RFC4973
    """


class InformationalCapabilitiesContainer2(BaseModel):
    """
    Information related to the capabilities of the advertising
    router within the scope that the opaque RI LSA is being
    advertised
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    graceful_restart_capable: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:graceful-restart-capable')
    ] = False
    """
    When this leaf is set to true, the advertising system is capable of
    OSPF graceful restart.
    """
    graceful_restart_helper: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:graceful-restart-helper')
    ] = False
    """
    When this leaf is set to true, the advertising system is capable of
    being a helper for OSPF graceful restart
    """
    stub_router: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:stub-router')
    ] = False
    """
    When this leaf is set to true, the advertising system is able to
    advertise its status as a stub router
    """
    point_to_point_over_lan: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:point-to-point-over-lan')
    ] = False
    """
    When this leaf is set to true, the advertising system supports treating
    LAN adjacencies as though they were point to point
    """
    experimental_te: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:experimental-te')
    ] = False
    """
    When this leaf is set to ture, the advertising system supports the
    experimental extensions to OSPF for TE described in RFC4973
    """


class InformationalCapabilitiesContainer3(BaseModel):
    """
    Information related to the capabilities of the advertising
    router within the scope that the opaque RI LSA is being
    advertised
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    graceful_restart_capable: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:graceful-restart-capable')
    ] = False
    """
    When this leaf is set to true, the advertising system is capable of
    OSPF graceful restart.
    """
    graceful_restart_helper: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:graceful-restart-helper')
    ] = False
    """
    When this leaf is set to true, the advertising system is capable of
    being a helper for OSPF graceful restart
    """
    stub_router: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:stub-router')
    ] = False
    """
    When this leaf is set to true, the advertising system is able to
    advertise its status as a stub router
    """
    point_to_point_over_lan: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:point-to-point-over-lan')
    ] = False
    """
    When this leaf is set to true, the advertising system supports treating
    LAN adjacencies as though they were point to point
    """
    experimental_te: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:experimental-te')
    ] = False
    """
    When this leaf is set to ture, the advertising system supports the
    experimental extensions to OSPF for TE described in RFC4973
    """


class InstanceIdListEntry(BaseModel):
    """
    A list of instance IDs received within TLV 7 within an IS-IS LSP. In the case that more than one instance of TLV 7 is included in the LSP, the instance IDs specified within the instances are concatenated within this list.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    instance_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:instance-id', ge=0, le=65535)
    ] = None
    """
    An Instance Identifier (IID) to uniquely identify an IS-IS instance. When the IID = 0, the list of supported ITIDs MUST NOT be present. An IID-TLV with IID = 0 MUST NOT appear in an SNP or LSP. When the TLV appears (with a non-zero IID) in an SNP or LSP, exactly one ITID. MUST be present indicating the topology with which the PDU is associated. If no ITIDs or multiple ITIDs are present or the IID is zero, then the PDU MUST be ignored.
    """
    topology_id: Annotated[
        Optional[List[TopologyIdLeafList]], Field(alias='srl_nokia-isis:topology-id')
    ] = []
    """
    Instance-Specific Topology Identifiers (ITIDs).
    """


class InstanceIdsContainer(BaseModel):
    """
    This container defines ISIS Instance Identifier TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    instance_id: Annotated[
        Optional[List[InstanceIdListEntry]], Field(alias='srl_nokia-isis:instance-id')
    ] = None


class InvalidReasonContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer10(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer11(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer12(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer13(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer14(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer15(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer16(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer17(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer18(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer19(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer20(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer21(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer22(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer23(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer24(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer25(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer26(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer27(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer28(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer29(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer5(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer6(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer7(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer8(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class InvalidReasonContainer9(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rejected_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:rejected-route')
    ] = None
    """
    Indicates true if the route was rejected by an import policy.
    """
    as_loop: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:as-loop')] = None
    """
    Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.
    """
    next_hop_unresolved: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:next-hop-unresolved')
    ] = None
    """
    Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.
    """
    cluster_loop: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:cluster-loop')
    ] = None
    """
    Indicates true if the BGP route has a cluster-list loop.
    """
    label_allocation_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:label-allocation-failed')
    ] = None
    """
    Indicates true if dynamic-label-block has no more free labels
    """
    fib_programming_failed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:fib-programming-failed')
    ] = None
    """
    Indicates true if FIB programming failed
    """


class IpDuplicationContainer(BaseModel):
    """
    Configuration of the proxy ARP/ND IP duplication procedures
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    monitoring_window: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:monitoring-window', ge=1, le=15
        ),
    ] = 3
    """
    Monitoring window for detecting duplication on a given ip address in the proxy ARP/ND table

    An IP is declared duplicate if it exceeds the num-moves within the monitoring-window.
    """
    num_moves: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:num-moves', ge=3, le=10),
    ] = 5
    """
    Number of moves in the proxy ARP/ND table that an IP is allowed within the monitoring-window

    When the number of moves exceeds this value, the IP address is declared duplicate.
    """
    hold_down_time: Annotated[
        Optional[Union[EnumerationEnum274, HoldDownTimeLeaf21]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:hold-down-time'),
    ] = '9'
    """
    Time to wait from the moment an IP is declared duplicate to the time the IP is removed from the proxy ARP/ND table

    When the duplicate IP is removed, the monitoring process for the IP address is restarted.
    """
    anti_spoof_mac: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:anti-spoof-mac',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    MAC address associated with the optional anti-spoofing mechanism
    """
    static_blackhole: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:static-blackhole'),
    ] = False
    """
    Whether the anti-spoof MAC is programmed as a black hole static-mac in the mac-table
    """


class IpDuplicationContainer2(BaseModel):
    """
    Configuration of the proxy ARP/ND IP duplication procedures
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    monitoring_window: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:monitoring-window', ge=1, le=15
        ),
    ] = 3
    """
    Monitoring window for detecting duplication on a given ip address in the proxy ARP/ND table

    An IP is declared duplicate if it exceeds the num-moves within the monitoring-window.
    """
    num_moves: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:num-moves', ge=3, le=10),
    ] = 5
    """
    Number of moves in the proxy ARP/ND table that an IP is allowed within the monitoring-window

    When the number of moves exceeds this value, the IP address is declared duplicate.
    """
    hold_down_time: Annotated[
        Optional[Union[EnumerationEnum284, HoldDownTimeLeaf31]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:hold-down-time'),
    ] = '9'
    """
    Time to wait from the moment an IP is declared duplicate to the time the IP is removed from the proxy ARP/ND table

    When the duplicate IP is removed, the monitoring process for the IP address is restarted.
    """
    anti_spoof_mac: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:anti-spoof-mac',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    MAC address associated with the optional anti-spoofing mechanism
    """
    static_blackhole: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:static-blackhole'),
    ] = False
    """
    Whether the anti-spoof MAC is programmed as a black hole static-mac in the mac-table
    """


class Ipv4AddressType(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    An IPv4 address in dotted quad notation.
    """


class Ipv4PrefixFecsContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    sent: Annotated[Optional[bool], Field(alias='srl_nokia-ldp:sent')] = None
    """
    When this is true, an End-of-LIB marker was sent to the LDP peer
    """
    received: Annotated[Optional[bool], Field(alias='srl_nokia-ldp:received')] = None
    """
    When this is true, an End-of-LIB marker was received from the LDP peer
    """


class Ipv4SrlgListEntry(BaseModel):
    """
    Instance of the IPv4 SRLG TLV
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    instance_number: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:instance-number', ge=0, le=4294967295),
    ] = None
    """
    An arbitrary unsigned 32-bit integer used to disambiguate the instance of TLV 138. The instance identifier is synthesised by the system and may be renumbered for the same SRLG definition in subsequent advertised LSPs if (and only if) the entire list of SRLGs is replaced.
    """
    system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    Neighbor system ID.
    """
    psn_number: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:psn-number', ge=0, le=255)
    ] = None
    """
    Pseudonode number if the neighbor is on a LAN interface.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum160]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    SRLG flags.
    """
    ipv4_interface_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv4-interface-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    IPv4 interface address.
    """
    ipv4_neighbor_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv4-neighbor-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    IPv4 neighbor address.
    """
    srlg_value: Annotated[
        Optional[List[SrlgValueLeafList]], Field(alias='srl_nokia-isis:srlg-value')
    ] = []
    """
    List of SRLG values.
    """


class Ipv4SrlgListEntry2(BaseModel):
    """
    List of SRLGs advertised by the router. TLV = 138.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:neighbor',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{2}$).*$',
        ),
    ] = None
    """
    A neighbor, identified by its System ID and one octet to indicate the pseudonode number
    """
    numbered: Annotated[Optional[bool], Field(alias='srl_nokia-isis:numbered')] = None
    """
    When set, the interface to the neighbor is numbered. When unset it is unnumbered.
    """
    ipv4_interface_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv4-interface-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The IPv4 address of the interface to the neighbor
    """
    ipv4_neighbor_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv4-neighbor-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The IPv4 address of the neighbor
    """
    shared_risk_link_group: Annotated[
        Optional[List[SharedRiskLinkGroupLeafList]],
        Field(alias='srl_nokia-isis:shared-risk-link-group'),
    ] = []
    """
    List of SRLGs that apply to the adjacency with this neighbor
    """


class Ipv4SrlgsContainer(BaseModel):
    """
    This container defines ISIS SRLG TLV 138.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_srlg: Annotated[
        Optional[List[Ipv4SrlgListEntry]], Field(alias='srl_nokia-isis:ipv4-srlg')
    ] = None


class Ipv4Container7(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    total_discovery_interfaces: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:total-discovery-interfaces', ge=0, le=65535),
    ] = None
    """
    The total number of IP subinterfaces on which basic LDP discovery is active
    """
    total_discovery_targets: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:total-discovery-targets', ge=0, le=65535),
    ] = None
    """
    The total number of configured extended discovery targets
    """
    total_interface_hello_adjacencies: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:total-interface-hello-adjacencies', ge=0, le=65535),
    ] = None
    """
    The total number of interface hello adjacencies that are up
    """
    total_targeted_hello_adjacencies: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:total-targeted-hello-adjacencies', ge=0, le=65535),
    ] = None
    """
    The total number of targeted hello adjacencies that are up
    """
    total_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:total-peers', ge=0, le=65535)
    ] = None
    """
    The total number of LDP TCP sessions that are established
    """


class Ipv6AddressType(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$'
        ),
    ]
    """
    An IPv6 address represented as either a full address; shortened
    or mixed-shortened formats.
    """


class Ipv6PrefixFecsContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    sent: Annotated[Optional[bool], Field(alias='srl_nokia-ldp:sent')] = None
    """
    When this is true, an End-of-LIB marker was sent to the LDP peer
    """
    received: Annotated[Optional[bool], Field(alias='srl_nokia-ldp:received')] = None
    """
    When this is true, an End-of-LIB marker was received from the LDP peer
    """


class Ipv6SrlgListEntry(BaseModel):
    """
    Instance of the IPv6 SRLG TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    instance_number: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:instance-number', ge=0, le=4294967295),
    ] = None
    """
    An arbitrary unsigned 32-bit integer used to disambiguate the instance of TLV 138. The instance identifier is synthesised by the system and may be renumbered for the same SRLG definition in subsequent advertised LSPs if (and only if) the entire list of SRLGs is replaced.
    """
    system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    Neighbor system ID.
    """
    psn_number: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:psn-number', ge=0, le=255)
    ] = None
    """
    Pseudonode number if the neighbor is on a LAN interface.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum161]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    IPv6 SRLG flags.
    """
    ipv6_interface_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv6-interface-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    IPv6 interface address or Link Local Identifier.
    """
    ipv6_neighbor_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv6-neighbor-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    IPv6 neighbor address or Link Remote Identifier.
    """
    srlg_value: Annotated[
        Optional[List[SrlgValueLeafList2]], Field(alias='srl_nokia-isis:srlg-value')
    ] = []
    """
    SRLG values.
    """


class Ipv6SrlgListEntry2(BaseModel):
    """
    List of IPv6 SRLGs advertised by the router. TLV = 139.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:neighbor',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{2}$).*$',
        ),
    ] = None
    """
    A neighbor, identified by its System ID and one octet to indicate the pseudonode number
    """
    neighbor_address_included: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:neighbor-address-included')
    ] = None
    """
    When set, the IPv6 neighbor address is included.
    """
    ipv6_interface_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv6-interface-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    The IPv6 address of the interface to the neighbor
    """
    ipv6_neighbor_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv6-neighbor-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    The IPv6 address of the neighbor
    """
    shared_risk_link_group: Annotated[
        Optional[List[SharedRiskLinkGroupLeafList2]],
        Field(alias='srl_nokia-isis:shared-risk-link-group'),
    ] = []
    """
    List of SRLGs that apply to the adjacency with this neighbor
    """


class Ipv6SrlgsContainer(BaseModel):
    """
    This container defines ISIS SRLG TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv6_srlg: Annotated[
        Optional[List[Ipv6SrlgListEntry]], Field(alias='srl_nokia-isis:ipv6-srlg')
    ] = None


class Ipv6Container7(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    total_discovery_interfaces: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:total-discovery-interfaces', ge=0, le=65535),
    ] = None
    """
    The total number of IP subinterfaces on which basic LDP discovery is active
    """
    total_discovery_targets: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:total-discovery-targets', ge=0, le=65535),
    ] = None
    """
    The total number of configured extended discovery targets
    """
    total_interface_hello_adjacencies: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:total-interface-hello-adjacencies', ge=0, le=65535),
    ] = None
    """
    The total number of interface hello adjacencies that are up
    """
    total_targeted_hello_adjacencies: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:total-targeted-hello-adjacencies', ge=0, le=65535),
    ] = None
    """
    The total number of targeted hello adjacencies that are up
    """
    total_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:total-peers', ge=0, le=65535)
    ] = None
    """
    The total number of LDP TCP sessions that are established
    """


class IsAliasIdContainer(BaseModel):
    """
    This container defines the IS-Alias TLV which allows extension-capable ISs to recognize the Originating System of an Extended LSP set. It identifies the Normal system-id of the Originating System.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    alias_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:alias-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    List of alias ID(s).
    """


class IsReachabilityListEntry(BaseModel):
    """
    Each TLV encodes the identity of an adjacent IS neighbor. TLV type = 2
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:neighbor',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{2}$).*$',
        ),
    ] = None
    """
    An adjacent IS neighbor
    """
    default_metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:default-metric', ge=0, le=63)
    ] = None
    """
    The default metric to reach this adjacent neighbor.
    """
    default_metric_type: Annotated[
        Optional[EnumerationEnum196], Field(alias='srl_nokia-isis:default-metric-type')
    ] = None
    """
    The default metric type: internal or external.
    """


class LabelIndexContainer(BaseModel):
    """
    This container defines TLV 1.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    label_index: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:label-index', ge=0, le=4294967295)
    ] = None
    """
    32-bit value representing the index value in the SRGB space
    """


class LanAdjacencySidListEntry(BaseModel):
    """
    Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment attached to a unidirectional adjacency or a set of unidirectional adjacencies. By default, an IGP- Adjacency Segment is local to the node which advertises it.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:value', ge=0, le=4294967295)
    ] = None
    """
    LAN Adjacency-SID value.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum173]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    Flags associated with LAN-Adj-Segment-ID.
    """
    weight: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:weight', ge=0, le=255)
    ] = None
    """
    Value that represents the weight of the Adj-SID for the purpose of load balancing.
    """
    neighbor_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:neighbor-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    System ID of the neighbor associated with the LAN- Adj-Segment-ID value.
    """


class LanAdjacencySidListEntry2(BaseModel):
    """
    Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment attached to a unidirectional adjacency or a set of unidirectional adjacencies. By default, an IGP- Adjacency Segment is local to the node which advertises it.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:value', ge=0, le=4294967295)
    ] = None
    """
    LAN Adjacency-SID value.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum182]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    Flags associated with LAN-Adj-Segment-ID.
    """
    weight: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:weight', ge=0, le=255)
    ] = None
    """
    Value that represents the weight of the Adj-SID for the purpose of load balancing.
    """
    neighbor_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:neighbor-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    System ID of the neighbor associated with the LAN- Adj-Segment-ID value.
    """


class LanAdjacencySidListEntry3(BaseModel):
    """
    Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment attached to a unidirectional adjacency or a set of unidirectional adjacencies. By default, an IGP- Adjacency Segment is local to the node which advertises it.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:value', ge=0, le=4294967295)
    ] = None
    """
    LAN Adjacency-SID value.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum186]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    Flags associated with LAN-Adj-Segment-ID.
    """
    weight: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:weight', ge=0, le=255)
    ] = None
    """
    Value that represents the weight of the Adj-SID for the purpose of load balancing.
    """
    neighbor_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:neighbor-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    System ID of the neighbor associated with the LAN- Adj-Segment-ID value.
    """


class LanAdjacencySidListEntry4(BaseModel):
    """
    Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment attached to a unidirectional adjacency or a set of unidirectional adjacencies. By default, an IGP- Adjacency Segment is local to the node which advertises it.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:value', ge=0, le=4294967295)
    ] = None
    """
    LAN Adjacency-SID value.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum190]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    Flags associated with LAN-Adj-Segment-ID.
    """
    weight: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:weight', ge=0, le=255)
    ] = None
    """
    Value that represents the weight of the Adj-SID for the purpose of load balancing.
    """
    neighbor_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:neighbor-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    System ID of the neighbor associated with the LAN- Adj-Segment-ID value.
    """


class LanAdjacencySidsContainer(BaseModel):
    """
    This container defines segment routing LAN adjacency SIDs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lan_adjacency_sid: Annotated[
        Optional[List[LanAdjacencySidListEntry]],
        Field(alias='srl_nokia-isis:lan-adjacency-sid'),
    ] = None


class LanAdjacencySidsContainer2(BaseModel):
    """
    This container defines segment routing LAN adjacency SIDs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lan_adjacency_sid: Annotated[
        Optional[List[LanAdjacencySidListEntry2]],
        Field(alias='srl_nokia-isis:lan-adjacency-sid'),
    ] = None


class LanAdjacencySidsContainer3(BaseModel):
    """
    This container defines segment routing LAN adjacency SIDs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lan_adjacency_sid: Annotated[
        Optional[List[LanAdjacencySidListEntry3]],
        Field(alias='srl_nokia-isis:lan-adjacency-sid'),
    ] = None


class LanAdjacencySidsContainer4(BaseModel):
    """
    This container defines segment routing LAN adjacency SIDs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lan_adjacency_sid: Annotated[
        Optional[List[LanAdjacencySidListEntry4]],
        Field(alias='srl_nokia-isis:lan-adjacency-sid'),
    ] = None


class LinkBandwidthContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    add_next_hop_count_to_received_bgp_routes: Annotated[
        Optional[Union[AddNextHopCountToReceivedBgpRoutesLeaf1, EnumerationEnum45]],
        Field(alias='srl_nokia-bgp:add-next-hop-count-to-received-bgp-routes'),
    ] = None
    """
    Determines the weight that is internally added to the received PE-CE BGP routes

    The configured weight is added to all received BGP PE-CE routes for the purpose of EVPN unequal ECMP.
    This weight is internal and not added into any link-bandwidth extended community when readvertising
    the received routes to other ipv4 or ipv6 neighbors.
    """
    aggregate_used_paths: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:aggregate-used-paths')
    ] = None
    """
    When advertising link-bandwidth to this peer, sum the link bandwidth from all the used multipaths
    """


class LinkBandwidthContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    add_next_hop_count_to_received_bgp_routes: Annotated[
        Optional[Union[AddNextHopCountToReceivedBgpRoutesLeaf21, EnumerationEnum46]],
        Field(alias='srl_nokia-bgp:add-next-hop-count-to-received-bgp-routes'),
    ] = None
    """
    Determines the weight that is internally added to the received PE-CE BGP routes

    The configured weight is added to all received BGP PE-CE routes for the purpose of EVPN unequal ECMP.
    This weight is internal and not added into any link-bandwidth extended community when readvertising
    the received routes to other ipv4 or ipv6 neighbors.
    """
    aggregate_used_paths: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:aggregate-used-paths')
    ] = None
    """
    When advertising link-bandwidth to this peer, sum the link bandwidth from all the used multipaths
    """


class LinkBandwidthContainer3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    add_next_hop_count_to_received_bgp_routes: Annotated[
        Optional[Union[AddNextHopCountToReceivedBgpRoutesLeaf31, EnumerationEnum53]],
        Field(alias='srl_nokia-bgp:add-next-hop-count-to-received-bgp-routes'),
    ] = None
    """
    Determines the weight that is internally added to the received PE-CE BGP routes

    The configured weight is added to all received BGP PE-CE routes for the purpose of EVPN unequal ECMP.
    This weight is internal and not added into any link-bandwidth extended community when readvertising
    the received routes to other ipv4 or ipv6 neighbors.
    """
    aggregate_used_paths: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:aggregate-used-paths')
    ] = None
    """
    When advertising link-bandwidth to this peer, sum the link bandwidth from all the used multipaths
    """


class LinkBandwidthContainer4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    add_next_hop_count_to_received_bgp_routes: Annotated[
        Optional[Union[AddNextHopCountToReceivedBgpRoutesLeaf41, EnumerationEnum54]],
        Field(alias='srl_nokia-bgp:add-next-hop-count-to-received-bgp-routes'),
    ] = None
    """
    Determines the weight that is internally added to the received PE-CE BGP routes

    The configured weight is added to all received BGP PE-CE routes for the purpose of EVPN unequal ECMP.
    This weight is internal and not added into any link-bandwidth extended community when readvertising
    the received routes to other ipv4 or ipv6 neighbors.
    """
    aggregate_used_paths: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:aggregate-used-paths')
    ] = None
    """
    When advertising link-bandwidth to this peer, sum the link bandwidth from all the used multipaths
    """


class LinkIdContainer(BaseModel):
    """
    This container defines sub-TLV 4.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:local', ge=0, le=4294967295)
    ] = None
    """
    The value field of this sub-TLV contains 4 octets of Link Local Identifier followed by 4 octets of Link Remote Identifier.
    """
    remote: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:remote', ge=0, le=4294967295)
    ] = None
    """
    If the Link Remote Identifier is unknown, it is set to 0.
    """


class LinkIdContainer2(BaseModel):
    """
    This container defines sub-TLV 4.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:local', ge=0, le=4294967295)
    ] = None
    """
    The value field of this sub-TLV contains 4 octets of Link Local Identifier followed by 4 octets of Link Remote Identifier.
    """
    remote: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:remote', ge=0, le=4294967295)
    ] = None
    """
    If the Link Remote Identifier is unknown, it is set to 0.
    """


class LinkIdContainer3(BaseModel):
    """
    This container defines sub-TLV 4.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:local', ge=0, le=4294967295)
    ] = None
    """
    The value field of this sub-TLV contains 4 octets of Link Local Identifier followed by 4 octets of Link Remote Identifier.
    """
    remote: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:remote', ge=0, le=4294967295)
    ] = None
    """
    If the Link Remote Identifier is unknown, it is set to 0.
    """


class LinkIdContainer4(BaseModel):
    """
    This container defines sub-TLV 4.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:local', ge=0, le=4294967295)
    ] = None
    """
    The value field of this sub-TLV contains 4 octets of Link Local Identifier followed by 4 octets of Link Remote Identifier.
    """
    remote: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:remote', ge=0, le=4294967295)
    ] = None
    """
    If the Link Remote Identifier is unknown, it is set to 0.
    """


class LinkLossContainer(BaseModel):
    """
    This container defines unidirectional link loss delay.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    a_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:a-bit')] = None
    """
    The A bit is set when the measured value of this parameter exceeds its configured maximum threshold. The A bit is cleared when the measured value falls below its configured reuse threshold.
    """
    link_loss: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:link-loss', ge=0, le=4294967295)
    ] = None
    """
    Link packet loss as a percentage of the total traffic sent over a configurable interval. The basic unit is 0.000003%, where (2^24 - 2) is 50.331642%. This value s the highest packet-loss percentage that can be expressed (the assumption being that precision is more important on high-speed links than the ability to advertise loss rates greater than this, and that high- peed links with over 50% loss are unusable). Therefore, measured values that are larger than the field maximum SHOULD be encoded as the maximum value.
    """


class LinkLossContainer2(BaseModel):
    """
    This container defines unidirectional link loss delay.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    a_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:a-bit')] = None
    """
    The A bit is set when the measured value of this parameter exceeds its configured maximum threshold. The A bit is cleared when the measured value falls below its configured reuse threshold.
    """
    link_loss: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:link-loss', ge=0, le=4294967295)
    ] = None
    """
    Link packet loss as a percentage of the total traffic sent over a configurable interval. The basic unit is 0.000003%, where (2^24 - 2) is 50.331642%. This value s the highest packet-loss percentage that can be expressed (the assumption being that precision is more important on high-speed links than the ability to advertise loss rates greater than this, and that high- peed links with over 50% loss are unusable). Therefore, measured values that are larger than the field maximum SHOULD be encoded as the maximum value.
    """


class LinkLossContainer3(BaseModel):
    """
    This container defines unidirectional link loss delay.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    a_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:a-bit')] = None
    """
    The A bit is set when the measured value of this parameter exceeds its configured maximum threshold. The A bit is cleared when the measured value falls below its configured reuse threshold.
    """
    link_loss: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:link-loss', ge=0, le=4294967295)
    ] = None
    """
    Link packet loss as a percentage of the total traffic sent over a configurable interval. The basic unit is 0.000003%, where (2^24 - 2) is 50.331642%. This value s the highest packet-loss percentage that can be expressed (the assumption being that precision is more important on high-speed links than the ability to advertise loss rates greater than this, and that high- peed links with over 50% loss are unusable). Therefore, measured values that are larger than the field maximum SHOULD be encoded as the maximum value.
    """


class LinkLossContainer4(BaseModel):
    """
    This container defines unidirectional link loss delay.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    a_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:a-bit')] = None
    """
    The A bit is set when the measured value of this parameter exceeds its configured maximum threshold. The A bit is cleared when the measured value falls below its configured reuse threshold.
    """
    link_loss: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:link-loss', ge=0, le=4294967295)
    ] = None
    """
    Link packet loss as a percentage of the total traffic sent over a configurable interval. The basic unit is 0.000003%, where (2^24 - 2) is 50.331642%. This value s the highest packet-loss percentage that can be expressed (the assumption being that precision is more important on high-speed links than the ability to advertise loss rates greater than this, and that high- peed links with over 50% loss are unusable). Therefore, measured values that are larger than the field maximum SHOULD be encoded as the maximum value.
    """


class LocalAsContainer(BaseModel):
    """
    Options related to the local autonomous-system number advertised by this router to its peers
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    as_number: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:as-number', ge=1, le=4294967295)
    ] = None
    """
    The local autonomous system number used to override the global ASN on this group of BGP sessions

    Sets the ASN value that this router sends in its OPEN message towards its peer in the group.
    """
    prepend_global_as: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prepend-global-as')
    ] = None
    """
    When set to true, the global ASN value is prepended to the AS path in outbound routes towards each BGP peer in the group

    If a session is EBGP (peer-as is not equal to the local-as) then the local-as is prepended as the final step, so that the local-as is the first element in the AS_PATH received by the peer.
    """
    prepend_local_as: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prepend-local-as')
    ] = None
    """
    When set to true, the local AS value is prepended to the AS path of inbound routes from each EBGP peer belonging to the group
    """


class LocalAsContainer2(BaseModel):
    """
    Options related to the local autonomous-system number advertised by this router to the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    as_number: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:as-number', ge=1, le=4294967295)
    ] = None
    """
    The local autonomous system number used to override the global ASN on this session

    Sets the ASN value that this router sends in its OPEN message towards its peer.
    """
    prepend_global_as: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prepend-global-as')
    ] = None
    """
    When set to true, the global ASN value is prepended to the AS path in outbound routes towards the peer

    If a session is EBGP (peer-as is not equal to the local-as) then the local-as is prepended as the final step, so that the local-as is the first element in the AS_PATH received by the peer.
    """
    prepend_local_as: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prepend-local-as')
    ] = None
    """
    When set to true, the local AS value is prepended to the AS path of inbound routes from the peer
    """


class LsaFilterTotalsContainer(BaseModel):
    """
    The number of LSAs not sent due to area policy.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    export_filtered: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:export-filtered', ge=0, le=4294967295),
    ] = None
    """
    The number of LSAs not sent due to area export policy.
    """
    import_filtered: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:import-filtered', ge=0, le=4294967295),
    ] = None
    """
    The number of LSAs not sent due to area import policy.
    """


class LsaGenerateContainer(BaseModel):
    """
    Enter the lsa-generate context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_lsa_wait: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:max-lsa-wait', ge=10, le=600000)
    ] = 5000
    """
    Maximum time between two consecutive occurrences of an LSA being generated
    """
    lsa_initial_wait: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:lsa-initial-wait', ge=10, le=600000)
    ] = 5000
    """
    First waiting period between link state advertisements LSA originates
    """
    lsa_second_wait: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:lsa-second-wait', ge=10, le=600000)
    ] = 5000
    """
    Hold time between the first and second LSA generation
    """


class LsaOptionsContainer(BaseModel):
    """
    OSPFv3 LSA options.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsa_options: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-ospf:lsa-options')
    ] = []
    """
    OSPFv3 LSA Option flags list. This list will contain
    the identities for the OSPFv3 LSA options that are
    set for the LSA.
    """


class LsaOptionsContainer2(BaseModel):
    """
    OSPFv3 LSA options.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsa_options: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-ospf:lsa-options')
    ] = []
    """
    OSPFv3 LSA Option flags list. This list will contain
    the identities for the OSPFv3 LSA options that are
    set for the LSA.
    """


class LsaOptionsContainer3(BaseModel):
    """
    OSPFv3 LSA options.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsa_options: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-ospf:lsa-options')
    ] = []
    """
    OSPFv3 LSA Option flags list. This list will contain
    the identities for the OSPFv3 LSA options that are
    set for the LSA.
    """


class LsaOptionsContainer4(BaseModel):
    """
    OSPFv3 LSA options.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsa_options: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-ospf:lsa-options')
    ] = []
    """
    OSPFv3 LSA Option flags list. This list will contain
    the identities for the OSPFv3 LSA options that are
    set for the LSA.
    """


class LsaTotalsContainer(BaseModel):
    """
    The number of LSAs of each type in this instance's AS database
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    as_external_lsa: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:as-external-lsa', ge=0, le=4294967295),
    ] = None
    """
    The number of AS External LSAs in this instance's AS database.
    """
    e_as_external_lsa: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:e-as-external-lsa', ge=0, le=4294967295),
    ] = None
    """
    The number of extended AS External LSAs in this instance's AS database.
    """
    as_opaque_lsa: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:as-opaque-lsa', ge=0, le=4294967295)
    ] = None
    """
    The number of AS opaque LSAs in this instance's AS database.
    """
    router_info_lsa: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:router-info-lsa', ge=0, le=4294967295),
    ] = None
    """
    The number of AS scoped router information LSAs in this instance's AS database.
    """


class LsaTotalsContainer2(BaseModel):
    """
    The number of LSAs of each type in this area's database
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    router_lsa: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:router-lsa', ge=0, le=4294967295)
    ] = None
    """
    The number of router LSAs in this area's link-state database.
    """
    e_router_lsa: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:e-router-lsa', ge=0, le=4294967295)
    ] = None
    """
    The number of OSPFv3 E-router LSAs in this area's link-state database.
    """
    network_lsa: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:network-lsa', ge=0, le=4294967295)
    ] = None
    """
    The number of network LSAs in this area's link-state database.
    """
    e_network_lsa: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:e-network-lsa', ge=0, le=4294967295)
    ] = None
    """
    The number of OSPFv3 E-network LSAs in this area's link-state database.
    """
    network_summary_lsa: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:network-summary-lsa', ge=0, le=4294967295),
    ] = None
    """
    The number of network summary LSAs in this area's link-state database.
    """
    asbr_summary_lsa: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:asbr-summary-lsa', ge=0, le=4294967295),
    ] = None
    """
    The number of ASBR summary LSAs in this area's link-state database.
    """
    nssa_lsa: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:nssa-lsa', ge=0, le=4294967295)
    ] = None
    """
    The number of NSSA LSAs in this area's link-state database.
    """
    e_nssa_lsa: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:e-nssa-lsa', ge=0, le=4294967295)
    ] = None
    """
    The number of OSPFv3 E-NSSA LSAs in this area's link-state database.
    """
    area_opaque_lsa: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:area-opaque-lsa', ge=0, le=4294967295),
    ] = None
    """
    The number of NSSA LSAs in this area's link-state database.
    """
    inter_area_prefix_lsa: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:inter-area-prefix-lsa', ge=0, le=4294967295),
    ] = None
    """
    The number of OSPFv3 inter-area-prefix LSAs in this area's link-state database.
    """
    e_inter_area_prefix_lsa: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:e-inter-area-prefix-lsa', ge=0, le=4294967295),
    ] = None
    """
    The number of OSPFv3 E-inter-area-prefix LSAs in this area's link-state database.
    """
    inter_area_router_lsa: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:inter-area-router-lsa', ge=0, le=4294967295),
    ] = None
    """
    The number of OSPFv3 inter-area-router LSAs in this area's link-state database.
    """
    e_inter_area_router_lsa: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:e-inter-area-router-lsa', ge=0, le=4294967295),
    ] = None
    """
    The number of OSPFv3 E-inter-area-router LSAs in this area's link-state database.
    """
    intra_area_prefix_lsa: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:intra-area-prefix-lsa', ge=0, le=4294967295),
    ] = None
    """
    The number of OSPFv3 intra-area-prefix LSAs in this area's link-state database.
    """
    e_intra_area_prefix_lsa: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:e-intra-area-prefix-lsa', ge=0, le=4294967295),
    ] = None
    """
    The number of OSPFv3 E-intra-area-prefix LSAs in this area's link-state database.
    """
    router_info_lsa: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:router-info-lsa', ge=0, le=4294967295),
    ] = None
    """
    The number of OSPFv3 router-info LSAs in this area's link-state database.
    """
    unknown_lsa: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:unknown-lsa', ge=0, le=4294967295)
    ] = None
    """
    The number of unknown LSA advertisements in this area's link-state database.
    """
    total: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:total', ge=0, le=4294967295)
    ] = None
    """
    The number of area scope LSAs within this area.
    """
    total_lsa_cksum_sum: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:total-lsa-cksum-sum',
            pattern='^(?=^0x[0-9a-fA-F]+$).*$',
        ),
    ] = None
    """
    The 32-bit unsigned sum of the area scope LSA checksums contained in this area's link-state database. The sum can be used to determine if there has been a change in a router's link-state database, and to compare the link-state database of two routers.
    """


class LsaTotalsContainer3(BaseModel):
    """
    The number of LSAs of each type in this interface's database
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    link_opaque_lsa: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:link-opaque-lsa', ge=0, le=4294967295),
    ] = None
    """
    The number of link opaque LSAs in this interface's database.
    """
    link_lsa: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:link-lsa', ge=0, le=4294967295)
    ] = None
    """
    The number of link LSAs in this interface's database.
    """
    e_link_lsa: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:e-link-lsa', ge=0, le=4294967295)
    ] = None
    """
    The number of extended link LSAs in this interface's database.
    """
    router_info_lsa: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:router-info-lsa', ge=0, le=4294967295),
    ] = None
    """
    The number of link scoped router information LSAs in this interface's AS database.
    """


class LspBufferSizeContainer(BaseModel):
    """
    This container defines TLV 14 - the LSP Buffer Size TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    size: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:size', ge=0, le=65535)
    ] = None
    """
    The maximum MTU that the advertising system can receive, expressed in bytes.
    """


class LspGenerationContainer(BaseModel):
    """
    Container with options for specifying LSP generation timer values
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    initial_wait: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:initial-wait', ge=10, le=100000)
    ] = 10
    """
    Time interval between the detection of topology change and when the new LSP is generated.

    The timer granularity is 100 ms. Timer values are rounded down to the nearest granularity, for example a configured value of 550 ms is internally rounded down to 500 ms
    """
    second_wait: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:second-wait', ge=10, le=100000)
    ] = 1000
    """
    Time interval between the the first and second LSP generation.

    The timer granularity is 100 ms. Timer values are rounded down to the nearest granularity, for example a configured value of 550 ms is internally rounded down to 500 ms
    """
    max_wait: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:max-wait', ge=10, le=120000)
    ] = 5000
    """
    Specifies the maximum interval between two consecutive generations of an LSP.

    The timer granularity is 100 ms. Timer values are rounded down to the nearest granularity, for example a configured value of 550 ms is internally rounded down to 500 ms
    """


class MacLimitContainer(BaseModel):
    """
    Bridge Table size and thresholds.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    maximum_entries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-network-instance:maximum-entries', ge=1, le=250000),
    ] = 250
    """
    Maximum number of mac addresses allowed in the bridge-table.
    """
    warning_threshold_pct: Annotated[
        Optional[int],
        Field(alias='srl_nokia-network-instance:warning-threshold-pct', ge=6, le=100),
    ] = 95
    """
    Percentage of the configured max-number-macs over which a warning is triggered.
    The warning message is cleared when the percentage drops below the configured
    percentage minus 5%
    """


class MacLimitContainer2(BaseModel):
    """
    Bridge Table size and thresholds
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    maximum_entries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-network-instance:maximum-entries', ge=1, le=8192),
    ] = 250
    """
    Maximum number of mac addresses allowed in the bridge-table
    """
    warning_threshold_pct: Annotated[
        Optional[int],
        Field(alias='srl_nokia-network-instance:warning-threshold-pct', ge=6, le=100),
    ] = 95
    """
    Percentage of the configured max-number-macs over which a warning is triggered

    The warning message is cleared when the percentage drops below the configured
    percentage minus 5%
    """


class MacListEntry3(BaseModel):
    """
    macs learnt on the bridging instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-mac-learning-entries:address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The mac-address type represents an IEEE 802 MAC address.
    The canonical representation uses lowercase characters.

    In the value set and its semantics, this type is equivalent
    to the MacAddress textual convention of the SMIv2.
    """
    destination: Annotated[
        Optional[str],
        Field(alias='srl_nokia-bridge-table-mac-learning-entries:destination'),
    ] = None
    """
    the name of the subinterface where the mac is learnt against.
    """
    last_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-mac-learning-entries:last-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this learnt mac
    """
    aging: Annotated[
        Optional[Union[AgingLeaf1, EnumerationEnum266]],
        Field(alias='srl_nokia-bridge-table-mac-learning-entries:aging'),
    ] = None
    """
    remaining age time for learnt macs
    """


class MacListEntry7(BaseModel):
    """
    reserved macs on the bridging instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-reserved-macs:address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The mac-address type represents an IEEE 802 MAC address.
    The canonical representation uses lowercase characters.

    In the value set and its semantics, this type is equivalent
    to the MacAddress textual convention of the SMIv2.
    """
    users: Annotated[
        Optional[List[UsersListEntry]],
        Field(alias='srl_nokia-bridge-table-reserved-macs:users'),
    ] = None


class MacListEntry8(BaseModel):
    """
    macs learnt on the bridging instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-connection-point-bridge-table-mac-learning-entries:address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The mac-address type represents an IEEE 802 MAC address.
    The canonical representation uses lowercase characters.

    In the value set and its semantics, this type is equivalent
    to the MacAddress textual convention of the SMIv2.
    """
    last_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-connection-point-bridge-table-mac-learning-entries:last-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this learnt mac
    """
    aging: Annotated[
        Optional[Union[AgingLeaf41, EnumerationEnum304]],
        Field(
            alias='srl_nokia-connection-point-bridge-table-mac-learning-entries:aging'
        ),
    ] = None
    """
    remaining age time for learnt macs
    """


class MacListEntry9(BaseModel):
    """
    macs duplicate on the bridging instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-connection-point-bridge-table-mac-duplication-entries:address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The mac-address type represents an IEEE 802 MAC address.
    The canonical representation uses lowercase characters.

    In the value set and its semantics, this type is equivalent
    to the MacAddress textual convention of the SMIv2.
    """
    dup_detect_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-connection-point-bridge-table-mac-duplication-entries:dup-detect-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time when the mac was declared duplicate
    """
    hold_down_time_remaining: Annotated[
        Optional[Union[EnumerationEnum306, HoldDownTimeRemainingLeaf41]],
        Field(
            alias='srl_nokia-connection-point-bridge-table-mac-duplication-entries:hold-down-time-remaining'
        ),
    ] = None
    """
    remaining hold down time for duplicate mac
    """


class MaintenanceContainer(BaseModel):
    """
    Maintenance context for TE Policy, hold and wait timers, sBFD, revertive behavior and alike available under this context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    maintenance_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:maintenance-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The maintenance policy to use with the TE policy
    """


class MaintenanceContainer2(BaseModel):
    """
    Maintenance context for TE Policy, hold and wait timers, sBFD, revertive behavior and alike available under this context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    maintenance_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:maintenance-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The maintenance policy to use with the TE policy
    """


class MaxLinkBandwidthContainer(BaseModel):
    """
    This container defines sub-TLV 9.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The maximum bandwidth that can be used on this link in this direction (from the system originating the LSP to its neighbors).  It is encoded in 32 bits in IEEE floating point format.  The units are bytes (not bits!) per second.
    """


class MaxLinkBandwidthContainer2(BaseModel):
    """
    This container defines sub-TLV 9.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The maximum bandwidth that can be used on this link in this direction (from the system originating the LSP to its neighbors).  It is encoded in 32 bits in IEEE floating point format.  The units are bytes (not bits!) per second.
    """


class MaxLinkBandwidthContainer3(BaseModel):
    """
    This container defines sub-TLV 9.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The maximum bandwidth that can be used on this link in this direction (from the system originating the LSP to its neighbors).  It is encoded in 32 bits in IEEE floating point format.  The units are bytes (not bits!) per second.
    """


class MaxLinkBandwidthContainer4(BaseModel):
    """
    This container defines sub-TLV 9.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The maximum bandwidth that can be used on this link in this direction (from the system originating the LSP to its neighbors).  It is encoded in 32 bits in IEEE floating point format.  The units are bytes (not bits!) per second.
    """


class MaxReservableLinkBandwidthContainer(BaseModel):
    """
    This container defines sub-TLV 10.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The maximum amount of bandwidth that can be reserved in this direction on this link.  Note that for oversubscription purposes,  this can be greater than the bandwidth of the link. It is encoded  in 32 bits in IEEE floating point format.  The units are bytes (not bits!) per second.
    """


class MaxReservableLinkBandwidthContainer2(BaseModel):
    """
    This container defines sub-TLV 10.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The maximum amount of bandwidth that can be reserved in this direction on this link.  Note that for oversubscription purposes,  this can be greater than the bandwidth of the link. It is encoded  in 32 bits in IEEE floating point format.  The units are bytes (not bits!) per second.
    """


class MaxReservableLinkBandwidthContainer3(BaseModel):
    """
    This container defines sub-TLV 10.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The maximum amount of bandwidth that can be reserved in this direction on this link.  Note that for oversubscription purposes,  this can be greater than the bandwidth of the link. It is encoded  in 32 bits in IEEE floating point format.  The units are bytes (not bits!) per second.
    """


class MaxReservableLinkBandwidthContainer4(BaseModel):
    """
    This container defines sub-TLV 10.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The maximum amount of bandwidth that can be reserved in this direction on this link.  Note that for oversubscription purposes,  this can be greater than the bandwidth of the link. It is encoded  in 32 bits in IEEE floating point format.  The units are bytes (not bits!) per second.
    """


class MaximumSidDepthContainer(BaseModel):
    """
    Container to configure advertise multiple types of Maximum SID Depths (MSDs).

    maximum-sid-depth advertisements allow entities (e.g., centralized controllers) to
    determine whether a particular Segment ID (SID) stack can be
    supported in a given network
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    override_bmi: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:override-bmi', ge=0, le=15)
    ] = None
    """
    Value to override the announced node MSD-BMI value
    """
    override_erld: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:override-erld', ge=0, le=14)
    ] = None
    """
    Value to override the announced node MSD-ERLD value
    """


class MldV2StatesContainer(BaseModel):
    """
    Enter the mld-v2-states context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    general_query_interval: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:general-query-interval', ge=0, le=4294967295
        ),
    ] = None
    """
    The General Query Interval used by this multicast router
    """
    general_response_interval: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:general-response-interval',
            ge=0,
            le=4294967295,
        ),
    ] = None
    """
    The General Query Response interval used by this multicast router
    """
    robust_count: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:robust-count', ge=0, le=4294967295),
    ] = None
    """
    The Robust Count value used by this multicast router
    """


class MldV2StatesContainer2(BaseModel):
    """
    Enter the mld-v2-states context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    general_query_interval: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:general-query-interval', ge=0, le=4294967295
        ),
    ] = None
    """
    The General Query Interval used by this multicast router
    """
    general_response_interval: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:general-response-interval',
            ge=0,
            le=4294967295,
        ),
    ] = None
    """
    The General Query Response interval used by this multicast router
    """
    robust_count: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:robust-count', ge=0, le=4294967295),
    ] = None
    """
    The Robust Count value used by this multicast router
    """


class MtuContainer(BaseModel):
    """
    Top-level container for configuration and state data related to network-instance MTU
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    path_mtu_discovery: Annotated[
        Optional[bool], Field(alias='srl_nokia-network-instance-mtu:path-mtu-discovery')
    ] = True
    """
    Enables or disables path MTU discovery in this network-instance

    This is controlled via the kernel ip_no_pmtu_disc option. Path MTU discovery (PMTUD) is a standardized technique in networking for determining the MTU size on the network path between two hosts, usually with the goal of avoiding IP fragmentation.

    For IPv4 packets, Path MTU discovery works by setting the Don't Fragment (DF) flag bit in the IP headers of outgoing packets. Then, any device along the path whose MTU is smaller than the packet will drop it, and send back an Internet Control Message Protocol (ICMP) Fragmentation Needed (Type 3, Code 4) message containing its MTU, allowing the source host to reduce its Path MTU appropriately.
    The process is repeated until the MTU is small enough to traverse the entire path without fragmentation.
    """


class MultiTopologyContainer2(BaseModel):
    """
    The Multi-Topology TLV, type 229.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    topology: Annotated[
        Optional[List[TopologyListEntry2]], Field(alias='srl_nokia-isis:topology')
    ] = None


class NeighborCapabilityContainer(BaseModel):
    """
    Container for information about the last GR capability received from the neighbor
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    restart_time: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:restart-time', ge=0, le=65535)
    ] = None
    """
    The value of the Restart Time in the neighbor's last GR capability
    """
    afi_safi: Annotated[
        Optional[List[AfiSafiListEntry3]], Field(alias='srl_nokia-bgp:afi-safi')
    ] = None


class NeighborListEntry3(BaseModel):
    """
    The list of neighbors that have restarted recently and that are currently being helped.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    The neighbor router's system ID.
    """
    hostname: Annotated[Optional[str], Field(alias='srl_nokia-isis:hostname')] = None
    """
    The hostname of the neighbor, as learned by TLV 137.
    """


class NetworkLsaContainer(BaseModel):
    """
    Contents of the network LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    network_mask: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:network-mask', ge=0, le=32)
    ] = None
    """
    The mask of the network described by the Network LSA
    represented as a CIDR mask.
    """
    attached_router: Annotated[
        Optional[List[AttachedRouterLeafList]],
        Field(alias='srl_nokia-ospf:attached-router'),
    ] = []
    """
    A list of the router ID of the routers that are attached to
    the network described by the Network LSA
    """


class NextHopListEntry5(BaseModel):
    """
    An individual next-hop within the next-hop-group

    Each next-hop is a reference to an entry within the next-hop list.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    index: Annotated[
        Optional[int], Field(alias='srl_nokia-aft:index', ge=0, le=18446744073709551615)
    ] = None
    """
    A reference to the identifier for the next-hop to which the entry in the next-hop group corresponds
    """
    weight: Annotated[
        Optional[int],
        Field(alias='srl_nokia-aft:weight', ge=0, le=18446744073709551615),
    ] = None
    """
    The weight applied to the next-hop within the group
    """


class OnBootContainer(BaseModel):
    """
    Options for advertising an overloaded state whenever the IS-IS process restarts
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    set_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:set-bit')] = None
    """
    When set to true, the Overload bit is set
    """
    max_metric: Annotated[Optional[bool], Field(alias='srl_nokia-isis:max-metric')] = (
        None
    )
    """
    When set to true transit links are advertised with a wide metric of 0xffffffe and a narrow metric of 0x3f
    """
    timeout: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:timeout', ge=60, le=1800)
    ] = None
    """
    Specifies the time that the router should remain in overload state after the IS-IS process restarts
    """


class OriginateDefaultRouteContainer(BaseModel):
    """
    Enter the originate-default-route context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type_nssa: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:type-nssa')] = (
        False
    )
    """
    Generate a default route using NSSA-LSA type
    """
    adjacency_check: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:adjacency-check')
    ] = True
    """
    Default route to remove if there is no adjacency
    """


class Ospfv3InterAreaRouterLsaContainer(BaseModel):
    """
    Inter-Area-Router LSA.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsa_options: Annotated[
        Optional[LsaOptionsContainer4], Field(alias='srl_nokia-ospf:lsa-options')
    ] = None
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:metric', ge=0, le=4294967295)
    ] = None
    """
    AS Boundary Router (ASBR) Metric.
    """
    destination_router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:destination-router-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The Router ID of the ASBR described by the LSA.
    """


class Ospfv3NetworkLsaContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsa_options: Annotated[
        Optional[LsaOptionsContainer3], Field(alias='srl_nokia-ospf:lsa-options')
    ] = None
    attached_routers: Annotated[
        Optional[AttachedRoutersContainer],
        Field(alias='srl_nokia-ospf:attached-routers'),
    ] = None


class OutgoingTunnelInterfaceContainer(BaseModel):
    """
    The outgoing PMSI for the database entry
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[Optional[str], Field(alias='srl_nokia-pim:name')] = None
    """
    The outgoing I-PMSI tunnel name
    """
    s_pmsi_name: Annotated[Optional[str], Field(alias='srl_nokia-pim:s-pmsi-name')] = (
        None
    )
    """
    The outgoing S-PMSI tunnel name, if any, corresponding to the outgoing I-PMSI tunnel
    """
    flags: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-pim:flags',
            pattern='^(immediate-oif-list|inherited-oif-list|inherited-rpt-oif-list|local-rx-include|local-rx-exclude|join-prune-list|lost-assert-list|sg-rpt-prune-oif-list|\\s)*$',
        ),
    ] = None
    """
    Set of lists to which this interface belongs
    """


class OverloadOnBootContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    timeout: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:timeout', ge=60, le=1800)
    ] = 60


class OverloadContainer(BaseModel):
    """
    Overload state of the session
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    peer_is_overloaded: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:peer-is-overloaded')
    ] = None
    """
    The peer has sent an overload TLV to this router requesting that we stop advertising new FECs
    """
    local_router_is_overloaded: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:local-router-is-overloaded')
    ] = None
    """
    This router transmitted an overload TLV requesting that the peer stop advertising new FECs
    """


class OverloadContainer2(BaseModel):
    """
    Specifies isis routing instance behavior regarding overload
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise_interlevel: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:advertise-interlevel')
    ] = False
    """
    When set to true, L1->L2 and L2->L1 inter-level routes continue to be advertised when the router is in overload.
    """
    advertise_external: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:advertise-external')
    ] = False
    """
    When set to true, external (non-ISIS) routes continue to be advertised when the router is in overload.
    """
    instance_is_in_overload: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:instance-is-in-overload')
    ] = None
    """
    When set to true the IS-IS instance is currently in overload state.
    """
    immediate: Annotated[
        Optional[ImmediateContainer], Field(alias='srl_nokia-isis:immediate')
    ] = None
    on_boot: Annotated[
        Optional[OnBootContainer], Field(alias='srl_nokia-isis:on-boot')
    ] = None


class OverrideLsrIdContainer(BaseModel):
    """
    Options to override the LSR ID
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_subinterface: Annotated[
        Optional[EnumerationEnum118], Field(alias='srl_nokia-ldp:local-subinterface')
    ] = None
    """
    Use local subinterface IP address as LSR ID for interface LDP session
    """


class OverrideLsrIdContainer2(BaseModel):
    """
    Options to override the LSR ID
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_subinterface: Annotated[
        Optional[EnumerationEnum121], Field(alias='srl_nokia-ldp:local-subinterface')
    ] = None
    """
    Use local subinterface IP address as LSR ID for interface LDP session
    """


class PacketsContainer(BaseModel):
    """
    Packet counters
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tx_total: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:tx-total', ge=0, le=4294967295)
    ] = None
    """
    The total number of OSPF packets transmitted since admin-state was last set to 'enabled'.
    """
    tx_hello: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:tx-hello', ge=0, le=4294967295)
    ] = None
    """
    The total number of OSPF hello packets transmitted since admin-state was last set to 'enabled'.
    """
    tx_db_description: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:tx-db-description', ge=0, le=4294967295),
    ] = None
    """
    The total number of OSPF database description packets transmitted since admin-state was last set to 'enabled'.
    """
    tx_ls_request: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:tx-ls-request', ge=0, le=4294967295)
    ] = None
    """
    The total number of OSPF link state requests (LS-rs)transmitted since admin-state was last set to 'enabled'.
    """
    tx_ls_update: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:tx-ls-update', ge=0, le=4294967295)
    ] = None
    """
    The total number of OSPF link state updates (LS-us) transmitted since admin-state was last set to 'enabled'.
    """
    tx_ls_ack: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:tx-ls-ack', ge=0, le=4294967295)
    ] = None
    """
    The total number of OSPF link state acknowledgements transmitted since admin-state was last set to 'enabled'.
    """
    rx_total: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:rx-total', ge=0, le=4294967295)
    ] = None
    """
    The total number of OSPF packets received since admin-state was last set to 'enabled'.
    """
    rx_hello: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:rx-hello', ge=0, le=4294967295)
    ] = None
    """
    The total number of OSPF hello packets received since admin-state was last set to 'enabled'.
    """
    rx_db_description: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:rx-db-description', ge=0, le=4294967295),
    ] = None
    """
    The total number of OSPF database description packets received since admin-state was last set to 'enabled'.
    """
    rx_ls_request: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:rx-ls-request', ge=0, le=4294967295)
    ] = None
    """
    The total number of link state requests (LS-rs) received since admin-state was last set to 'enabled'.
    """
    rx_ls_update: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:rx-ls-update', ge=0, le=4294967295)
    ] = None
    """
    The total number of link state updates (LS-us) received since admin-state was last set to 'enabled'.
    """
    rx_ls_ack: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:rx-ls-ack', ge=0, le=4294967295)
    ] = None
    """
    The total number of link state acknowledgements received since admin-state was last set to 'enabled'.
    """
    discarded: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:discarded', ge=0, le=4294967295)
    ] = None
    """
    The total number of OSPF packets discarded since admin-state was last set to 'enabled'.
    """
    retransmits: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:retransmits', ge=0, le=4294967295)
    ] = None
    """
    The total number of OSPF retransmits since admin-state was last set to 'enabled'.
    """


class PrefixAttributeFlagsContainer(BaseModel):
    """
    This sub-TLV supports the advertisement of additional flags associated with a given prefix advertisement.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    external_prefix: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:external-prefix')
    ] = None
    """
    Set if the prefix has been redistributed from another protocol (or another IS-IS instance).
    """
    re_advertised: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:re-advertised')
    ] = None
    """
    Set when the prefix has been leaked from one level to another (upwards or downwards).
    """
    node_identifier: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:node-identifier')
    ] = None
    """
    Set when the prefix identifies the advertising router; i.e. it is a host prefix advertising a globally reachable address typically associated with a loopback address.
    """


class PrefixAttributeFlagsContainer2(BaseModel):
    """
    This sub-TLV supports the advertisement of additional flags associated with a given prefix advertisement.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    external_prefix: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:external-prefix')
    ] = None
    """
    Set if the prefix has been redistributed from another protocol (or another IS-IS instance).
    """
    re_advertised: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:re-advertised')
    ] = None
    """
    Set when the prefix has been leaked from one level to another (upwards or downwards).
    """
    node_identifier: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:node-identifier')
    ] = None
    """
    Set when the prefix identifies the advertising router; i.e. it is a host prefix advertising a globally reachable address typically associated with a loopback address.
    """


class PrefixAttributeFlagsContainer3(BaseModel):
    """
    This sub-TLV supports the advertisement of additional flags associated with a given prefix advertisement.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    external_prefix: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:external-prefix')
    ] = None
    """
    Set if the prefix has been redistributed from another protocol (or another IS-IS instance).
    """
    re_advertised: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:re-advertised')
    ] = None
    """
    Set when the prefix has been leaked from one level to another (upwards or downwards).
    """
    node_identifier: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:node-identifier')
    ] = None
    """
    Set when the prefix identifies the advertising router; i.e. it is a host prefix advertising a globally reachable address typically associated with a loopback address.
    """


class PrefixAttributeFlagsContainer4(BaseModel):
    """
    This sub-TLV supports the advertisement of additional flags associated with a given prefix advertisement.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    external_prefix: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:external-prefix')
    ] = None
    """
    Set if the prefix has been redistributed from another protocol (or another IS-IS instance).
    """
    re_advertised: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:re-advertised')
    ] = None
    """
    Set when the prefix has been leaked from one level to another (upwards or downwards).
    """
    node_identifier: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:node-identifier')
    ] = None
    """
    Set when the prefix identifies the advertising router; i.e. it is a host prefix advertising a globally reachable address typically associated with a loopback address.
    """


class PrefixLimitAcceptedContainer(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be accepted from each peer in the group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from each peer, counting ONLY routes accepted by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = 90
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = False
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """


class PrefixLimitAcceptedContainer10(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be accepted from the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from the peer, counting ONLY routes accepted by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = None
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = None
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """
    prefix_limit_exceeded: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prefix-limit-exceeded')
    ] = None
    """
    Changes from false to true when the number of received routes increases to max-received-routes + 1 and remains true until the number of received routes decreases back to max-received-routes (applicable if prevent-teardown = true) or until the session is re-established (applicable if prevent-teardown = false)
    """


class PrefixLimitAcceptedContainer11(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be accepted from the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from the peer, counting ONLY routes accepted by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = None
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = None
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """
    prefix_limit_exceeded: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prefix-limit-exceeded')
    ] = None
    """
    Changes from false to true when the number of received routes increases to max-received-routes + 1 and remains true until the number of received routes decreases back to max-received-routes (applicable if prevent-teardown = true) or until the session is re-established (applicable if prevent-teardown = false)
    """


class PrefixLimitAcceptedContainer12(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be accepted from the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from the peer, counting ONLY routes accepted by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = None
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = None
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """
    prefix_limit_exceeded: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prefix-limit-exceeded')
    ] = None
    """
    Changes from false to true when the number of received routes increases to max-received-routes + 1 and remains true until the number of received routes decreases back to max-received-routes (applicable if prevent-teardown = true) or until the session is re-established (applicable if prevent-teardown = false)
    """


class PrefixLimitAcceptedContainer13(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be accepted from the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from the peer, counting ONLY routes accepted by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = None
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = None
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """
    prefix_limit_exceeded: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prefix-limit-exceeded')
    ] = None
    """
    Changes from false to true when the number of received routes increases to max-received-routes + 1 and remains true until the number of received routes decreases back to max-received-routes (applicable if prevent-teardown = true) or until the session is re-established (applicable if prevent-teardown = false)
    """


class PrefixLimitAcceptedContainer14(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be accepted from the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from the peer, counting ONLY routes accepted by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = None
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = None
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """
    prefix_limit_exceeded: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prefix-limit-exceeded')
    ] = None
    """
    Changes from false to true when the number of received routes increases to max-received-routes + 1 and remains true until the number of received routes decreases back to max-received-routes (applicable if prevent-teardown = true) or until the session is re-established (applicable if prevent-teardown = false)
    """


class PrefixLimitAcceptedContainer15(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be accepted from the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from the peer, counting ONLY routes accepted by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = None
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prefix_limit_exceeded: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prefix-limit-exceeded')
    ] = None
    """
    Changes from false to true when the number of received routes increases to max-received-routes + 1 and remains true until the number of received routes decreases back to max-received-routes (applicable if prevent-teardown = true) or until the session is re-established (applicable if prevent-teardown = false)
    """


class PrefixLimitAcceptedContainer16(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be accepted from the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from the peer, counting ONLY routes accepted by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = None
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = None
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """
    prefix_limit_exceeded: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prefix-limit-exceeded')
    ] = None
    """
    Changes from false to true when the number of received routes increases to max-received-routes + 1 and remains true until the number of received routes decreases back to max-received-routes (applicable if prevent-teardown = true) or until the session is re-established (applicable if prevent-teardown = false)
    """


class PrefixLimitAcceptedContainer2(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be accepted from each peer in the group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from each peer, counting ONLY routes accepted by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = 90
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = False
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """


class PrefixLimitAcceptedContainer3(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be accepted from each peer in the group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from each peer, counting ONLY routes accepted by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = 90
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = False
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """


class PrefixLimitAcceptedContainer4(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be accepted from each peer in the group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from each peer, counting ONLY routes accepted by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = 90
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = False
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """


class PrefixLimitAcceptedContainer5(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be accepted from each peer in the group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from each peer, counting ONLY routes accepted by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = 90
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = False
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """


class PrefixLimitAcceptedContainer6(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be accepted from each peer in the group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from each peer, counting ONLY routes accepted by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = 90
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = False
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """


class PrefixLimitAcceptedContainer7(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be accepted from each peer in the group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from each peer, counting ONLY routes accepted by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = 90
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """


class PrefixLimitAcceptedContainer8(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be accepted from each peer in the group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from each peer, counting ONLY routes accepted by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = 90
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = False
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """


class PrefixLimitAcceptedContainer9(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be accepted from the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from the peer, counting ONLY routes accepted by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = None
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = None
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """
    prefix_limit_exceeded: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prefix-limit-exceeded')
    ] = None
    """
    Changes from false to true when the number of received routes increases to max-received-routes + 1 and remains true until the number of received routes decreases back to max-received-routes (applicable if prevent-teardown = true) or until the session is re-established (applicable if prevent-teardown = false)
    """


class PrefixLimitReceivedContainer(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be received from each peer in the group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = 4294967295
    """
    Maximum number of routes allowed from each peer, counting routes accepted and rejected by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = 90
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = False
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """


class PrefixLimitReceivedContainer10(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be received from the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from the peer, counting routes accepted and rejected by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = None
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = None
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """
    prefix_limit_exceeded: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prefix-limit-exceeded')
    ] = None
    """
    Changes from false to true when the number of received routes increases to max-received-routes + 1 and remains true until the number of received routes decreases back to max-received-routes (applicable if prevent-teardown = true) or until the session is re-established (applicable if prevent-teardown = false)
    """


class PrefixLimitReceivedContainer11(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be received from the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from the peer, counting routes accepted and rejected by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = None
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = None
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """
    prefix_limit_exceeded: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prefix-limit-exceeded')
    ] = None
    """
    Changes from false to true when the number of received routes increases to max-received-routes + 1 and remains true until the number of received routes decreases back to max-received-routes (applicable if prevent-teardown = true) or until the session is re-established (applicable if prevent-teardown = false)
    """


class PrefixLimitReceivedContainer12(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be received from the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from the peer, counting routes accepted and rejected by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = None
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = None
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """
    prefix_limit_exceeded: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prefix-limit-exceeded')
    ] = None
    """
    Changes from false to true when the number of received routes increases to max-received-routes + 1 and remains true until the number of received routes decreases back to max-received-routes (applicable if prevent-teardown = true) or until the session is re-established (applicable if prevent-teardown = false)
    """


class PrefixLimitReceivedContainer13(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be received from the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from the peer, counting routes accepted and rejected by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = None
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = None
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """
    prefix_limit_exceeded: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prefix-limit-exceeded')
    ] = None
    """
    Changes from false to true when the number of received routes increases to max-received-routes + 1 and remains true until the number of received routes decreases back to max-received-routes (applicable if prevent-teardown = true) or until the session is re-established (applicable if prevent-teardown = false)
    """


class PrefixLimitReceivedContainer14(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be received from the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from the peer, counting routes accepted and rejected by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = None
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = None
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """
    prefix_limit_exceeded: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prefix-limit-exceeded')
    ] = None
    """
    Changes from false to true when the number of received routes increases to max-received-routes + 1 and remains true until the number of received routes decreases back to max-received-routes (applicable if prevent-teardown = true) or until the session is re-established (applicable if prevent-teardown = false)
    """


class PrefixLimitReceivedContainer15(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be received from the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from the peer, counting routes accepted and rejected by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = None
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prefix_limit_exceeded: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prefix-limit-exceeded')
    ] = None
    """
    Changes from false to true when the number of received routes increases to max-received-routes + 1 and remains true until the number of received routes decreases back to max-received-routes (applicable if prevent-teardown = true) or until the session is re-established (applicable if prevent-teardown = false)
    """


class PrefixLimitReceivedContainer16(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be received from the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from the peer, counting routes accepted and rejected by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = None
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = None
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """
    prefix_limit_exceeded: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prefix-limit-exceeded')
    ] = None
    """
    Changes from false to true when the number of received routes increases to max-received-routes + 1 and remains true until the number of received routes decreases back to max-received-routes (applicable if prevent-teardown = true) or until the session is re-established (applicable if prevent-teardown = false)
    """


class PrefixLimitReceivedContainer2(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be received from each peer in the group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = 4294967295
    """
    Maximum number of routes allowed from each peer, counting routes accepted and rejected by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = 90
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = False
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """


class PrefixLimitReceivedContainer3(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be received from each peer in the group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = 4294967295
    """
    Maximum number of routes allowed from each peer, counting routes accepted and rejected by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = 90
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = False
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """


class PrefixLimitReceivedContainer4(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be received from each peer in the group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = 4294967295
    """
    Maximum number of routes allowed from each peer, counting routes accepted and rejected by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = 90
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = False
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """


class PrefixLimitReceivedContainer5(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be received from each peer in the group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = 4294967295
    """
    Maximum number of routes allowed from each peer, counting routes accepted and rejected by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = 90
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = False
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """


class PrefixLimitReceivedContainer6(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be received from each peer in the group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = 4294967295
    """
    Maximum number of routes allowed from each peer, counting routes accepted and rejected by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = 90
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = False
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """


class PrefixLimitReceivedContainer7(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be received from each peer in the group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = 4294967295
    """
    Maximum number of routes allowed from each peer, counting routes accepted and rejected by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = 90
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """


class PrefixLimitReceivedContainer8(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be received from each peer in the group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = 4294967295
    """
    Maximum number of routes allowed from each peer, counting routes accepted and rejected by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = 90
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = False
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """


class PrefixLimitReceivedContainer9(BaseModel):
    """
    Options for configuring the maximum number of routes, specific to this address family, allowed to be received from the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:max-received-routes', ge=1, le=4294967295),
    ] = None
    """
    Maximum number of routes allowed from the peer, counting routes accepted and rejected by import policies
    """
    warning_threshold_pct: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:warning-threshold-pct', ge=0, le=100)
    ] = None
    """
    A percentage of the max-received-routes limit that sets the threshold when BGP raises a warning log event
    """
    prevent_teardown: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prevent-teardown')
    ] = None
    """
    When false the session is immediately torn down when the max-received-routes limit is reached
    """
    prefix_limit_exceeded: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:prefix-limit-exceeded')
    ] = None
    """
    Changes from false to true when the number of received routes increases to max-received-routes + 1 and remains true until the number of received routes decreases back to max-received-routes (applicable if prevent-teardown = true) or until the session is re-established (applicable if prevent-teardown = false)
    """


class PrefixOptionsContainer(BaseModel):
    """
    Prefix options.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_options: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-ospf:prefix-options')
    ] = []
    """
    OSPFv3 prefix option flag list. This list will
    contain the identities for the OSPFv3 options
    that are set for the OSPFv3 prefix.
    """


class PrefixOptionsContainer2(BaseModel):
    """
    Prefix options.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_options: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-ospf:prefix-options')
    ] = []
    """
    OSPFv3 prefix option flag list. This list will
    contain the identities for the OSPFv3 options
    that are set for the OSPFv3 prefix.
    """


class PrefixOptionsContainer3(BaseModel):
    """
    Prefix options.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_options: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-ospf:prefix-options')
    ] = []
    """
    OSPFv3 prefix option flag list. This list will
    contain the identities for the OSPFv3 options
    that are set for the OSPFv3 prefix.
    """


class PrefixOptionsContainer4(BaseModel):
    """
    Prefix options.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_options: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-ospf:prefix-options')
    ] = []
    """
    OSPFv3 prefix option flag list. This list will
    contain the identities for the OSPFv3 options
    that are set for the OSPFv3 prefix.
    """


class PrefixOptionsContainer5(BaseModel):
    """
    Prefix options.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_options: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-ospf:prefix-options')
    ] = []
    """
    OSPFv3 prefix option flag list. This list will
    contain the identities for the OSPFv3 options
    that are set for the OSPFv3 prefix.
    """


class PrefixPolicyLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Policy to exclude prefixes from LFA SPF calculation
    """


class PrefixSidListEntry2(BaseModel):
    """
    Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment attached to an IGP prefix. An IGP-Prefix Segment is global (unless explicitly advertised otherwise) within the SR/IGP domain.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:value', ge=0, le=4294967295)
    ] = None
    """
    IGP Prefix-SID value.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum175]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    Flags associated with Prefix Segment-ID.
    """
    algorithm: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:algorithm', ge=0, le=255)
    ] = None
    """
    Prefix-SID algorithm to be used for path computation.
    """


class PrefixSidListEntry3(BaseModel):
    """
    Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment attached to an IGP prefix. An IGP-Prefix Segment is global (unless explicitly advertised otherwise) within the SR/IGP domain.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:value', ge=0, le=4294967295)
    ] = None
    """
    IGP Prefix-SID value.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum177]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    Flags associated with Prefix Segment-ID.
    """
    algorithm: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:algorithm', ge=0, le=255)
    ] = None
    """
    Prefix-SID algorithm to be used for path computation.
    """


class PrefixSidListEntry4(BaseModel):
    """
    Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment attached to an IGP prefix. An IGP-Prefix Segment is global (unless explicitly advertised otherwise) within the SR/IGP domain.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:value', ge=0, le=4294967295)
    ] = None
    """
    IGP Prefix-SID value.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum192]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    Flags associated with Prefix Segment-ID.
    """
    algorithm: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:algorithm', ge=0, le=255)
    ] = None
    """
    Prefix-SID algorithm to be used for path computation.
    """


class PrefixSidListEntry5(BaseModel):
    """
    Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment attached to an IGP prefix. An IGP-Prefix Segment is global (unless explicitly advertised otherwise) within the SR/IGP domain.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:value', ge=0, le=4294967295)
    ] = None
    """
    IGP Prefix-SID value.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum194]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    Flags associated with Prefix Segment-ID.
    """
    algorithm: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:algorithm', ge=0, le=255)
    ] = None
    """
    Prefix-SID algorithm to be used for path computation.
    """


class PrefixSidsContainer(BaseModel):
    """
    This container defines segment routing extensions for prefixes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_sid: Annotated[
        Optional[List[PrefixSidListEntry2]], Field(alias='srl_nokia-isis:prefix-sid')
    ] = None


class PrefixSidsContainer2(BaseModel):
    """
    This container defines segment routing extensions for prefixes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_sid: Annotated[
        Optional[List[PrefixSidListEntry3]], Field(alias='srl_nokia-isis:prefix-sid')
    ] = None


class PrefixSidsContainer3(BaseModel):
    """
    This container defines segment routing extensions for prefixes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_sid: Annotated[
        Optional[List[PrefixSidListEntry4]], Field(alias='srl_nokia-isis:prefix-sid')
    ] = None


class PrefixSidsContainer4(BaseModel):
    """
    This container defines segment routing extensions for prefixes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_sid: Annotated[
        Optional[List[PrefixSidListEntry5]], Field(alias='srl_nokia-isis:prefix-sid')
    ] = None


class PrefixesListEntry(BaseModel):
    """
    List of prefixes associated with the link.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-ospf:prefix'),
    ] = None
    """
    LSA Prefix.
    """
    prefix_options: Annotated[
        Optional[PrefixOptionsContainer2], Field(alias='srl_nokia-ospf:prefix-options')
    ] = None


class PrefixesListEntry2(BaseModel):
    """
    List of prefixes in this LSA.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-ospf:prefix'),
    ] = None
    """
    LSA Prefix.
    """
    prefix_options: Annotated[
        Optional[PrefixOptionsContainer5], Field(alias='srl_nokia-ospf:prefix-options')
    ] = None
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:metric', ge=0, le=65535)
    ] = None
    """
    Prefix Metric.
    """


class PriorityContainer(BaseModel):
    """
    Configure setup and hold priorities to be conveyed to the PCE for preemption purposes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    hold_priority: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:hold-priority', ge=0, le=7)
    ] = 0
    """
    Hold priority of a TE policy in relation to preemption action
    """
    setup_priority: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:setup-priority', ge=0, le=7)
    ] = 7
    """
    Setup priority of a TE policy in relation to preemption action
    """


class PurgeOiContainer(BaseModel):
    """
    This container defines ISIS purge TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    system_id_count: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:system-id-count', ge=0, le=255)
    ] = None
    """
    Number of system IDs carried in this TLV.
    """
    source_system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:source-system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    System ID of the Intermediate System that inserted this TLV.
    """
    received_system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:received-system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    System ID of the Intermediate System from which the purge was received.
    """


class ReceivedCapabilitiesContainer(BaseModel):
    """
    Capabilities signalled by the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    graceful_restart_capability: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:graceful-restart-capability')
    ] = None
    """
    Fault tolerance protection TLV 0x0503
    """
    entropy_label_capability: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:entropy-label-capability')
    ] = None
    """
    Entropy label capability. TLV 0x0206
    """
    dynamic_capability: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:dynamic-capability')
    ] = None
    """
    Dynamic capability advertisement capability. Indicates support for Capability messages. TLV 0x0506
    """
    point_to_multipoint_capability: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:point-to-multipoint-capability')
    ] = None
    """
    Point to multipoint FEC capability. TLV 0x0508
    """
    multipoint_to_multipoint_capability: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:multipoint-to-multipoint-capability')
    ] = None
    """
    Multipoint to multipoint FEC capability. TLV 0x0509
    """
    make_before_break_capability: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:make-before-break-capability')
    ] = None
    """
    Make before break capability. TLV 0x050A
    """
    state_advertisement_control: Annotated[
        Optional[StateAdvertisementControlContainer],
        Field(alias='srl_nokia-ldp:state-advertisement-control'),
    ] = None
    unrecognized_notification_capability: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-ldp:unrecognized-notification-capability'),
    ] = None
    """
    Unrecognized notification capability. TLV 0x0603
    """
    dual_stack_capability: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:dual-stack-capability')
    ] = None
    """
    Dual stack capability. TLV 0x0701
    """
    nokia_vendor_overload_capability: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:nokia-vendor-overload-capability')
    ] = None
    """
    Overload capability
    """


class ReceivedContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    candidate_rp_advertisement_messages: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:candidate-rp-advertisement-messages',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    The number of Candidate-RP Advertisements (C-RP-Adv) received
    """
    candidate_rp_advertisement_drops: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:candidate-rp-advertisement-drops', ge=0, le=4294967295
        ),
    ] = 0
    """
    The number of received but dropped Candidate-RP Advertisements
    """
    control_pdu_interface_drops: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:control-pdu-interface-drops', ge=0, le=4294967295),
    ] = 0
    """
    The number of control PDU drops

    These can be on an operationally down interface or on an interface on which PIM is not enabled.
    """


class ReceivedContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    candidate_rp_advertisement_messages: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:candidate-rp-advertisement-messages',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    The number of Candidate-RP Advertisements (C-RP-Adv) received
    """
    candidate_rp_advertisement_drops: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:candidate-rp-advertisement-drops', ge=0, le=4294967295
        ),
    ] = 0
    """
    The number of received but dropped Candidate-RP Advertisements
    """
    control_pdu_interface_drops: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:control-pdu-interface-drops', ge=0, le=4294967295),
    ] = 0
    """
    The number of control PDU drops

    These can be on an operationally down interface or on an interface on which PIM is not enabled.
    """


class RegisterPolicyLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Policies that apply to the register message
    """


class RemoteContainer2(BaseModel):
    """
    The remote parameters of the pseudowire
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    pseudowire_status: Annotated[
        Optional[List[EnumerationEnum311]],
        Field(alias='srl_nokia-network-instance:pseudowire-status'),
    ] = []
    """
    Indicates a peer fault in the pseudowire

    The bits are received in the pseudowire status bits TLV
    of the TLDP messages from the peer.
    """
    operational_egress_vc_label: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-network-instance:operational-egress-vc-label',
            ge=16,
            le=1048575,
        ),
    ] = None
    """
    The value of the operational egress vc label

    The egress virtual circuit mpls label is received via TLDP
    when the signaling is of type TLDP or configured if the signaling
    is static.
    """


class RemovePrivateAsContainer(BaseModel):
    """
    Container with options for removing private AS numbers (2-byte and 4-byte) from the advertised AS path towards all peers
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mode: Annotated[Optional[EnumerationEnum26], Field(alias='srl_nokia-bgp:mode')] = (
        'disabled'
    )
    """
    The method by which private AS numbers are removed from the advertised AS_PATH attribute
    """
    leading_only: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:leading-only')
    ] = False
    """
    If set to true then only delete or replace private AS numbers that appear before the first occurrence of a non-private ASN in the sequence of most recent ASNs in the AS path
    """
    ignore_peer_as: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:ignore-peer-as')
    ] = False
    """
    If set to true then do not delete or replace a private AS number that is the same as the peer AS number
    """


class RemovePrivateAsContainer2(BaseModel):
    """
    Container with options for removing private AS numbers (2-byte and 4-byte) from the advertised AS path towards all peers
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mode: Annotated[EnumerationEnum44, Field(alias='srl_nokia-bgp:mode')]
    """
    The method by which private AS numbers are removed from the advertised AS_PATH attribute
    """
    leading_only: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:leading-only')
    ] = False
    """
    If set to true then only delete or replace private AS numbers that appear before the first occurrence of a non-private ASN in the sequence of most recent ASNs in the AS path
    """
    ignore_peer_as: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:ignore-peer-as')
    ] = False
    """
    If set to true then do not delete or replace a private AS number that is the same as the peer AS number
    """


class RemovePrivateAsContainer3(BaseModel):
    """
    Container with options for removing private AS numbers (2-byte and 4-byte) from the advertised AS path towards all peers
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mode: Annotated[EnumerationEnum51, Field(alias='srl_nokia-bgp:mode')]
    """
    The method by which private AS numbers are removed from the advertised AS_PATH attribute
    """
    leading_only: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:leading-only')
    ] = False
    """
    If set to true then only delete or replace private AS numbers that appear before the first occurrence of a non-private ASN in the sequence of most recent ASNs in the AS path
    """
    ignore_peer_as: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:ignore-peer-as')
    ] = False
    """
    If set to true then do not delete or replace a private AS number that is the same as the peer AS number
    """


class ReservedMacsContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mac: Annotated[
        Optional[List[MacListEntry7]],
        Field(alias='srl_nokia-bridge-table-reserved-macs:mac'),
    ] = None


class ResidualBandwidthContainer(BaseModel):
    """
    This container defines unidirectional residual bandwidth.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    Residual bandwidth on a link,forwarding adjacency [RFC4206], or bundled link in IEEE floating-point format with units of bytes per second. For a link or forwarding adjacency, residual bandwidth is defined to be the Maximum Bandwidth [RFC5305] minus the bandwidth currently allocated to RSVP-TE label switched paths. For a bundled link, residual bandwidth is defined to be the sum of the component link residual bandwidths.
    """


class ResidualBandwidthContainer2(BaseModel):
    """
    This container defines unidirectional residual bandwidth.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    Residual bandwidth on a link,forwarding adjacency [RFC4206], or bundled link in IEEE floating-point format with units of bytes per second. For a link or forwarding adjacency, residual bandwidth is defined to be the Maximum Bandwidth [RFC5305] minus the bandwidth currently allocated to RSVP-TE label switched paths. For a bundled link, residual bandwidth is defined to be the sum of the component link residual bandwidths.
    """


class ResidualBandwidthContainer3(BaseModel):
    """
    This container defines unidirectional residual bandwidth.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    Residual bandwidth on a link,forwarding adjacency [RFC4206], or bundled link in IEEE floating-point format with units of bytes per second. For a link or forwarding adjacency, residual bandwidth is defined to be the Maximum Bandwidth [RFC5305] minus the bandwidth currently allocated to RSVP-TE label switched paths. For a bundled link, residual bandwidth is defined to be the sum of the component link residual bandwidths.
    """


class ResidualBandwidthContainer4(BaseModel):
    """
    This container defines unidirectional residual bandwidth.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    Residual bandwidth on a link,forwarding adjacency [RFC4206], or bundled link in IEEE floating-point format with units of bytes per second. For a link or forwarding adjacency, residual bandwidth is defined to be the Maximum Bandwidth [RFC5305] minus the bandwidth currently allocated to RSVP-TE label switched paths. For a bundled link, residual bandwidth is defined to be the sum of the component link residual bandwidths.
    """


class RestartingNeighborListContainer(BaseModel):
    """
    The list of neighbors that have restarted recently and that are currently being helped.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[List[NeighborListEntry3]], Field(alias='srl_nokia-isis:neighbor')
    ] = None


class RouteAdvertisementContainer(BaseModel):
    """
    Options for controlling route advertisement behavior
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rapid_withdrawal: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:rapid-withdrawal')
    ] = False
    """
    The true setting enables rapid-withdraw towards BGP peers

    If there is only one BGP route for an NLRI in BGP RIB, and this route is withdrawn or becomes invalid, rapid-withdraw causes BGP to immediately send a withdrawal of the BGP route even if the min-route-advertisement timer has not expired.
    """
    wait_for_fib_install: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:wait-for-fib-install')
    ] = True
    """
    The true setting causes BGP to NOT advertise initial reachability to a prefix, or a change of reachability to a prefix, until it receives acknowledgment from FIB manager that the route change has been applied

    Does not apply to route withdrawals.
    """


class RouteDistinguisherContainer(BaseModel):
    """
    Route Distinguisher (RD) of the bgp-vpn instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rd: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-bgp-vpn:rd'),
    ] = None
    """
    Route Distinguisher (RD) in the bgp-vpn instance. When used for evpn and if not configured, the RD is auto-derived
    as <ip-address>:<evi> where 'ip-address' is the ipv4 address associated to the subinterface lo0.1.
    """
    route_distinguisher_origin: Annotated[
        Optional[EnumerationEnum68],
        Field(alias='srl_nokia-bgp-vpn:route-distinguisher-origin'),
    ] = None
    """
    Origin of the operational Route Distinguisher (RD) of the bgp-vpn instance.

     'Auto-derived-from-evi' refers to an RD that is automatically allocated with the format <ip-address>:<evi>
     where 'ip-address' is the ipv4 address associated to the subinterface lo0.1.
     'Auto-derived-from-system-ip:0' refers to the RD for the EVPN Ethernet Segment routes that is automatically allocated with the format <ip-address>:0
     where 'ip-address' is the ipv4 address associated to the subinterface lo0.1.
     'Manual' refers to an RD that is configured.
     'None' indicates that the RD is neither configured nor auto-derived.
    """


class RouteFlapDampingContainer(BaseModel):
    """
    Configuration to control BGP route flap damping procedures
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    half_life: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:half-life', ge=1, le=45)
    ] = 15
    """
    Duration of time for the penalty amount (FOM) to be reduced by half if a route stays stable
    """
    max_suppress_time: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:max-suppress-time', ge=1, le=720)
    ] = 60
    """
    Maximum duration of time that advertisement of a route that has flapped can be suppressed
    """
    reuse_threshold: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:reuse-threshold', ge=1, le=20000)
    ] = 750
    """
    A suppressed route can be advertised again after falling below this penalty (FOM) level
    """
    suppress_threshold: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:suppress-threshold', ge=1, le=20000)
    ] = 3000
    """
    A flapping route is suppressed after rising above this penalty (FOM) level
    """


class RouteFlapDampingContainer10(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer11(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer12(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer13(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer14(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer15(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer16(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer17(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer18(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer19(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer2(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer20(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer21(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer22(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer23(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer24(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer25(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer26(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer27(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer28(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer29(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer3(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer30(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer4(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer5(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer6(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer7(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer8(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteFlapDampingContainer9(BaseModel):
    """
    Route flap damping state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:suppressed')
    ] = None
    """
    Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold
    """
    history: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:history')] = None
    """
    Reads true when the current FOM for a recently withdrawn route is greater than 0
    """
    decayed: Annotated[Optional[bool], Field(alias='srl_nokia-rib-bgp:decayed')] = None
    """
    Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold
    """


class RouteReflectorContainer(BaseModel):
    """
    Container with route reflection configuration options.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    client: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:client')] = False
    """
    When this is set to true all configured and dynamic sessions of the BGP instance are considered RR clients, subject to overrides at more specific levels of configuration.
    """
    cluster_id: Annotated[
        Optional[Union[ClusterIdTypeType1, DottedQuadType]],
        Field(alias='srl_nokia-bgp:cluster-id'),
    ] = None
    """
    The cluster-id to insert into the CLUSTER_LIST attribute when reflecting routes received by or sent to clients in this scope of this container. The default is the router-id.
    """


class RouteReflectorContainer2(BaseModel):
    """
    Container with route reflection configuration options.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    client: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:client')] = None
    """
    When this is set to true all configured and dynamic BGP sessions that belong to the peer-group are considered RR clients.
    """
    cluster_id: Annotated[
        Optional[Union[ClusterIdTypeType1, DottedQuadType]],
        Field(alias='srl_nokia-bgp:cluster-id'),
    ] = None
    """
    The cluster-id to insert into the CLUSTER_LIST attribute when reflecting routes received by or sent to each client in the peer-group. The default is inherited from instance level configuration.
    """


class RouteReflectorContainer3(BaseModel):
    """
    Container with route reflection configuration options.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    client: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:client')] = None
    """
    When this is set to true this BGP session is considered an RR client.
    """
    cluster_id: Annotated[
        Optional[Union[ClusterIdTypeType1, DottedQuadType]],
        Field(alias='srl_nokia-bgp:cluster-id'),
    ] = None
    """
    The cluster-id to insert into the CLUSTER_LIST attribute when reflecting routes received by or sent to this client. The default is inherited from group or instance level configuration.
    """


class RouteSummaryContainer(BaseModel):
    """
    Route summary information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_type: Annotated[
        Optional[List[RouteTypeListEntry]],
        Field(alias='srl_nokia-ip-route-tables:route-type'),
    ] = None


class RouteSummaryContainer2(BaseModel):
    """
    Route summary information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_type: Annotated[
        Optional[List[RouteTypeListEntry2]],
        Field(alias='srl_nokia-ip-route-tables:route-type'),
    ] = None


class RouteTableContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ingress_mpls_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp-evpn:ingress-mpls-label', ge=16, le=1048575),
    ] = None
    """
    The ingress label allocated for Routed traffic

    The ingress mpls label is advertised by the Route-Type 5(RT5)
    route and it is expected on received routed EVPN packets.
    """


class RouteTargetContainer(BaseModel):
    """
    Options related to the RT constraint address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    send_default_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:send-default-route')
    ] = False
    """
    When true the router advertises a synthetically generated default RTC route to each peer in the group
    """
    prefix_limit_received: Annotated[
        Optional[PrefixLimitReceivedContainer8],
        Field(alias='srl_nokia-bgp:prefix-limit-received'),
    ] = None
    prefix_limit_accepted: Annotated[
        Optional[PrefixLimitAcceptedContainer8],
        Field(alias='srl_nokia-bgp:prefix-limit-accepted'),
    ] = None


class RouteTargetContainer2(BaseModel):
    """
    Options related to the RT constraint address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    send_default_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:send-default-route')
    ] = None
    """
    When true the router advertises a synthetically generated default RTC route to the neighbor
    """
    prefix_limit_received: Annotated[
        Optional[PrefixLimitReceivedContainer16],
        Field(alias='srl_nokia-bgp:prefix-limit-received'),
    ] = None
    prefix_limit_accepted: Annotated[
        Optional[PrefixLimitAcceptedContainer16],
        Field(alias='srl_nokia-bgp:prefix-limit-accepted'),
    ] = None


class RouteTargetContainer3(BaseModel):
    """
    Route Target (RT) of the bgp-vpn instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    export_rt: Annotated[
        Optional[
            Union[
                BgpExtCommunityTypeType1,
                BgpExtCommunityTypeType2,
                BgpExtCommunityTypeType3,
                BgpExtCommunityTypeType4,
                BgpExtCommunityTypeType5,
                BgpExtCommunityTypeType6,
                BgpExtCommunityTypeType7,
                BgpExtCommunityTypeType8,
            ]
        ],
        Field(alias='srl_nokia-bgp-vpn:export-rt'),
    ] = None
    """
    Export Route Target (RT) in the bgp-vpn instance. When used for evpn and if not configured, the RT is auto-derived
    with the format <asn>:<evi> where 'asn' is the autonomous-system configured in the network-instance default.
    """
    export_route_target_origin: Annotated[
        Optional[EnumerationEnum69],
        Field(alias='srl_nokia-bgp-vpn:export-route-target-origin'),
    ] = None
    """
    Origin of the operational export Route Target (RT) of the bgp-vpn instance.

    'Auto-derived-from-evi' refers to an RT that is automatically allocated with the format <asn>:<evi>
    where 'asn' is the autonomous-system-number configured in the network-instance default.
    'Auto-derived-from-esi-bytes-1-6' refers to the ES-import RT for the EVPN Ethernet Segment routes that is derived from bytes 1 to 6 of the Ethernet Segment
    Identifier of the route.
    'From-export-policy' refers to export RT(s) that are set on the export-policy.
    'Manual' refers to an export RT that is configured.
    'None' indicates that the export RT is neither configured nor auto-derived.
    """
    import_rt: Annotated[
        Optional[
            Union[
                BgpExtCommunityTypeType1,
                BgpExtCommunityTypeType2,
                BgpExtCommunityTypeType3,
                BgpExtCommunityTypeType4,
                BgpExtCommunityTypeType5,
                BgpExtCommunityTypeType6,
                BgpExtCommunityTypeType7,
                BgpExtCommunityTypeType8,
            ]
        ],
        Field(alias='srl_nokia-bgp-vpn:import-rt'),
    ] = None
    """
    Import Route Target (RT) in the bgp-vpn instance. When used for evpn and if not configured, the RT is
    auto-derived with the format <asn>:<evi> where 'asn' is the autonomous-system configured in the network-instance default.
    """
    import_route_target_origin: Annotated[
        Optional[EnumerationEnum70],
        Field(alias='srl_nokia-bgp-vpn:import-route-target-origin'),
    ] = None
    """
    Origin of the operational import Route Target (RT) of the bgp-vpn instance.

    'Auto-derived-from-evi' refers to an RT that is automatically allocated with the format <asn>:<evi>
     where 'asn' is the autonomous-system-number configured in the network-instance default.
    'Auto-derived-from-esi-bytes-1-6' refers to the ES-import RT for the EVPN Ethernet Segment routes that is derived from bytes 1 to 6 of the Ethernet Segment
    Identifier of the route.
    'From-import-policy' refers to import RT(s) that are set on the import-policy.
    'Manual' refers to an import RT that is configured.
    'None' indicates that the import RT is neither configured nor auto-derived.
    """


class RouteTargetContainer4(BaseModel):
    """
    Route Target (RT) of the l3 multicast vpn instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    export_rt: Annotated[
        Optional[ExportRtContainer], Field(alias='srl_nokia-mvpn-l3:export-rt')
    ] = None
    import_rt: Annotated[
        Optional[ImportRtContainer], Field(alias='srl_nokia-mvpn-l3:import-rt')
    ] = None


class RouteListEntry20(BaseModel):
    """
    List of IPv6 routes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.
    """


class RouteListEntry22(BaseModel):
    """
    List of IPv6 routes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.
    """


class RouteListEntry24(BaseModel):
    """
    List of label-IPv6 routes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    received_mpls_label: Annotated[
        Optional[List[Union[MplsLabelNonReservedType, EnumerationEnum95]]],
        Field(alias='srl_nokia-rib-bgp:received-mpls-label'),
    ] = []
    """
    Received MPLS label value
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.
    """


class RouteListEntry27(BaseModel):
    """
    List of RTC routes in the RIB-IN, before import-policy modification.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    origin_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:origin-as', ge=1, le=4294967295)
    ] = None
    """
    The origin AS of the RTC route
    """
    route_target_prefix: Annotated[
        Optional[str], Field(alias='srl_nokia-rib-bgp:route-target-prefix')
    ] = None
    """
    The RTC prefix in the format number1:number2/length, where number1 is an IPv4 address or a 2-byte ASN or a 4-byte ASN, number2 is a 2-byte or 4-byte administrative value and length is a number of bits between 0 and 96

    The default RTC prefix is represented by 0:0/0
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.
    """


class RouteListEntry29(BaseModel):
    """
    List of RTC routes in the RIB-OUT, after export-policy modification.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    origin_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:origin-as', ge=1, le=4294967295)
    ] = None
    """
    The origin AS of the RTC route
    """
    route_target_prefix: Annotated[
        Optional[str], Field(alias='srl_nokia-rib-bgp:route-target-prefix')
    ] = None
    """
    The RTC prefix in the format number1:number2/length, where number1 is an IPv4 address or a 2-byte ASN or a 4-byte ASN, number2 is a 2-byte or 4-byte administrative value and length is a number of bits between 0 and 96

    The default RTC prefix is represented by 0:0/0
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.
    """


class RouteListEntry4(BaseModel):
    """
    List of IPv4 routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """


class RouteListEntry6(BaseModel):
    """
    List of IPv4 routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/
    attr-sets/attr-set/index
    """


class RouteListEntry8(BaseModel):
    """
    List of IPv4 routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    received_mpls_label: Annotated[
        Optional[List[Union[MplsLabelNonReservedType, EnumerationEnum95]]],
        Field(alias='srl_nokia-rib-bgp:received-mpls-label'),
    ] = []
    """
    Received MPLS label value
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """


class RouterIdLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    IPv4 Traffic Engineering router ID of the node. For traffic engineering, it guarantees that we have a single stable address that can always be referenced in a path that will be reachable from multiple hops away, regardless of the state of the node's interfaces.
    """


class RouterIdLeafList2(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$'
        ),
    ]
    """
    IPv6 Traffic Engineering router ID of the node. For traffic engineering, it guarantees that we have a single stable address that can always be referenced in a path that will be reachable from multiple hops away, regardless of the state of the node's interfaces.
    """


class RtrAdvLsaLimitContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    log_only: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:log-only')] = None
    max_lsa_count: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:max-lsa-count', ge=1, le=4294967295)
    ] = None
    overload_timeout: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:overload-timeout', ge=1, le=1800)
    ] = None
    warning_threshold: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:warning-threshold', ge=0, le=100)
    ] = 0
    """
    Integer indicating a percentage value
    """


class SeamlessBfdContainer2(BaseModel):
    """
    When present, this node attempts to setup a seamless BFD session on every segment-list of every SR policy that uses maintenance-policy, but only if that SR policy is a primary or standby (secondary) candidate path. The transition of an SBFD session from up to down is a trigger for rerouting traffic around a failed primary path.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    detection_multiplier: Annotated[
        Optional[int],
        Field(alias='srl_nokia-maintenance-policies:detection-multiplier', ge=3, le=20),
    ] = 3
    """
    The number of packets that must be missed to declare this session as down

    The detection interval for the BFD session is calculated by multiplying the
    value of the negotiated transmission interval by this value.
    """
    desired_minimum_transmit_interval: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-maintenance-policies:desired-minimum-transmit-interval',
            ge=10000,
            le=100000000,
        ),
    ] = 1000000
    """
    The minimum interval between transmission of BFD control packets

    This value is advertised to the peer, however the actual interval used is specified
    by taking the maximum of desired-minimum-transmit-interval and the value of the remote
    required-minimum-receive interval value.
    This value is specified as an integer number of microseconds.
    """
    return_path_label: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-maintenance-policies:return-path-label',
            ge=0,
            le=4294967295,
        ),
    ] = None
    """
    The MPLS label to be used to by the far-end device to return the BFD message

    This label is added as the bottom value in the segment routing label stack
    and will be used by the far-end device to return BFD message to the originator.
    This value could either be a MPLS label or a binding SID that will be used
    at the far-end to match an appropriate polciy to return the traffic.
    """
    hold_down_timer: Annotated[
        Optional[Union[HoldDownTimerLeaf61, EnumerationEnum373]],
        Field(alias='srl_nokia-maintenance-policies:hold-down-timer'),
    ] = '4'
    """
    Specifies a hold-down timer value when seamless-bfd is enabled

    The timer is started when the number of S-BFD sessions that are up drops below the threshold. The TE-policy path is not considered to be up again until the hold-down timer has expired and the number of S-BFD sessions that are up equals or exceeds the threshold.
    A grace preiod after session down such that sBFD session flaps does not impact active path.

    The default is 4 seconds.
    """
    wait_for_up_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-maintenance-policies:wait-for-up-timer', ge=1, le=1800),
    ] = 4
    """
    Specifies a wait-for-up timer value when seamless-bfd is enabled

    This timer takes effect if BFD does not come up, or BFD goes from up to down. The timer is started when BFD is first enabled on a segment-list or BFD transitions from up to down. When the timer expires if BFD is not yet come up, then the path is torn down by removing it from the TTM and the PI and the retry timer is started.

    The default is 4 seconds.
    """
    mode: Annotated[
        Optional[EnumerationEnum374], Field(alias='srl_nokia-maintenance-policies:mode')
    ] = 'none'
    """
    Specifies requested protection method

    ecmp-protected is valid for colored te-policies and programs all the valid segment lists and manages their availability using seamless-BFD for each segment list. Switchover between candidate paths is triggered by the node if number of segment-lists up is less than the threshold on the active policy.ecmp-protected is not valid for uncolored sr-policies.

    linear is valid for uncolored te-policies and triggers fail-over among active segment-lists, primary to standby / secondary.
    """
    threshold: Annotated[
        Optional[int],
        Field(alias='srl_nokia-maintenance-policies:threshold', ge=1, le=32),
    ] = 1
    """
    Minimum number of up seamless-BFD sessions for up te-policy
    """


class SegmentDepthContainer(BaseModel):
    """
    Configuration for the maximum number of SIDs/segments
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    segment_limit: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:segment-limit', ge=1, le=14)
    ] = None
    """
    The maximum number of segments in the segment-list
    """


class SegmentDepthContainer2(BaseModel):
    """
    Configuration for the maximum number of SIDs/segments
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    segment_limit: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:segment-limit', ge=0, le=255)
    ] = None
    """
    The maximum number of segments in the segment-list
    """


class SegmentDepthContainer3(BaseModel):
    """
    Configuration for the maximum number of SIDs/segments
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    segment_limit: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:segment-limit', ge=0, le=255)
    ] = None
    """
    The maximum number of segments in the segment-list
    """


class SegmentRoutingAdjacencySidListEntry(BaseModel):
    """
    List of Adj-SID sub-TLVs associated with the neighbor. Sub-TLV = 31.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    sr_index_or_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:sr-index-or-label', ge=0, le=4294967295),
    ] = None
    """
    An index representing an offset in the SID/label space advertised by the router or else a direct encoding of an MPLS label value.
    """
    ipv6_family: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:ipv6-family')
    ] = None
    """
    If set, then the Adj-SID is used for forwarding IPv6 traffic to the neighbor; else the Adj-SID is used for forwarding IPv4 traffic.
    """
    backup: Annotated[Optional[bool], Field(alias='srl_nokia-isis:backup')] = None
    """
    If set, the Adj-SID is eligible for protection
    """
    value: Annotated[Optional[bool], Field(alias='srl_nokia-isis:value')] = None
    """
    If set then the Adj-SID carries a value
    """
    local: Annotated[Optional[bool], Field(alias='srl_nokia-isis:local')] = None
    """
    If set, then the value/index carried by the Adj-SID has local significance.
    """
    adj_set: Annotated[Optional[bool], Field(alias='srl_nokia-isis:adj-set')] = None
    """
    When set, the S-Flag indicates that the Adj-SID refers to a set of adjacencies.
    """
    persistent: Annotated[Optional[bool], Field(alias='srl_nokia-isis:persistent')] = (
        None
    )
    """
    When set, the P-Flag indicates that the Adj-SID is persistently allocated, i.e., the Adj-SID value remains consistent across router restart and/or interface flap
    """
    weight: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:weight', ge=0, le=255)
    ] = None
    """
    The value represents the weight of the Adj-SID for the purpose of load balancing
    """


class SegmentRoutingAdjacencySidListEntry2(BaseModel):
    """
    List of Adj-SID sub-TLVs associated with the neighbor. Sub-TLV = 31.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    sr_index_or_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:sr-index-or-label', ge=0, le=4294967295),
    ] = None
    """
    An index representing an offset in the SID/label space advertised by the router or else a direct encoding of an MPLS label value.
    """
    ipv6_family: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:ipv6-family')
    ] = None
    """
    If set, then the Adj-SID is used for forwarding IPv6 traffic to the neighbor; else the Adj-SID is used for forwarding IPv4 traffic.
    """
    backup: Annotated[Optional[bool], Field(alias='srl_nokia-isis:backup')] = None
    """
    If set, the Adj-SID is eligible for protection
    """
    value: Annotated[Optional[bool], Field(alias='srl_nokia-isis:value')] = None
    """
    If set then the Adj-SID carries a value
    """
    local: Annotated[Optional[bool], Field(alias='srl_nokia-isis:local')] = None
    """
    If set, then the value/index carried by the Adj-SID has local significance.
    """
    adj_set: Annotated[Optional[bool], Field(alias='srl_nokia-isis:adj-set')] = None
    """
    When set, the S-Flag indicates that the Adj-SID refers to a set of adjacencies.
    """
    persistent: Annotated[Optional[bool], Field(alias='srl_nokia-isis:persistent')] = (
        None
    )
    """
    When set, the P-Flag indicates that the Adj-SID is persistently allocated, i.e., the Adj-SID value remains consistent across router restart and/or interface flap
    """
    weight: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:weight', ge=0, le=255)
    ] = None
    """
    The value represents the weight of the Adj-SID for the purpose of load balancing
    """


class SegmentRoutingAlgorithmsContainer(BaseModel):
    """
    This container defines SR algorithm sub-TLV 19.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    algorithm: Annotated[
        Optional[List[EnumerationEnum163]], Field(alias='srl_nokia-isis:algorithm')
    ] = []
    """
    The Segment Routing algorithm that is described by the TLV.
    """


class SegmentRoutingLanAdjacencySidListEntry(BaseModel):
    """
    List of LAN Adj-SID sub-TLVs. Each describes the set of Adj-SIDs the router assigned to each of its LAN neighbors. Sub-TLV = 32.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    sr_index_or_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:sr-index-or-label', ge=0, le=4294967295),
    ] = None
    """
    An index representing an offset in the SID/label space advertised by the router or else a direct encoding of an MPLS label value.
    """
    neighbor_system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:neighbor-system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    IS-IS system-ID of the LAN neighbor
    """
    ipv6_family: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:ipv6-family')
    ] = None
    """
    If set, then the Adj-SID is used for forwarding IPv6 traffic to the neighbor; else the Adj-SID is used for forwarding IPv4 traffic.
    """
    backup: Annotated[Optional[bool], Field(alias='srl_nokia-isis:backup')] = None
    """
    If set, the Adj-SID is eligible for protection
    """
    value: Annotated[Optional[bool], Field(alias='srl_nokia-isis:value')] = None
    """
    If set then the Adj-SID carries a value
    """
    local: Annotated[Optional[bool], Field(alias='srl_nokia-isis:local')] = None
    """
    If set, then the value/index carried by the Adj-SID has local significance.
    """
    adj_set: Annotated[Optional[bool], Field(alias='srl_nokia-isis:adj-set')] = None
    """
    When set, the S-Flag indicates that the Adj-SID refers to a set of adjacencies.
    """
    persistent: Annotated[Optional[bool], Field(alias='srl_nokia-isis:persistent')] = (
        None
    )
    """
    When set, the P-Flag indicates that the Adj-SID is persistently allocated, i.e., the Adj-SID value remains consistent across router restart and/or interface flap
    """
    weight: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:weight', ge=0, le=255)
    ] = None
    """
    The value represents the weight of the Adj-SID for the purpose of load balancing
    """


class SegmentRoutingLanAdjacencySidListEntry2(BaseModel):
    """
    List of LAN Adj-SID sub-TLVs. Each describes the set of Adj-SIDs the router assigned to each of its LAN neighbors. Sub-TLV = 32.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    sr_index_or_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:sr-index-or-label', ge=0, le=4294967295),
    ] = None
    """
    An index representing an offset in the SID/label space advertised by the router or else a direct encoding of an MPLS label value.
    """
    neighbor_system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:neighbor-system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    IS-IS system-ID of the LAN neighbor
    """
    ipv6_family: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:ipv6-family')
    ] = None
    """
    If set, then the Adj-SID is used for forwarding IPv6 traffic to the neighbor; else the Adj-SID is used for forwarding IPv4 traffic.
    """
    backup: Annotated[Optional[bool], Field(alias='srl_nokia-isis:backup')] = None
    """
    If set, the Adj-SID is eligible for protection
    """
    value: Annotated[Optional[bool], Field(alias='srl_nokia-isis:value')] = None
    """
    If set then the Adj-SID carries a value
    """
    local: Annotated[Optional[bool], Field(alias='srl_nokia-isis:local')] = None
    """
    If set, then the value/index carried by the Adj-SID has local significance.
    """
    adj_set: Annotated[Optional[bool], Field(alias='srl_nokia-isis:adj-set')] = None
    """
    When set, the S-Flag indicates that the Adj-SID refers to a set of adjacencies.
    """
    persistent: Annotated[Optional[bool], Field(alias='srl_nokia-isis:persistent')] = (
        None
    )
    """
    When set, the P-Flag indicates that the Adj-SID is persistently allocated, i.e., the Adj-SID value remains consistent across router restart and/or interface flap
    """
    weight: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:weight', ge=0, le=255)
    ] = None
    """
    The value represents the weight of the Adj-SID for the purpose of load balancing
    """


class SegmentRoutingPrefixSidContainer(BaseModel):
    """
    Carries a segment routing prefix SID
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    re_advertised: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:re-advertised')
    ] = None
    """
    If set the prefix to which this Prefix-SID is attached has been propagated by the router from either another level or from another protocol.
    """
    node_sid: Annotated[Optional[bool], Field(alias='srl_nokia-isis:node-sid')] = None
    """
    If set the prefix SID refers to the router identified by the prefix.
    """
    penultimate_hop_popping: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:penultimate-hop-popping')
    ] = None
    """
    If set the penultimate hop MUST NOT pop the Prefix-SID before delivering the packet to the node that advertised the Prefix-SID.
    """
    explicit_null: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:explicit-null')
    ] = None
    """
    If set any upstream neighbor of the Prefix-SID originator MUST replace the Prefix-SID with a Prefix-SID that has an Explicit NULL value (0 for IPv4 and 2 for IPv6) before forwarding the packet
    """
    value: Annotated[Optional[bool], Field(alias='srl_nokia-isis:value')] = None
    """
    If set then the Prefix-SID carries a value
    """
    local: Annotated[Optional[bool], Field(alias='srl_nokia-isis:local')] = None
    """
    If set, then the value/index carried by the Prefix-SID has local significance.
    """
    algorithm: Annotated[
        Optional[EnumerationEnum199], Field(alias='srl_nokia-isis:algorithm')
    ] = None
    """
    Contains the identifier of the algorithm the router uses to compute the reachability of the prefix to which the Prefix-SID is associated
    """
    sr_index_or_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:sr-index-or-label', ge=0, le=4294967295),
    ] = None
    """
    An index representing an offset in the SID/label space advertised by the router or else a direct encoding of an MPLS label value.
    """


class SegmentRoutingPrefixSidContainer2(BaseModel):
    """
    Carries a segment routing prefix SID
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    re_advertised: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:re-advertised')
    ] = None
    """
    If set the prefix to which this Prefix-SID is attached has been propagated by the router from either another level or from another protocol.
    """
    node_sid: Annotated[Optional[bool], Field(alias='srl_nokia-isis:node-sid')] = None
    """
    If set the prefix SID refers to the router identified by the prefix.
    """
    penultimate_hop_popping: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:penultimate-hop-popping')
    ] = None
    """
    If set the penultimate hop MUST NOT pop the Prefix-SID before delivering the packet to the node that advertised the Prefix-SID.
    """
    explicit_null: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:explicit-null')
    ] = None
    """
    If set any upstream neighbor of the Prefix-SID originator MUST replace the Prefix-SID with a Prefix-SID that has an Explicit NULL value (0 for IPv4 and 2 for IPv6) before forwarding the packet
    """
    value: Annotated[Optional[bool], Field(alias='srl_nokia-isis:value')] = None
    """
    If set then the Prefix-SID carries a value
    """
    local: Annotated[Optional[bool], Field(alias='srl_nokia-isis:local')] = None
    """
    If set, then the value/index carried by the Prefix-SID has local significance.
    """
    algorithm: Annotated[
        Optional[EnumerationEnum200], Field(alias='srl_nokia-isis:algorithm')
    ] = None
    """
    Contains the identifier of the algorithm the router uses to compute the reachability of the prefix to which the Prefix-SID is associated
    """
    sr_index_or_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:sr-index-or-label', ge=0, le=4294967295),
    ] = None
    """
    An index representing an offset in the SID/label space advertised by the router or else a direct encoding of an MPLS label value.
    """


class SegmentRoutingPrefixSidContainer3(BaseModel):
    """
    Carries a segment routing prefix SID
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    re_advertised: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:re-advertised')
    ] = None
    """
    If set the prefix to which this Prefix-SID is attached has been propagated by the router from either another level or from another protocol.
    """
    node_sid: Annotated[Optional[bool], Field(alias='srl_nokia-isis:node-sid')] = None
    """
    If set the prefix SID refers to the router identified by the prefix.
    """
    penultimate_hop_popping: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:penultimate-hop-popping')
    ] = None
    """
    If set the penultimate hop MUST NOT pop the Prefix-SID before delivering the packet to the node that advertised the Prefix-SID.
    """
    explicit_null: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:explicit-null')
    ] = None
    """
    If set any upstream neighbor of the Prefix-SID originator MUST replace the Prefix-SID with a Prefix-SID that has an Explicit NULL value (0 for IPv4 and 2 for IPv6) before forwarding the packet
    """
    value: Annotated[Optional[bool], Field(alias='srl_nokia-isis:value')] = None
    """
    If set then the Prefix-SID carries a value
    """
    local: Annotated[Optional[bool], Field(alias='srl_nokia-isis:local')] = None
    """
    If set, then the value/index carried by the Prefix-SID has local significance.
    """
    algorithm: Annotated[
        Optional[EnumerationEnum202], Field(alias='srl_nokia-isis:algorithm')
    ] = None
    """
    Contains the identifier of the algorithm the router uses to compute the reachability of the prefix to which the Prefix-SID is associated
    """
    sr_index_or_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:sr-index-or-label', ge=0, le=4294967295),
    ] = None
    """
    An index representing an offset in the SID/label space advertised by the router or else a direct encoding of an MPLS label value.
    """


class SegmentRoutingPrefixSidContainer4(BaseModel):
    """
    Carries a segment routing prefix SID
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    re_advertised: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:re-advertised')
    ] = None
    """
    If set the prefix to which this Prefix-SID is attached has been propagated by the router from either another level or from another protocol.
    """
    node_sid: Annotated[Optional[bool], Field(alias='srl_nokia-isis:node-sid')] = None
    """
    If set the prefix SID refers to the router identified by the prefix.
    """
    penultimate_hop_popping: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:penultimate-hop-popping')
    ] = None
    """
    If set the penultimate hop MUST NOT pop the Prefix-SID before delivering the packet to the node that advertised the Prefix-SID.
    """
    explicit_null: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:explicit-null')
    ] = None
    """
    If set any upstream neighbor of the Prefix-SID originator MUST replace the Prefix-SID with a Prefix-SID that has an Explicit NULL value (0 for IPv4 and 2 for IPv6) before forwarding the packet
    """
    value: Annotated[Optional[bool], Field(alias='srl_nokia-isis:value')] = None
    """
    If set then the Prefix-SID carries a value
    """
    local: Annotated[Optional[bool], Field(alias='srl_nokia-isis:local')] = None
    """
    If set, then the value/index carried by the Prefix-SID has local significance.
    """
    algorithm: Annotated[
        Optional[EnumerationEnum203], Field(alias='srl_nokia-isis:algorithm')
    ] = None
    """
    Contains the identifier of the algorithm the router uses to compute the reachability of the prefix to which the Prefix-SID is associated
    """
    sr_index_or_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:sr-index-or-label', ge=0, le=4294967295),
    ] = None
    """
    An index representing an offset in the SID/label space advertised by the router or else a direct encoding of an MPLS label value.
    """


class SelectionAttributesContainer(BaseModel):
    """
    Attributes for narrowing the selection of tunnels
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag: Annotated[Optional[TagContainer], Field(alias='srl_nokia-bgp-evpn:tag')] = None


class SelectionAttributesContainer10(BaseModel):
    """
    Attributes for narrowing the selection of tunnels
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag: Annotated[Optional[TagContainer10], Field(alias='srl_nokia-bgp:tag')] = None


class SelectionAttributesContainer11(BaseModel):
    """
    Attributes for narrowing the selection of tunnels
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag: Annotated[Optional[TagContainer11], Field(alias='srl_nokia-bgp:tag')] = None


class SelectionAttributesContainer12(BaseModel):
    """
    Attributes for narrowing the selection of tunnels
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag: Annotated[Optional[TagContainer12], Field(alias='srl_nokia-bgp:tag')] = None


class SelectionAttributesContainer13(BaseModel):
    """
    Attributes for narrowing the selection of tunnels
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag: Annotated[Optional[TagContainer13], Field(alias='srl_nokia-bgp:tag')] = None


class SelectionAttributesContainer14(BaseModel):
    """
    Attributes for narrowing the selection of tunnels
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag: Annotated[Optional[TagContainer14], Field(alias='srl_nokia-bgp:tag')] = None


class SelectionAttributesContainer2(BaseModel):
    """
    Attributes for narrowing the selection of tunnels
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag: Annotated[Optional[TagContainer2], Field(alias='srl_nokia-bgp-ipvpn:tag')] = (
        None
    )


class SelectionAttributesContainer3(BaseModel):
    """
    Attributes for narrowing the selection of tunnels
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag: Annotated[Optional[TagContainer3], Field(alias='srl_nokia-bgp:tag')] = None


class SelectionAttributesContainer4(BaseModel):
    """
    Attributes for narrowing the selection of tunnels
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag: Annotated[Optional[TagContainer4], Field(alias='srl_nokia-bgp:tag')] = None


class SelectionAttributesContainer5(BaseModel):
    """
    Attributes for narrowing the selection of tunnels
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag: Annotated[Optional[TagContainer5], Field(alias='srl_nokia-bgp:tag')] = None


class SelectionAttributesContainer6(BaseModel):
    """
    Attributes for narrowing the selection of tunnels
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag: Annotated[Optional[TagContainer6], Field(alias='srl_nokia-bgp:tag')] = None


class SelectionAttributesContainer7(BaseModel):
    """
    Attributes for narrowing the selection of tunnels
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag: Annotated[Optional[TagContainer7], Field(alias='srl_nokia-bgp:tag')] = None


class SelectionAttributesContainer8(BaseModel):
    """
    Attributes for narrowing the selection of tunnels
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag: Annotated[Optional[TagContainer8], Field(alias='srl_nokia-bgp:tag')] = None


class SelectionAttributesContainer9(BaseModel):
    """
    Attributes for narrowing the selection of tunnels
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag: Annotated[Optional[TagContainer9], Field(alias='srl_nokia-bgp:tag')] = None


class SendMaxCase(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    send_max: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:send-max', ge=1, le=16)
    ] = None
    """
    Send the N best paths for a single NLRI, or as many as possible until there are no more valid paths to send.

    This ensures the best path is advertised but does not limit the additional paths to being 'used' paths.
    """


class SendMaxCase2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    send_max: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:send-max', ge=1, le=16)
    ] = None
    """
    Send the N best paths for a single NLRI, or as many as possible until there are no more valid paths to send.

    This ensures the best path is advertised but does not limit the additional paths to being 'used' paths.
    """


class SendMaxCase3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    send_max: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:send-max', ge=1, le=16)
    ] = None
    """
    Send the N best paths for a single NLRI, or as many as possible until there are no more valid paths to send.

    This ensures the best path is advertised but does not limit the additional paths to being 'used' paths.
    """


class SendMultipathCase(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    send_multipath: Annotated[
        Optional[SendMultipathLeaf], Field(alias='srl_nokia-bgp:send-multipath')
    ] = None


class SendMultipathCase2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    send_multipath: Annotated[
        Optional[SendMultipathLeaf2], Field(alias='srl_nokia-bgp:send-multipath')
    ] = None


class SendMultipathCase3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    send_multipath: Annotated[
        Optional[SendMultipathLeaf3], Field(alias='srl_nokia-bgp:send-multipath')
    ] = None


class SetTagSetLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Reference to a tag-set defined under routing-policy
    """


class SetTagSetLeafList2(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Reference to a tag-set defined under routing-policy
    """


class SetTagSetLeafList3(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Reference to a tag-set defined under routing-policy
    """


class SetTagSetLeafList4(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Reference to a tag-set defined under routing-policy
    """


class SetupPriorityListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    priority: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:priority', ge=0, le=7)
    ] = None
    """
    Setup priority level of 0 through 7 to be used by Unreserved Bandwidth sub-TLV 11.
    """
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The amount of bandwidth reservable in this direction on this link. Note that for oversubscription purposes, this can be greater than the bandwidth of the link. It contains eight 32-bit IEEE floating point numbers(one for each priority). The units are bytes (not bits!) per second. The values correspond to the bandwidth that can be reserved with a setup priority of 0 through 7, arranged in increasing order with priority 0 occurring at the start of the sub-TLV, and priority 7 at the end of the sub-TLV.
    """


class SetupPriorityListEntry2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    priority: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:priority', ge=0, le=7)
    ] = None
    """
    Setup priority level of 0 through 7 to be used by Unreserved Bandwidth sub-TLV 11.
    """
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The amount of bandwidth reservable in this direction on this link. Note that for oversubscription purposes, this can be greater than the bandwidth of the link. It contains eight 32-bit IEEE floating point numbers(one for each priority). The units are bytes (not bits!) per second. The values correspond to the bandwidth that can be reserved with a setup priority of 0 through 7, arranged in increasing order with priority 0 occurring at the start of the sub-TLV, and priority 7 at the end of the sub-TLV.
    """


class SetupPriorityListEntry3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    priority: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:priority', ge=0, le=7)
    ] = None
    """
    Setup priority level of 0 through 7 to be used by Unreserved Bandwidth sub-TLV 11.
    """
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The amount of bandwidth reservable in this direction on this link. Note that for oversubscription purposes, this can be greater than the bandwidth of the link. It contains eight 32-bit IEEE floating point numbers(one for each priority). The units are bytes (not bits!) per second. The values correspond to the bandwidth that can be reserved with a setup priority of 0 through 7, arranged in increasing order with priority 0 occurring at the start of the sub-TLV, and priority 7 at the end of the sub-TLV.
    """


class SetupPriorityListEntry4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    priority: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:priority', ge=0, le=7)
    ] = None
    """
    Setup priority level of 0 through 7 to be used by Unreserved Bandwidth sub-TLV 11.
    """
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The amount of bandwidth reservable in this direction on this link. Note that for oversubscription purposes, this can be greater than the bandwidth of the link. It contains eight 32-bit IEEE floating point numbers(one for each priority). The units are bytes (not bits!) per second. The values correspond to the bandwidth that can be reserved with a setup priority of 0 through 7, arranged in increasing order with priority 0 occurring at the start of the sub-TLV, and priority 7 at the end of the sub-TLV.
    """


class SourceRouterListEntry(BaseModel):
    """
    The ISIS routers that provided the prefix SID. (Multiple in the case of redistribution.)
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    The system-id of an ISIS router that originated or redistributed the prefix SID
    """
    level_number: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:level-number', ge=1, le=2)
    ] = None
    """
    The level of the LSP that advertises the prefix SID
    """
    local_system: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:local-system')
    ] = None
    """
    True when the system ID belongs to the local system.
    """
    flags: Annotated[Optional[FlagsContainer], Field(alias='srl_nokia-isis:flags')] = (
        None
    )


class SourceListEntry(BaseModel):
    """
    Multicast source address list
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld:source',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Multicast source address
    """


class SourceListEntry13(BaseModel):
    """
    Multicast source address list
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:source',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Multicast source address.
    """


class SourceListEntry16(BaseModel):
    """
    Multicast source address list
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp:source',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Multicast source address
    """


class SourceListEntry18(BaseModel):
    """
    Multicast source address list
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp:source',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Multicast source address
    """


class SourceListEntry19(BaseModel):
    """
    Multicast source address list
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp:source',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Multicast source address
    """


class SourceListEntry3(BaseModel):
    """
    Multicast source address list
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld:source',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Multicast source address
    """


class SourceListEntry4(BaseModel):
    """
    Multicast source address list
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld:source',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Multicast source address
    """


class SourceListEntry8(BaseModel):
    """
    Multicast source address list
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:source',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Multicast source address.
    """


class SplitHorizonGroupListEntry(BaseModel):
    """
    List of split-horizon-groups created in the network-instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-network-instance:name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Split-horizon-group created in the network-instance

    Multiple split-horizon-groups can be configured within the
    same network-instance of type mac-vrf. Only objects associated
    to different split-horizon-groups can forward packets among
    each other.
    """


class SrCapabilitiesContainer(BaseModel):
    """
    Used to advertise its SR data plane capability and the range of MPLS label values each router uses for Segment Routing in the case where global SIDs are allocated.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_support: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:ipv4-support')
    ] = None
    """
    When true, the router is capable of processing SR-MPLS-encapsulated IPv4 packets on all interfaces
    """
    ipv6_support: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:ipv6-support')
    ] = None
    """
    When true, the router is capable of processing SR-MPLS-encapsulated IPv6 packets on all interfaces
    """
    srgb_descriptor: Annotated[
        Optional[List[SrgbDescriptorListEntry2]],
        Field(alias='srl_nokia-isis:srgb-descriptor'),
    ] = None


class SrLocalBlockContainer(BaseModel):
    """
    Used to advertise the range of labels the node has reserved for local SIDs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    srlb_descriptor: Annotated[
        Optional[List[SrlbDescriptorListEntry]],
        Field(alias='srl_nokia-isis:srlb-descriptor'),
    ] = None


class SrgbDescriptorListEntry(BaseModel):
    """
    Descriptor entry within the SR capabilty sub-TLV
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    range: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:range', ge=0, le=4294967295)
    ] = None
    """
    Number of SRGB elements. The range value MUST be greater than 0.
    """
    label: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:label', ge=16, le=1048575)
    ] = None
    """
    The first value of the SRGB when expressed as an MPLS label.
    """


class SrgbDescriptorsContainer(BaseModel):
    """
    SRGB Descriptors included within the SR capability sub-TLV
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    srgb_descriptor: Annotated[
        Optional[List[SrgbDescriptorListEntry]],
        Field(alias='srl_nokia-isis:srgb-descriptor'),
    ] = None


class SrgbOriginatorContainer(BaseModel):
    """
    This container defines TLV 3.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    srgb: Annotated[
        Optional[List[SrgbLeafList]], Field(alias='srl_nokia-rib-bgp:srgb')
    ] = []
    """
    List of SRGB ranges, each in the format <first-label>:<number-of-labels>
    """


class SrlgMembershipLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    The list of srlgs generically associated with the interface (not application specific)
    """


class StargCase(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    starg: Annotated[Optional[StargLeaf], Field(alias='srl_nokia-mld:starg')] = None


class StargCase2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    starg: Annotated[
        Optional[StargLeaf2], Field(alias='srl_nokia-igmp-snooping:starg')
    ] = None


class StargCase3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    starg: Annotated[
        Optional[StargLeaf3], Field(alias='srl_nokia-mld-snooping:starg')
    ] = None


class StargCase4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    starg: Annotated[Optional[StargLeaf4], Field(alias='srl_nokia-igmp:starg')] = None


class StaticContainer2(BaseModel):
    """
    Static pseudowire parameters

    The virtual circuit labels are configured on both ends of the
    pseudowire.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ingress_vc_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-network-instance:ingress-vc-label', ge=16, le=1048575),
    ] = None
    """
    The value of the configured ingress vc label

    The ingress virtual circuit mpls label is configured if the
    pseudowire signaling is static.
    """
    egress_vc_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-network-instance:egress-vc-label', ge=16, le=1048575),
    ] = None
    """
    The value of the configured egress vc label

    The egress virtual circuit mpls label is allocated by the
    system when the endpoint signaling is of type TLDP or
    configured in this case since the signaling is static.
    """


class StatisticsContainer12(BaseModel):
    """
    Forwarding statistics for the database entry

    These statistics are collected by the forwarding engine.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    forwarded_packets: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:forwarded-packets', ge=0, le=18446744073709551615),
    ] = 0
    """
    Number of multicast packets that were forwarded to the interfaces in the outgoing interface list
    """
    discarded_packets: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:discarded-packets', ge=0, le=18446744073709551615),
    ] = 0
    """
    Number of multicast packets that matched this entry but were discarded

    For (S,G) entries, if the traffic is getting forwarded on the SPT, the packets arriving from the RPT will be discarded.
    """
    rpf_mismatches: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:rpf-mismatches', ge=0, le=18446744073709551615),
    ] = 0
    """
    Number of multicast packets that matched this entry but did not arrive on the 'rpf-neighbor-interface-name' interface
    """
    forwarded_octets: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:forwarded-octets', ge=0, le=18446744073709551615),
    ] = 0
    """
    Number of multicast octects that were forwarded to the interfaces in the outgoing interface list
    """


class StatisticsContainer25(BaseModel):
    """
    vxlan-interface statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received_smet: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:received-smet', ge=0, le=4294967295),
    ] = 0
    """
    Total number of received smet routes
    """
    discarded_smet: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:discarded-smet', ge=0, le=4294967295),
    ] = 0
    """
    Total number of discarded smet routes
    """


class StatisticsContainer27(BaseModel):
    """
    vxlan-interface statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received_smet: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:received-smet', ge=0, le=4294967295),
    ] = 0
    """
    Total number of received smet routes
    """
    discarded_smet: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:discarded-smet', ge=0, le=4294967295),
    ] = 0
    """
    Total number of discarded smet routes
    """


class StatisticsContainer28(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    events: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:events', ge=0, le=4294967295)
    ] = None
    """
    the value of events indicates the number of times this neighbor relationship has changed state, or an error has occurred.
    """
    bad_nbr_states: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:bad-nbr-states', ge=0, le=4294967295)
    ] = None
    """
    the value of bad-nbr-states indicates the total number of OSPF packets received when the neighbor state was not expecting to receive this packet type since admin-state was last set to 'enabled'.
    """
    lsa_install_failed: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:lsa-install-failed', ge=0, le=4294967295),
    ] = None
    """
    the value of lsa-install-failed indicates the total number of times an LSA could not be installed into the LSDB due to a resource allocation issue since admin-state was last set to 'enabled'.
    """
    bad_seq_nums: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:bad-seq-nums', ge=0, le=4294967295)
    ] = None
    """
    the value of bad-seq-nums indicates the total number of times when a database description packet was received with a sequence number mismatch since admin-state was last set to 'enabled'.
    """
    bad_mtu: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:bad-mtu', ge=0, le=4294967295)
    ] = None
    """
    the value of bad-MT-us indicates the total number of times when the MTU in a received database description packet was larger than the MTU of the receiving interface since admin-state was last set to 'enabled'.
    """
    bad_packets: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:bad-packets', ge=0, le=4294967295)
    ] = None
    """
    the value of bad-packets indicates the total number of times when an LS update was received with an illegal LS type or an option mismatch since admin-state was last set to 'enabled'.
    """
    lsa_not_in_lsdbs: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:lsa-not-in-lsdbs', ge=0, le=4294967295),
    ] = None
    """
    the value of lsa-not-in-lsdbs indicates the total number of times when an LS request was received for an LSA not installed in the LSDB of this router since admin-state was last set to 'enabled'.
    """
    option_mismatches: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:option-mismatches', ge=0, le=4294967295),
    ] = None
    """
    the value of option-mismatches indicates the total number of times when a LS update was received with an option mismatch since admin-state was last set to 'enabled'.
    """
    duplicates: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:duplicates', ge=0, le=4294967295)
    ] = None
    """
    the value of duplicates indicates the total number of times when a duplicate database description packet was received during the exchange state since admin-state was last set to 'enabled'.
    """
    num_restarts: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:num-restarts', ge=0, le=4294967295)
    ] = None
    """
    the value of num-restarts indicates the number of times the neighbor has attempted restart.
    """


class StatisticsContainer29(BaseModel):
    """
    Holds statistics of messages send to peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    num_pcrpt_sent: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:num-pcrpt-sent', ge=0, le=4294967295)
    ] = 0
    """
    The number of PCRpt messages sent to this peer.
    """
    num_pcrpt_rcvd: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:num-pcrpt-rcvd', ge=0, le=4294967295)
    ] = 0
    """
    The number of PCRpt messages received from this peer
    """
    num_pcupd_sent: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:num-pcupd-sent', ge=0, le=4294967295)
    ] = 0
    """
    The number of PCUpd messages sent to this peer.
    """
    num_pcupd_rcvd: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:num-pcupd-rcvd', ge=0, le=4294967295)
    ] = 0
    """
    The number of PCUpd messages received from this peer
    """
    num_rpt_sent: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:num-rpt-sent', ge=0, le=4294967295)
    ] = 0
    """
    The number of report messages sent to this peer

    This might be greater than num-pcrpt-sent because multiple requests can be batched into a single PCRpt messages.
    """
    num_rpt_rcvd: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:num-rpt-rcvd', ge=0, le=4294967295)
    ] = 0
    """
    The number of report messages received from this peer

    This might be greater than num-pcrpt-rcvd because multiple requests can be batched into a single PCRpt message.
    """
    num_pcreq_sent: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:num-pcreq-sent', ge=0, le=4294967295)
    ] = 0
    """
    The number of PCReq messages sent to this peer
    """
    num_pcreq_rcvd: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:num-pcreq-rcvd', ge=0, le=4294967295)
    ] = 0
    """
    The number of PCReq messages received from this peer
    """
    num_pcrep_sent: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:num-pcrep-sent', ge=0, le=4294967295)
    ] = 0
    """
    The number of PCRep messages sent to this peer
    """
    num_pcrep_rcvd: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:num-pcrep-rcvd', ge=0, le=4294967295)
    ] = 0
    """
    The number of PCRep messages received from this peer
    """
    num_pcerr_sent: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:num-pcerr-sent', ge=0, le=4294967295)
    ] = 0
    """
    The number of PCErr messages sent to this peer
    """
    num_pcerr_rcvd: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:num-pcerr-rcvd', ge=0, le=4294967295)
    ] = 0
    """
    The number of PCErr messages received from this peer
    """
    num_pcntf_sent: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:num-pcntf-sent', ge=0, le=4294967295)
    ] = 0
    """
    The number of PCNtf messages sent to this peer
    """
    num_pcntf_rcvd: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:num-pcntf-rcvd', ge=0, le=4294967295)
    ] = 0
    """
    The number of PCNtf messages received from this peer
    """
    num_keepalive_sent: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pcep:num-keepalive-sent', ge=0, le=4294967295),
    ] = 0
    """
    The number of Keepalive messages sent to this peer
    """
    num_keepalive_rcvd: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pcep:num-keepalive-rcvd', ge=0, le=4294967295),
    ] = 0
    """
    The number of Keepalive messages received from this peer
    """
    num_req_rcvd: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:num-req-rcvd', ge=0, le=4294967295)
    ] = 0
    """
    The number of requests received from this peer

    A request corresponds 1:1 with an RP object in a PCReq message
    """
    num_session_setup_ok: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pcep:num-session-setup-ok', ge=0, le=4294967295),
    ] = 0
    """
    The number of PCEP sessions successfully established with the peer, including any current session

    This counter is incremented each time a session with this peer is successfully established
    """
    num_session_setup_fail: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pcep:num-session-setup-fail', ge=0, le=4294967295),
    ] = 0
    """
    The number of PCEP sessions with the peer that have been attempted but failed before being fully established

    This counter is incremented each time a session retry to this peer fails
    """
    num_pcinit_sent: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pcep:num-pcinit-sent', ge=0, le=4294967295),
    ] = 0
    """
    The number of PC initiated messages sent to this peer.
    """
    num_pcinit_rcvd: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pcep:num-pcinit-rcvd', ge=0, le=4294967295),
    ] = 0
    """
    The number of PC initiated messages received from this peer.
    """
    num_req_sent: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:num-req-sent', ge=0, le=4294967295)
    ] = 0
    """
    The number of requests sent to this peer

    A request corresponds 1:1 with an RP object in a PCReq message
    """


class StatisticsContainer36(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mpls-route-tables:active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of MPLS entries that are active in the FIB.
    """


class StatisticsContainer40(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    active_opens: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tcp-udp:active-opens', ge=0, le=18446744073709551615),
    ] = 0
    """
    The total number of times that TCP connections have made a direct transition to the SYN-SENT state from the CLOSED state.
    """
    passive_opens: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tcp-udp:passive-opens', ge=0, le=18446744073709551615),
    ] = 0
    """
    The total number of times TCP connections have made a direct transition to the SYN-RCVD state from the LISTEN state.
    """
    attempt_fails: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tcp-udp:attempt-fails', ge=0, le=18446744073709551615),
    ] = 0
    """
    The total number of times that TCP connections have made a direct transition to the CLOSED state from either the SYN-SENT state or the SYN-RCVD state, plus the number of times that TCP connections have made a direct transition to the LISTEN state from the SYN-RCVD state.
    """
    established_resets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-tcp-udp:established-resets', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of times that TCP connections have made a direct transition to the CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state.
    """
    in_segments: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tcp-udp:in-segments', ge=0, le=18446744073709551615),
    ] = 0
    """
    The total number of segments received, including those received in error.  This count includes segments received on currently established connections.
    """
    out_segments: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tcp-udp:out-segments', ge=0, le=18446744073709551615),
    ] = 0
    """
    The total number of segments sent, including those on current connections but excluding those containing only retransmitted octets.
    """
    retransmitted_segments: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-tcp-udp:retransmitted-segments',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of segments retransmitted; that is, the number of TCP segments transmitted containing one or more previously transmitted octets.
    """
    in_error_segments: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-tcp-udp:in-error-segments', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of segments received in error (e.g., bad TCP checksums).
    """
    out_rst_segments: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-tcp-udp:out-rst-segments', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of TCP segments sent containing the RST flag.
    """
    in_checksum_errors: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-tcp-udp:in-checksum-errors', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of segments that are received as bad TCP checksum errors.
    """


class StatisticsContainer41(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    in_packets: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tcp-udp:in-packets', ge=0, le=18446744073709551615),
    ] = 0
    """
    The total number of UDP datagrams delivered to UDP users.
    """
    in_no_open_ports_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-tcp-udp:in-no-open-ports-packets',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of received UDP datagrams for whichthere was no application at the destination port.
    """
    in_error_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-tcp-udp:in-error-packets', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of received UDP datagrams that could not be delivered for reasons other than the lack of an application at the destination port.
    """
    out_packets: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tcp-udp:out-packets', ge=0, le=18446744073709551615),
    ] = 0
    """
    The total number of UDP datagrams sent from this network instance.
    """
    receive_buffer_errors: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-tcp-udp:receive-buffer-errors',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    Increased when memory cannot be allocated to process an incoming UDP packet.
    """
    send_buffer_errors: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-tcp-udp:send-buffer-errors', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    Increased when memory cannot be allocated to send a UDP packet.
    """
    in_checksum_errors: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-tcp-udp:in-checksum-errors', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    Increased when a received UDP packet has an invalid checksum.
    """
    ignored_multicast_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-tcp-udp:ignored-multicast-packets',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of ignored multicast UDP datagrams.
    """


class StatisticsContainer42(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ingress_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-te-policies:ingress-packets', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    Number of packets received by the TE policy
    """
    ingress_octets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-te-policies:ingress-octets', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    Number of octets received by the TE policy
    """
    egress_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-te-policies:egress-packets', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    Number of packets transmitted by the TE policy
    """
    egress_octets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-te-policies:egress-octets', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    Number of octets transmitted by the TE policy
    """


class StubContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    default_metric: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:default-metric', ge=1, le=65535)
    ] = 1
    """
    Defines the default OSPF metric for associated stub area
    """
    summaries: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:summaries')] = True
    """
    Enables sending summary (type 3) advertisements into a stub area or Not
    So Stubby Area (NSSA) on an Area Border Router (ABR)
    """


class SubSubTlvsContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_group: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:admin-group', ge=0, le=4294967295)
    ] = None
    """
    A bit mask representing the administrative groups to which the interface belongs. Sub-Sub-TLV = 3.
    """
    maximum_link_bandwidth: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:maximum-link-bandwidth', ge=0, le=4294967295),
    ] = None
    """
    The (LAG aware) bandwidth of the interface to the neighbor. Sub-Sub-TLV = 9.
    """
    te_default_metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:te-default-metric', ge=0, le=16777215),
    ] = None
    """
    An administratively assigned metric used as an alternative to the normal SPF metric based (typically) on link bandwidth.
    """
    min_max_unidirectional_link_delay: Annotated[
        Optional[MinMaxUnidirectionalLinkDelayContainer],
        Field(alias='srl_nokia-isis:min-max-unidirectional-link-delay'),
    ] = None


class SubSubTlvsContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_group: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:admin-group', ge=0, le=4294967295)
    ] = None
    """
    A bit mask representing the administrative groups to which the interface belongs. Sub-Sub-TLV = 3.
    """
    maximum_link_bandwidth: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:maximum-link-bandwidth', ge=0, le=4294967295),
    ] = None
    """
    The (LAG aware) bandwidth of the interface to the neighbor. Sub-Sub-TLV = 9.
    """
    te_default_metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:te-default-metric', ge=0, le=16777215),
    ] = None
    """
    An administratively assigned metric used as an alternative to the normal SPF metric based (typically) on link bandwidth.
    """
    min_max_unidirectional_link_delay: Annotated[
        Optional[MinMaxUnidirectionalLinkDelayContainer2],
        Field(alias='srl_nokia-isis:min-max-unidirectional-link-delay'),
    ] = None


class SubSubTlvsContainer3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_group: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:admin-group', ge=0, le=4294967295)
    ] = None
    """
    A bit mask representing the administrative groups to which the interface belongs. Sub-Sub-TLV = 3.
    """
    maximum_link_bandwidth: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:maximum-link-bandwidth', ge=0, le=4294967295),
    ] = None
    """
    The (LAG aware) bandwidth of the interface to the neighbor. Sub-Sub-TLV = 9.
    """
    te_default_metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:te-default-metric', ge=0, le=16777215),
    ] = None
    """
    An administratively assigned metric used as an alternative to the normal SPF metric based (typically) on link bandwidth.
    """
    min_max_unidirectional_link_delay: Annotated[
        Optional[MinMaxUnidirectionalLinkDelayContainer3],
        Field(alias='srl_nokia-isis:min-max-unidirectional-link-delay'),
    ] = None


class SubSubTlvsContainer4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_group: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:admin-group', ge=0, le=4294967295)
    ] = None
    """
    A bit mask representing the administrative groups to which the interface belongs. Sub-Sub-TLV = 3.
    """
    maximum_link_bandwidth: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:maximum-link-bandwidth', ge=0, le=4294967295),
    ] = None
    """
    The (LAG aware) bandwidth of the interface to the neighbor. Sub-Sub-TLV = 9.
    """
    te_default_metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:te-default-metric', ge=0, le=16777215),
    ] = None
    """
    An administratively assigned metric used as an alternative to the normal SPF metric based (typically) on link bandwidth.
    """
    min_max_unidirectional_link_delay: Annotated[
        Optional[MinMaxUnidirectionalLinkDelayContainer4],
        Field(alias='srl_nokia-isis:min-max-unidirectional-link-delay'),
    ] = None


class SubSubTlvsContainer5(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_group: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:admin-group', ge=0, le=4294967295)
    ] = None
    """
    A bit mask representing the administrative groups to which the interface belongs. Sub-Sub-TLV = 3.
    """
    maximum_link_bandwidth: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:maximum-link-bandwidth', ge=0, le=4294967295),
    ] = None
    """
    The (LAG aware) bandwidth of the interface to the neighbor. Sub-Sub-TLV = 9.
    """
    te_default_metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:te-default-metric', ge=0, le=16777215),
    ] = None
    """
    An administratively assigned metric used as an alternative to the normal SPF metric based (typically) on link bandwidth.
    """
    min_max_unidirectional_link_delay: Annotated[
        Optional[MinMaxUnidirectionalLinkDelayContainer6],
        Field(alias='srl_nokia-isis:min-max-unidirectional-link-delay'),
    ] = None


class SubTlvsContainer2(BaseModel):
    """
    SubTLVs of TLV 135, TLV 235, TLV 236 and TLV 237
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_tag_32bit: Annotated[
        Optional[List[RouteTag32bitLeafList]],
        Field(alias='srl_nokia-isis:route-tag-32bit'),
    ] = []
    """
    List of 32-bit administrative tag values associated with the IPv4 prefix.
    """
    route_tag_64bit: Annotated[
        Optional[List[RouteTag64bitLeafList]],
        Field(alias='srl_nokia-isis:route-tag-64bit'),
    ] = []
    """
    List of 64-bit administrative tag values associated with the IPv4 prefix.
    """
    segment_routing_prefix_sid: Annotated[
        Optional[SegmentRoutingPrefixSidContainer],
        Field(alias='srl_nokia-isis:segment-routing-prefix-sid'),
    ] = None
    prefix_attribute_flags: Annotated[
        Optional[PrefixAttributeFlagsContainer],
        Field(alias='srl_nokia-isis:prefix-attribute-flags'),
    ] = None


class SubTlvsContainer3(BaseModel):
    """
    SubTLVs of TLV 135, TLV 235, TLV 236 and TLV 237
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_tag_32bit: Annotated[
        Optional[List[RouteTag32bitLeafList2]],
        Field(alias='srl_nokia-isis:route-tag-32bit'),
    ] = []
    """
    List of 32-bit administrative tag values associated with the IPv4 prefix.
    """
    route_tag_64bit: Annotated[
        Optional[List[RouteTag64bitLeafList2]],
        Field(alias='srl_nokia-isis:route-tag-64bit'),
    ] = []
    """
    List of 64-bit administrative tag values associated with the IPv4 prefix.
    """
    segment_routing_prefix_sid: Annotated[
        Optional[SegmentRoutingPrefixSidContainer2],
        Field(alias='srl_nokia-isis:segment-routing-prefix-sid'),
    ] = None
    prefix_attribute_flags: Annotated[
        Optional[PrefixAttributeFlagsContainer2],
        Field(alias='srl_nokia-isis:prefix-attribute-flags'),
    ] = None


class SubTlvsContainer5(BaseModel):
    """
    SubTLVs of TLV 135, TLV 235, TLV 236 and TLV 237
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_tag_32bit: Annotated[
        Optional[List[RouteTag32bitLeafList3]],
        Field(alias='srl_nokia-isis:route-tag-32bit'),
    ] = []
    """
    List of 32-bit administrative tag values associated with the IPv4 prefix.
    """
    route_tag_64bit: Annotated[
        Optional[List[RouteTag64bitLeafList3]],
        Field(alias='srl_nokia-isis:route-tag-64bit'),
    ] = []
    """
    List of 64-bit administrative tag values associated with the IPv4 prefix.
    """
    segment_routing_prefix_sid: Annotated[
        Optional[SegmentRoutingPrefixSidContainer3],
        Field(alias='srl_nokia-isis:segment-routing-prefix-sid'),
    ] = None
    prefix_attribute_flags: Annotated[
        Optional[PrefixAttributeFlagsContainer3],
        Field(alias='srl_nokia-isis:prefix-attribute-flags'),
    ] = None


class SubTlvsContainer6(BaseModel):
    """
    SubTLVs of TLV 135, TLV 235, TLV 236 and TLV 237
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_tag_32bit: Annotated[
        Optional[List[RouteTag32bitLeafList4]],
        Field(alias='srl_nokia-isis:route-tag-32bit'),
    ] = []
    """
    List of 32-bit administrative tag values associated with the IPv4 prefix.
    """
    route_tag_64bit: Annotated[
        Optional[List[RouteTag64bitLeafList4]],
        Field(alias='srl_nokia-isis:route-tag-64bit'),
    ] = []
    """
    List of 64-bit administrative tag values associated with the IPv4 prefix.
    """
    segment_routing_prefix_sid: Annotated[
        Optional[SegmentRoutingPrefixSidContainer4],
        Field(alias='srl_nokia-isis:segment-routing-prefix-sid'),
    ] = None
    prefix_attribute_flags: Annotated[
        Optional[PrefixAttributeFlagsContainer4],
        Field(alias='srl_nokia-isis:prefix-attribute-flags'),
    ] = None


class SubTlvsContainer7(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    link_local_identifier: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:link-local-identifier', ge=0, le=4294967295),
    ] = None
    """
    A local identifier of the link
    """
    link_remote_identifier: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:link-remote-identifier', ge=0, le=4294967295),
    ] = None
    """
    A remote identifier of the link
    """
    ipv4_interface_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv4-interface-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The IPv4 address of the interface to the neighbor
    """
    ipv4_neighbor_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv4-neighbor-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The IPv4 address of the neighbor
    """
    ipv6_interface_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv6-interface-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    The IPv6 address of the interface to the neighbor
    """
    ipv6_neighbor_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv6-neighbor-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    The IPv6 address of the neighbor
    """
    shared_risk_link_group: Annotated[
        Optional[List[SharedRiskLinkGroupLeafList3]],
        Field(alias='srl_nokia-isis:shared-risk-link-group'),
    ] = []
    """
    List of SRLGs that apply to the adjacency with this neighbor
    """


class SystemIdListEntry(BaseModel):
    """
    List of system IDs that have discovered hostnames.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    host_system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:host-system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    The system ID
    """
    hostname: Annotated[Optional[str], Field(alias='srl_nokia-isis:hostname')] = None
    """
    The hostname of the system.
    """


class TableListEntry(BaseModel):
    """
    List of RIB tables maintained by BGP running in this network-instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address_family: Annotated[
        Optional[str], Field(alias='srl_nokia-bgp:address-family')
    ] = None
    """
    BGP address family
    """
    route_table_import: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp:route-table-import',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Apply a route policy to accept routes that should be installed in the BGP RIB table
    """


class Tag64Container(BaseModel):
    """
    This container defines sub-TLV 2.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag64: Annotated[
        Optional[List[Tag64LeafList]], Field(alias='srl_nokia-isis:tag64')
    ] = []
    """
    List of 64-bit tags associated with the prefix. Example uses of these tags include carrying BGP standard (or extended) communities and controlling redistribution between levels and areas, different routing protocols, or multiple instances of IS-IS running on the same router.
    """


class Tag64Container2(BaseModel):
    """
    This container defines sub-TLV 2.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag64: Annotated[
        Optional[List[Tag64LeafList2]], Field(alias='srl_nokia-isis:tag64')
    ] = []
    """
    List of 64-bit tags associated with the prefix. Example uses of these tags include carrying BGP standard (or extended) communities and controlling redistribution between levels and areas, different routing protocols, or multiple instances of IS-IS running on the same router.
    """


class Tag64Container3(BaseModel):
    """
    This container defines sub-TLV 2.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag64: Annotated[
        Optional[List[Tag64LeafList3]], Field(alias='srl_nokia-isis:tag64')
    ] = []
    """
    List of 64-bit tags associated with the prefix. Example uses of these tags include carrying BGP standard (or extended) communities and controlling redistribution between levels and areas, different routing protocols, or multiple instances of IS-IS running on the same router.
    """


class Tag64Container4(BaseModel):
    """
    This container defines sub-TLV 2.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tag64: Annotated[
        Optional[List[Tag64LeafList4]], Field(alias='srl_nokia-isis:tag64')
    ] = []
    """
    List of 64-bit tags associated with the prefix. Example uses of these tags include carrying BGP standard (or extended) communities and controlling redistribution between levels and areas, different routing protocols, or multiple instances of IS-IS running on the same router.
    """


class TargetNetworkInstancesLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$'
        ),
    ]
    """
    List of network-instances that have imported this route as a result of matching and accepting it in their inter-instance import-policy
    """


class TargetNetworkInstancesLeafList2(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$'
        ),
    ]
    """
    List of network-instances that have imported this route as a result of matching and accepting it in their inter-instance import-policy
    """


class TcamEntriesContainer(BaseModel):
    """
    Information about the TCAM entries used to implement the policy forwarding rule
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    forwarding_complex: Annotated[
        Optional[List[ForwardingComplexListEntry]],
        Field(alias='srl_nokia-policy-forwarding:forwarding-complex'),
    ] = None


class TeDatabaseInstallContainer(BaseModel):
    """
    When present, local topology and TE information is installed into the TE database
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bgp_ls: Annotated[
        Optional[BgpLsContainer], Field(alias='srl_nokia-traffic-engineering:bgp-ls')
    ] = None


class TeDatabaseInstallContainer2(BaseModel):
    """
    When present, topology and TE information related to this protocol instance is installed into the TE database
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bgp_ls: Annotated[
        Optional[BgpLsContainer2], Field(alias='srl_nokia-isis:bgp-ls')
    ] = None


class TeDatabaseInstallContainer3(BaseModel):
    """
    When present, topology and TE information related to this protocol instance is installed into the TE database
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bgp_ls: Annotated[
        Optional[BgpLsContainer3], Field(alias='srl_nokia-ospf:bgp-ls')
    ] = None


class TimersContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    connect_retry: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:connect-retry', ge=1, le=65535)
    ] = None
    """
    The time interval in seconds between successive attempts to establish a session with a peer
    """
    hold_time: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:hold-time', ge=0, le=65535)
    ] = None
    """
    The hold-time interval in seconds that the router proposes to the peer in its OPEN message

    The actual in-use hold-time is negotiated to the lowest value proposed by the two peers. A negotiated value of 0 suppresses the sending of keepalives by both peers.
    """
    keepalive_interval: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:keepalive-interval', ge=0, le=21845)
    ] = None
    """
    The interval in seconds between successive keepalive messages sent to the peer

    The period between one keepalive message and the next is the minimum of this configured (or inherited) value and 1/3 of the negotiated hold-time duration. A value of 0 suppresses the sending of keepalives to the peer.
    """
    minimum_advertisement_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:minimum-advertisement-interval', ge=1, le=255),
    ] = None
    """
    The value assigned to the MinRouteAdvertisementIntervalTimer of RFC 4271, for both EBGP and IBGP sessions

    Each session runs its own independent timer and the timer affects both route advertisements and route withdrawals, regardless of address family. For route withdrawals only, this timer is bypassed if rapid-withdrawal is set to true.
    """
    prefix_limit_restart_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:prefix-limit-restart-timer', ge=0, le=65535),
    ] = None
    """
    Time interval in seconds after which the BGP session is re-established after being torn down due to exceeding any prefix limit (of any address family)

    This only applies if prevent-teardown is false.
    """
    next_connect_retry_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp:next-connect-retry-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time when the next connect retry attempt will occur
    """
    negotiated_hold_time: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:negotiated-hold-time', ge=0, le=65535)
    ] = None
    """
    The operational hold-time

    It is negotiated to the lowest value proposed by the two peers. A negotiated value of 0 suppresses the sending of keepalives by both peers.
    """
    negotiated_keepalive_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:negotiated-keepalive-interval', ge=0, le=65535),
    ] = None
    """
    The operational keepalive interval

    It is the minimum of the configured value and 1/3 of the negotiated-hold-time. A value of 0 suppresses the sending of keepalives to the peer.
    """


class TimersContainer3(BaseModel):
    """
    Container for IS-IS timers applicable at the instance level
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsp_lifetime: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:lsp-lifetime', ge=350, le=65535)
    ] = 1200
    """
    Time interval in seconds that the LSPs originated by this IS (router) remain valid in the LSDB before they must be refreshed or else they are purged.
    """
    lsp_refresh: Annotated[
        Optional[LspRefreshContainer], Field(alias='srl_nokia-isis:lsp-refresh')
    ] = None
    spf: Annotated[Optional[SpfContainer], Field(alias='srl_nokia-isis:spf')] = None
    lsp_generation: Annotated[
        Optional[LspGenerationContainer], Field(alias='srl_nokia-isis:lsp-generation')
    ] = None


class TimersContainer6(BaseModel):
    """
    Enter the timers context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    incremental_spf_wait: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:incremental-spf-wait', ge=0, le=1000)
    ] = 1000
    """
    Delay time before an incremental SPF calculation is started
    """
    lsa_accumulate: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:lsa-accumulate', ge=0, le=1000)
    ] = 1000
    """
    Delay time for accumulating multiple LSAs before advertising them to neighbors
    """
    lsa_arrival: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:lsa-arrival', ge=0, le=600000)
    ] = 1000
    """
    Minimum delay between receipt of the same LSAs arriving from neighbors
    """
    redistribute_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:redistribute-delay', ge=0, le=1000)
    ] = 1000
    """
    Hold down timer for external routes that are redistributed in OSPF
    """
    lsa_generate: Annotated[
        Optional[LsaGenerateContainer], Field(alias='srl_nokia-ospf:lsa-generate')
    ] = None
    spf_wait: Annotated[
        Optional[SpfWaitContainer], Field(alias='srl_nokia-ospf:spf-wait')
    ] = None


class TlvListEntry14(BaseModel):
    """
    List of TLV types in the LSDB for the specified LSP.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-rib-bgp:type')] = None
    """
    The type of TLV being described. The type of TLV is expressed as a canonical name.
    """
    label_index: Annotated[
        Optional[LabelIndexContainer], Field(alias='srl_nokia-rib-bgp:label-index')
    ] = None
    srgb_originator: Annotated[
        Optional[SrgbOriginatorContainer],
        Field(alias='srl_nokia-rib-bgp:srgb-originator'),
    ] = None


class TopologyListEntry(BaseModel):
    """
    This list describes a topology.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mt_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:mt-id', ge=0, le=4095)
    ] = None
    """
    Multi-topology ID.
    """
    attributes: Annotated[
        Optional[EnumerationEnum178], Field(alias='srl_nokia-isis:attributes')
    ] = None
    """
    Attributes of the LSP for the associated topology.
    """


class TotalContainer(BaseModel):
    """
    Aggregate statistics, counting all ICMP message types
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    in_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-network-instance:in-packets', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of ICMPv4 messages that the network instance received and extracted successfully to the CPM. Note that this counter includes all those counted by in-error-packets.
    """
    in_error_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-network-instance:in-error-packets',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The number of ICMPv4 messages that the network instance received and extracted successfully to the CPM but when they arrived they were determined to have ICMP-specific errors (bad ICMP checksums, bad length, etc.)
    """
    out_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-network-instance:out-packets',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of ICMPv4 messages that the network instance attempted to send.  Note that this counter includes all those counted by out-error-packets.
    """
    out_error_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-network-instance:out-error-packets',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The number of ICMPv4 messages that could not be sent from this network instance due to issues such as 'no route to the source' or 'fragmentation required but not supported'
    """


class TotalContainer2(BaseModel):
    """
    Aggregate statistics, counting all ICMP message types
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    in_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-network-instance:in-packets', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of ICMPv6 messages that the network instance received and extracted successfully to the CPM. Note that this counter includes all those counted by in-error-packets.
    """
    in_error_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-network-instance:in-error-packets',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The number of ICMPv6 messages that the network instance received and extracted successfully to the CPM but when they arrived they were determined to have ICMP-specific errors (bad ICMP checksums, bad length, etc.)
    """
    out_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-network-instance:out-packets',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of ICMPv6 messages that the network instance attempted to send.  Note that this counter includes all those counted by out-error-packets.
    """
    out_error_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-network-instance:out-error-packets',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The number of ICMPv6 messages that could not be sent from this network instance due to issues such as 'no route to the source'
    """


class TransmittedContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    register_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:register-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of PIM Register messages transmitted
    """
    register_errors: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:register-errors', ge=0, le=4294967295)
    ] = 0
    """
    The number of errors while transmitting Register messages
    """
    null_register_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:null-register-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of Null Register messages transmitted
    """
    candidate_rp_advertisement_messages: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:candidate-rp-advertisement-messages',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    The number of Candidate-RP Advertisements transmitted
    """
    candidate_rp_advertisement_errors: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:candidate-rp-advertisement-errors', ge=0, le=4294967295
        ),
    ] = 0
    """
    The number of errors while transmitting PIM Candidate-RP Advertisements
    """
    register_ttl_drops: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:register-ttl-drops', ge=0, le=4294967295),
    ] = 0
    """
    The number of TTL dropped data PDUs

    The number of multicast data packets which could not be encapsulated in Register messages because the Time To Live (TTL) was zero.
    """


class TransmittedContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    register_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:register-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of PIM Register messages transmitted
    """
    register_errors: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:register-errors', ge=0, le=4294967295)
    ] = 0
    """
    The number of errors while transmitting Register messages
    """
    null_register_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:null-register-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of Null Register messages transmitted
    """
    candidate_rp_advertisement_messages: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:candidate-rp-advertisement-messages',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    The number of Candidate-RP Advertisements transmitted
    """
    candidate_rp_advertisement_errors: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:candidate-rp-advertisement-errors', ge=0, le=4294967295
        ),
    ] = 0
    """
    The number of errors while transmitting PIM Candidate-RP Advertisements
    """
    register_ttl_drops: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:register-ttl-drops', ge=0, le=4294967295),
    ] = 0
    """
    The number of TTL dropped data PDUs

    The number of multicast data packets which could not be encapsulated in Register messages because the Time To Live (TTL) was zero.
    """


class TransmittedContainer3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    hello_messages: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:hello-messages', ge=0, le=4294967295)
    ] = 0
    """
    The number of PIM Hello messages transmitted on this interface
    """
    join_prune_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:join-prune-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of Join Prune messages transmitted on this interface
    """
    assert_messages: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:assert-messages', ge=0, le=4294967295)
    ] = 0
    """
    The number of PIM Assert messages transmitted on this interface
    """
    register_stop_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:register-stop-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of PIM Register Stop messages transmitted on this interface
    """
    register_stop_errors: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:register-stop-errors', ge=0, le=4294967295),
    ] = 0
    """
    The number of PIM errors while trasmitting PIM Register Stop messages on this interface
    """
    packets: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:packets', ge=0, le=4294967295)
    ] = 0
    """
    The number of multicast data packets transmitted on this interface
    """


class TransmittedContainer4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    hello_messages: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:hello-messages', ge=0, le=4294967295)
    ] = 0
    """
    The number of PIM Hello messages transmitted on this interface
    """
    join_prune_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:join-prune-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of Join Prune messages transmitted on this interface
    """
    assert_messages: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:assert-messages', ge=0, le=4294967295)
    ] = 0
    """
    The number of PIM Assert messages transmitted on this interface
    """
    register_stop_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:register-stop-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of PIM Register Stop messages transmitted on this interface
    """
    register_stop_errors: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:register-stop-errors', ge=0, le=4294967295),
    ] = 0
    """
    The number of PIM errors while trasmitting PIM Register Stop messages on this interface
    """
    packets: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:packets', ge=0, le=4294967295)
    ] = 0
    """
    The number of multicast data packets transmitted on this interface
    """


class TransmittedContainer5(BaseModel):
    """
    Transmit message statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    general_queries: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:general-queries', ge=0, le=4294967295)
    ] = 0
    """
    General Queries
    """
    group_queries: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:group-queries', ge=0, le=4294967295)
    ] = 0
    """
    Group Specific Queries
    """
    group_source_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld:group-source-queries', ge=0, le=4294967295),
    ] = 0
    """
    Group and Source Specific Queries
    """
    errors: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:errors', ge=0, le=4294967295)
    ] = 0
    """
    Transmission Errors
    """


class TransmittedContainer8(BaseModel):
    """
    Transmit message statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    general_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp:general-queries', ge=0, le=4294967295),
    ] = 0
    """
    General Queries
    """
    group_queries: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:group-queries', ge=0, le=4294967295)
    ] = 0
    """
    Group Specific Queries
    """
    group_source_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp:group-source-queries', ge=0, le=4294967295),
    ] = 0
    """
    Group and Source Specific Queries
    """
    errors: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:errors', ge=0, le=4294967295)
    ] = 0
    """
    Transmission Errors
    """


class TunnelResolutionContainer(BaseModel):
    """
    Options related to resolution using tunnels in the tunnel table
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    allowed_tunnel_types: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-bgp:allowed-tunnel-types')
    ] = []
    """
    List of allowed tunnel types
    """
    selection_attributes: Annotated[
        Optional[SelectionAttributesContainer3],
        Field(alias='srl_nokia-bgp:selection-attributes'),
    ] = None


class TunnelResolutionContainer10(BaseModel):
    """
    Options related to resolution using tunnels in the tunnel table
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    allowed_tunnel_types: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-bgp:allowed-tunnel-types')
    ] = []
    """
    List of allowed tunnel types
    """
    selection_attributes: Annotated[
        Optional[SelectionAttributesContainer12],
        Field(alias='srl_nokia-bgp:selection-attributes'),
    ] = None


class TunnelResolutionContainer11(BaseModel):
    """
    Options related to resolution using tunnels in the tunnel table
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    allowed_tunnel_types: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-bgp:allowed-tunnel-types')
    ] = []
    """
    List of allowed tunnel types
    """
    selection_attributes: Annotated[
        Optional[SelectionAttributesContainer13],
        Field(alias='srl_nokia-bgp:selection-attributes'),
    ] = None


class TunnelResolutionContainer12(BaseModel):
    """
    Options related to resolution using tunnels in the tunnel table
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    allowed_tunnel_types: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-bgp:allowed-tunnel-types')
    ] = []
    """
    List of allowed tunnel types
    """
    selection_attributes: Annotated[
        Optional[SelectionAttributesContainer14],
        Field(alias='srl_nokia-bgp:selection-attributes'),
    ] = None


class TunnelResolutionContainer2(BaseModel):
    """
    Options related to resolution using tunnels in the tunnel table
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    allowed_tunnel_types: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-bgp:allowed-tunnel-types')
    ] = []
    """
    List of allowed tunnel types
    """
    selection_attributes: Annotated[
        Optional[SelectionAttributesContainer4],
        Field(alias='srl_nokia-bgp:selection-attributes'),
    ] = None


class TunnelResolutionContainer3(BaseModel):
    """
    Options related to resolution using tunnels in the tunnel table
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mode: Annotated[Optional[EnumerationEnum31], Field(alias='srl_nokia-bgp:mode')] = (
        'disabled'
    )
    """
    Mode to control the order of tunnel resolution compared to route resolution
    """
    allowed_tunnel_types: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-bgp:allowed-tunnel-types')
    ] = []
    """
    List of allowed tunnel types
    """
    selection_attributes: Annotated[
        Optional[SelectionAttributesContainer5],
        Field(alias='srl_nokia-bgp:selection-attributes'),
    ] = None


class TunnelResolutionContainer4(BaseModel):
    """
    Options related to resolution using tunnels in the tunnel table
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mode: Annotated[Optional[EnumerationEnum32], Field(alias='srl_nokia-bgp:mode')] = (
        'disabled'
    )
    """
    Mode to control the order of tunnel resolution compared to route resolution
    """
    allowed_tunnel_types: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-bgp:allowed-tunnel-types')
    ] = []
    """
    List of allowed tunnel types
    """
    selection_attributes: Annotated[
        Optional[SelectionAttributesContainer6],
        Field(alias='srl_nokia-bgp:selection-attributes'),
    ] = None


class TunnelResolutionContainer5(BaseModel):
    """
    Options related to resolution using tunnels in the tunnel table
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    allowed_tunnel_types: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-bgp:allowed-tunnel-types')
    ] = []
    """
    List of allowed tunnel types
    """
    selection_attributes: Annotated[
        Optional[SelectionAttributesContainer7],
        Field(alias='srl_nokia-bgp:selection-attributes'),
    ] = None


class TunnelResolutionContainer6(BaseModel):
    """
    Options related to resolution using tunnels in the tunnel table
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    allowed_tunnel_types: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-bgp:allowed-tunnel-types')
    ] = []
    """
    List of allowed tunnel types
    """
    selection_attributes: Annotated[
        Optional[SelectionAttributesContainer8],
        Field(alias='srl_nokia-bgp:selection-attributes'),
    ] = None


class TunnelResolutionContainer7(BaseModel):
    """
    Options related to resolution using tunnels in the tunnel table
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mode: Annotated[Optional[EnumerationEnum36], Field(alias='srl_nokia-bgp:mode')] = (
        'disabled'
    )
    """
    Mode to control the order of tunnel resolution compared to route resolution
    """
    allowed_tunnel_types: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-bgp:allowed-tunnel-types')
    ] = []
    """
    List of allowed tunnel types
    """
    selection_attributes: Annotated[
        Optional[SelectionAttributesContainer9],
        Field(alias='srl_nokia-bgp:selection-attributes'),
    ] = None


class TunnelResolutionContainer8(BaseModel):
    """
    Options related to resolution using tunnels in the tunnel table
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mode: Annotated[Optional[EnumerationEnum37], Field(alias='srl_nokia-bgp:mode')] = (
        'disabled'
    )
    """
    Mode to control the order of tunnel resolution compared to route resolution
    """
    allowed_tunnel_types: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-bgp:allowed-tunnel-types')
    ] = []
    """
    List of allowed tunnel types
    """
    selection_attributes: Annotated[
        Optional[SelectionAttributesContainer10],
        Field(alias='srl_nokia-bgp:selection-attributes'),
    ] = None


class TunnelResolutionContainer9(BaseModel):
    """
    Options related to resolution using tunnels in the tunnel table
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    allowed_tunnel_types: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-bgp:allowed-tunnel-types')
    ] = []
    """
    List of allowed tunnel types
    """
    selection_attributes: Annotated[
        Optional[SelectionAttributesContainer11],
        Field(alias='srl_nokia-bgp:selection-attributes'),
    ] = None


class TunnelTypeListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-tunnel-tables:type')] = None
    """
    Tunneling encapsulation format
    """
    active_tunnels: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tunnel-tables:active-tunnels', ge=0, le=4294967295),
    ] = None
    """
    The total number of tunnels, using this encapsulation type, that are active.
    """
    inactive_tunnels: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tunnel-tables:inactive-tunnels', ge=0, le=4294967295),
    ] = None
    """
    The total number of tunnels, using this encapsulation type, that are inactive (not programmed).
    """
    total_tunnels: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-tunnel-tables:total-tunnels', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of tunnels, active and inactive, using this encapsulation type.
    """


class TunnelTypeListEntry2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-tunnel-tables:type')] = None
    """
    Tunneling encapsulation format
    """
    active_tunnels: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tunnel-tables:active-tunnels', ge=0, le=4294967295),
    ] = None
    """
    The total number of tunnels, using this encapsulation type, that are active.
    """
    inactive_tunnels: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tunnel-tables:inactive-tunnels', ge=0, le=4294967295),
    ] = None
    """
    The total number of tunnels, using this encapsulation type, that are inactive (not programmed).
    """
    total_tunnels: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-tunnel-tables:total-tunnels', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of tunnels, active and inactive, using this encapsulation type.
    """


class TypeOfServiceListEntry2(BaseModel):
    """
    Per-type of service parameters for the LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tos: Annotated[Optional[int], Field(alias='srl_nokia-ospf:tos', ge=0, le=255)] = (
        None
    )
    """
    OSPF encoding of the type of service referred to by this
    LSA. Encoding for OSPF TOS are described in RFC2328.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:metric', ge=0, le=4294967295)
    ] = None
    """
    The metric value to be used for the TOS specified. This value
    represents the cost of use of the link for the specific type
    of service.
    """


class TypeOfServiceListEntry3(BaseModel):
    """
    Per-type of service parameters for the LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tos: Annotated[Optional[int], Field(alias='srl_nokia-ospf:tos', ge=0, le=255)] = (
        None
    )
    """
    OSPF encoding of the type of service referred to by this
    LSA. Encoding for OSPF TOS are described in RFC2328.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:metric', ge=0, le=4294967295)
    ] = None
    """
    The metric value to be used for the TOS specified. This value
    represents the cost of use of the link for the specific type
    of service.
    """


class TypeListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[EnumerationEnum10], Field(alias='srl_nokia-network-instance:name')
    ] = None
    in_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-network-instance:in-packets', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of ICMPv4 messages of this type that the network instance received and extracted successfully to the CPM.
    """
    out_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-network-instance:out-packets',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of ICMPv4 messages of this type that the network instance attempted to send.
    """
    out_error_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-network-instance:out-error-packets',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The number of ICMPv4 messages of this type that could not be sent from this network instance due to issues such as 'no route to the source' or 'fragmentation required but not supported'
    """


class TypeListEntry2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[EnumerationEnum11], Field(alias='srl_nokia-network-instance:name')
    ] = None
    in_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-network-instance:in-packets', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of ICMPv6 messages of this type that the network instance received and extracted successfully to the CPM.
    """
    out_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-network-instance:out-packets',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of ICMPv6 messages of this type that the network instance attempted to send.
    """
    out_error_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-network-instance:out-error-packets',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The number of ICMPv6 messages of this type that could not be sent from this network instance due to issues such as 'no route to the source'
    """


class TypesOfServiceContainer2(BaseModel):
    """
    Breakdown of LSA contents specifying multiple
    TOS values
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type_of_service: Annotated[
        Optional[List[TypeOfServiceListEntry2]],
        Field(alias='srl_nokia-ospf:type-of-service'),
    ] = None


class TypesOfServiceContainer3(BaseModel):
    """
    Breakdown of LSA contents specifying multiple
    TOS values
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type_of_service: Annotated[
        Optional[List[TypeOfServiceListEntry3]],
        Field(alias='srl_nokia-ospf:type-of-service'),
    ] = None


class UndefinedSubtlvListEntry(BaseModel):
    """
    Sub-TLVs that are not defined in the model or not recognised by system.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[int], Field(alias='srl_nokia-isis:type', ge=0, le=255)] = (
        None
    )
    """
    TLV Type.
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:length', ge=0, le=255)
    ] = None
    """
    TLV length.
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-isis:value', max_length=18446744073709551615),
    ] = None
    """
    TLV value.
    """


class UndefinedSubtlvListEntry2(BaseModel):
    """
    Sub-TLVs that are not defined in the model or not recognised by system.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[int], Field(alias='srl_nokia-isis:type', ge=0, le=255)] = (
        None
    )
    """
    TLV Type.
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:length', ge=0, le=255)
    ] = None
    """
    TLV length.
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-isis:value', max_length=18446744073709551615),
    ] = None
    """
    TLV value.
    """


class UndefinedSubtlvListEntry3(BaseModel):
    """
    Sub-TLVs that are not defined in the model or not recognised by system.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[int], Field(alias='srl_nokia-isis:type', ge=0, le=255)] = (
        None
    )
    """
    TLV Type.
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:length', ge=0, le=255)
    ] = None
    """
    TLV length.
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-isis:value', max_length=18446744073709551615),
    ] = None
    """
    TLV value.
    """


class UndefinedSubtlvListEntry4(BaseModel):
    """
    Sub-TLVs that are not defined in the model or not recognised by system.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[int], Field(alias='srl_nokia-isis:type', ge=0, le=255)] = (
        None
    )
    """
    TLV Type.
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:length', ge=0, le=255)
    ] = None
    """
    TLV length.
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-isis:value', max_length=18446744073709551615),
    ] = None
    """
    TLV value.
    """


class UndefinedSubtlvListEntry5(BaseModel):
    """
    Sub-TLVs that are not defined in the model or not recognised by system.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[int], Field(alias='srl_nokia-isis:type', ge=0, le=255)] = (
        None
    )
    """
    TLV Type.
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:length', ge=0, le=255)
    ] = None
    """
    TLV length.
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-isis:value', max_length=18446744073709551615),
    ] = None
    """
    TLV value.
    """


class UndefinedSubtlvListEntry6(BaseModel):
    """
    Sub-TLVs that are not defined in the model or not recognised by system.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[int], Field(alias='srl_nokia-isis:type', ge=0, le=255)] = (
        None
    )
    """
    TLV Type.
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:length', ge=0, le=255)
    ] = None
    """
    TLV length.
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-isis:value', max_length=18446744073709551615),
    ] = None
    """
    TLV value.
    """


class UndefinedSubtlvListEntry7(BaseModel):
    """
    Sub-TLVs that are not defined in the model or not recognised by system.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[int], Field(alias='srl_nokia-isis:type', ge=0, le=255)] = (
        None
    )
    """
    TLV Type.
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:length', ge=0, le=255)
    ] = None
    """
    TLV length.
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-isis:value', max_length=18446744073709551615),
    ] = None
    """
    TLV value.
    """


class UndefinedSubtlvListEntry8(BaseModel):
    """
    Sub-TLVs that are not defined in the model or not recognised by system.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[int], Field(alias='srl_nokia-isis:type', ge=0, le=255)] = (
        None
    )
    """
    TLV Type.
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:length', ge=0, le=255)
    ] = None
    """
    TLV length.
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-isis:value', max_length=18446744073709551615),
    ] = None
    """
    TLV value.
    """


class UndefinedSubtlvsContainer(BaseModel):
    """
    This container describes undefined ISIS TLVs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    undefined_subtlv: Annotated[
        Optional[List[UndefinedSubtlvListEntry]],
        Field(alias='srl_nokia-isis:undefined-subtlv'),
    ] = None


class UndefinedSubtlvsContainer2(BaseModel):
    """
    This container describes undefined ISIS TLVs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    undefined_subtlv: Annotated[
        Optional[List[UndefinedSubtlvListEntry2]],
        Field(alias='srl_nokia-isis:undefined-subtlv'),
    ] = None


class UndefinedSubtlvsContainer3(BaseModel):
    """
    This container describes undefined ISIS TLVs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    undefined_subtlv: Annotated[
        Optional[List[UndefinedSubtlvListEntry3]],
        Field(alias='srl_nokia-isis:undefined-subtlv'),
    ] = None


class UndefinedSubtlvsContainer4(BaseModel):
    """
    This container describes undefined ISIS TLVs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    undefined_subtlv: Annotated[
        Optional[List[UndefinedSubtlvListEntry4]],
        Field(alias='srl_nokia-isis:undefined-subtlv'),
    ] = None


class UndefinedSubtlvsContainer5(BaseModel):
    """
    This container describes undefined ISIS TLVs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    undefined_subtlv: Annotated[
        Optional[List[UndefinedSubtlvListEntry5]],
        Field(alias='srl_nokia-isis:undefined-subtlv'),
    ] = None


class UndefinedSubtlvsContainer6(BaseModel):
    """
    This container describes undefined ISIS TLVs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    undefined_subtlv: Annotated[
        Optional[List[UndefinedSubtlvListEntry6]],
        Field(alias='srl_nokia-isis:undefined-subtlv'),
    ] = None


class UndefinedSubtlvsContainer7(BaseModel):
    """
    This container describes undefined ISIS TLVs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    undefined_subtlv: Annotated[
        Optional[List[UndefinedSubtlvListEntry7]],
        Field(alias='srl_nokia-isis:undefined-subtlv'),
    ] = None


class UndefinedSubtlvsContainer8(BaseModel):
    """
    This container describes undefined ISIS TLVs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    undefined_subtlv: Annotated[
        Optional[List[UndefinedSubtlvListEntry8]],
        Field(alias='srl_nokia-isis:undefined-subtlv'),
    ] = None


class UndefinedTlvListEntry(BaseModel):
    """
    List of TLVs that are not defined within the model, or are not recognised by the system.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[int], Field(alias='srl_nokia-isis:type', ge=0, le=255)] = (
        None
    )
    """
    TLV Type.
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:length', ge=0, le=255)
    ] = None
    """
    TLV length.
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-isis:value', max_length=18446744073709551615),
    ] = None
    """
    TLV value.
    """


class UndefinedTlvsContainer(BaseModel):
    """
    Surrounding container for a list of unknown TLVs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    undefined_tlv: Annotated[
        Optional[List[UndefinedTlvListEntry]],
        Field(alias='srl_nokia-isis:undefined-tlv'),
    ] = None


class UnknownTlvContainer(BaseModel):
    """
    An unknown TLV within the context. Unknown TLVs are
    defined to be the set of TLVs that are not modelled
    within the OpenConfig model, or are unknown to the
    local system such that it cannot decode their value.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:type', ge=0, le=65535)
    ] = None
    """
    The type value of the unknown TLV
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:length', ge=0, le=65535)
    ] = None
    """
    The length value of the unknown TLV
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-ospf:value', max_length=18446744073709551615),
    ] = None
    """
    The value portion of the unknwon TLV
    """


class UnknownTlvContainer10(BaseModel):
    """
    An unknown TLV within the context. Unknown TLVs are
    defined to be the set of TLVs that are not modelled
    within the OpenConfig model, or are unknown to the
    local system such that it cannot decode their value.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:type', ge=0, le=65535)
    ] = None
    """
    The type value of the unknown TLV
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:length', ge=0, le=65535)
    ] = None
    """
    The length value of the unknown TLV
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-ospf:value', max_length=18446744073709551615),
    ] = None
    """
    The value portion of the unknwon TLV
    """


class UnknownTlvContainer11(BaseModel):
    """
    An unknown TLV within the context. Unknown TLVs are
    defined to be the set of TLVs that are not modelled
    within the OpenConfig model, or are unknown to the
    local system such that it cannot decode their value.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:type', ge=0, le=65535)
    ] = None
    """
    The type value of the unknown TLV
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:length', ge=0, le=65535)
    ] = None
    """
    The length value of the unknown TLV
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-ospf:value', max_length=18446744073709551615),
    ] = None
    """
    The value portion of the unknwon TLV
    """


class UnknownTlvContainer12(BaseModel):
    """
    An unknown TLV within the context. Unknown TLVs are
    defined to be the set of TLVs that are not modelled
    within the OpenConfig model, or are unknown to the
    local system such that it cannot decode their value.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:type', ge=0, le=65535)
    ] = None
    """
    The type value of the unknown TLV
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:length', ge=0, le=65535)
    ] = None
    """
    The length value of the unknown TLV
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-ospf:value', max_length=18446744073709551615),
    ] = None
    """
    The value portion of the unknwon TLV
    """


class UnknownTlvContainer13(BaseModel):
    """
    An unknown TLV within the context. Unknown TLVs are
    defined to be the set of TLVs that are not modelled
    within the OpenConfig model, or are unknown to the
    local system such that it cannot decode their value.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:type', ge=0, le=65535)
    ] = None
    """
    The type value of the unknown TLV
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:length', ge=0, le=65535)
    ] = None
    """
    The length value of the unknown TLV
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-ospf:value', max_length=18446744073709551615),
    ] = None
    """
    The value portion of the unknwon TLV
    """


class UnknownTlvContainer14(BaseModel):
    """
    An unknown TLV within the context. Unknown TLVs are
    defined to be the set of TLVs that are not modelled
    within the OpenConfig model, or are unknown to the
    local system such that it cannot decode their value.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:type', ge=0, le=65535)
    ] = None
    """
    The type value of the unknown TLV
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:length', ge=0, le=65535)
    ] = None
    """
    The length value of the unknown TLV
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-ospf:value', max_length=18446744073709551615),
    ] = None
    """
    The value portion of the unknwon TLV
    """


class UnknownTlvContainer15(BaseModel):
    """
    An unknown TLV within the context. Unknown TLVs are
    defined to be the set of TLVs that are not modelled
    within the OpenConfig model, or are unknown to the
    local system such that it cannot decode their value.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:type', ge=0, le=65535)
    ] = None
    """
    The type value of the unknown TLV
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:length', ge=0, le=65535)
    ] = None
    """
    The length value of the unknown TLV
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-ospf:value', max_length=18446744073709551615),
    ] = None
    """
    The value portion of the unknwon TLV
    """


class UnknownTlvContainer2(BaseModel):
    """
    An unknown TLV within the context. Unknown TLVs are
    defined to be the set of TLVs that are not modelled
    within the OpenConfig model, or are unknown to the
    local system such that it cannot decode their value.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:type', ge=0, le=65535)
    ] = None
    """
    The type value of the unknown TLV
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:length', ge=0, le=65535)
    ] = None
    """
    The length value of the unknown TLV
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-ospf:value', max_length=18446744073709551615),
    ] = None
    """
    The value portion of the unknwon TLV
    """


class UnknownTlvContainer3(BaseModel):
    """
    An unknown TLV within the context. Unknown TLVs are
    defined to be the set of TLVs that are not modelled
    within the OpenConfig model, or are unknown to the
    local system such that it cannot decode their value.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:type', ge=0, le=65535)
    ] = None
    """
    The type value of the unknown TLV
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:length', ge=0, le=65535)
    ] = None
    """
    The length value of the unknown TLV
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-ospf:value', max_length=18446744073709551615),
    ] = None
    """
    The value portion of the unknwon TLV
    """


class UnknownTlvContainer4(BaseModel):
    """
    An unknown TLV within the context. Unknown TLVs are
    defined to be the set of TLVs that are not modelled
    within the OpenConfig model, or are unknown to the
    local system such that it cannot decode their value.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:type', ge=0, le=65535)
    ] = None
    """
    The type value of the unknown TLV
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:length', ge=0, le=65535)
    ] = None
    """
    The length value of the unknown TLV
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-ospf:value', max_length=18446744073709551615),
    ] = None
    """
    The value portion of the unknwon TLV
    """


class UnknownTlvContainer5(BaseModel):
    """
    An unknown TLV within the context. Unknown TLVs are
    defined to be the set of TLVs that are not modelled
    within the OpenConfig model, or are unknown to the
    local system such that it cannot decode their value.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:type', ge=0, le=65535)
    ] = None
    """
    The type value of the unknown TLV
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:length', ge=0, le=65535)
    ] = None
    """
    The length value of the unknown TLV
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-ospf:value', max_length=18446744073709551615),
    ] = None
    """
    The value portion of the unknwon TLV
    """


class UnknownTlvContainer6(BaseModel):
    """
    An unknown TLV within the context. Unknown TLVs are
    defined to be the set of TLVs that are not modelled
    within the OpenConfig model, or are unknown to the
    local system such that it cannot decode their value.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:type', ge=0, le=65535)
    ] = None
    """
    The type value of the unknown TLV
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:length', ge=0, le=65535)
    ] = None
    """
    The length value of the unknown TLV
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-ospf:value', max_length=18446744073709551615),
    ] = None
    """
    The value portion of the unknwon TLV
    """


class UnknownTlvContainer7(BaseModel):
    """
    An unknown TLV within the context. Unknown TLVs are
    defined to be the set of TLVs that are not modelled
    within the OpenConfig model, or are unknown to the
    local system such that it cannot decode their value.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:type', ge=0, le=65535)
    ] = None
    """
    The type value of the unknown TLV
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:length', ge=0, le=65535)
    ] = None
    """
    The length value of the unknown TLV
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-ospf:value', max_length=18446744073709551615),
    ] = None
    """
    The value portion of the unknwon TLV
    """


class UnknownTlvContainer8(BaseModel):
    """
    An unknown TLV within the context. Unknown TLVs are
    defined to be the set of TLVs that are not modelled
    within the OpenConfig model, or are unknown to the
    local system such that it cannot decode their value.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:type', ge=0, le=65535)
    ] = None
    """
    The type value of the unknown TLV
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:length', ge=0, le=65535)
    ] = None
    """
    The length value of the unknown TLV
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-ospf:value', max_length=18446744073709551615),
    ] = None
    """
    The value portion of the unknwon TLV
    """


class UnknownTlvContainer9(BaseModel):
    """
    An unknown TLV within the context. Unknown TLVs are
    defined to be the set of TLVs that are not modelled
    within the OpenConfig model, or are unknown to the
    local system such that it cannot decode their value.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:type', ge=0, le=65535)
    ] = None
    """
    The type value of the unknown TLV
    """
    length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:length', ge=0, le=65535)
    ] = None
    """
    The length value of the unknown TLV
    """
    value: Annotated[
        Optional[bytes],
        Field(alias='srl_nokia-ospf:value', max_length=18446744073709551615),
    ] = None
    """
    The value portion of the unknwon TLV
    """


class UnreservedBandwidthContainer(BaseModel):
    """
    This container defines unreserved-bandwidth. The units are bytes per second.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    setup_priority: Annotated[
        Optional[List[SetupPriorityListEntry]],
        Field(alias='srl_nokia-isis:setup-priority'),
    ] = None


class UnreservedBandwidthContainer2(BaseModel):
    """
    This container defines unreserved-bandwidth. The units are bytes per second.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    setup_priority: Annotated[
        Optional[List[SetupPriorityListEntry2]],
        Field(alias='srl_nokia-isis:setup-priority'),
    ] = None


class UnreservedBandwidthContainer3(BaseModel):
    """
    This container defines unreserved-bandwidth. The units are bytes per second.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    setup_priority: Annotated[
        Optional[List[SetupPriorityListEntry3]],
        Field(alias='srl_nokia-isis:setup-priority'),
    ] = None


class UnreservedBandwidthContainer4(BaseModel):
    """
    This container defines unreserved-bandwidth. The units are bytes per second.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    setup_priority: Annotated[
        Optional[List[SetupPriorityListEntry4]],
        Field(alias='srl_nokia-isis:setup-priority'),
    ] = None


class UtilizedBandwidthContainer(BaseModel):
    """
    This container defines unidirectional utilized bandwidth.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The bandwidth utilization on a link, forwarding adjacency, or bundled link in IEEE floating-point format with units of bytes per second.  For a link or forwarding adjacency, bandwidth utilization represents the actual utilization of the link (i.e., as measured by the advertising node).  For a bundled link, bandwidth utilization is defined to be the sum of the component link bandwidth utilizations.
    """


class UtilizedBandwidthContainer2(BaseModel):
    """
    This container defines unidirectional utilized bandwidth.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The bandwidth utilization on a link, forwarding adjacency, or bundled link in IEEE floating-point format with units of bytes per second.  For a link or forwarding adjacency, bandwidth utilization represents the actual utilization of the link (i.e., as measured by the advertising node).  For a bundled link, bandwidth utilization is defined to be the sum of the component link bandwidth utilizations.
    """


class UtilizedBandwidthContainer3(BaseModel):
    """
    This container defines unidirectional utilized bandwidth.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The bandwidth utilization on a link, forwarding adjacency, or bundled link in IEEE floating-point format with units of bytes per second.  For a link or forwarding adjacency, bandwidth utilization represents the actual utilization of the link (i.e., as measured by the advertising node).  For a bundled link, bandwidth utilization is defined to be the sum of the component link bandwidth utilizations.
    """


class UtilizedBandwidthContainer4(BaseModel):
    """
    This container defines unidirectional utilized bandwidth.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The bandwidth utilization on a link, forwarding adjacency, or bundled link in IEEE floating-point format with units of bytes per second.  For a link or forwarding adjacency, bandwidth utilization represents the actual utilization of the link (i.e., as measured by the advertising node).  For a bundled link, bandwidth utilization is defined to be the sum of the component link bandwidth utilizations.
    """


class VxlanContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    vni: Annotated[
        Optional[int], Field(alias='srl_nokia-ip-route-tables:vni', ge=1, le=16777215)
    ] = None
    """
    VXLAN Network Identifier of the destination.
    """
    source_mac: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ip-route-tables:source-mac',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    VXLAN inner ethernet source mac-address.
    """
    destination_mac: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ip-route-tables:destination-mac',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    VXLAN inner ethernet destination mac-address.
    """


class WeightedEcmpContainer7(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    load_balancing_weight: Annotated[
        Optional[Union[LoadBalancingWeightLeaf1, EnumerationEnum148]],
        Field(alias='srl_nokia-isis:load-balancing-weight'),
    ] = 'auto'
    """
    The load-balancing weight of the interface, which applies when weighted ECMP is enabled and the interface is part of a multipath set.
    """


class AddPathsContainer2(BaseModel):
    """
    Configure support for the advertisement and receipt of multiple paths for the AFI/SAFI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    receive: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:receive')] = None
    """
    Enable capability negotiation to receive multiple path advertisements from a single peer for a single NLRI belonging to the AFI/SAFI
    """
    send: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:send')] = None
    """
    Enable capability negotiation to send multiple path advertisements to a single peer for a single NLRI belonging to the AFI/SAFI
    """
    selection_algorithm: Annotated[
        Optional[Union[SendMaxCase2, SendMultipathCase2]],
        Field(alias='srl_nokia-bgp:selection-algorithm'),
    ] = None


class AddPathsContainer3(BaseModel):
    """
    Configure support for the advertisement and receipt of multiple paths for the AFI/SAFI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    receive: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:receive')] = None
    """
    Enable capability negotiation to receive multiple path advertisements from a single peer for a single NLRI belonging to the AFI/SAFI
    """
    send: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:send')] = None
    """
    Enable capability negotiation to send multiple path advertisements to a single peer for a single NLRI belonging to the AFI/SAFI
    """
    selection_algorithm: Annotated[
        Optional[Union[SendMaxCase3, SendMultipathCase3]],
        Field(alias='srl_nokia-bgp:selection-algorithm'),
    ] = None


class AddressLeafList10(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$'
        ),
    ]
    """
    Contains a 16-octet IPv6 address for the interface described by the containing  Extended IS Reachability TLV. This sub-TLV can occur multiple times.
    """


class AddressLeafList11(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$'
        ),
    ]
    """
    Contains a 16-octet IPv6 address for a neighboring router on the link described by the (main) TLV. This sub-TLV can occur multiple times.
    """


class AddressLeafList12(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    A 4-octet IPv4 address for the interface described by the (main) TLV. This sub-TLV can occur multiple times.
    """


class AddressLeafList13(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    A single IPv4 address for a neighboring router on this link. This sub-TLV can occur multiple times.
    """


class AddressLeafList14(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$'
        ),
    ]
    """
    Contains a 16-octet IPv6 address for the interface described by the containing  Extended IS Reachability TLV. This sub-TLV can occur multiple times.
    """


class AddressLeafList15(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$'
        ),
    ]
    """
    Contains a 16-octet IPv6 address for a neighboring router on the link described by the (main) TLV. This sub-TLV can occur multiple times.
    """


class AddressLeafList16(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    A 4-octet IPv4 address for the interface described by the (main) TLV. This sub-TLV can occur multiple times.
    """


class AddressLeafList17(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    A single IPv4 address for a neighboring router on this link. This sub-TLV can occur multiple times.
    """


class AddressLeafList18(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$'
        ),
    ]
    """
    Contains a 16-octet IPv6 address for the interface described by the containing  Extended IS Reachability TLV. This sub-TLV can occur multiple times.
    """


class AddressLeafList19(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$'
        ),
    ]
    """
    Contains a 16-octet IPv6 address for a neighboring router on the link described by the (main) TLV. This sub-TLV can occur multiple times.
    """


class AddressLeafList2(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    IPv4 address(es) of the interface corresponding to the SNPA over which this PDU is to be transmitted.
    """


class AddressLeafList3(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$'
        ),
    ]
    """
    IPv6 interface addresses of the node.  MUST contain only the non-link-local IPv6 addresses assigned to the IS.
    """


class AddressLeafList4(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    A 4-octet IPv4 address for the interface described by the (main) TLV. This sub-TLV can occur multiple times.
    """


class AddressLeafList5(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    A single IPv4 address for a neighboring router on this link. This sub-TLV can occur multiple times.
    """


class AddressLeafList6(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$'
        ),
    ]
    """
    Contains a 16-octet IPv6 address for the interface described by the containing  Extended IS Reachability TLV. This sub-TLV can occur multiple times.
    """


class AddressLeafList7(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$'
        ),
    ]
    """
    Contains a 16-octet IPv6 address for a neighboring router on the link described by the (main) TLV. This sub-TLV can occur multiple times.
    """


class AddressLeafList8(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    A 4-octet IPv4 address for the interface described by the (main) TLV. This sub-TLV can occur multiple times.
    """


class AddressLeafList9(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    A single IPv4 address for a neighboring router on this link. This sub-TLV can occur multiple times.
    """


class AdjacencySidListEntry(BaseModel):
    """
    Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment attached to a unidirectional adjacency or a set of unidirectional adjacencies. By default, an IGP- Adjacency Segment is local to the node which advertises it.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:value', ge=0, le=4294967295)
    ] = None
    """
    Adjacency-SID value.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum172]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    Flags associated with Adj-Segment-ID.
    """
    weight: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:weight', ge=0, le=255)
    ] = None
    """
    Value that represents the weight of the Adj-SID for the purpose of load balancing.
    """


class AdjacencySidListEntry2(BaseModel):
    """
    Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment attached to a unidirectional adjacency or a set of unidirectional adjacencies. By default, an IGP- Adjacency Segment is local to the node which advertises it.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:value', ge=0, le=4294967295)
    ] = None
    """
    Adjacency-SID value.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum181]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    Flags associated with Adj-Segment-ID.
    """
    weight: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:weight', ge=0, le=255)
    ] = None
    """
    Value that represents the weight of the Adj-SID for the purpose of load balancing.
    """


class AdjacencySidListEntry3(BaseModel):
    """
    Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment attached to a unidirectional adjacency or a set of unidirectional adjacencies. By default, an IGP- Adjacency Segment is local to the node which advertises it.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:value', ge=0, le=4294967295)
    ] = None
    """
    Adjacency-SID value.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum185]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    Flags associated with Adj-Segment-ID.
    """
    weight: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:weight', ge=0, le=255)
    ] = None
    """
    Value that represents the weight of the Adj-SID for the purpose of load balancing.
    """


class AdjacencySidListEntry4(BaseModel):
    """
    Adjacency Segment-IDs List. An IGP-Adjacency Segment is an IGP segment attached to a unidirectional adjacency or a set of unidirectional adjacencies. By default, an IGP- Adjacency Segment is local to the node which advertises it.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:value', ge=0, le=4294967295)
    ] = None
    """
    Adjacency-SID value.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum189]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    Flags associated with Adj-Segment-ID.
    """
    weight: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:weight', ge=0, le=255)
    ] = None
    """
    Value that represents the weight of the Adj-SID for the purpose of load balancing.
    """


class AdjacencySidsContainer(BaseModel):
    """
    This container defines segment routing adjacency SIDs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    adjacency_sid: Annotated[
        Optional[List[AdjacencySidListEntry]],
        Field(alias='srl_nokia-isis:adjacency-sid'),
    ] = None


class AdjacencySidsContainer2(BaseModel):
    """
    This container defines segment routing adjacency SIDs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    adjacency_sid: Annotated[
        Optional[List[AdjacencySidListEntry2]],
        Field(alias='srl_nokia-isis:adjacency-sid'),
    ] = None


class AdjacencySidsContainer3(BaseModel):
    """
    This container defines segment routing adjacency SIDs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    adjacency_sid: Annotated[
        Optional[List[AdjacencySidListEntry3]],
        Field(alias='srl_nokia-isis:adjacency-sid'),
    ] = None


class AdjacencySidsContainer4(BaseModel):
    """
    This container defines segment routing adjacency SIDs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    adjacency_sid: Annotated[
        Optional[List[AdjacencySidListEntry4]],
        Field(alias='srl_nokia-isis:adjacency-sid'),
    ] = None


class AdminGroupLeafList5(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    The list of admin-groups generically associated with the interface (not application specific)
    """


class AdvertiseContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    weight: Annotated[
        Optional[Union[WeightLeaf1, EnumerationEnum22]],
        Field(alias='srl_nokia-bgp-evpn:weight'),
    ] = 'dynamic'
    """
    Determines the weight to be advertised in the evpn-link-bandwidth extended community

    If set to dynamic, the weight is dynamically set based on the number of BGP PE-CE paths
    for the IP Prefix that is advertised in an EVPN IP Prefix route. Alternatively, the
    weight can be set to a fixed integer value in the range 1..128. The dynamic weight only
    considers BGP PE-CE paths.
    """
    maximum_dynamic_weight: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp-evpn:maximum-dynamic-weight', ge=1, le=128),
    ] = 128
    """
    Determines the maximum weight to be advertised in the evpn-link-bandwidth extended community

    If weight 'dynamic' is configured, the actual advertised weight is the minimum of the number
    of BGP PE-CE paths for the prefix and the configured maximum weight.
    """


class AggregatorContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-aggregate-routes:address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Specifies the aggregator's IP address.
    """
    as_number: Annotated[
        Optional[int],
        Field(alias='srl_nokia-aggregate-routes:as-number', ge=1, le=4294967295),
    ] = None
    """
    Specifies the aggregator's ASN
    """


class AgingContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-network-instance:admin-state')
    ] = 'enable'
    """
    Configurable state of the aging for the dynamic mac entries in the bridge table.
    If disabled, dynamically learned mac entries will be programmed in the bridge table
    until the network instance is disabled.
    """
    age_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-network-instance:age-time', ge=60, le=86400),
    ] = 300
    """
    Configurable aging time for dynamically learned mac addresses
    """


class AgingContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-network-instance:admin-state')
    ] = 'enable'
    """
    Configurable state of the aging for the dynamic mac entries in the bridge table

    If disabled, dynamically learned mac entries will be programmed in the bridge table
    until the network instance is disabled.
    """


class ApplicationSpecificLinkAttributesContainer(BaseModel):
    """
    Application Specific Link Attributes. Sub-TLV = 16.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    legacy: Annotated[Optional[bool], Field(alias='srl_nokia-isis:legacy')] = None
    """
    When the legacy flag is set, all of the applications specified in the bit mask MUST use the legacy advertisements for the corresponding link found in TLVs 22, 23, 25, 141, 222, and 223, in TLV 138, or in TLV 139 as appropriate.
    """
    rsvp_te: Annotated[Optional[bool], Field(alias='srl_nokia-isis:rsvp-te')] = None
    """
    R bit is set in the Standard Application Identifier Bit Mask
    """
    sr_policy: Annotated[Optional[bool], Field(alias='srl_nokia-isis:sr-policy')] = None
    """
    S bit is set in the Standard Application Identifier Bit Mask
    """
    loop_free_alternate: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:loop-free-alternate')
    ] = None
    """
    F bit is set in the Standard Application Identifier Bit Mask
    """
    sub_sub_tlvs: Annotated[
        Optional[SubSubTlvsContainer], Field(alias='srl_nokia-isis:sub-sub-tlvs')
    ] = None


class ApplicationSpecificLinkAttributesContainer2(BaseModel):
    """
    Application Specific Link Attributes. Sub-TLV = 16.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    legacy: Annotated[Optional[bool], Field(alias='srl_nokia-isis:legacy')] = None
    """
    When the legacy flag is set, all of the applications specified in the bit mask MUST use the legacy advertisements for the corresponding link found in TLVs 22, 23, 25, 141, 222, and 223, in TLV 138, or in TLV 139 as appropriate.
    """
    rsvp_te: Annotated[Optional[bool], Field(alias='srl_nokia-isis:rsvp-te')] = None
    """
    R bit is set in the Standard Application Identifier Bit Mask
    """
    sr_policy: Annotated[Optional[bool], Field(alias='srl_nokia-isis:sr-policy')] = None
    """
    S bit is set in the Standard Application Identifier Bit Mask
    """
    loop_free_alternate: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:loop-free-alternate')
    ] = None
    """
    F bit is set in the Standard Application Identifier Bit Mask
    """
    sub_sub_tlvs: Annotated[
        Optional[SubSubTlvsContainer2], Field(alias='srl_nokia-isis:sub-sub-tlvs')
    ] = None


class ApplicationSpecificLinkAttributesContainer3(BaseModel):
    """
    Application Specific Link Attributes. Sub-TLV = 16.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    legacy: Annotated[Optional[bool], Field(alias='srl_nokia-isis:legacy')] = None
    """
    When the legacy flag is set, all of the applications specified in the bit mask MUST use the legacy advertisements for the corresponding link found in TLVs 22, 23, 25, 141, 222, and 223, in TLV 138, or in TLV 139 as appropriate.
    """
    rsvp_te: Annotated[Optional[bool], Field(alias='srl_nokia-isis:rsvp-te')] = None
    """
    R bit is set in the Standard Application Identifier Bit Mask
    """
    sr_policy: Annotated[Optional[bool], Field(alias='srl_nokia-isis:sr-policy')] = None
    """
    S bit is set in the Standard Application Identifier Bit Mask
    """
    loop_free_alternate: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:loop-free-alternate')
    ] = None
    """
    F bit is set in the Standard Application Identifier Bit Mask
    """
    sub_sub_tlvs: Annotated[
        Optional[SubSubTlvsContainer3], Field(alias='srl_nokia-isis:sub-sub-tlvs')
    ] = None


class ApplicationSpecificLinkAttributesContainer4(BaseModel):
    """
    Application Specific Link Attributes. Sub-TLV = 16.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    legacy: Annotated[Optional[bool], Field(alias='srl_nokia-isis:legacy')] = None
    """
    When the legacy flag is set, all of the applications specified in the bit mask MUST use the legacy advertisements for the corresponding link found in TLVs 22, 23, 25, 141, 222, and 223, in TLV 138, or in TLV 139 as appropriate.
    """
    rsvp_te: Annotated[Optional[bool], Field(alias='srl_nokia-isis:rsvp-te')] = None
    """
    R bit is set in the Standard Application Identifier Bit Mask
    """
    sr_policy: Annotated[Optional[bool], Field(alias='srl_nokia-isis:sr-policy')] = None
    """
    S bit is set in the Standard Application Identifier Bit Mask
    """
    loop_free_alternate: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:loop-free-alternate')
    ] = None
    """
    F bit is set in the Standard Application Identifier Bit Mask
    """
    sub_sub_tlvs: Annotated[
        Optional[SubSubTlvsContainer4], Field(alias='srl_nokia-isis:sub-sub-tlvs')
    ] = None


class ApplicationSpecificLinkAttributesContainer5(BaseModel):
    """
    Application Specific Link Attributes. Sub-TLV = 16.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    legacy: Annotated[Optional[bool], Field(alias='srl_nokia-isis:legacy')] = None
    """
    When the legacy flag is set, all of the applications specified in the bit mask MUST use the legacy advertisements for the corresponding link found in TLVs 22, 23, 25, 141, 222, and 223, in TLV 138, or in TLV 139 as appropriate.
    """
    rsvp_te: Annotated[Optional[bool], Field(alias='srl_nokia-isis:rsvp-te')] = None
    """
    R bit is set in the Standard Application Identifier Bit Mask
    """
    sr_policy: Annotated[Optional[bool], Field(alias='srl_nokia-isis:sr-policy')] = None
    """
    S bit is set in the Standard Application Identifier Bit Mask
    """
    loop_free_alternate: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:loop-free-alternate')
    ] = None
    """
    F bit is set in the Standard Application Identifier Bit Mask
    """
    sub_sub_tlvs: Annotated[
        Optional[SubSubTlvsContainer5], Field(alias='srl_nokia-isis:sub-sub-tlvs')
    ] = None


class ApplicationSpecificSrlgListEntry(BaseModel):
    """
    List of application-specific SRLGs. TLV = 238.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:neighbor',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{2}$).*$',
        ),
    ] = None
    """
    A neighbor, identified by its System ID and one octet to indicate the pseudonode number
    """
    legacy: Annotated[Optional[bool], Field(alias='srl_nokia-isis:legacy')] = None
    """
    When the legacy flag is set, all of the applications specified in the bit mask MUST use the legacy advertisements for the corresponding link found in TLV 138 or TLV 139.
    """
    rsvp_te: Annotated[Optional[bool], Field(alias='srl_nokia-isis:rsvp-te')] = None
    """
    R bit is set in the Standard Application Identifier Bit Mask
    """
    sr_policy: Annotated[Optional[bool], Field(alias='srl_nokia-isis:sr-policy')] = None
    """
    S bit is set in the Standard Application Identifier Bit Mask
    """
    loop_free_alternate: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:loop-free-alternate')
    ] = None
    """
    F bit is set in the Standard Application Identifier Bit Mask
    """
    sub_tlvs: Annotated[
        Optional[SubTlvsContainer7], Field(alias='srl_nokia-isis:sub-tlvs')
    ] = None


class AsPathOptionsContainer(BaseModel):
    """
    Options for handling the AS_PATH in received BGP routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    allow_own_as: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:allow-own-as', ge=0, le=255)
    ] = 0
    """
    The maximum number of times the global AS number or a local AS number of the BGP instance can appear in any received AS_PATH before it is considered a loop and considered invalid
    """
    remove_private_as: Annotated[
        Optional[RemovePrivateAsContainer],
        Field(alias='srl_nokia-bgp:remove-private-as'),
    ] = None


class AsPathOptionsContainer2(BaseModel):
    """
    Options for handling the AS_PATH in received BGP routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    allow_own_as: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:allow-own-as', ge=0, le=255)
    ] = None
    """
    The maximum number of times the global AS number or a local AS number of the BGP instance can appear in any received AS_PATH before it is considered a loop and considered invalid

    When this value is changed the new value applies only to the routes received after the change is committed.
    """
    remove_private_as: Annotated[
        Optional[RemovePrivateAsContainer2],
        Field(alias='srl_nokia-bgp:remove-private-as'),
    ] = None
    replace_peer_as: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:replace-peer-as')
    ] = None
    """
    If set to true then replace every occurrence of the peer AS number that is present in the advertised AS path with the local AS number used towards the peer
    """


class AsPathOptionsContainer3(BaseModel):
    """
    Options for handling the AS_PATH in received BGP routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    allow_own_as: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:allow-own-as', ge=0, le=255)
    ] = None
    """
    The maximum number of times the global AS number or a local AS number of the BGP instance can appear in any received AS_PATH before it is considered a loop and considered invalid
    """
    remove_private_as: Annotated[
        Optional[RemovePrivateAsContainer3],
        Field(alias='srl_nokia-bgp:remove-private-as'),
    ] = None
    replace_peer_as: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:replace-peer-as')
    ] = None
    """
    If set to true then replace every occurrence of the peer AS number that is present in the advertised AS path with the local AS number used towards the peer
    """


class AsbrContainer(BaseModel):
    """
    Configure the router as an ASBR (Autonomous System Boundary Router)
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    trace_path: Annotated[
        Optional[Union[TracePathLeaf1, EnumerationEnum209]],
        Field(alias='srl_nokia-ospf:trace-path'),
    ] = 'none'
    """
    Domain identity
    """


class AuthenticationContainer8(BaseModel):
    """
    This container defines authentication information of the node.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    crypto_type: Annotated[
        Optional[EnumerationEnum169], Field(alias='srl_nokia-isis:crypto-type')
    ] = None
    authentication_key: Annotated[
        Optional[str], Field(alias='srl_nokia-isis:authentication-key')
    ] = None
    """
    Authentication key to be used.
    """


class AutoRxContainer(BaseModel):
    """
    Auto-rx targeted LDP
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-ldp:admin-state')
    ] = 'disable'
    """
    Administratively enable or disable auto-rx targeted LDP adjacencies
    """
    advertise_fec: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:advertise-fec')
    ] = False
    """
    Enable advertisement of FECs to auto-rx targets
    """


class AutoTxContainer(BaseModel):
    """
    Auto-tx targeted LDP
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-ldp:admin-state')
    ] = 'disable'
    """
    Administratively enable or disable auto-tx targeted LDP adjacencies
    """
    advertise_fec: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:advertise-fec')
    ] = False
    """
    Enable advertisement of FECs to auto-tx targets
    """


class AvailableBandwidthContainer(BaseModel):
    """
    This container defines unidirectional lavailable bandwidth.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The available bandwidth on a link, forwarding adjacency, or bundled link in IEEE floating-point format with units of bytes per second. For a link or forwarding adjacency, available bandwidth is defined to be residual bandwidth minus the measured bandwidth used for the actual forwarding of non-RSVP-TE label switched path packets.  For a bundled link, available bandwidth is defined to be the sum of the component link available bandwidths minus the measured bandwidth used for the actual forwarding of non-RSVP-TE label switched path packets.  For a bundled link, available bandwidth is defined to be the sum of the component link available bandwidths.
    """


class AvailableBandwidthContainer2(BaseModel):
    """
    This container defines unidirectional lavailable bandwidth.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The available bandwidth on a link, forwarding adjacency, or bundled link in IEEE floating-point format with units of bytes per second. For a link or forwarding adjacency, available bandwidth is defined to be residual bandwidth minus the measured bandwidth used for the actual forwarding of non-RSVP-TE label switched path packets.  For a bundled link, available bandwidth is defined to be the sum of the component link available bandwidths minus the measured bandwidth used for the actual forwarding of non-RSVP-TE label switched path packets.  For a bundled link, available bandwidth is defined to be the sum of the component link available bandwidths.
    """


class AvailableBandwidthContainer3(BaseModel):
    """
    This container defines unidirectional lavailable bandwidth.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The available bandwidth on a link, forwarding adjacency, or bundled link in IEEE floating-point format with units of bytes per second. For a link or forwarding adjacency, available bandwidth is defined to be residual bandwidth minus the measured bandwidth used for the actual forwarding of non-RSVP-TE label switched path packets.  For a bundled link, available bandwidth is defined to be the sum of the component link available bandwidths minus the measured bandwidth used for the actual forwarding of non-RSVP-TE label switched path packets.  For a bundled link, available bandwidth is defined to be the sum of the component link available bandwidths.
    """


class AvailableBandwidthContainer4(BaseModel):
    """
    This container defines unidirectional lavailable bandwidth.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    bandwidth: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:bandwidth', max_length=4, min_length=4),
    ] = None
    """
    The available bandwidth on a link, forwarding adjacency, or bundled link in IEEE floating-point format with units of bytes per second. For a link or forwarding adjacency, available bandwidth is defined to be residual bandwidth minus the measured bandwidth used for the actual forwarding of non-RSVP-TE label switched path packets.  For a bundled link, available bandwidth is defined to be the sum of the component link available bandwidths minus the measured bandwidth used for the actual forwarding of non-RSVP-TE label switched path packets.  For a bundled link, available bandwidth is defined to be the sum of the component link available bandwidths.
    """


class BackupNextHopListEntry(BaseModel):
    """
    List of backup next-hops associated with the NHG
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    id: Annotated[
        Optional[int], Field(alias='srl_nokia-ip-route-tables:id', ge=0, le=1023)
    ] = None
    """
    A unique identifier of a next-hop member (system allocated).
    """
    next_hop: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ip-route-tables:next-hop', ge=0, le=18446744073709551615
        ),
    ] = None
    """
    A system-wide unique identifier of a next-hop object (system allocated).
    """
    resolved: Annotated[
        Optional[EnumerationEnum295], Field(alias='srl_nokia-ip-route-tables:resolved')
    ] = None
    """
    Set to true when the next-hop was resolved. This reads not-applicable for resolve=false next-hops.
    """


class BadPacketsContainer(BaseModel):
    """
    Bad packets counters
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bad_version: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:bad-version', ge=0, le=4294967295)
    ] = None
    """
    The total number of OSPF packets received with bad OSPF version numbers since admin-state was last set to 'enabled'.
    """
    bad_network: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:bad-network', ge=0, le=4294967295)
    ] = None
    """
    The total number of OSPF packets received with invalid network or mask since admin-state was last set to 'enabled'.
    """
    bad_area: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:bad-area', ge=0, le=4294967295)
    ] = None
    """
    The total number of OSPF packets received with an area mismatch since admin-state was last set to 'enabled'.
    """
    bad_dest_address: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:bad-dest-address', ge=0, le=4294967295),
    ] = None
    """
    The total number of OSPF packets received with the incorrect IP destination address since admin-state was last set to 'enabled'.
    """
    bad_neighbors: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:bad-neighbors', ge=0, le=4294967295)
    ] = None
    """
    The total number of OSPF packets received where the neighbor information does not match the information this router has for the neighbor since admin-state was last set to 'enabled'.
    """
    bad_packet_type: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:bad-packet-type', ge=0, le=4294967295),
    ] = None
    """
    The total number of OSPF packets received with an invalid OSPF packet type since admin-state was last set to 'enabled'.
    """
    bad_length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:bad-length', ge=0, le=4294967295)
    ] = None
    """
    The total number of OSPF packets received with a total length not equal to the length given in the packet itself since admin-state was last set to 'enabled'.
    """
    bad_hello_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:bad-hello-interval', ge=0, le=4294967295),
    ] = None
    """
    the value of bad-hello-intervals indicates the total number of OSPF packets received where the hello interval given in packet was not equal to that configured on this interface since admin-state was last set to 'enabled'.
    """
    bad_dead_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:bad-dead-interval', ge=0, le=4294967295),
    ] = None
    """
    The total number of OSPF packets received where the dead interval given in the packet was not equal to that configured on this interface since admin-state was last set to 'enabled'.
    """
    bad_options: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:bad-options', ge=0, le=4294967295)
    ] = None
    """
    The total number of OSPF packets received with an option that does not match those configured for this interface or area since admin-state was last set to 'enabled'.
    """
    bad_checksum: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:bad-checksum', ge=0, le=4294967295)
    ] = None
    """
    The count of LS-as received with bad checksums.
    """
    bad_auth_type: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:bad-auth-type', ge=0, le=4294967295)
    ] = None
    """
    The total number of OSPF packets received with an invalid authorization type since admin-state was last set to 'enabled'.
    """
    auth_failures: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:auth-failures', ge=0, le=4294967295)
    ] = None
    """
    The total number of OSPF packets received with an invalid authorization key since admin-state was last set to 'enabled'.
    """
    bad_virtual_link: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:bad-virtual-link', ge=0, le=4294967295),
    ] = None
    """
    The total number of OSPF packets received that are destined to a virtual link that does not exist since admin-state was last set to 'enabled'.
    """


class BandwidthConstraintListEntry(BaseModel):
    """
    List of the Bandwidth Constraints sub-TLV instances present in the TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    model_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:model-id', ge=0, le=255)
    ] = None
    """
    Identifier for the Bandwidth Constraints  Model currently in use by the LSR initiating the IGP advertisement.
    """
    constraints: Annotated[
        Optional[ConstraintsContainer], Field(alias='srl_nokia-isis:constraints')
    ] = None


class BandwidthConstraintListEntry2(BaseModel):
    """
    List of the Bandwidth Constraints sub-TLV instances present in the TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    model_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:model-id', ge=0, le=255)
    ] = None
    """
    Identifier for the Bandwidth Constraints  Model currently in use by the LSR initiating the IGP advertisement.
    """
    constraints: Annotated[
        Optional[ConstraintsContainer2], Field(alias='srl_nokia-isis:constraints')
    ] = None


class BandwidthConstraintListEntry3(BaseModel):
    """
    List of the Bandwidth Constraints sub-TLV instances present in the TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    model_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:model-id', ge=0, le=255)
    ] = None
    """
    Identifier for the Bandwidth Constraints  Model currently in use by the LSR initiating the IGP advertisement.
    """
    constraints: Annotated[
        Optional[ConstraintsContainer3], Field(alias='srl_nokia-isis:constraints')
    ] = None


class BandwidthConstraintListEntry4(BaseModel):
    """
    List of the Bandwidth Constraints sub-TLV instances present in the TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    model_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:model-id', ge=0, le=255)
    ] = None
    """
    Identifier for the Bandwidth Constraints  Model currently in use by the LSR initiating the IGP advertisement.
    """
    constraints: Annotated[
        Optional[ConstraintsContainer4], Field(alias='srl_nokia-isis:constraints')
    ] = None


class BandwidthConstraintsContainer(BaseModel):
    """
    This container defines bandwidth-constraints. For DS-TE, the existing Maximum Reservable link bandwidth parameter is retained, but its semantics is generalized and interpreted as the aggregate bandwidth constraint across all Class-Types
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bandwidth_constraint: Annotated[
        Optional[List[BandwidthConstraintListEntry]],
        Field(alias='srl_nokia-isis:bandwidth-constraint'),
    ] = None


class BandwidthConstraintsContainer2(BaseModel):
    """
    This container defines bandwidth-constraints. For DS-TE, the existing Maximum Reservable link bandwidth parameter is retained, but its semantics is generalized and interpreted as the aggregate bandwidth constraint across all Class-Types
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bandwidth_constraint: Annotated[
        Optional[List[BandwidthConstraintListEntry2]],
        Field(alias='srl_nokia-isis:bandwidth-constraint'),
    ] = None


class BandwidthConstraintsContainer3(BaseModel):
    """
    This container defines bandwidth-constraints. For DS-TE, the existing Maximum Reservable link bandwidth parameter is retained, but its semantics is generalized and interpreted as the aggregate bandwidth constraint across all Class-Types
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bandwidth_constraint: Annotated[
        Optional[List[BandwidthConstraintListEntry3]],
        Field(alias='srl_nokia-isis:bandwidth-constraint'),
    ] = None


class BandwidthConstraintsContainer4(BaseModel):
    """
    This container defines bandwidth-constraints. For DS-TE, the existing Maximum Reservable link bandwidth parameter is retained, but its semantics is generalized and interpreted as the aggregate bandwidth constraint across all Class-Types
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bandwidth_constraint: Annotated[
        Optional[List[BandwidthConstraintListEntry4]],
        Field(alias='srl_nokia-isis:bandwidth-constraint'),
    ] = None


class BfdContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bfd_state: Annotated[
        Optional[EnumerationEnum393], Field(alias='srl_nokia-te-policies:bfd-state')
    ] = None
    """
    The current state of the BFD session on the LSP path.
    """
    hold_down_timer_expiry: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:hold-down-timer-expiry',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time remaining on seamless-bfd hold down timer
    """
    hold_down_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:hold-down-timer', ge=0, le=65535),
    ] = None
    """
    Specifies a hold-down timer value when seamless-bfd is enabled

    The timer is started when the number of S-BFD sessions that are up drops below the threshold. The TE-policy path is not considered to be up again until the hold-down timer has expired and the number of S-BFD sessions that are up equals or exceeds the threshold.
    A grace preiod after session down such that sBFD session flaps does not impact active path.

    The default is 3 seconds.
    """
    bfd_wait_for_up_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:bfd-wait-for-up-timer', ge=0, le=65535),
    ] = None
    """
    Specifies a wait-for-up timer value when seamless-bfd is enabled

    This timer takes effect if BFD does not come up, or BFD goes from up to down. The timer is started when BFD is first enabled on a segment-list or BFD transitions from up to down. When the timer expires if BFD is not yet come up, then the path is torn down by removing it from the TTM and the PI and the retry timer is started.

    The default is 3 seconds.
    """
    bfd_wait_for_up_expiry: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:bfd-wait-for-up-expiry',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time in seconds left to wait for the bfd session to be up.
    """


class BfdContainer3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bfd_state: Annotated[
        Optional[EnumerationEnum402], Field(alias='srl_nokia-te-policies:bfd-state')
    ] = None
    """
    The current state of the BFD session on the LSP path.
    """
    hold_down_timer_expiry: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:hold-down-timer-expiry',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time remaining on seamless-bfd hold down timer
    """
    hold_down_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:hold-down-timer', ge=0, le=65535),
    ] = None
    """
    Specifies a hold-down timer value when seamless-bfd is enabled

    The timer is started when the number of S-BFD sessions that are up drops below the threshold. The TE-policy path is not considered to be up again until the hold-down timer has expired and the number of S-BFD sessions that are up equals or exceeds the threshold.
    A grace preiod after session down such that sBFD session flaps does not impact active path.

    The default is 3 seconds.
    """
    bfd_wait_for_up_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:bfd-wait-for-up-timer', ge=0, le=65535),
    ] = None
    """
    Specifies a wait-for-up timer value when seamless-bfd is enabled

    This timer takes effect if BFD does not come up, or BFD goes from up to down. The timer is started when BFD is first enabled on a segment-list or BFD transitions from up to down. When the timer expires if BFD is not yet come up, then the path is torn down by removing it from the TTM and the PI and the retry timer is started.

    The default is 3 seconds.
    """
    bfd_wait_for_up_expiry: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:bfd-wait-for-up-expiry',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time in seconds left to wait for the bfd session to be up.
    """


class BindingSidContainer(BaseModel):
    """
    Configuration and state related to the label block(s) used for the binding SIDs associated with TE policies
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    static_label_block: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:static-label-block',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Reference to a static label range
    """
    static_label_block_status: Annotated[
        Optional[EnumerationEnum375],
        Field(alias='srl_nokia-te-policies:static-label-block-status'),
    ] = None
    """
    Status of the label block.

     			  The label block may show as unavailable if there is pending cleanup.
    """


class ConvergenceContainer2(BaseModel):
    """
    Options for controlling and monitoring routing convergence of the relevant address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_wait_to_advertise: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:max-wait-to-advertise', ge=0, le=3600)
    ] = 0
    """
    The maximum amount of time, in seconds, measured from the time when the first session (configured or dynamic) that supports the address family comes up after a BGP restart, until BGP is allowed to advertise any routes in that address family to any peer

    The value of this leaf must always be greater than or equal to the operational value of min-wait-to-advertise. The default value is 3x the value of min-wait-to-advertise. A value of 0 means the feature is disabled and there is no additional delay before advertising routes of the address family.
    """
    oper_max_wait_to_advertise: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:oper-max-wait-to-advertise', ge=0, le=10800),
    ] = None
    """
    The operational value of the max-wait-to-advertise timer for the address family
    """
    up_peers_when_min_expired: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:up-peers-when-min-expired', ge=0, le=65535),
    ] = None
    """
    The number of BGP sessions (configured and dynamic) that support the address family and that were in established state when the win-wait-to-advertise timer expired
    """
    up_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:up-peers', ge=0, le=65535)
    ] = None
    """
    The number of BGP sessions (configured and dynamic) that support the address family and that are currently in the established state
    """
    converged_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:converged-peers', ge=0, le=65535)
    ] = None
    """
    The number of peers that have sent an EOR marker for the address family since the last BGP restart
    """
    first_up_peer_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:first-up-peer-time', ge=0, le=18446744073709551615),
    ] = None
    """
    The time when the first session supporting the address family came up, measured from the time that the BGP instance restarted
    """
    last_up_peer_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:last-up-peer-time', ge=0, le=18446744073709551615),
    ] = None
    """
    The time when the last session supporting the address family came up, measured from the time that the BGP instance restarted
    """
    convergence_state: Annotated[
        Optional[EnumerationEnum30], Field(alias='srl_nokia-bgp:convergence-state')
    ] = None
    convergence_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:convergence-time', ge=0, le=18446744073709551615),
    ] = None
    """
    The elapsed time in seconds, starting from the last BGP restart, to reach the converged state for the address family
    """


class ConvergenceContainer3(BaseModel):
    """
    Options for controlling and monitoring routing convergence of the relevant address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_wait_to_advertise: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:max-wait-to-advertise', ge=0, le=3600)
    ] = 0
    """
    The maximum amount of time, in seconds, measured from the time when the first session (configured or dynamic) that supports the address family comes up after a BGP restart, until BGP is allowed to advertise any routes in that address family to any peer

    The value of this leaf must always be greater than or equal to the operational value of min-wait-to-advertise. The default value is 3x the value of min-wait-to-advertise. A value of 0 means the feature is disabled and there is no additional delay before advertising routes of the address family.
    """
    oper_max_wait_to_advertise: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:oper-max-wait-to-advertise', ge=0, le=10800),
    ] = None
    """
    The operational value of the max-wait-to-advertise timer for the address family
    """
    up_peers_when_min_expired: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:up-peers-when-min-expired', ge=0, le=65535),
    ] = None
    """
    The number of BGP sessions (configured and dynamic) that support the address family and that were in established state when the win-wait-to-advertise timer expired
    """
    up_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:up-peers', ge=0, le=65535)
    ] = None
    """
    The number of BGP sessions (configured and dynamic) that support the address family and that are currently in the established state
    """
    converged_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:converged-peers', ge=0, le=65535)
    ] = None
    """
    The number of peers that have sent an EOR marker for the address family since the last BGP restart
    """
    first_up_peer_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:first-up-peer-time', ge=0, le=18446744073709551615),
    ] = None
    """
    The time when the first session supporting the address family came up, measured from the time that the BGP instance restarted
    """
    last_up_peer_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:last-up-peer-time', ge=0, le=18446744073709551615),
    ] = None
    """
    The time when the last session supporting the address family came up, measured from the time that the BGP instance restarted
    """
    convergence_state: Annotated[
        Optional[EnumerationEnum33], Field(alias='srl_nokia-bgp:convergence-state')
    ] = None
    convergence_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:convergence-time', ge=0, le=18446744073709551615),
    ] = None
    """
    The elapsed time in seconds, starting from the last BGP restart, to reach the converged state for the address family
    """


class ConvergenceContainer4(BaseModel):
    """
    Options for controlling and monitoring routing convergence of the relevant address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_wait_to_advertise: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:max-wait-to-advertise', ge=0, le=3600)
    ] = 0
    """
    The maximum amount of time, in seconds, measured from the time when the first session (configured or dynamic) that supports the address family comes up after a BGP restart, until BGP is allowed to advertise any routes in that address family to any peer

    The value of this leaf must always be greater than or equal to the operational value of min-wait-to-advertise. The default value is 3x the value of min-wait-to-advertise. A value of 0 means the feature is disabled and there is no additional delay before advertising routes of the address family.
    """
    oper_max_wait_to_advertise: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:oper-max-wait-to-advertise', ge=0, le=10800),
    ] = None
    """
    The operational value of the max-wait-to-advertise timer for the address family
    """
    up_peers_when_min_expired: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:up-peers-when-min-expired', ge=0, le=65535),
    ] = None
    """
    The number of BGP sessions (configured and dynamic) that support the address family and that were in established state when the win-wait-to-advertise timer expired
    """
    up_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:up-peers', ge=0, le=65535)
    ] = None
    """
    The number of BGP sessions (configured and dynamic) that support the address family and that are currently in the established state
    """
    converged_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:converged-peers', ge=0, le=65535)
    ] = None
    """
    The number of peers that have sent an EOR marker for the address family since the last BGP restart
    """
    first_up_peer_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:first-up-peer-time', ge=0, le=18446744073709551615),
    ] = None
    """
    The time when the first session supporting the address family came up, measured from the time that the BGP instance restarted
    """
    last_up_peer_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:last-up-peer-time', ge=0, le=18446744073709551615),
    ] = None
    """
    The time when the last session supporting the address family came up, measured from the time that the BGP instance restarted
    """
    convergence_state: Annotated[
        Optional[EnumerationEnum34], Field(alias='srl_nokia-bgp:convergence-state')
    ] = None
    convergence_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:convergence-time', ge=0, le=18446744073709551615),
    ] = None
    """
    The elapsed time in seconds, starting from the last BGP restart, to reach the converged state for the address family
    """


class ConvergenceContainer5(BaseModel):
    """
    Options for controlling and monitoring routing convergence of the relevant address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_wait_to_advertise: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:max-wait-to-advertise', ge=0, le=3600)
    ] = 0
    """
    The maximum amount of time, in seconds, measured from the time when the first session (configured or dynamic) that supports the address family comes up after a BGP restart, until BGP is allowed to advertise any routes in that address family to any peer

    The value of this leaf must always be greater than or equal to the operational value of min-wait-to-advertise. The default value is 3x the value of min-wait-to-advertise. A value of 0 means the feature is disabled and there is no additional delay before advertising routes of the address family.
    """
    oper_max_wait_to_advertise: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:oper-max-wait-to-advertise', ge=0, le=10800),
    ] = None
    """
    The operational value of the max-wait-to-advertise timer for the address family
    """
    up_peers_when_min_expired: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:up-peers-when-min-expired', ge=0, le=65535),
    ] = None
    """
    The number of BGP sessions (configured and dynamic) that support the address family and that were in established state when the win-wait-to-advertise timer expired
    """
    up_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:up-peers', ge=0, le=65535)
    ] = None
    """
    The number of BGP sessions (configured and dynamic) that support the address family and that are currently in the established state
    """
    converged_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:converged-peers', ge=0, le=65535)
    ] = None
    """
    The number of peers that have sent an EOR marker for the address family since the last BGP restart
    """
    first_up_peer_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:first-up-peer-time', ge=0, le=18446744073709551615),
    ] = None
    """
    The time when the first session supporting the address family came up, measured from the time that the BGP instance restarted
    """
    last_up_peer_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:last-up-peer-time', ge=0, le=18446744073709551615),
    ] = None
    """
    The time when the last session supporting the address family came up, measured from the time that the BGP instance restarted
    """
    convergence_state: Annotated[
        Optional[EnumerationEnum35], Field(alias='srl_nokia-bgp:convergence-state')
    ] = None
    convergence_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:convergence-time', ge=0, le=18446744073709551615),
    ] = None
    """
    The elapsed time in seconds, starting from the last BGP restart, to reach the converged state for the address family
    """


class ConvergenceContainer6(BaseModel):
    """
    Options for controlling and monitoring routing convergence of the relevant address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_wait_to_advertise: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:max-wait-to-advertise', ge=0, le=3600)
    ] = 0
    """
    The maximum amount of time, in seconds, measured from the time when the first session (configured or dynamic) that supports the address family comes up after a BGP restart, until BGP is allowed to advertise any routes in that address family to any peer

    The value of this leaf must always be greater than or equal to the operational value of min-wait-to-advertise. The default value is 3x the value of min-wait-to-advertise. A value of 0 means the feature is disabled and there is no additional delay before advertising routes of the address family.
    """
    oper_max_wait_to_advertise: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:oper-max-wait-to-advertise', ge=0, le=10800),
    ] = None
    """
    The operational value of the max-wait-to-advertise timer for the address family
    """
    up_peers_when_min_expired: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:up-peers-when-min-expired', ge=0, le=65535),
    ] = None
    """
    The number of BGP sessions (configured and dynamic) that support the address family and that were in established state when the win-wait-to-advertise timer expired
    """
    up_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:up-peers', ge=0, le=65535)
    ] = None
    """
    The number of BGP sessions (configured and dynamic) that support the address family and that are currently in the established state
    """
    converged_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:converged-peers', ge=0, le=65535)
    ] = None
    """
    The number of peers that have sent an EOR marker for the address family since the last BGP restart
    """
    first_up_peer_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:first-up-peer-time', ge=0, le=18446744073709551615),
    ] = None
    """
    The time when the first session supporting the address family came up, measured from the time that the BGP instance restarted
    """
    last_up_peer_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:last-up-peer-time', ge=0, le=18446744073709551615),
    ] = None
    """
    The time when the last session supporting the address family came up, measured from the time that the BGP instance restarted
    """
    convergence_state: Annotated[
        Optional[EnumerationEnum38], Field(alias='srl_nokia-bgp:convergence-state')
    ] = None
    convergence_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:convergence-time', ge=0, le=18446744073709551615),
    ] = None
    """
    The elapsed time in seconds, starting from the last BGP restart, to reach the converged state for the address family
    """


class ConvergenceContainer7(BaseModel):
    """
    Options for controlling and monitoring routing convergence of the relevant address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    max_wait_to_advertise: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:max-wait-to-advertise', ge=0, le=3600)
    ] = 0
    """
    The maximum amount of time, in seconds, measured from the time when the first session (configured or dynamic) that supports the address family comes up after a BGP restart, until BGP is allowed to advertise any routes in that address family to any peer

    The value of this leaf must always be greater than or equal to the operational value of min-wait-to-advertise. The default value is 3x the value of min-wait-to-advertise. A value of 0 means the feature is disabled and there is no additional delay before advertising routes of the address family.
    """
    oper_max_wait_to_advertise: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:oper-max-wait-to-advertise', ge=0, le=10800),
    ] = None
    """
    The operational value of the max-wait-to-advertise timer for the address family
    """
    up_peers_when_min_expired: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:up-peers-when-min-expired', ge=0, le=65535),
    ] = None
    """
    The number of BGP sessions (configured and dynamic) that support the address family and that were in established state when the win-wait-to-advertise timer expired
    """
    up_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:up-peers', ge=0, le=65535)
    ] = None
    """
    The number of BGP sessions (configured and dynamic) that support the address family and that are currently in the established state
    """
    converged_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:converged-peers', ge=0, le=65535)
    ] = None
    """
    The number of peers that have sent an EOR marker for the address family since the last BGP restart
    """
    first_up_peer_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:first-up-peer-time', ge=0, le=18446744073709551615),
    ] = None
    """
    The time when the first session supporting the address family came up, measured from the time that the BGP instance restarted
    """
    last_up_peer_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:last-up-peer-time', ge=0, le=18446744073709551615),
    ] = None
    """
    The time when the last session supporting the address family came up, measured from the time that the BGP instance restarted
    """
    convergence_state: Annotated[
        Optional[EnumerationEnum39], Field(alias='srl_nokia-bgp:convergence-state')
    ] = None
    convergence_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:convergence-time', ge=0, le=18446744073709551615),
    ] = None
    """
    The elapsed time in seconds, starting from the last BGP restart, to reach the converged state for the address family
    """


class CountersContainer(BaseModel):
    """
    Next-hop forwarding counters
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    resource_allocation_failed: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-ip-route-tables:resource-allocation-failed'),
    ] = None
    """
    An available decap-next-hop-statistics resource was not available for this next-hop in all forwarding complexes
    """
    packets_forwarded: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ip-route-tables:packets-forwarded',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The number of packets forwarded to this next-hop
    """
    octets_forwarded: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ip-route-tables:octets-forwarded',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The number of octets in packets forwarded to this next-hop
    """


class CsnpAuthenticationContainer(BaseModel):
    """
    Container with options to control the authentication of CSNP PDUs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    generate: Annotated[Optional[bool], Field(alias='srl_nokia-isis:generate')] = None
    """
    When set to true, IS-IS is instructed to add an authentication TLV to every transmitted PDU of the specified type
    """
    check_received: Annotated[
        Optional[EnumerationEnum137], Field(alias='srl_nokia-isis:check-received')
    ] = None
    """
    Specifies the type of authentication checks done for received PDUs of the specified type.
    """


class CsnpAuthenticationContainer2(BaseModel):
    """
    Container with options to control the authentication of CSNP PDUs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    generate: Annotated[Optional[bool], Field(alias='srl_nokia-isis:generate')] = None
    """
    When set to true, IS-IS is instructed to add an authentication TLV to every transmitted PDU of the specified type
    """
    check_received: Annotated[
        Optional[EnumerationEnum137], Field(alias='srl_nokia-isis:check-received')
    ] = None
    """
    Specifies the type of authentication checks done for received PDUs of the specified type.
    """


class DefaultMetricContainer(BaseModel):
    """
    This container defines ISIS Default Metric.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    flags: Annotated[
        Optional[EnumerationEnum165], Field(alias='srl_nokia-isis:flags')
    ] = None
    """
    ISIS Default-Metric Flags.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=1, le=63)
    ] = None
    """
    ISIS default metric value

    This is a metric understood by every Intermediate system in the domain. Each circuit shall have a positive  integral value assigned for this metric. The value may be associated with any  objective function of the circuit, but by convention is intended to measure the capacity of the circuit for handling traffic, for example, its throughput in  bits-per-second. Higher values indicate a lower capacity.
    """


class DefaultMetricContainer2(BaseModel):
    """
    This container defines ISIS Default Metric.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    flags: Annotated[
        Optional[EnumerationEnum167], Field(alias='srl_nokia-isis:flags')
    ] = None
    """
    ISIS Default-Metric Flags.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=1, le=63)
    ] = None
    """
    ISIS default metric value

    This is a metric understood by every Intermediate system in the domain. Each circuit shall have a positive  integral value assigned for this metric. The value may be associated with any  objective function of the circuit, but by convention is intended to measure the capacity of the circuit for handling traffic, for example, its throughput in  bits-per-second. Higher values indicate a lower capacity.
    """


class DefaultMetricContainer3(BaseModel):
    """
    This container defines ISIS Default Metric.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    flags: Annotated[
        Optional[EnumerationEnum168], Field(alias='srl_nokia-isis:flags')
    ] = None
    """
    ISIS Default-Metric Flags.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=1, le=63)
    ] = None
    """
    ISIS default metric value

    This is a metric understood by every Intermediate system in the domain. Each circuit shall have a positive  integral value assigned for this metric. The value may be associated with any  objective function of the circuit, but by convention is intended to measure the capacity of the circuit for handling traffic, for example, its throughput in  bits-per-second. Higher values indicate a lower capacity.
    """


class DirectlyConnectedContainer(BaseModel):
    """
    Container for handling directly connected routes as a pseudo-protocol
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    te_database_install: Annotated[
        Optional[TeDatabaseInstallContainer],
        Field(alias='srl_nokia-traffic-engineering:te-database-install'),
    ] = None


class DuplicateEntriesContainer4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mac: Annotated[
        Optional[List[MacListEntry9]],
        Field(
            alias='srl_nokia-connection-point-bridge-table-mac-duplication-entries:mac'
        ),
    ] = None


class DynamicLearningContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:admin-state'),
    ] = 'disable'
    """
    Configurable state of the learning procedures for dynamic ARP/ND entries

    The dynamic ARP/ND entries are learned out of snooped GARP/ARP/ND messages on bridged sub-interfaces.
    These entries will be shown as dynamic, as opposed to EVPN entries or static entries. If the admin-state
    is disabled, the existing ARP/ND entries in the proxy table will be kept (and refreshed).
    """
    age_time: Annotated[
        Optional[Union[EnumerationEnum272, AgeTimeLeaf21]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:age-time'),
    ] = 'never'
    """
    Aging timer value for the proxy entries

    When the aging expires, the entry is flushed.
    """
    send_refresh: Annotated[
        Optional[Union[SendRefreshLeaf1, EnumerationEnum273]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:send-refresh'),
    ] = 'never'
    """
    Configures the proxy refresh interval

    The interval determines the frequency at which the system generates three ARP Requests or Neighbor Solicitations
    with the intend to refresh the proxy entry. The refresh is sent within the age-time window.
    """


class DynamicLearningContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:admin-state'),
    ] = 'disable'
    """
    Configurable state of the learning procedures for dynamic ARP/ND entries

    The dynamic ARP/ND entries are learned out of snooped GARP/ARP/ND messages on bridged sub-interfaces.
    These entries will be shown as dynamic, as opposed to EVPN entries or static entries. If the admin-state
    is disabled, the existing ARP/ND entries in the proxy table will be kept (and refreshed).
    """
    age_time: Annotated[
        Optional[Union[EnumerationEnum282, AgeTimeLeaf31]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:age-time'),
    ] = 'never'
    """
    Aging timer value for the proxy entries

    When the aging expires, the entry is flushed.
    """
    send_refresh: Annotated[
        Optional[Union[SendRefreshLeaf21, EnumerationEnum283]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:send-refresh'),
    ] = 'never'
    """
    Configures the proxy refresh interval

    The interval determines the frequency at which the system generates three ARP Requests or Neighbor Solicitations
    with the intend to refresh the proxy entry. The refresh is sent within the age-time window.
    """


class EgressStatisticsContainer(BaseModel):
    """
    Enable the egress-statistics context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-te-policies:admin-state')
    ] = 'disable'
    """
    Administrative state of the traffic statistics
    """


class EndOfLibContainer(BaseModel):
    """
    Container with state information pertaining to sent and received End of LIB markers
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_prefix_fecs: Annotated[
        Optional[Ipv4PrefixFecsContainer], Field(alias='srl_nokia-ldp:ipv4-prefix-fecs')
    ] = None
    ipv6_prefix_fecs: Annotated[
        Optional[Ipv6PrefixFecsContainer], Field(alias='srl_nokia-ldp:ipv6-prefix-fecs')
    ] = None


class EntropyLabelContainer(BaseModel):
    """
    Options for configuring control and data plane aspects of entropy label
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    transmit: Annotated[
        Optional[EnumerationEnum28], Field(alias='srl_nokia-bgp:transmit')
    ] = 'disable'
    """
    Specify conditions for adding ELI/EL when pushing BGP label
    """


class EntropyLabelContainer3(BaseModel):
    """
    Options for configuring control and data plane aspects of entropy label
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise_capability: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:advertise-capability')
    ] = False
    """
    Advertise the Entropy Label Capability
    """
    transmit: Annotated[
        Optional[EnumerationEnum140], Field(alias='srl_nokia-isis:transmit')
    ] = 'disable'
    """
    Specify conditions for adding ELI/EL when pushing isis label
    """


class EntropyLabelContainer4(BaseModel):
    """
    Options for configuring control and data plane aspects of entropy label
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    transmit: Annotated[
        Optional[EnumerationEnum378], Field(alias='srl_nokia-te-policies:transmit')
    ] = 'disable'
    """
    Specify conditions for adding ELI/EL under the stack of labels comprising the segment-list
    """


class ErrorContainer(BaseModel):
    """
    Error message statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bad_length: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:bad-length', ge=0, le=4294967295)
    ] = 0
    """
    Bad length
    """
    unknown_type: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:unknown-type', ge=0, le=4294967295)
    ] = 0
    """
    Unknown type
    """
    wrong_version: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:wrong-version', ge=0, le=4294967295)
    ] = 0
    """
    Wrong version
    """
    import_policy_drops: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld:import-policy-drops', ge=0, le=4294967295),
    ] = 0
    """
    Number of times we matched the host IP address or group or
    source addresses specified in the import policy.
    """
    missing_router_alert: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld:missing-router-alert', ge=0, le=4294967295),
    ] = 0
    """
    Router alert flag is not set
    """
    bad_encoding: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:bad-encoding', ge=0, le=4294967295)
    ] = 0
    """
    Badly encoded
    """
    local_scope: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:local-scope', ge=0, le=4294967295)
    ] = 0
    """
    Link-local scope multicast group address
    """
    reserved_scope: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:reserved-scope', ge=0, le=4294967295)
    ] = 0
    """
    Reserved scope multicast group address
    """
    reached_maximum_number_groups: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld:reached-maximum-number-groups', ge=0, le=4294967295),
    ] = 0
    """
    Number of times a join is dropped because we reached the maximum
    number of groups.
    """
    reached_maximum_number_group_sources: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld:reached-maximum-number-group-sources',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    Number of times a join is dropped because we reached the maximum
    number group-source combinations.
    """
    reached_maximum_number_sources: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld:reached-maximum-number-sources', ge=0, le=4294967295
        ),
    ] = 0
    """
    Number of times a join is dropped because we reached the maximum
    number of sources per group.
    """
    out_of_memory_drops: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld:out-of-memory-drops', ge=0, le=4294967295),
    ] = 0
    """
    Number of times a join is dropped because we ran out of memory
    """
    non_local: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:non-local', ge=0, le=4294967295)
    ] = 0
    """
    Non-local sender source IP address
    """


class ErrorContainer2(BaseModel):
    """
    Error message statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bad_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:bad-length', ge=0, le=4294967295),
    ] = 0
    """
    Bad length
    """
    unknown_type: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:unknown-type', ge=0, le=4294967295),
    ] = 0
    """
    Unknown type
    """
    wrong_version: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:wrong-version', ge=0, le=4294967295),
    ] = 0
    """
    Wrong version
    """
    import_policy_drops: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:import-policy-drops', ge=0, le=4294967295),
    ] = 0
    """
    Number of times the host IP address or group or
    source IP addresses specified in the import policy are matched
    """
    missing_router_alert: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:missing-router-alert', ge=0, le=4294967295
        ),
    ] = 0
    """
    Router alert flag is not set
    """
    bad_encoding: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:bad-encoding', ge=0, le=4294967295),
    ] = 0
    """
    Badly encoded packets
    """
    local_scope: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:local-scope', ge=0, le=4294967295),
    ] = 0
    """
    Link-local scope multicast group address
    """
    reached_maximum_number_groups: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:reached-maximum-number-groups',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    Number of times a join is discarded because the maximum number of
    groups is reached
    """
    reached_maximum_number_group_sources: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:reached-maximum-number-group-sources',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    Number of times a join is discarded because the maximum number of
    group-source combinations is reached
    """
    reached_maximum_number_sources: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:reached-maximum-number-sources',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    Number of times a join is discarded because the maximum number of
    sources per group is reached
    """
    out_of_memory_discarded_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:out-of-memory-discarded-packets',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    Number of times a join is discarded because the router ran out of memory
    """
    bad_igmp_checksum: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:bad-igmp-checksum', ge=0, le=4294967295),
    ] = 0
    """
    Number of times a packet is discarded because of a bad IGMP header checksum
    """
    zero_source_ip_address: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:zero-source-ip-address', ge=0, le=4294967295
        ),
    ] = 0
    """
    Number of times a packet is discarded because it has a zero source IP address
    """
    send_query_configured_discarded_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:send-query-configured-discarded-packets',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    Number of times a query is discarded because send-queries is configured in the
    sub-interface
    """
    discarded_bgp_join_sync: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:discarded-bgp-join-sync', ge=0, le=4294967295
        ),
    ] = 0
    """
    Bgp join sync routes
    """
    discarded_bgp_leave_sync: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:discarded-bgp-leave-sync',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    Bgp leave sync routes
    """


class ErrorContainer3(BaseModel):
    """
    Error message statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bad_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:bad-length', ge=0, le=4294967295),
    ] = 0
    """
    Bad length
    """
    unknown_type: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:unknown-type', ge=0, le=4294967295),
    ] = 0
    """
    Unknown type
    """
    wrong_version: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:wrong-version', ge=0, le=4294967295),
    ] = 0
    """
    Wrong version
    """
    import_policy_drops: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:import-policy-drops', ge=0, le=4294967295),
    ] = 0
    """
    Number of times the host IP address or group or
    source IP addresses specified in the import policy are matched
    """
    missing_router_alert: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:missing-router-alert', ge=0, le=4294967295),
    ] = 0
    """
    Router alert flag is not set
    """
    bad_encoding: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:bad-encoding', ge=0, le=4294967295),
    ] = 0
    """
    Badly encoded packets
    """
    local_scope: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:local-scope', ge=0, le=4294967295),
    ] = 0
    """
    Link-local scope multicast group address
    """
    reached_maximum_number_groups: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:reached-maximum-number-groups',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    Number of times a join is discarded because the maximum number of
    groups is reached
    """
    reached_maximum_number_group_sources: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:reached-maximum-number-group-sources',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    Number of times a join is discarded because the maximum number of
    group-source combinations is reached
    """
    reached_maximum_number_sources: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:reached-maximum-number-sources',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    Number of times a join is discarded because the maximum number of
    sources per group is reached
    """
    out_of_memory_discarded_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:out-of-memory-discarded-packets',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    Number of times a join is discarded because the router ran out of memory
    """
    bad_mld_checksum: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:bad-mld-checksum', ge=0, le=4294967295),
    ] = 0
    """
    Number of times a packet is discarded because of a bad MLD header checksum
    """
    zero_source_ip_address: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:zero-source-ip-address', ge=0, le=4294967295
        ),
    ] = 0
    """
    Number of times a packet is discarded because it has a zero source IP address
    """
    send_query_configured_discarded_packets: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:send-query-configured-discarded-packets',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    Number of times a query is discarded because send-queries is configured in the
    sub-interface
    """
    discarded_bgp_join_sync: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:discarded-bgp-join-sync', ge=0, le=4294967295
        ),
    ] = 0
    """
    Bgp join sync routes
    """
    discarded_bgp_leave_sync: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:discarded-bgp-leave-sync', ge=0, le=4294967295
        ),
    ] = 0
    """
    Bgp leave sync routes
    """


class ErrorContainer4(BaseModel):
    """
    Error message statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bad_length: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:bad-length', ge=0, le=4294967295)
    ] = 0
    """
    Bad length
    """
    unknown_type: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:unknown-type', ge=0, le=4294967295)
    ] = 0
    """
    Unknown type
    """
    wrong_version: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:wrong-version', ge=0, le=4294967295)
    ] = 0
    """
    Wrong version
    """
    import_policy_drops: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp:import-policy-drops', ge=0, le=4294967295),
    ] = 0
    """
    Number of times we matched the host IP address or group or
    source addresses specified in the import policy.
    """
    missing_router_alert: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp:missing-router-alert', ge=0, le=4294967295),
    ] = 0
    """
    Router alert flag is not set
    """
    bad_encoding: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:bad-encoding', ge=0, le=4294967295)
    ] = 0
    """
    Badly encoded
    """
    local_scope: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:local-scope', ge=0, le=4294967295)
    ] = 0
    """
    Link-local scope multicast group address
    """
    reserved_scope: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:reserved-scope', ge=0, le=4294967295)
    ] = 0
    """
    Reserved scope multicast group address
    """
    reached_maximum_number_groups: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp:reached-maximum-number-groups', ge=0, le=4294967295
        ),
    ] = 0
    """
    Number of times a join is dropped because we reached the maximum
    number of groups.
    """
    reached_maximum_number_group_sources: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp:reached-maximum-number-group-sources',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    Number of times a join is dropped because we reached the maximum
    number group-source combinations.
    """
    reached_maximum_number_sources: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp:reached-maximum-number-sources', ge=0, le=4294967295
        ),
    ] = 0
    """
    Number of times a join is dropped because we reached the maximum
    number of sources per group.
    """
    out_of_memory_drops: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp:out-of-memory-drops', ge=0, le=4294967295),
    ] = 0
    """
    Number of times a join is dropped because we ran out of memory
    """
    non_local: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:non-local', ge=0, le=4294967295)
    ] = 0
    """
    Non-local sender source IP address
    """


class EvpnContainer2(BaseModel):
    """
    Options related to the EVPN address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:advertise-ipv6-next-hops')
    ] = None
    """
    Enables advertisement of EVPN routes with IPv6 next-hops to peers in the peer-group

    If this is set to true and the local-address used towards the peer is an IPv6 address and BGP is supposed to apply next-hop-self then the route is advertised with the IPv6 local-address as the BGP next-hop. If this is set to false, then the EVPN route is advertised with an IPv4 next-hop.
    """
    prefix_limit_received: Annotated[
        Optional[PrefixLimitReceivedContainer7],
        Field(alias='srl_nokia-bgp:prefix-limit-received'),
    ] = None
    prefix_limit_accepted: Annotated[
        Optional[PrefixLimitAcceptedContainer7],
        Field(alias='srl_nokia-bgp:prefix-limit-accepted'),
    ] = None
    default_received_encapsulation: Annotated[
        Optional[EnumerationEnum47],
        Field(alias='srl_nokia-bgp:default-received-encapsulation'),
    ] = None
    """
    Indicates the encapsulation considered when the routes are received without BGP encapsulation extended community

    Most EVPN routes are usually received with a BGP encapsulation extended community that indicates the encapsulation
    and therefore how to interpret the value in the received Label fields of the routes. If no encapsulation is
    received, BGP will validate the route as MPLS or VXLAN or SRv6 depending on how this command is configured.
    """


class EvpnContainer3(BaseModel):
    """
    Options related to the EVPN address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:advertise-ipv6-next-hops')
    ] = None
    """
    Enables advertisement of EVPN routes with IPv6 next-hops to peers

    If this is set to true and the local-address used towards the peer is an IPv6 address and BGP is supposed to apply next-hop-self then the route is advertised with the IPv6 local-address as the BGP next-hop. If this is set to false, then the EVPN route is advertised with an IPv4 next-hop.
    """
    prefix_limit_received: Annotated[
        Optional[PrefixLimitReceivedContainer15],
        Field(alias='srl_nokia-bgp:prefix-limit-received'),
    ] = None
    prefix_limit_accepted: Annotated[
        Optional[PrefixLimitAcceptedContainer15],
        Field(alias='srl_nokia-bgp:prefix-limit-accepted'),
    ] = None
    default_received_encapsulation: Annotated[
        Optional[EnumerationEnum55],
        Field(alias='srl_nokia-bgp:default-received-encapsulation'),
    ] = None
    """
    Indicates the encapsulation considered when the routes are received without BGP encapsulation extended community

    Most EVPN routes are usually received with a BGP encapsulation extended community that indicates the encapsulation
    and therefore how to interpret the value in the received Label fields of the routes. If no encapsulation is
    received, BGP will validate the route as MPLS or VXLAN or SRv6 depending on how this command is configured.
    """


class ExcludeSrlgLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Excluded SRLGs during path computation
    """


class ExcludeContainer(BaseModel):
    """
    Set the exclude context for LFA SPF computation
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_policy: Annotated[
        Optional[List[PrefixPolicyLeafList]],
        Field(alias='srl_nokia-isis:prefix-policy'),
    ] = []
    """
    Policy to exclude prefixes from LFA SPF calculation
    """


class ExportPolicyLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Apply an export policy to advertised BGP routes
    """


class ExportPolicyLeafList2(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Apply an export policy to advertised BGP routes
    """


class ExportPolicyLeafList3(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Apply an export policy to advertised BGP routes
    """


class ExportPolicyLeafList4(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Apply an export policy to advertised BGP routes
    """


class ExportPolicyLeafList5(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Apply an export policy to advertised BGP routes
    """


class ExportPolicyLeafList6(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Apply an export policy to advertised BGP routes
    """


class ExportPolicyLeafList7(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Apply an export policy to advertised BGP routes
    """


class ExtendedIpv4ReachabilityListEntry(BaseModel):
    """
    TLV specifying extended IPv4 Reachability information in the LSP. TLV type = 135
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv4-prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$',
        ),
    ] = None
    """
    An IPv4 prefix that is reachable to the router.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=0, le=16777215)
    ] = None
    """
    The default metric to reach the IPv4 prefix.
    """
    down: Annotated[Optional[bool], Field(alias='srl_nokia-isis:down')] = None
    """
    Reads true when the IPv4 prefix was leaked down from Level2 to Level1.
    """
    sub_tlvs: Annotated[
        Optional[SubTlvsContainer2], Field(alias='srl_nokia-isis:sub-tlvs')
    ] = None


class FibProgrammingContainer4(BaseModel):
    """
    Container for state related to the FIB programming of the tunnel
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    status: Annotated[
        Optional[EnumerationEnum299], Field(alias='srl_nokia-tunnel-tables:status')
    ] = None
    """
    The status of the tunnel programming
    """
    not_programmed_reason: Annotated[
        Optional[EnumerationEnum300],
        Field(alias='srl_nokia-tunnel-tables:not-programmed-reason'),
    ] = None
    """
    The reason why the tunnel is not programmed
    """


class FibProgrammingContainer5(BaseModel):
    """
    Container for state related to the FIB programming of the tunnel
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    status: Annotated[
        Optional[EnumerationEnum302], Field(alias='srl_nokia-tunnel-tables:status')
    ] = None
    """
    The status of the tunnel programming
    """
    not_programmed_reason: Annotated[
        Optional[EnumerationEnum303],
        Field(alias='srl_nokia-tunnel-tables:not-programmed-reason'),
    ] = None
    """
    The reason why the tunnel is not programmed
    """


class FlagListEntry(BaseModel):
    """
    Tracing parameters
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[Optional[EnumerationEnum42], Field(alias='srl_nokia-bgp:name')] = (
        None
    )
    modifier: Annotated[
        Optional[EnumerationEnum43], Field(alias='srl_nokia-bgp:modifier')
    ] = None


class FlagListEntry2(BaseModel):
    """
    Tracing parameters
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[Optional[EnumerationEnum48], Field(alias='srl_nokia-bgp:name')] = (
        None
    )
    modifier: Annotated[
        Optional[EnumerationEnum49], Field(alias='srl_nokia-bgp:modifier')
    ] = None


class FlagListEntry3(BaseModel):
    """
    Tracing parameters
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[Optional[EnumerationEnum56], Field(alias='srl_nokia-bgp:name')] = (
        None
    )
    modifier: Annotated[
        Optional[EnumerationEnum57], Field(alias='srl_nokia-bgp:modifier')
    ] = None


class FlagListEntry4(BaseModel):
    """
    Tracing parameters
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[EnumerationEnum275],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:name'),
    ] = None
    modifier: Annotated[
        EnumerationEnum276, Field(alias='srl_nokia-bridge-table-proxy-arp-nd:modifier')
    ]


class FlagListEntry5(BaseModel):
    """
    Tracing parameters
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[EnumerationEnum286],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:name'),
    ] = None
    modifier: Annotated[
        EnumerationEnum287, Field(alias='srl_nokia-bridge-table-proxy-arp-nd:modifier')
    ]


class FlagsContainer10(BaseModel):
    """
    The Multicast Membership Report Synch route Flags field in the NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    igmp_mld_version_1: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-1')
    ] = None
    """
    When set to true, it indicates version 1

    When the route is used for IPv4, it refers to IGMP version 1. When used for IPv6, it refers
    to MLD version 1.
    """
    igmp_mld_version_2: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-2')
    ] = None
    """
    When set to true, it indicates version 2

    When the route is used for IPv4, it refers to IGMP version 2. When used for IPv6, it refers
    to MLD version 2.
    """
    igmp_version_3: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-version-3')
    ] = None
    """
    When set to true, it indicates version 3

    When the route is used for IPv4, it refers to IGMP version 3.
    """
    include_exclude_group_type: Annotated[
        Optional[EnumerationEnum348],
        Field(alias='srl_nokia-rib-bgp:include-exclude-group-type'),
    ] = None
    """
    The Include/Exclude Group type bit

    Value 0 indicates Include Group type, and value 1 indicates Exclude Group type.
    """


class FlagsContainer11(BaseModel):
    """
    The Multicast Membership Report Synch route Flags field in the NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    igmp_mld_version_1: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-1')
    ] = None
    """
    When set to true, it indicates version 1

    When the route is used for IPv4, it refers to IGMP version 1. When used for IPv6, it refers
    to MLD version 1.
    """
    igmp_mld_version_2: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-2')
    ] = None
    """
    When set to true, it indicates version 2

    When the route is used for IPv4, it refers to IGMP version 2. When used for IPv6, it refers
    to MLD version 2.
    """
    igmp_version_3: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-version-3')
    ] = None
    """
    When set to true, it indicates version 3

    When the route is used for IPv4, it refers to IGMP version 3.
    """
    include_exclude_group_type: Annotated[
        Optional[EnumerationEnum349],
        Field(alias='srl_nokia-rib-bgp:include-exclude-group-type'),
    ] = None
    """
    The Include/Exclude Group type bit

    Value 0 indicates Include Group type, and value 1 indicates Exclude Group type.
    """


class FlagsContainer12(BaseModel):
    """
    The SMET route Flags field in the NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    igmp_mld_version_1: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-1')
    ] = None
    """
    When set to true, it indicates version 1

    When the route is used for IPv4, it refers to IGMP version 1. When used for IPv6, it refers
    to MLD version 1.
    """
    igmp_mld_version_2: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-2')
    ] = None
    """
    When set to true, it indicates version 2

    When the route is used for IPv4, it refers to IGMP version 2. When used for IPv6, it refers
    to MLD version 2.
    """
    igmp_version_3: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-version-3')
    ] = None
    """
    When set to true, it indicates version 3

    When the route is used for IPv4, it refers to IGMP version 3
    """
    include_exclude_group_type: Annotated[
        Optional[EnumerationEnum355],
        Field(alias='srl_nokia-rib-bgp:include-exclude-group-type'),
    ] = None
    """
    The Include/Exclude Group type bit

    Value 0 indicates Include Group type, and value 1 indicates Exclude Group type.
    """


class FlagsContainer13(BaseModel):
    """
    The Multicast Membership Report Synch route Flags field in the NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    igmp_mld_version_1: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-1')
    ] = None
    """
    When set to true, it indicates version 1

    When the route is used for IPv4, it refers to IGMP version 1. When used for IPv6, it refers
    to MLD version 1.
    """
    igmp_mld_version_2: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-2')
    ] = None
    """
    When set to true, it indicates version 2

    When the route is used for IPv4, it refers to IGMP version 2. When used for IPv6, it refers
    to MLD version 2.
    """
    igmp_version_3: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-version-3')
    ] = None
    """
    When set to true, it indicates version 3

    When the route is used for IPv4, it refers to IGMP version 3.
    """
    include_exclude_group_type: Annotated[
        Optional[EnumerationEnum357],
        Field(alias='srl_nokia-rib-bgp:include-exclude-group-type'),
    ] = None
    """
    The Include/Exclude Group type bit

    Value 0 indicates Include Group type, and value 1 indicates Exclude Group type.
    """


class FlagsContainer14(BaseModel):
    """
    The Multicast Membership Report Synch route Flags field in the NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    igmp_mld_version_1: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-1')
    ] = None
    """
    When set to true, it indicates version 1

    When the route is used for IPv4, it refers to IGMP version 1. When used for IPv6, it refers
    to MLD version 1.
    """
    igmp_mld_version_2: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-2')
    ] = None
    """
    When set to true, it indicates version 2

    When the route is used for IPv4, it refers to IGMP version 2. When used for IPv6, it refers
    to MLD version 2.
    """
    igmp_version_3: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-version-3')
    ] = None
    """
    When set to true, it indicates version 3

    When the route is used for IPv4, it refers to IGMP version 3.
    """
    include_exclude_group_type: Annotated[
        Optional[EnumerationEnum359],
        Field(alias='srl_nokia-rib-bgp:include-exclude-group-type'),
    ] = None
    """
    The Include/Exclude Group type bit

    Value 0 indicates Include Group type, and value 1 indicates Exclude Group type.
    """


class FlagsContainer15(BaseModel):
    """
    The SMET route Flags field in the NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    igmp_mld_version_1: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-1')
    ] = None
    """
    When set to true, it indicates version 1

    When the route is used for IPv4, it refers to IGMP version 1. When used for IPv6, it refers
    to MLD version 1.
    """
    igmp_mld_version_2: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-2')
    ] = None
    """
    When set to true, it indicates version 2

    When the route is used for IPv4, it refers to IGMP version 2. When used for IPv6, it refers
    to MLD version 2.
    """
    igmp_version_3: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-version-3')
    ] = None
    """
    When set to true, it indicates version 3

    When the route is used for IPv4, it refers to IGMP version 3
    """
    include_exclude_group_type: Annotated[
        Optional[EnumerationEnum361],
        Field(alias='srl_nokia-rib-bgp:include-exclude-group-type'),
    ] = None
    """
    The Include/Exclude Group type bit

    Value 0 indicates Include Group type, and value 1 indicates Exclude Group type.
    """


class FlagsContainer16(BaseModel):
    """
    The Multicast Membership Report Synch route Flags field in the NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    igmp_mld_version_1: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-1')
    ] = None
    """
    When set to true, it indicates version 1

    When the route is used for IPv4, it refers to IGMP version 1. When used for IPv6, it refers
    to MLD version 1.
    """
    igmp_mld_version_2: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-2')
    ] = None
    """
    When set to true, it indicates version 2

    When the route is used for IPv4, it refers to IGMP version 2. When used for IPv6, it refers
    to MLD version 2.
    """
    igmp_version_3: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-version-3')
    ] = None
    """
    When set to true, it indicates version 3

    When the route is used for IPv4, it refers to IGMP version 3.
    """
    include_exclude_group_type: Annotated[
        Optional[EnumerationEnum362],
        Field(alias='srl_nokia-rib-bgp:include-exclude-group-type'),
    ] = None
    """
    The Include/Exclude Group type bit

    Value 0 indicates Include Group type, and value 1 indicates Exclude Group type.
    """


class FlagsContainer17(BaseModel):
    """
    The Multicast Membership Report Synch route Flags field in the NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    igmp_mld_version_1: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-1')
    ] = None
    """
    When set to true, it indicates version 1

    When the route is used for IPv4, it refers to IGMP version 1. When used for IPv6, it refers
    to MLD version 1.
    """
    igmp_mld_version_2: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-2')
    ] = None
    """
    When set to true, it indicates version 2

    When the route is used for IPv4, it refers to IGMP version 2. When used for IPv6, it refers
    to MLD version 2.
    """
    igmp_version_3: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-version-3')
    ] = None
    """
    When set to true, it indicates version 3

    When the route is used for IPv4, it refers to IGMP version 3.
    """
    include_exclude_group_type: Annotated[
        Optional[EnumerationEnum363],
        Field(alias='srl_nokia-rib-bgp:include-exclude-group-type'),
    ] = None
    """
    The Include/Exclude Group type bit

    Value 0 indicates Include Group type, and value 1 indicates Exclude Group type.
    """


class FlagsContainer2(BaseModel):
    """
    This container defines sub-TLV 4.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum174]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    Additional prefix reachability flags.
    """


class FlagsContainer3(BaseModel):
    """
    This container defines sub-TLV 4.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum176]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    Additional prefix reachability flags.
    """


class FlagsContainer4(BaseModel):
    """
    This container defines sub-TLV 4.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum191]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    Additional prefix reachability flags.
    """


class FlagsContainer5(BaseModel):
    """
    This container defines sub-TLV 4.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum193]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    Additional prefix reachability flags.
    """


class FlagsContainer6(BaseModel):
    """
    The SMET route Flags field in the NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    igmp_mld_version_1: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-1')
    ] = None
    """
    When set to true, it indicates version 1

    When the route is used for IPv4, it refers to IGMP version 1. When used for IPv6, it refers
    to MLD version 1.
    """
    igmp_mld_version_2: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-2')
    ] = None
    """
    When set to true, it indicates version 2

    When the route is used for IPv4, it refers to IGMP version 2. When used for IPv6, it refers
    to MLD version 2.
    """
    igmp_version_3: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-version-3')
    ] = None
    """
    When set to true, it indicates version 3

    When the route is used for IPv4, it refers to IGMP version 3
    """
    include_exclude_group_type: Annotated[
        Optional[EnumerationEnum341],
        Field(alias='srl_nokia-rib-bgp:include-exclude-group-type'),
    ] = None
    """
    The Include/Exclude Group type bit

    Value 0 indicates Include Group type, and value 1 indicates Exclude Group type.
    """


class FlagsContainer7(BaseModel):
    """
    The Multicast Membership Report Synch route Flags field in the NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    igmp_mld_version_1: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-1')
    ] = None
    """
    When set to true, it indicates version 1

    When the route is used for IPv4, it refers to IGMP version 1. When used for IPv6, it refers
    to MLD version 1.
    """
    igmp_mld_version_2: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-2')
    ] = None
    """
    When set to true, it indicates version 2

    When the route is used for IPv4, it refers to IGMP version 2. When used for IPv6, it refers
    to MLD version 2.
    """
    igmp_version_3: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-version-3')
    ] = None
    """
    When set to true, it indicates version 3

    When the route is used for IPv4, it refers to IGMP version 3.
    """
    include_exclude_group_type: Annotated[
        Optional[EnumerationEnum343],
        Field(alias='srl_nokia-rib-bgp:include-exclude-group-type'),
    ] = None
    """
    The Include/Exclude Group type bit

    Value 0 indicates Include Group type, and value 1 indicates Exclude Group type.
    """


class FlagsContainer8(BaseModel):
    """
    The Multicast Membership Report Synch route Flags field in the NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    igmp_mld_version_1: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-1')
    ] = None
    """
    When set to true, it indicates version 1

    When the route is used for IPv4, it refers to IGMP version 1. When used for IPv6, it refers
    to MLD version 1.
    """
    igmp_mld_version_2: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-2')
    ] = None
    """
    When set to true, it indicates version 2

    When the route is used for IPv4, it refers to IGMP version 2. When used for IPv6, it refers
    to MLD version 2.
    """
    igmp_version_3: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-version-3')
    ] = None
    """
    When set to true, it indicates version 3

    When the route is used for IPv4, it refers to IGMP version 3.
    """
    include_exclude_group_type: Annotated[
        Optional[EnumerationEnum345],
        Field(alias='srl_nokia-rib-bgp:include-exclude-group-type'),
    ] = None
    """
    The Include/Exclude Group type bit

    Value 0 indicates Include Group type, and value 1 indicates Exclude Group type.
    """


class FlagsContainer9(BaseModel):
    """
    The SMET route Flags field in the NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    igmp_mld_version_1: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-1')
    ] = None
    """
    When set to true, it indicates version 1

    When the route is used for IPv4, it refers to IGMP version 1. When used for IPv6, it refers
    to MLD version 1.
    """
    igmp_mld_version_2: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-mld-version-2')
    ] = None
    """
    When set to true, it indicates version 2

    When the route is used for IPv4, it refers to IGMP version 2. When used for IPv6, it refers
    to MLD version 2.
    """
    igmp_version_3: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:igmp-version-3')
    ] = None
    """
    When set to true, it indicates version 3

    When the route is used for IPv4, it refers to IGMP version 3
    """
    include_exclude_group_type: Annotated[
        Optional[EnumerationEnum347],
        Field(alias='srl_nokia-rib-bgp:include-exclude-group-type'),
    ] = None
    """
    The Include/Exclude Group type bit

    Value 0 indicates Include Group type, and value 1 indicates Exclude Group type.
    """


class ForwardedContainer(BaseModel):
    """
    Forward message statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    general_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:general-queries', ge=0, le=4294967295),
    ] = 0
    """
    General Queries
    """
    group_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:group-queries', ge=0, le=4294967295),
    ] = 0
    """
    Group Specific Queries
    """
    group_source_queries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:group-source-queries', ge=0, le=4294967295
        ),
    ] = 0
    """
    Group and Source Specific Queries
    """
    v1_reports: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:v1-reports', ge=0, le=4294967295),
    ] = 0
    """
    V1 Reports
    """
    v2_reports: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:v2-reports', ge=0, le=4294967295),
    ] = 0
    """
    V2 Reports
    """
    v3_reports: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:v3-reports', ge=0, le=4294967295),
    ] = 0
    """
    V3 Reports
    """
    leave_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:leave-messages', ge=0, le=4294967295),
    ] = 0
    """
    Leave messages
    """
    unknown_type: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:unknown-type', ge=0, le=4294967295),
    ] = 0
    """
    Unknown IGMP types
    """
    error_packets: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:error-packets', ge=0, le=4294967295),
    ] = 0
    """
    Forwarding Errors
    """


class ForwardedContainer2(BaseModel):
    """
    Forward message statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    general_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:general-queries', ge=0, le=4294967295),
    ] = 0
    """
    General Queries
    """
    group_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:group-queries', ge=0, le=4294967295),
    ] = 0
    """
    Group Specific Queries
    """
    group_source_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:group-source-queries', ge=0, le=4294967295),
    ] = 0
    """
    Group and Source Specific Queries
    """
    v1_reports: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:v1-reports', ge=0, le=4294967295),
    ] = 0
    """
    V1 Reports
    """
    v2_reports: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:v2-reports', ge=0, le=4294967295),
    ] = 0
    """
    V2 Reports
    """
    leave_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:leave-messages', ge=0, le=4294967295),
    ] = 0
    """
    Leave messages
    """
    unknown_type: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:unknown-type', ge=0, le=4294967295),
    ] = 0
    """
    Unknown MLD types
    """
    error_packets: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:error-packets', ge=0, le=4294967295),
    ] = 0
    """
    Forwarding Errors
    """


class GracefulRestartContainer(BaseModel):
    """
    Options for controlling the behavior of the router as a graceful restart helper
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = 'disable'
    """
    Administratively enable or disable graceful restart helper for all address families
    """
    stale_routes_time: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:stale-routes-time', ge=1, le=3600)
    ] = 360
    """
    The maximum number of seconds that routes received from a helped peer remain stale until they are deleted

    Routes of AFI/SAFI X received from peer Y are marked stale when peer Y goes down and its previous GR capability included AFI/SAFI X.
    """
    requested_restart_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:requested-restart-time', ge=1, le=3600),
    ] = 300
    """
    The restart time encoded in this router's GR capability.

    If the neighbor honors this request then this is the maximum time allowed for this router to re-establish its TCP connection after a restart. If this time is exceeded, the neighbor is expected to flush stale routes that it was maintaining on behalf of this router.
    """


class GracefulRestartContainer2(BaseModel):
    """
    Options related to router behavior as a graceful restart helper
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = None
    """
    Administratively enable or disable graceful restart helper for all address families
    """
    stale_routes_time: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:stale-routes-time', ge=1, le=3600)
    ] = None
    """
    The maximum number of seconds that routes received from a neighbor that is being helped remain stale until they are deleted.

    Routes of AFI/SAFI X received from peer Y are marked stale when peer Y goes down and its previous GR capability included AFI/SAFI X.
    """
    requested_restart_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:requested-restart-time', ge=1, le=3600),
    ] = 300
    """
    The restart time encoded in this router's GR capability.

    If the neighbor honors this request then this is the maximum time allowed for this router to re-establish its TCP connection after a restart. If this time is exceeded, the neighbor is expected to flush stale routes that it was maintaining on behalf of this router.
    """


class GracefulRestartContainer3(BaseModel):
    """
    Options related to router behavior as a graceful restart helper
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = None
    """
    Administratively enable or disable graceful restart helper for all address families
    """
    stale_routes_time: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:stale-routes-time', ge=1, le=3600)
    ] = None
    """
    The maximum number of seconds that routes received from a helped peer remain stale until they are deleted

    Routes of AFI/SAFI X received from peer Y are marked stale when peer Y goes down and its previous GR capability included AFI/SAFI X.
    """
    requested_restart_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:requested-restart-time', ge=1, le=3600),
    ] = 300
    """
    The restart time encoded in this router's GR capability.

    If the neighbor honors this request then this is the maximum time allowed for this router to re-establish its TCP connection after a restart. If this time is exceeded, the neighbor is expected to flush stale routes that it was maintaining on behalf of this router.
    """
    number_of_restarts: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:number-of-restarts', ge=0, le=65535)
    ] = None
    """
    The number of times the peer has restarted
    """
    last_restart_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp:last-restart-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The last time the peer restarted
    """
    helper_active: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:helper-active')
    ] = None
    """
    Set to true when the router is actively helping the neighbor for at least one address family - i.e. for that address family the peer restarted with F=1 in its capability and the stale-routes-time has not expired yet
    """
    neighbor_capability: Annotated[
        Optional[NeighborCapabilityContainer],
        Field(alias='srl_nokia-bgp:neighbor-capability'),
    ] = None


class GroupRangeListEntry2(BaseModel):
    """
    A Source Specific Multicast (SSM) mapping

    This allows MLD v2 hosts to be able to join in SSM environments
    by translating MLD v1 reports into MLD v2 reports.
    The request in an MLD v1 join is sent toward the source
    address found by matching the multicast address.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    start: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld:start',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    start of the group range
    """
    end: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld:end',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    end of the group range
    """
    source: Annotated[
        Optional[List[SourceListEntry]], Field(alias='srl_nokia-mld:source')
    ] = None


class GroupRangeListEntry3(BaseModel):
    """
    A Source Specific Multicast (SSM) mapping

    This allows MLD v2 hosts to be able to join in SSM environments
    by translating MLD v1 reports into MLD v2 reports.
    The request in an MLD v1 join is sent toward the source
    address found by matching the multicast address.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    start: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld:start',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    start of the group range
    """
    end: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld:end',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    end of the group range
    """
    source: Annotated[
        Optional[List[SourceListEntry3]], Field(alias='srl_nokia-mld:source')
    ] = None


class GroupRangeListEntry5(BaseModel):
    """
    A Source Specific Multicast (SSM) mapping

    This allows IGMP v2 hosts to be able to join in SSM environments
    by translating IGMP v2 reports into IGMP v3 reports.
    The request in an IGMP v2 join is sent toward the source
    address found by matching the multicast address.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    start: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp:start',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Start of the group range.
    """
    end: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp:end',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    End of the group range.
    """
    source: Annotated[
        Optional[List[SourceListEntry16]], Field(alias='srl_nokia-igmp:source')
    ] = None


class GroupRangeListEntry6(BaseModel):
    """
    A Source Specific Multicast (SSM) mapping

    This allows IGMP v2 hosts to be able to join in SSM environments
    by translating IGMP v2 reports into IGMP v3 reports.
    The request in an IGMP v2 join is sent toward the source
    address found by matching the multicast address.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    start: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp:start',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Start of the group range.
    """
    end: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp:end',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    End of the group range.
    """
    source: Annotated[
        Optional[List[SourceListEntry18]], Field(alias='srl_nokia-igmp:source')
    ] = None


class GroupRangeListEntry8(BaseModel):
    """
    The data rate threshold to switch an (c-s,c-g) from IPMSI to SPMSI

    When an (c-s, c-g) surpasses this threshold, it switches from the inclusive provider tunnel to the selective provider tunnel.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group_prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-mvpn-l3:group-prefix'),
    ] = None
    """
    A multicast IP v4 or v6 prefix for a group range
    """
    rate_threshold: Annotated[
        int, Field(alias='srl_nokia-mvpn-l3:rate-threshold', ge=0, le=4294967294)
    ]
    """
    Configured throughput rate for a (c-s, c-g) to switch from IPMSI to SPMSI

    If the rate for a (C-S, C-G) within the specified group range exceeds the threshold, traffic for the (C-S, C-G) is switched to the selective provider tunnel.
    Threshold 0 is supported. When threshold 0 is configured, the (C-S, C-G) switches to S-PMSI as soon as it is learned in the MVPN and without traffic flowing for that (C-S, C-G)
    """


class GroupListEntry20(BaseModel):
    """
    List of admin groups defined for this network instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-traffic-engineering:name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The name of the admin group
    """
    bit_position: Annotated[
        int, Field(alias='srl_nokia-traffic-engineering:bit-position', ge=0, le=31)
    ]
    """
    The bit-position value for the admin-group.

    The value for the admin group is an integer that represents one of the bit positions in the admin-group bitmask.
    """


class GroupListEntry21(BaseModel):
    """
    List of shared risk link groups defined for this network instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-traffic-engineering:name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The name of the shared risk link group
    """
    value: Annotated[
        int, Field(alias='srl_nokia-traffic-engineering:value', ge=0, le=4294967295)
    ]
    """
    Group ID for the SRLG
    """


class GroupListEntry4(BaseModel):
    """
    List of multicast groups for the rendezvous point
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-pim:prefix'),
    ] = None
    """
    IP prefix of the multicast group
    """


class GroupListEntry5(BaseModel):
    """
    Configure SPT switchover threshold for a multicast group prefix
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-pim:prefix'),
    ] = None
    """
    IP prefix of the multicast group
    """
    threshold: Annotated[
        Union[ThresholdLeaf1, EnumerationEnum85], Field(alias='srl_nokia-pim:threshold')
    ]
    """
    SPT switchover threshold in kbps
    """


class HelloAuthenticationContainer(BaseModel):
    """
    Container with options to control the authentication of Hello PDUs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    generate: Annotated[Optional[bool], Field(alias='srl_nokia-isis:generate')] = None
    """
    When set to true, IS-IS is instructed to add an authentication TLV to every transmitted PDU of the specified type
    """
    check_received: Annotated[
        Optional[EnumerationEnum137], Field(alias='srl_nokia-isis:check-received')
    ] = None
    """
    Specifies the type of authentication checks done for received PDUs of the specified type.
    """


class HelloAuthenticationContainer2(BaseModel):
    """
    Container with options to control the authentication of Hello PDUs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    generate: Annotated[Optional[bool], Field(alias='srl_nokia-isis:generate')] = None
    """
    When set to true, IS-IS is instructed to add an authentication TLV to every transmitted PDU of the specified type
    """
    check_received: Annotated[
        Optional[EnumerationEnum137], Field(alias='srl_nokia-isis:check-received')
    ] = None
    """
    Specifies the type of authentication checks done for received PDUs of the specified type.
    """


class HelloAuthenticationContainer3(BaseModel):
    """
    Container with options to control the authentication of Hello PDUs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    generate: Annotated[Optional[bool], Field(alias='srl_nokia-isis:generate')] = None
    """
    When set to true, IS-IS is instructed to add an authentication TLV to every transmitted PDU of the specified type
    """
    check_received: Annotated[
        Optional[EnumerationEnum137], Field(alias='srl_nokia-isis:check-received')
    ] = None
    """
    Specifies the type of authentication checks done for received PDUs of the specified type.
    """


class HelloAuthenticationContainer4(BaseModel):
    """
    Container with options to control the authentication of Hello PDUs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    generate: Annotated[Optional[bool], Field(alias='srl_nokia-isis:generate')] = None
    """
    When set to true, IS-IS is instructed to add an authentication TLV to every transmitted PDU of the specified type
    """
    check_received: Annotated[
        Optional[EnumerationEnum137], Field(alias='srl_nokia-isis:check-received')
    ] = None
    """
    Specifies the type of authentication checks done for received PDUs of the specified type.
    """


class HelloMessageErrorsContainer(BaseModel):
    """
    Counters for received Hello message errors
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bad_protocol_version: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ldp:bad-protocol-version', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The number of Hello messages received with a bad protocol version
    """
    bad_pdu_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:bad-pdu-length', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages received with a bad PDU length
    """
    bad_message_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:bad-message-length', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages received with a bad message length
    """
    malformed_tlv_value: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:malformed-tlv-value', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages received with a malformed TLV value
    """


class HelloMessageErrorsContainer2(BaseModel):
    """
    Counters for received Hello message errors
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bad_protocol_version: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ldp:bad-protocol-version', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The number of Hello messages received with a bad protocol version
    """
    bad_pdu_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:bad-pdu-length', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages received with a bad PDU length
    """
    bad_message_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:bad-message-length', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages received with a bad message length
    """
    malformed_tlv_value: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:malformed-tlv-value', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages received with a malformed TLV value
    """


class HelloMessageErrorsContainer3(BaseModel):
    """
    Counters for received Hello message errors
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bad_protocol_version: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ldp:bad-protocol-version', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The number of Hello messages received with a bad protocol version
    """
    bad_pdu_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:bad-pdu-length', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages received with a bad PDU length
    """
    bad_message_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:bad-message-length', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages received with a bad message length
    """
    malformed_tlv_value: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:malformed-tlv-value', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages received with a malformed TLV value
    """


class HelloMessageErrorsContainer4(BaseModel):
    """
    Counters for received Hello message errors
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bad_protocol_version: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ldp:bad-protocol-version', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The number of Hello messages received with a bad protocol version
    """
    bad_pdu_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:bad-pdu-length', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages received with a bad PDU length
    """
    bad_message_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:bad-message-length', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages received with a bad message length
    """
    malformed_tlv_value: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:malformed-tlv-value', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages received with a malformed TLV value
    """


class HostnamesContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    system_id: Annotated[
        Optional[List[SystemIdListEntry]], Field(alias='srl_nokia-isis:system-id')
    ] = None


class ImportPolicyLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Apply an import policy to received BGP routes
    """


class ImportPolicyLeafList2(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Apply an import policy to received BGP routes
    """


class ImportPolicyLeafList3(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Apply an import policy to received BGP routes
    """


class ImportPolicyLeafList4(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Apply an import policy to received BGP routes
    """


class ImportPolicyLeafList5(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Apply an import policy to received BGP routes
    """


class ImportPolicyLeafList6(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Apply an import policy to received BGP routes
    """


class ImportPolicyLeafList7(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Apply an import policy to received BGP routes
    """


class ImportPolicyLeafList8(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    The sequence of import policies that determine the set of routes to be redistributed from the source protocol to the dest protocol
    """


class ImportedIpVrfNetworkInstancesLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$'
        ),
    ]
    """
    List of IP-VRF network instances that imported the route
    """


class ImportedIpVrfNetworkInstancesLeafList2(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$'
        ),
    ]
    """
    List of IP-VRF network instances that imported the route
    """


class ImportedIpVrfNetworkInstancesLeafList3(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$'
        ),
    ]
    """
    List of IP-VRF network instances that imported the route
    """


class ImportedIpVrfNetworkInstancesLeafList4(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$'
        ),
    ]
    """
    List of IP-VRF network instances that imported the route
    """


class ImportedIpVrfNetworkInstancesLeafList5(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$'
        ),
    ]
    """
    List of IP-VRF network instances that imported the route
    """


class ImportedIpVrfNetworkInstancesLeafList6(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$'
        ),
    ]
    """
    List of IP-VRF network instances that imported the route
    """


class ImportedNetworkInstancesLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$'
        ),
    ]
    """
    List of network instances that imported the route
    """


class ImportedNetworkInstancesLeafList2(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$'
        ),
    ]
    """
    List of network instances that imported the route
    """


class ImportedNetworkInstancesLeafList3(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$'
        ),
    ]
    """
    List of network instances that imported the route
    """


class ImportedNetworkInstancesLeafList4(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$'
        ),
    ]
    """
    List of network instances that imported the route
    """


class ImportedNetworkInstancesLeafList5(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$'
        ),
    ]
    """
    List of network instances that imported the route
    """


class ImportedNetworkInstancesLeafList6(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$'
        ),
    ]
    """
    List of network instances that imported the route
    """


class ImportedNetworkInstancesLeafList7(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$'
        ),
    ]
    """
    List of network instances that imported the route
    """


class InProgressMbbContainer(BaseModel):
    """
    The in progress make-before-break operational information.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[EnumerationEnum398], Field(alias='srl_nokia-te-policies:type')
    ] = None
    """
    Indicates the type of the make-before-break (MBB) that is in progress.
    """
    start_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:start-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Indicates the system time when the in-progress MBB started.
    """


class InProgressMbbContainer2(BaseModel):
    """
    The in progress make-before-break operational information.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[EnumerationEnum407], Field(alias='srl_nokia-te-policies:type')
    ] = None
    """
    Indicates the type of the make-before-break (MBB) that is in progress.
    """
    start_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:start-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Indicates the system time when the in-progress MBB started.
    """


class IngressStatisticsContainer(BaseModel):
    """
    Enable the ingress-statistics context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-te-policies:admin-state')
    ] = 'disable'
    """
    Administrative state of the traffic statistics
    """


class InterfaceContainer(BaseModel):
    """
    Enable tracing for interface events
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-pim:interface-name')
    ] = None
    """
    Enable interface event tracing for a specific interface
    """
    detail: Annotated[Optional[bool], Field(alias='srl_nokia-pim:detail')] = False
    """
    Enable detail tracing.
    """


class InterfaceListEntry2(BaseModel):
    """
    List of interfaces on which dynamic sessions based on IPv6 link-local address discovery are accepted and initiated.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-bgp:interface-name')
    ] = None
    """
    Reference to a specific subinterface of the form <interface-name>.<subinterface-index>

    The referenced subinterface should be enabled for IPv6 and should be configured to accept and send IPv6 router advertisement messages. The referenced subinterface does not need any IPv4 addresses or global-unicast IPv6 addresses (i.e. it can be an unnumbered interface).

    When a subinterface is present in this list, incoming TCP connections to the BGP well-known port that are received on this subinterface and sourced from an IPv6 link local address and destined for the IPv6 link local address of the subinterface are automatically accepted.

    When a subinterface is present in this list, received IPv6 router advertisement messages on this subinterface automatically trigger BGP session setup towards the sender of these messages, if there is not already an established session.
    """
    allowed_peer_as: Annotated[
        Optional[List[AllowedPeerAsLeafList2]],
        Field(alias='srl_nokia-bgp:allowed-peer-as'),
    ] = []
    """
    Specifies the allowed AS numbers of dynamic BGP neighbors on this interface. If the OPEN message from a peer on this interface contains a MyAS number that is not in this allowed list then a NOTIFICATION is sent to the peer with the indication Bad Peer AS. Each entry in this list can be a single AS number or a range of AS numbers in the string format as1..as2.
    """
    peer_group: Annotated[
        str,
        Field(
            alias='srl_nokia-bgp:peer-group',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ]
    """
    Reference to a peer-group
    Specifies the peer-group to associate with dynamic BGP neighbors on this interface. The peer-group provides all the parameters needed to complete the establishment of the dynamic session.
    """
    max_sessions: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:max-sessions', ge=0, le=65535)
    ] = 1
    """
    The maximum number of dynamic sessions that are allowed to be setup on the interface as a result of accepting sessions from link-local addresses or initiating
    sessions by means of receiving IPv6 router advertisements.
    """


class InterfaceListEntry7(BaseModel):
    """
    List of interfaces to trace
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-igmp-snooping:interface-name')
    ] = None
    """
    Reference to a specific subinterface of the form <interface-name>.<subinterface-index>
    """


class InterfaceListEntry9(BaseModel):
    """
    List of interfaces to trace
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-mld-snooping:interface-name')
    ] = None
    """
    Reference to a specific subinterface of the form <interface-name>.<subinterface-index>
    """


class InternalTagsContainer(BaseModel):
    """
    Configuration and state of internal tags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    set_tag_set: Annotated[
        Optional[List[SetTagSetLeafList]], Field(alias='srl_nokia-bgp-evpn:set-tag-set')
    ] = []
    """
    Reference to a tag-set defined under routing-policy
    """


class InternalTagsContainer2(BaseModel):
    """
    Configuration and state of internal tags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    set_tag_set: Annotated[
        Optional[List[SetTagSetLeafList2]],
        Field(alias='srl_nokia-bgp-ipvpn:set-tag-set'),
    ] = []
    """
    Reference to a tag-set defined under routing-policy
    """


class InternalTagsContainer3(BaseModel):
    """
    Configuration and state of internal tags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    set_tag_set: Annotated[
        Optional[List[SetTagSetLeafList3]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:set-tag-set'),
    ] = []
    """
    Reference to a tag-set defined under routing-policy
    """


class InternalTagsContainer4(BaseModel):
    """
    Configuration and state of internal tags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    set_tag_set: Annotated[
        Optional[List[SetTagSetLeafList4]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:set-tag-set'),
    ] = []
    """
    Reference to a tag-set defined under routing-policy
    """


class IpAddressLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    The list of IPv4 address bindings received from the peer
    """


class IpAddressLeafList2(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    The list of IPv4 address bindings sent to the peer
    """


class IpAddressLeafList3(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$'
        ),
    ]
    """
    The list of IPv6 address bindings received from the peer
    """


class IpAddressLeafList4(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$'
        ),
    ]
    """
    The list of IPv6 address bindings sent to the peer
    """


class Ipv4AddressExcludingAllZeroType(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    An IPv4 address in dotted quad notation.
    """


class Ipv4AddressUnicastType(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$'
        ),
    ]
    """
    A unicast IPv4 address in dotted quad notation
    """


class Ipv4EntryListEntry(BaseModel):
    """
    List of the IPv4 unicast entries within the abstract forwarding table
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-aft:prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$',
        ),
    ] = None
    """
    The IPv4 destination prefix that should be matched to utilise the AFT entry
    """
    entry_metadata: Annotated[
        Optional[str],
        Field(alias='srl_nokia-aft:entry-metadata', max_length=8, min_length=0),
    ] = None
    """
    Metadata persistently stored with the entry
    """
    origin_protocol: Annotated[
        Optional[str], Field(alias='srl_nokia-aft:origin-protocol')
    ] = None
    """
    The protocol that submitted the route for the IPv4 prefix
    """
    next_hop_group: Annotated[
        Optional[int],
        Field(alias='srl_nokia-aft:next-hop-group', ge=0, le=18446744073709551615),
    ] = None
    """
    A reference to the next-hop-group that is used for the entry
    """
    next_hop_group_network_instance: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-aft:next-hop-group-network-instance',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$',
        ),
    ] = None
    """
    The network instance associated with the next-hop-group

    If unspecified, the next hop group is in the local network instance.
    """
    origin_network_instance: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-aft:origin-network-instance',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$',
        ),
    ] = None
    """
    The network-instance from which the IPv4 entry was learned if it was leaked from another network-instance

    If unspecified, the IPv4 entry was not leaked
    """


class Ipv4ExternalReachabilityListEntry(BaseModel):
    """
    TLV specifying external IPv4 Reachability information in the LSP.
    External reachability is typically routing information learned from another protocol. TLV type = 130
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv4-prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$',
        ),
    ] = None
    """
    An IPv4 prefix that is reachable to the router.
    """
    default_metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:default-metric', ge=0, le=63)
    ] = None
    """
    The default metric to reach the IPv4 prefix.
    """
    default_metric_type: Annotated[
        Optional[EnumerationEnum198], Field(alias='srl_nokia-isis:default-metric-type')
    ] = None
    """
    The default metric type: internal or external.
    """
    down: Annotated[Optional[bool], Field(alias='srl_nokia-isis:down')] = None
    """
    Reads true when the IPv4 prefix was leaked down from Level2 to Level1.
    """


class Ipv4InterfaceAddressContainer(BaseModel):
    """
    This container defines sub-TLV 6.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList4]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    A 4-octet IPv4 address for the interface described by the (main) TLV. This sub-TLV can occur multiple times.
    """


class Ipv4InterfaceAddressContainer2(BaseModel):
    """
    This container defines sub-TLV 6.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList8]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    A 4-octet IPv4 address for the interface described by the (main) TLV. This sub-TLV can occur multiple times.
    """


class Ipv4InterfaceAddressContainer3(BaseModel):
    """
    This container defines sub-TLV 6.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList12]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    A 4-octet IPv4 address for the interface described by the (main) TLV. This sub-TLV can occur multiple times.
    """


class Ipv4InterfaceAddressContainer4(BaseModel):
    """
    This container defines sub-TLV 6.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList16]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    A 4-octet IPv4 address for the interface described by the (main) TLV. This sub-TLV can occur multiple times.
    """


class Ipv4InterfaceAddressesContainer(BaseModel):
    """
    This container defines TLV 132.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList2]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    IPv4 address(es) of the interface corresponding to the SNPA over which this PDU is to be transmitted.
    """


class Ipv4InternalReachabilityListEntry(BaseModel):
    """
    TLV specifying internal IPv4 Reachability information in the LSP. TLV type = 128
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv4-prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$',
        ),
    ] = None
    """
    An IPv4 prefix that is reachable to the router.
    """
    default_metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:default-metric', ge=0, le=63)
    ] = None
    """
    The default metric to reach the IPv4 prefix.
    """
    default_metric_type: Annotated[
        Optional[EnumerationEnum198], Field(alias='srl_nokia-isis:default-metric-type')
    ] = None
    """
    The default metric type: internal or external.
    """
    down: Annotated[Optional[bool], Field(alias='srl_nokia-isis:down')] = None
    """
    Reads true when the IPv4 prefix was leaked down from Level2 to Level1.
    """


class Ipv4LabeledUnicastContainer2(BaseModel):
    """
    Options related to the labeled-IPv4-unicast address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:advertise-ipv6-next-hops')
    ] = None
    """
    Enables advertisement of IPv4 routes with IPv6 next-hops
    """
    receive_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:receive-ipv6-next-hops')
    ] = None
    """
    Enables the advertisement of the RFC 8950 capability to receive IPv4 routes with IPv6 next-hops

    When set to true, BGP advertises an extended NH encoding (RFC 8950) capability to its peers. This capability indicates that local router is prepared to accept BGP routes for the AFI/SAFI with IPv6 next-hops from  peers in the scope of the command. When set to false, BGP handles received AFI/SAFI routes with IPv6 next-hops as an error and applies treat-as-withdraw.
    """
    next_hop_unchanged: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:next-hop-unchanged')
    ] = False
    """
    When set to true, do not change the BGP next-hop towards group peers, even if next-hop-self is normally performed
    """
    prefix_limit_received: Annotated[
        Optional[PrefixLimitReceivedContainer2],
        Field(alias='srl_nokia-bgp:prefix-limit-received'),
    ] = None
    prefix_limit_accepted: Annotated[
        Optional[PrefixLimitAcceptedContainer2],
        Field(alias='srl_nokia-bgp:prefix-limit-accepted'),
    ] = None


class Ipv4LabeledUnicastContainer3(BaseModel):
    """
    Options related to the labeled IPv4-unicast address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:advertise-ipv6-next-hops')
    ] = None
    """
    Enables advertisement of IPv4 routes with IPv6 next-hops
    """
    receive_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:receive-ipv6-next-hops')
    ] = None
    """
    Enables the advertisement of the RFC 8950 capability to receive IPv4 routes with IPv6 next-hops

    When set to true, BGP advertises an extended NH encoding (RFC 8950) capability to its peers. This capability indicates that local router is prepared to accept BGP routes for the AFI/SAFI with IPv6 next-hops from  peers in the scope of the command. When set to false, BGP handles received AFI/SAFI routes with IPv6 next-hops as an error and applies treat-as-withdraw.
    """
    next_hop_unchanged: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:next-hop-unchanged')
    ] = None
    """
    When set to true, do not change the BGP next-hop towards group peers, even if next-hop-self is normally performed
    """
    prefix_limit_received: Annotated[
        Optional[PrefixLimitReceivedContainer10],
        Field(alias='srl_nokia-bgp:prefix-limit-received'),
    ] = None
    prefix_limit_accepted: Annotated[
        Optional[PrefixLimitAcceptedContainer10],
        Field(alias='srl_nokia-bgp:prefix-limit-accepted'),
    ] = None


class Ipv4NeighborAddressContainer(BaseModel):
    """
    This container defines sub-TLV 8.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList5]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    A single IPv4 address for a neighboring router on this link. This sub-TLV can occur multiple times.
    """


class Ipv4NeighborAddressContainer2(BaseModel):
    """
    This container defines sub-TLV 8.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList9]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    A single IPv4 address for a neighboring router on this link. This sub-TLV can occur multiple times.
    """


class Ipv4NeighborAddressContainer3(BaseModel):
    """
    This container defines sub-TLV 8.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList13]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    A single IPv4 address for a neighboring router on this link. This sub-TLV can occur multiple times.
    """


class Ipv4NeighborAddressContainer4(BaseModel):
    """
    This container defines sub-TLV 8.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList17]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    A single IPv4 address for a neighboring router on this link. This sub-TLV can occur multiple times.
    """


class Ipv4NextHopsContainer2(BaseModel):
    """
    Options related to the resolution of BGP next-hops that are IPv4 addresses
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tunnel_resolution: Annotated[
        Optional[TunnelResolutionContainer3],
        Field(alias='srl_nokia-bgp:tunnel-resolution'),
    ] = None


class Ipv4NextHopsContainer4(BaseModel):
    """
    Options related to the resolution of BGP next-hops that are IPv4 addresses
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tunnel_resolution: Annotated[
        Optional[TunnelResolutionContainer7],
        Field(alias='srl_nokia-bgp:tunnel-resolution'),
    ] = None


class Ipv4PrefixContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received_fecs: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:received-fecs', ge=0, le=4294967295)
    ] = 0
    """
    The number of received IPv4 prefix FECs from a single peer or all peers. In the overall summary the same FEC prefix from different peers counts as 1
    """
    advertised_fecs: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:advertised-fecs', ge=0, le=4294967295)
    ] = 0
    """
    The number of advertised IPv4 prefix FECs to a single peer or all peers. In the overall summary the same FEC prefix advertised to multiple peers counts as 1
    """


class Ipv4PrefixContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received_fecs: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:received-fecs', ge=0, le=4294967295)
    ] = 0
    """
    The number of received IPv4 prefix FECs from a single peer or all peers. In the overall summary the same FEC prefix from different peers counts as 1
    """
    advertised_fecs: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:advertised-fecs', ge=0, le=4294967295)
    ] = 0
    """
    The number of advertised IPv4 prefix FECs to a single peer or all peers. In the overall summary the same FEC prefix advertised to multiple peers counts as 1
    """


class Ipv4SourceRouterIdContainer(BaseModel):
    """
    This container defines sub-TLV 11.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:router-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    IPv4 Source router ID address. In cases where the advertisement is an identifier for the advertising router (e.g., with the N-flag set in the Prefix Attribute Flags sub-TLV), it may be useful for other routers to know the source of the advertisement. When reachability advertisement is leaked from one level to another, Router ID advertised is always the Router ID of the IS-IS instance that originated the advertisement. This would be true even if the prefix had been learned from another protocol.
    """


class Ipv4SourceRouterIdContainer2(BaseModel):
    """
    This container defines sub-TLV 11.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:router-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    IPv4 Source router ID address. In cases where the advertisement is an identifier for the advertising router (e.g., with the N-flag set in the Prefix Attribute Flags sub-TLV), it may be useful for other routers to know the source of the advertisement. When reachability advertisement is leaked from one level to another, Router ID advertised is always the Router ID of the IS-IS instance that originated the advertisement. This would be true even if the prefix had been learned from another protocol.
    """


class Ipv4SourceRouterIdContainer3(BaseModel):
    """
    This container defines sub-TLV 11.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:router-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    IPv4 Source router ID address. In cases where the advertisement is an identifier for the advertising router (e.g., with the N-flag set in the Prefix Attribute Flags sub-TLV), it may be useful for other routers to know the source of the advertisement. When reachability advertisement is leaked from one level to another, Router ID advertised is always the Router ID of the IS-IS instance that originated the advertisement. This would be true even if the prefix had been learned from another protocol.
    """


class Ipv4SourceRouterIdContainer4(BaseModel):
    """
    This container defines sub-TLV 11.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:router-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    IPv4 Source router ID address. In cases where the advertisement is an identifier for the advertising router (e.g., with the N-flag set in the Prefix Attribute Flags sub-TLV), it may be useful for other routers to know the source of the advertisement. When reachability advertisement is leaked from one level to another, Router ID advertised is always the Router ID of the IS-IS instance that originated the advertisement. This would be true even if the prefix had been learned from another protocol.
    """


class Ipv4TeRouterIdContainer(BaseModel):
    """
    This container defines TLV 134.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    router_id: Annotated[
        Optional[List[RouterIdLeafList]], Field(alias='srl_nokia-isis:router-id')
    ] = []
    """
    IPv4 Traffic Engineering router ID of the node. For traffic engineering, it guarantees that we have a single stable address that can always be referenced in a path that will be reachable from multiple hops away, regardless of the state of the node's interfaces.
    """


class Ipv4UnicastContainer2(BaseModel):
    """
    Options related to the IPv4-unicast address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:advertise-ipv6-next-hops')
    ] = None
    """
    Enables advertisement of IPv4 routes with IPv6 next-hops
    """
    receive_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:receive-ipv6-next-hops')
    ] = None
    """
    Enables the advertisement of the RFC 8950 capability to receive IPv4 routes with IPv6 next-hops

    When set to true, BGP advertises an extended NH encoding (RFC 8950) capability to its peers. This capability indicates that local router is prepared to accept BGP routes for the AFI/SAFI with IPv6 next-hops from  peers in the scope of the command. When set to false, BGP handles received AFI/SAFI routes with IPv6 next-hops as an error and applies treat-as-withdraw.
    """
    prefix_limit_received: Annotated[
        Optional[PrefixLimitReceivedContainer],
        Field(alias='srl_nokia-bgp:prefix-limit-received'),
    ] = None
    prefix_limit_accepted: Annotated[
        Optional[PrefixLimitAcceptedContainer],
        Field(alias='srl_nokia-bgp:prefix-limit-accepted'),
    ] = None
    link_bandwidth: Annotated[
        Optional[LinkBandwidthContainer], Field(alias='srl_nokia-bgp:link-bandwidth')
    ] = None


class Ipv4UnicastContainer3(BaseModel):
    """
    Options related to the IPv4-unicast address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:advertise-ipv6-next-hops')
    ] = None
    """
    Enables advertisement of IPv4 routes with IPv6 next-hops
    """
    receive_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:receive-ipv6-next-hops')
    ] = None
    """
    Enables the advertisement of the RFC 8950 capability to receive IPv4 routes with IPv6 next-hops

    When set to true, BGP advertises an extended NH encoding (RFC 8950) capability to its peers. This capability indicates that local router is prepared to accept BGP routes for the AFI/SAFI with IPv6 next-hops from  peers in the scope of the command. When set to false, BGP handles received AFI/SAFI routes with IPv6 next-hops as an error and applies treat-as-withdraw.
    """
    prefix_limit_received: Annotated[
        Optional[PrefixLimitReceivedContainer9],
        Field(alias='srl_nokia-bgp:prefix-limit-received'),
    ] = None
    prefix_limit_accepted: Annotated[
        Optional[PrefixLimitAcceptedContainer9],
        Field(alias='srl_nokia-bgp:prefix-limit-accepted'),
    ] = None
    link_bandwidth: Annotated[
        Optional[LinkBandwidthContainer3], Field(alias='srl_nokia-bgp:link-bandwidth')
    ] = None


class Ipv4UnicastContainer5(BaseModel):
    """
    Enables/disables IPv4 routing in this ISIS instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-isis:admin-state')
    ] = 'enable'
    """
    When set to true, the IS-IS instance supports IPv4 unicast routing
    """


class Ipv4UnicastContainer6(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-isis:admin-state')
    ] = 'enable'
    """
    When set to true, the interface and level supports IPv4 unicast routing
    """
    enable_bfd: Annotated[Optional[bool], Field(alias='srl_nokia-isis:enable-bfd')] = (
        False
    )
    """
    Enable BFD for IPv4
    """
    include_bfd_tlv: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:include-bfd-tlv')
    ] = False
    """
    Specifies whether a BFD-enabled TLV is included for IPv4 on this IS-IS interface.
    """


class Ipv4UnicastContainer9(BaseModel):
    """
    The abstract forwarding table for IPv4 unicast

    Entries within this table are uniquely keyed on the IPv4 unicast destination prefix which is matched by ingress
    packets. The data set represented by the IPv4 Unicast AFT is the set of entries from the IPv4 unicast RIB that
    have been selected for installation into the FIB of the device exporting the data structure.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    state_synced: Annotated[
        Optional[bool], Field(alias='srl_nokia-aft:state-synced')
    ] = None
    """
    State synced signal indicating consistent device snapshot of
    IPv4 unicast AFT entries. Before setting this flag to true
    next-hop-groups and next-hops AFT entries, associated with
    ipv4-unicast AFT entries, are expected to be consistent with
    device snapshot.
    """
    ipv4_entry: Annotated[
        Optional[List[Ipv4EntryListEntry]], Field(alias='srl_nokia-aft:ipv4-entry')
    ] = None


class Ipv4Container6(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received_addresses: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:received-addresses', ge=0, le=4294967295),
    ] = 0
    """
    The number of IPv4 addresses received from a peer
    """
    advertised_addresses: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:advertised-addresses', ge=0, le=4294967295),
    ] = 0
    """
    The number of IPv4 addresses advertised to a peer
    """


class Ipv4Container9(BaseModel):
    """
    Container for match conditions associated with IPv4 header fields

    If no match conditions are provided then no IPv4 packets are matched.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    protocol: Annotated[
        Optional[Union[IpProtocolTypeType1, EnumerationEnum317]],
        Field(alias='srl_nokia-policy-forwarding:protocol'),
    ] = None
    """
    An IPv4 packet matches this condition if its IP protocol type field matches the specified value
    """
    dscp_set: Annotated[
        Optional[List[Union[DscpValueType, EnumerationEnum318]]],
        Field(alias='srl_nokia-policy-forwarding:dscp-set'),
    ] = []
    """
    A list of DSCP values to be matched for incoming packets. An OR match should be performed, such that a packet must match one of the values defined in this list. If the field is left empty then any DSCP value matches.
    """
    source_ip: Annotated[
        Optional[SourceIpContainer],
        Field(alias='srl_nokia-policy-forwarding:source-ip'),
    ] = None
    destination_ip: Annotated[
        Optional[DestinationIpContainer],
        Field(alias='srl_nokia-policy-forwarding:destination-ip'),
    ] = None


class Ipv6AddressUnicastType(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$'
        ),
    ]
    """
    A unicast IPv6 address represented as either a full address, shortened or mixed-shortened formats
    """


class Ipv6EntryListEntry(BaseModel):
    """
    List of the IPv6 unicast entries within the abstract forwarding table
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-aft:prefix',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))$).*$',
        ),
    ] = None
    """
    The IPv6 destination prefix that should be matched to utilise the AFT entry
    """
    entry_metadata: Annotated[
        Optional[str],
        Field(alias='srl_nokia-aft:entry-metadata', max_length=8, min_length=0),
    ] = None
    """
    Metadata persistently stored with the entry
    """
    origin_protocol: Annotated[
        Optional[str], Field(alias='srl_nokia-aft:origin-protocol')
    ] = None
    """
    The protocol that submitted the route for the IPv6 prefix
    """
    next_hop_group: Annotated[
        Optional[int],
        Field(alias='srl_nokia-aft:next-hop-group', ge=0, le=18446744073709551615),
    ] = None
    """
    A reference to the next-hop-group that is used for the entry
    """
    next_hop_group_network_instance: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-aft:next-hop-group-network-instance',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$',
        ),
    ] = None
    """
    The network instance associated with the next-hop-group

    If unspecified, the next hop group is in the local network instance.
    """
    origin_network_instance: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-aft:origin-network-instance',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$',
        ),
    ] = None
    """
    The network-instance from which the IPv6 entry was learned if it was leaked from another network-instance

    If unspecified, the IPv6 entry was not leaked
    """


class Ipv6InterfaceAddressContainer(BaseModel):
    """
    This container defines sub-TLV 12.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList6]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    Contains a 16-octet IPv6 address for the interface described by the containing  Extended IS Reachability TLV. This sub-TLV can occur multiple times.
    """


class Ipv6InterfaceAddressContainer2(BaseModel):
    """
    This container defines sub-TLV 12.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList10]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    Contains a 16-octet IPv6 address for the interface described by the containing  Extended IS Reachability TLV. This sub-TLV can occur multiple times.
    """


class Ipv6InterfaceAddressContainer3(BaseModel):
    """
    This container defines sub-TLV 12.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList14]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    Contains a 16-octet IPv6 address for the interface described by the containing  Extended IS Reachability TLV. This sub-TLV can occur multiple times.
    """


class Ipv6InterfaceAddressContainer4(BaseModel):
    """
    This container defines sub-TLV 12.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList18]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    Contains a 16-octet IPv6 address for the interface described by the containing  Extended IS Reachability TLV. This sub-TLV can occur multiple times.
    """


class Ipv6InterfaceAddressesContainer(BaseModel):
    """
    This container defines TLV 232.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList3]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    IPv6 interface addresses of the node.  MUST contain only the non-link-local IPv6 addresses assigned to the IS.
    """


class Ipv6LabeledUnicastContainer2(BaseModel):
    """
    Options related to the labeled IPv6-unicast address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    next_hop_unchanged: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:next-hop-unchanged')
    ] = False
    """
    When set to true, do not change the BGP next-hop towards group peers, even if next-hop-self is normally performed
    """
    prefix_limit_received: Annotated[
        Optional[PrefixLimitReceivedContainer5],
        Field(alias='srl_nokia-bgp:prefix-limit-received'),
    ] = None
    prefix_limit_accepted: Annotated[
        Optional[PrefixLimitAcceptedContainer5],
        Field(alias='srl_nokia-bgp:prefix-limit-accepted'),
    ] = None


class Ipv6LabeledUnicastContainer3(BaseModel):
    """
    Options related to the labeled-IPv6-unicast address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    next_hop_unchanged: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:next-hop-unchanged')
    ] = None
    """
    When set to true, do not change the BGP next-hop towards group peers, even if next-hop-self is normally performed
    """
    prefix_limit_received: Annotated[
        Optional[PrefixLimitReceivedContainer13],
        Field(alias='srl_nokia-bgp:prefix-limit-received'),
    ] = None
    prefix_limit_accepted: Annotated[
        Optional[PrefixLimitAcceptedContainer13],
        Field(alias='srl_nokia-bgp:prefix-limit-accepted'),
    ] = None


class Ipv6NeighborAddressContainer(BaseModel):
    """
    This container defines sub-TLV 13.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList7]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    Contains a 16-octet IPv6 address for a neighboring router on the link described by the (main) TLV. This sub-TLV can occur multiple times.
    """


class Ipv6NeighborAddressContainer2(BaseModel):
    """
    This container defines sub-TLV 13.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList11]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    Contains a 16-octet IPv6 address for a neighboring router on the link described by the (main) TLV. This sub-TLV can occur multiple times.
    """


class Ipv6NeighborAddressContainer3(BaseModel):
    """
    This container defines sub-TLV 13.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList15]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    Contains a 16-octet IPv6 address for a neighboring router on the link described by the (main) TLV. This sub-TLV can occur multiple times.
    """


class Ipv6NeighborAddressContainer4(BaseModel):
    """
    This container defines sub-TLV 13.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[List[AddressLeafList19]], Field(alias='srl_nokia-isis:address')
    ] = []
    """
    Contains a 16-octet IPv6 address for a neighboring router on the link described by the (main) TLV. This sub-TLV can occur multiple times.
    """


class Ipv6NextHopsContainer2(BaseModel):
    """
    Options related to the resolution of BGP next-hops that are IPv6 addresses
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tunnel_resolution: Annotated[
        Optional[TunnelResolutionContainer4],
        Field(alias='srl_nokia-bgp:tunnel-resolution'),
    ] = None


class Ipv6NextHopsContainer4(BaseModel):
    """
    Options related to the resolution of BGP next-hops that are IPv6 addresses
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tunnel_resolution: Annotated[
        Optional[TunnelResolutionContainer8],
        Field(alias='srl_nokia-bgp:tunnel-resolution'),
    ] = None


class Ipv6PrefixContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received_fecs: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:received-fecs', ge=0, le=4294967295)
    ] = 0
    """
    The number of received IPv6 prefix FECs from a single peer or all peers. In the overall summary the same FEC prefix from different peers counts as 1
    """
    advertised_fecs: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:advertised-fecs', ge=0, le=4294967295)
    ] = 0
    """
    The number of advertised IPv6 prefix FECs to a single peer or all peers. In the overall summary the same FEC prefix advertised to multiple peers counts as 1
    """


class Ipv6PrefixContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received_fecs: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:received-fecs', ge=0, le=4294967295)
    ] = 0
    """
    The number of received IPv6 prefix FECs from a single peer or all peers. In the overall summary the same FEC prefix from different peers counts as 1
    """
    advertised_fecs: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:advertised-fecs', ge=0, le=4294967295)
    ] = 0
    """
    The number of advertised IPv6 prefix FECs to a single peer or all peers. In the overall summary the same FEC prefix advertised to multiple peers counts as 1
    """


class Ipv6ReachabilityListEntry(BaseModel):
    """
    TLV specifying IPv6 Reachability information in the LSP. TLV type = 236
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv6_prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv6-prefix',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))$).*$',
        ),
    ] = None
    """
    An IPv6 prefix that is reachable to the router.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=0, le=16777215)
    ] = None
    """
    The metric to reach this IPv6 prefix.
    """
    external: Annotated[Optional[bool], Field(alias='srl_nokia-isis:external')] = None
    """
    Reads true when the IPv6 prefix reachability is external
    (learned from another protocol).
    """
    down: Annotated[Optional[bool], Field(alias='srl_nokia-isis:down')] = None
    """
    Reads true when the IPv6 prefix was leaked down from Level2 to Level1.
    """
    sub_tlvs: Annotated[
        Optional[SubTlvsContainer3], Field(alias='srl_nokia-isis:sub-tlvs')
    ] = None


class Ipv6SourceRouterIdContainer(BaseModel):
    """
    This container defines sub-TLV 12.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:router-id',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    IPv6 Source router ID address. In cases where the advertisement is an identifier for the advertising router (e.g., with the N-flag set in the Prefix Attribute Flags sub-TLV), it may be useful for other routers to know the source of the advertisement. When reachability advertisement is leaked from one level to another, Router ID advertised is always the Router ID of the IS-IS instance that originated the advertisement. This would be true even if the prefix had been learned from another protocol.
    """


class Ipv6SourceRouterIdContainer2(BaseModel):
    """
    This container defines sub-TLV 12.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:router-id',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    IPv6 Source router ID address. In cases where the advertisement is an identifier for the advertising router (e.g., with the N-flag set in the Prefix Attribute Flags sub-TLV), it may be useful for other routers to know the source of the advertisement. When reachability advertisement is leaked from one level to another, Router ID advertised is always the Router ID of the IS-IS instance that originated the advertisement. This would be true even if the prefix had been learned from another protocol.
    """


class Ipv6SourceRouterIdContainer3(BaseModel):
    """
    This container defines sub-TLV 12.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:router-id',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    IPv6 Source router ID address. In cases where the advertisement is an identifier for the advertising router (e.g., with the N-flag set in the Prefix Attribute Flags sub-TLV), it may be useful for other routers to know the source of the advertisement. When reachability advertisement is leaked from one level to another, Router ID advertised is always the Router ID of the IS-IS instance that originated the advertisement. This would be true even if the prefix had been learned from another protocol.
    """


class Ipv6SourceRouterIdContainer4(BaseModel):
    """
    This container defines sub-TLV 12.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:router-id',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    IPv6 Source router ID address. In cases where the advertisement is an identifier for the advertising router (e.g., with the N-flag set in the Prefix Attribute Flags sub-TLV), it may be useful for other routers to know the source of the advertisement. When reachability advertisement is leaked from one level to another, Router ID advertised is always the Router ID of the IS-IS instance that originated the advertisement. This would be true even if the prefix had been learned from another protocol.
    """


class Ipv6TeRouterIdContainer(BaseModel):
    """
    This container defines TLV 140.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    router_id: Annotated[
        Optional[List[RouterIdLeafList2]], Field(alias='srl_nokia-isis:router-id')
    ] = []
    """
    IPv6 Traffic Engineering router ID of the node. For traffic engineering, it guarantees that we have a single stable address that can always be referenced in a path that will be reachable from multiple hops away, regardless of the state of the node's interfaces.
    """


class Ipv6UnicastContainer2(BaseModel):
    """
    Options related to the IPv6-unicast address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_limit_received: Annotated[
        Optional[PrefixLimitReceivedContainer4],
        Field(alias='srl_nokia-bgp:prefix-limit-received'),
    ] = None
    prefix_limit_accepted: Annotated[
        Optional[PrefixLimitAcceptedContainer4],
        Field(alias='srl_nokia-bgp:prefix-limit-accepted'),
    ] = None
    link_bandwidth: Annotated[
        Optional[LinkBandwidthContainer2], Field(alias='srl_nokia-bgp:link-bandwidth')
    ] = None


class Ipv6UnicastContainer3(BaseModel):
    """
    Options related to the IPv6-unicast address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_limit_received: Annotated[
        Optional[PrefixLimitReceivedContainer12],
        Field(alias='srl_nokia-bgp:prefix-limit-received'),
    ] = None
    prefix_limit_accepted: Annotated[
        Optional[PrefixLimitAcceptedContainer12],
        Field(alias='srl_nokia-bgp:prefix-limit-accepted'),
    ] = None
    link_bandwidth: Annotated[
        Optional[LinkBandwidthContainer4], Field(alias='srl_nokia-bgp:link-bandwidth')
    ] = None


class Ipv6UnicastContainer5(BaseModel):
    """
    Enables/disables IPv6 routing in this ISIS instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-isis:admin-state')
    ] = 'enable'
    """
    When set to true, the IS-IS instance supports IPv6 unicast routing
    """
    multi_topology: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:multi-topology')
    ] = False
    """
    When set to true, IS-IS multi-topology TLVs are used for IPv6 routing and support for native IPv6 TLVs is disabled.
    """


class Ipv6UnicastContainer6(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-isis:admin-state')
    ] = 'enable'
    """
    When set to true, the interface and level supports IPv6 unicast routing
    """
    enable_bfd: Annotated[Optional[bool], Field(alias='srl_nokia-isis:enable-bfd')] = (
        False
    )
    """
    Enable BFD for IPv6
    """
    include_bfd_tlv: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:include-bfd-tlv')
    ] = False
    """
    Specifies whether a BFD-enabled TLV is included for IPv6 on this IS-IS interface.
    """


class Ipv6UnicastContainer9(BaseModel):
    """
    The abstract forwarding table for IPv6 unicast

    Entries within this table are uniquely keyed on the IPv6 unicast destination prefix which is matched by ingress
    packets. The data set represented by the IPv6 Unicast AFT is the set of entries from the IPv6 unicast RIB that
    have been selected for installation into the FIB of the device exporting the data structure.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    state_synced: Annotated[
        Optional[bool], Field(alias='srl_nokia-aft:state-synced')
    ] = None
    """
    State synced signal indicating consistent device snapshot of
    IPv6 unicast AFT entries. Before setting this flag to true
    next-hop-groups and next-hops AFT entries, associated with
    ipv6-unicast AFT entries, are expected to be consistent with
    device snapshot.
    """
    ipv6_entry: Annotated[
        Optional[List[Ipv6EntryListEntry]], Field(alias='srl_nokia-aft:ipv6-entry')
    ] = None


class Ipv6Container6(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received_addresses: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:received-addresses', ge=0, le=4294967295),
    ] = 0
    """
    The number of IPv6 addresses received from a peer
    """
    advertised_addresses: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:advertised-addresses', ge=0, le=4294967295),
    ] = 0
    """
    The number of IPv6 addresses advertised to a peer
    """


class Ipv6Container9(BaseModel):
    """
    Container for match conditions associated with IPv6 header fields

    If no match conditions are provided then no IPv6 packets are matched.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    next_header: Annotated[
        Optional[Union[IpProtocolTypeType1, EnumerationEnum317]],
        Field(alias='srl_nokia-policy-forwarding:next-header'),
    ] = None
    """
    An IPv6 packet matches this condition if its Next-Header type field matches the specified value
    """
    dscp_set: Annotated[
        Optional[List[Union[DscpValueType, EnumerationEnum318]]],
        Field(alias='srl_nokia-policy-forwarding:dscp-set'),
    ] = []
    """
    A list of DSCP values to be matched for incoming packets. An OR match should be performed, such that a packet must match one of the values defined in this list. If the field is left empty then any DSCP value matches.
    """
    source_ip: Annotated[
        Optional[SourceIpContainer2],
        Field(alias='srl_nokia-policy-forwarding:source-ip'),
    ] = None
    destination_ip: Annotated[
        Optional[DestinationIpContainer2],
        Field(alias='srl_nokia-policy-forwarding:destination-ip'),
    ] = None


class JoinPolicyLeafList(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$'
        ),
    ]
    """
    Policies that apply to the Join message
    """


class KeyContainer(BaseModel):
    """
    Container to specify the secret key and crypto algorithm to use for the authentication of PDUs when the behavior is controlled at this level of the configuration hierarchy
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    crypto_algorithm: Annotated[
        EnumerationEnum138, Field(alias='srl_nokia-isis:crypto-algorithm')
    ]
    """
    The cryptographic algorithm used with the keying material to secure the messages.
    """
    auth_password: Annotated[str, Field(alias='srl_nokia-isis:auth-password')]
    """
    The secret key to use for authentication of PDUs
    """


class KeyContainer2(BaseModel):
    """
    Container to specify the secret key and crypto algorithm to use for the authentication of Hello PDUs on this interface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    crypto_algorithm: Annotated[
        EnumerationEnum138, Field(alias='srl_nokia-isis:crypto-algorithm')
    ]
    """
    The cryptographic algorithm used with the keying material to secure the messages.
    """
    auth_password: Annotated[str, Field(alias='srl_nokia-isis:auth-password')]
    """
    The secret key to use for authentication of Hello PDUs
    """


class KeyContainer3(BaseModel):
    """
    Container to specify the secret key and crypto algorithm to use for the authentication of Hello PDUs on this interface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    crypto_algorithm: Annotated[
        EnumerationEnum138, Field(alias='srl_nokia-isis:crypto-algorithm')
    ]
    """
    The cryptographic algorithm used with the keying material to secure the messages.
    """
    auth_password: Annotated[str, Field(alias='srl_nokia-isis:auth-password')]
    """
    The secret key to use for authentication of Hello PDUs
    """


class KeyContainer4(BaseModel):
    """
    Container to specify the secret key and crypto algorithm to use for the authentication of PDUs when the behavior is controlled at this level of the configuration hierarchy
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    crypto_algorithm: Annotated[
        EnumerationEnum138, Field(alias='srl_nokia-isis:crypto-algorithm')
    ]
    """
    The cryptographic algorithm used with the keying material to secure the messages.
    """
    auth_password: Annotated[str, Field(alias='srl_nokia-isis:auth-password')]
    """
    The secret key to use for authentication of PDUs
    """


class L3vpnIpv4UnicastContainer(BaseModel):
    """
    Options related to the VPN-IPv4 unicast address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:advertise-ipv6-next-hops')
    ] = False
    """
    Enables advertisement of IPv4 routes with IPv6 next-hops
    """
    receive_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:receive-ipv6-next-hops')
    ] = False
    """
    Enables the advertisement of the RFC 8950 capability to receive IPv4 routes with IPv6 next-hops

    When set to true, BGP advertises an extended NH encoding (RFC 8950) capability to its peers. This capability indicates that local router is prepared to accept BGP routes for the AFI/SAFI with IPv6 next-hops from  peers in the scope of the command. When set to false, BGP handles received AFI/SAFI routes with IPv6 next-hops as an error and applies treat-as-withdraw.
    """
    convergence: Annotated[
        Optional[ConvergenceContainer4], Field(alias='srl_nokia-bgp:convergence')
    ] = None
    keep_all_routes: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:keep-all-routes')
    ] = False
    """
    When this is set to true all received VPN-IPv4 routes are retained in the RIB-IN, even those not imported by any network-instance; these routes display as 'rejected' and cannot be propagated to other peers

    When this is false, VPN-IPv4 routes that are not imported by any network-instance are dropped and not retained in the BGP RIB-IN; policy changes affecting received VPN-IPv4 routes will trigger the sending of ROUTE_REFRESH messages towards all VPN-IPv4 family peers.
    """
    next_hop_self_route_reflector: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:next-hop-self-route-reflector')
    ] = False
    """
    When set to true, received VPN-IPv4 routes are kept in the RIB and readvertised to the other route reflector clients with a local next-hop and VPN label

    This command triggers the programming of a VPN label swap operation for each received VPN-IPv4 route.
    """
    inter_as_vpn: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:inter-as-vpn')
    ] = False
    """
    When set to true, received VPN-IPv4 routes that are not imported by any network-instance are retained in the BGP RIB and considered 'used' so that they can be propagated to any EBGP or IBGP peer.

    This command supersedes the effect of keep-all-routes. This command triggers the programming of a VPN label swap operation for each received VPN-IPv4 route.
    """
    rapid_update: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:rapid-update')
    ] = False
    """
    When true, vpn-ipv4 update messages are advertised immediately, bypassing the MRAI

    When this is false, reachability updates and withdrawals are subject to the MRAI interval.
    """


class L3vpnIpv4UnicastContainer2(BaseModel):
    """
    Options related to the VPN-IPv4 unicast address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:advertise-ipv6-next-hops')
    ] = None
    """
    Enables advertisement of IPv4 routes with IPv6 next-hops
    """
    receive_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:receive-ipv6-next-hops')
    ] = None
    """
    Enables the advertisement of the RFC 8950 capability to receive IPv4 routes with IPv6 next-hops

    When set to true, BGP advertises an extended NH encoding (RFC 8950) capability to its peers. This capability indicates that local router is prepared to accept BGP routes for the AFI/SAFI with IPv6 next-hops from  peers in the scope of the command. When set to false, BGP handles received AFI/SAFI routes with IPv6 next-hops as an error and applies treat-as-withdraw.
    """
    prefix_limit_received: Annotated[
        Optional[PrefixLimitReceivedContainer3],
        Field(alias='srl_nokia-bgp:prefix-limit-received'),
    ] = None
    prefix_limit_accepted: Annotated[
        Optional[PrefixLimitAcceptedContainer3],
        Field(alias='srl_nokia-bgp:prefix-limit-accepted'),
    ] = None


class L3vpnIpv4UnicastContainer3(BaseModel):
    """
    Options related to the VPN-IPv4 unicast address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:advertise-ipv6-next-hops')
    ] = None
    """
    Enables advertisement of IPv4 routes with IPv6 next-hops
    """
    receive_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:receive-ipv6-next-hops')
    ] = None
    """
    Enables the advertisement of the RFC 8950 capability to receive IPv4 routes with IPv6 next-hops

    When set to true, BGP advertises an extended NH encoding (RFC 8950) capability to its peers. This capability indicates that local router is prepared to accept BGP routes for the AFI/SAFI with IPv6 next-hops from  peers in the scope of the command. When set to false, BGP handles received AFI/SAFI routes with IPv6 next-hops as an error and applies treat-as-withdraw.
    """
    prefix_limit_received: Annotated[
        Optional[PrefixLimitReceivedContainer11],
        Field(alias='srl_nokia-bgp:prefix-limit-received'),
    ] = None
    prefix_limit_accepted: Annotated[
        Optional[PrefixLimitAcceptedContainer11],
        Field(alias='srl_nokia-bgp:prefix-limit-accepted'),
    ] = None


class L3vpnIpv6UnicastContainer(BaseModel):
    """
    Options related to the VPN-IPv6 unicast address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    convergence: Annotated[
        Optional[ConvergenceContainer7], Field(alias='srl_nokia-bgp:convergence')
    ] = None
    keep_all_routes: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:keep-all-routes')
    ] = False
    """
    When this is set to true all received VPN-IPv6 routes are retained in the RIB-IN, even those not imported by any network-instance; these routes display as 'rejected' and cannot be propagated to other peers

    When this is false, VPN-IPv6 routes that are not imported by any network-instance are dropped and not retained in the BGP RIB-IN; policy changes affecting received VPN-IPv6 routes will trigger the sending of ROUTE_REFRESH messages towards all VPN-IPv6 family peers.
    """
    next_hop_self_route_reflector: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:next-hop-self-route-reflector')
    ] = False
    """
    When set to true, received VPN-IPv6 routes are kept in the RIB and readvertised to the other route reflector clients with a local next-hop and VPN label

    This command triggers the programming of a VPN label swap operation for each received VPN-IPv6 route.
    """
    inter_as_vpn: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:inter-as-vpn')
    ] = False
    """
    When set to true, received VPN-IPv6 routes that are not imported by any network-instance are retained in the BGP RIB and considered 'used' so that they can be propagated to any EBGP or IBGP peer.

    This command supersedes the effect of keep-all-routes. This command triggers the programming of a VPN label swap operation for each received VPN-IPv6 route.
    """
    rapid_update: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:rapid-update')
    ] = False
    """
    When true, vpn-ipv6 update messages are advertised immediately, bypassing the MRAI

    When this is false, reachability updates and withdrawals are subject to the MRAI interval.
    """


class L3vpnIpv6UnicastContainer2(BaseModel):
    """
    Options related to the VPN-IPv6 unicast address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_limit_received: Annotated[
        Optional[PrefixLimitReceivedContainer6],
        Field(alias='srl_nokia-bgp:prefix-limit-received'),
    ] = None
    prefix_limit_accepted: Annotated[
        Optional[PrefixLimitAcceptedContainer6],
        Field(alias='srl_nokia-bgp:prefix-limit-accepted'),
    ] = None


class L3vpnIpv6UnicastContainer3(BaseModel):
    """
    Options related to the VPN-IPv6 unicast address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_limit_received: Annotated[
        Optional[PrefixLimitReceivedContainer14],
        Field(alias='srl_nokia-bgp:prefix-limit-received'),
    ] = None
    prefix_limit_accepted: Annotated[
        Optional[PrefixLimitAcceptedContainer14],
        Field(alias='srl_nokia-bgp:prefix-limit-accepted'),
    ] = None


class LabelAdvertisementModeContainer(BaseModel):
    """
    Label advertisement mode state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    negotiated: Annotated[
        Optional[EnumerationEnum130], Field(alias='srl_nokia-ldp:negotiated')
    ] = None
    """
    Negotiated Label Advertisement Mode
    """


class LabelEntryListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    label_value: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mpls-route-tables:label-value', ge=16, le=1048575),
    ] = None
    """
    The MPLS label value
    """
    operation: Annotated[
        Optional[EnumerationEnum297],
        Field(alias='srl_nokia-mpls-route-tables:operation'),
    ] = None
    """
    The forwarding operation associated with the MPLS label entry.
    """
    entry_type: Annotated[
        Optional[str], Field(alias='srl_nokia-mpls-route-tables:entry-type')
    ] = None
    """
    The entry type of the MPLS FIB entry.
    """
    last_app_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mpls-route-tables:last-app-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this MPLS label entry by the owning application or protocol.
    """
    next_hop_group: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mpls-route-tables:next-hop-group',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    The next-hop-group indirection object used by this route. Applicable only if the operation is SWAP.
    """
    next_network_instance: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mpls-route-tables:next-network-instance',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$',
        ),
    ] = None
    """
    If this ILM entry is for a pop label, and this label is at the bottom of the stack, the next forwarding lookup will be done in the referenced network-instance
    """
    next_bgp_instance: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mpls-route-tables:next-bgp-instance', ge=1, le=2),
    ] = None
    """
    The index of the bgp-vpn instance
    """
    next_ethernet_segment: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mpls-route-tables:next-ethernet-segment',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    If this ILM entry is for a pop label, and this label is below an EVPN label at the bottom of the stack,
    the label will identify an Ethernet Segment and forwarding in the network-instance may exclude the
    bridged subinterfaces associated with the Ethernet Segment
    """


class Label1Container(BaseModel):
    """
    The encoded label1 value (used for layer 2 services) and type in the EVPN NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:value', ge=0, le=16777215)
    ] = None
    """
    The value of the label field

    If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
    If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
    an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
    value if transposition is used.
    """
    value_type: Annotated[
        Optional[EnumerationEnum335], Field(alias='srl_nokia-rib-bgp:value-type')
    ] = None
    """
    Whether the encoded label value is an mpls-label, a vni or a transposed function or argument
    """


class Label1Container2(BaseModel):
    """
    The encoded label1 value (used for layer 2 services) and type in the EVPN NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:value', ge=0, le=16777215)
    ] = None
    """
    The value of the label field

    If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
    If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
    an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
    value if transposition is used.
    """
    value_type: Annotated[
        Optional[EnumerationEnum335], Field(alias='srl_nokia-rib-bgp:value-type')
    ] = None
    """
    Whether the encoded label value is an mpls-label, a vni or a transposed function or argument
    """


class Label1Container3(BaseModel):
    """
    The encoded label1 value (used for layer 2 services) and type in the EVPN NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:value', ge=0, le=16777215)
    ] = None
    """
    The value of the label field

    If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
    If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
    an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
    value if transposition is used.
    """
    value_type: Annotated[
        Optional[EnumerationEnum335], Field(alias='srl_nokia-rib-bgp:value-type')
    ] = None
    """
    Whether the encoded label value is an mpls-label, a vni or a transposed function or argument
    """


class Label1Container4(BaseModel):
    """
    The encoded label1 value (used for layer 2 services) and type in the EVPN NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:value', ge=0, le=16777215)
    ] = None
    """
    The value of the label field

    If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
    If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
    an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
    value if transposition is used.
    """
    value_type: Annotated[
        Optional[EnumerationEnum335], Field(alias='srl_nokia-rib-bgp:value-type')
    ] = None
    """
    Whether the encoded label value is an mpls-label, a vni or a transposed function or argument
    """


class Label2Container(BaseModel):
    """
    The encoded label2 value (used for layer 3 services) and type in the EVPN NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:value', ge=0, le=16777215)
    ] = None
    """
    The value of the label field

    If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
    If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
    an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
    value if transposition is used.
    """
    value_type: Annotated[
        Optional[EnumerationEnum335], Field(alias='srl_nokia-rib-bgp:value-type')
    ] = None
    """
    Whether the encoded label value is an mpls-label, a vni or a transposed function or argument
    """


class Label2Container2(BaseModel):
    """
    The encoded label2 value (used for layer 3 services) and type in the EVPN NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:value', ge=0, le=16777215)
    ] = None
    """
    The value of the label field

    If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
    If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
    an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
    value if transposition is used.
    """
    value_type: Annotated[
        Optional[EnumerationEnum335], Field(alias='srl_nokia-rib-bgp:value-type')
    ] = None
    """
    Whether the encoded label value is an mpls-label, a vni or a transposed function or argument
    """


class Label2Container3(BaseModel):
    """
    The encoded label2 value (used for layer 3 services) and type in the EVPN NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:value', ge=0, le=16777215)
    ] = None
    """
    The value of the label field

    If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
    If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
    an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
    value if transposition is used.
    """
    value_type: Annotated[
        Optional[EnumerationEnum335], Field(alias='srl_nokia-rib-bgp:value-type')
    ] = None
    """
    Whether the encoded label value is an mpls-label, a vni or a transposed function or argument
    """


class Label2Container4(BaseModel):
    """
    The encoded label2 value (used for layer 3 services) and type in the EVPN NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:value', ge=0, le=16777215)
    ] = None
    """
    The value of the label field

    If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
    If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
    an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
    value if transposition is used.
    """
    value_type: Annotated[
        Optional[EnumerationEnum335], Field(alias='srl_nokia-rib-bgp:value-type')
    ] = None
    """
    Whether the encoded label value is an mpls-label, a vni or a transposed function or argument
    """


class LabelContainer(BaseModel):
    """
    The encoded label value and type in the EVPN NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:value', ge=0, le=16777215)
    ] = None
    """
    The value of the label field

    If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
    If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
    an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
    value if transposition is used. For all the cases, if this is an Auto-Discovery per ES route,
    this leaf is set to zero.
    """
    value_type: Annotated[
        Optional[EnumerationEnum335], Field(alias='srl_nokia-rib-bgp:value-type')
    ] = None
    """
    Whether the encoded label value is an mpls-label, a vni or a transposed function or argument
    """


class LabelContainer2(BaseModel):
    """
    The encoded label value and type in the EVPN NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:value', ge=0, le=16777215)
    ] = None
    """
    The value of the label field

    If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
    If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
    an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
    value if transposition is used.
    """
    value_type: Annotated[
        Optional[EnumerationEnum335], Field(alias='srl_nokia-rib-bgp:value-type')
    ] = None
    """
    Whether the encoded label value is an mpls-label, a vni or a transposed function or argument
    """


class LabelContainer3(BaseModel):
    """
    The encoded label value and type in the EVPN NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:value', ge=0, le=16777215)
    ] = None
    """
    The value of the label field

    If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
    If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
    an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
    value if transposition is used. For all the cases, if this is an Auto-Discovery per ES route,
    this leaf is set to zero.
    """
    value_type: Annotated[
        Optional[EnumerationEnum335], Field(alias='srl_nokia-rib-bgp:value-type')
    ] = None
    """
    Whether the encoded label value is an mpls-label, a vni or a transposed function or argument
    """


class LabelContainer4(BaseModel):
    """
    The encoded label value and type in the EVPN NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:value', ge=0, le=16777215)
    ] = None
    """
    The value of the label field

    If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
    If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
    an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
    value if transposition is used.
    """
    value_type: Annotated[
        Optional[EnumerationEnum335], Field(alias='srl_nokia-rib-bgp:value-type')
    ] = None
    """
    Whether the encoded label value is an mpls-label, a vni or a transposed function or argument
    """


class LabelContainer5(BaseModel):
    """
    The encoded label value and type in the EVPN NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:value', ge=0, le=16777215)
    ] = None
    """
    The value of the label field

    If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
    If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
    an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
    value if transposition is used. For all the cases, if this is an Auto-Discovery per ES route,
    this leaf is set to zero.
    """
    value_type: Annotated[
        Optional[EnumerationEnum335], Field(alias='srl_nokia-rib-bgp:value-type')
    ] = None
    """
    Whether the encoded label value is an mpls-label, a vni or a transposed function or argument
    """


class LabelContainer6(BaseModel):
    """
    The encoded label value and type in the EVPN NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:value', ge=0, le=16777215)
    ] = None
    """
    The value of the label field

    If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
    If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
    an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
    value if transposition is used.
    """
    value_type: Annotated[
        Optional[EnumerationEnum335], Field(alias='srl_nokia-rib-bgp:value-type')
    ] = None
    """
    Whether the encoded label value is an mpls-label, a vni or a transposed function or argument
    """


class LabelContainer7(BaseModel):
    """
    The encoded label value and type in the EVPN NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:value', ge=0, le=16777215)
    ] = None
    """
    The value of the label field

    If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
    If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
    an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
    value if transposition is used. For all the cases, if this is an Auto-Discovery per ES route,
    this leaf is set to zero.
    """
    value_type: Annotated[
        Optional[EnumerationEnum335], Field(alias='srl_nokia-rib-bgp:value-type')
    ] = None
    """
    Whether the encoded label value is an mpls-label, a vni or a transposed function or argument
    """


class LabelContainer8(BaseModel):
    """
    The encoded label value and type in the EVPN NLRI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:value', ge=0, le=16777215)
    ] = None
    """
    The value of the label field

    If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
    If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
    an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
    value if transposition is used.
    """
    value_type: Annotated[
        Optional[EnumerationEnum335], Field(alias='srl_nokia-rib-bgp:value-type')
    ] = None
    """
    Whether the encoded label value is an mpls-label, a vni or a transposed function or argument
    """


class LabelContainer9(BaseModel):
    """
    The encoded label value and type in the PMSI Tunnel Attribute
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    value: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:value', ge=0, le=16777215)
    ] = None
    """
    The value of the label field

    If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
    If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
    an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
    value if transposition is used.
    """
    value_type: Annotated[
        Optional[EnumerationEnum335], Field(alias='srl_nokia-rib-bgp:value-type')
    ] = None
    """
    Whether the encoded label value is an mpls-label, a vni or a transposed function or argument
    """


class LabeledUnicastContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    dynamic_label_block: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp:dynamic-label-block',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Reference to a dynamic label block
    """
    dynamic_label_block_status: Annotated[
        Optional[EnumerationEnum27],
        Field(alias='srl_nokia-bgp:dynamic-label-block-status'),
    ] = None
    """
    Status of the label block.

    The label block may show as unavailable if there is pending cleanup.
    """
    entropy_label: Annotated[
        Optional[EntropyLabelContainer], Field(alias='srl_nokia-bgp:entropy-label')
    ] = None
    selective_labeled_unicast_install: Annotated[
        Optional[SelectiveLabeledUnicastInstallContainer],
        Field(alias='srl_nokia-bgp:selective-labeled-unicast-install'),
    ] = None


class LastExtSpfContainer(BaseModel):
    """
    Information about the last external SPF run
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    run_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:run-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    the value of last-ext-spf-run-time indicates the value of sys-up-time when the external OSPF dijkstra (SPF) was last run.
    """
    interval: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:interval', ge=0, le=2147483647)
    ] = None
    """
    the value of ext-spf-run-interval indicates the time, in hundredths of seconds, used to perform the most recent total external (not incremental) SPF calculation.
    """


class LastFullSpfContainer(BaseModel):
    """
    Information about the last full SPF run
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    run_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:run-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    the value of last-full-spf-run-time indicates the time at which the system last performed a full dijkstra (SPF) run.
    """
    total_time: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:total-time', ge=0, le=2147483647)
    ] = None
    """
    Time it toook, in hundredths of seconds, to complete the last SPF run completely.
    """
    intra_spf_time: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:intra-spf-time', ge=0, le=2147483647)
    ] = None
    """
    Time it toook, in hundredths of seconds, to complete the intra-area SPF calculations.
    """
    inter_spf_time: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:inter-spf-time', ge=0, le=2147483647)
    ] = None
    """
    Time it toook, in hundredths of seconds, to complete the inter-area SPF calculations.
    """
    extern_spf_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:extern-spf-time', ge=0, le=2147483647),
    ] = None
    """
    Time it toook, in hundredths of seconds, to complete the external LSA calculations.
    """
    rtm_update_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:rtm-update-time', ge=0, le=2147483647),
    ] = None
    """
    Time it toook, in hundredths of seconds, to complete the RTM updates.
    """


class LastMbbContainer(BaseModel):
    """
    The last make-before-break operational information.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[EnumerationEnum396], Field(alias='srl_nokia-te-policies:type')
    ] = None
    """
    Indicates the type of the make-before-break (MBB) that is in progress.
    """
    state: Annotated[
        Optional[EnumerationEnum397], Field(alias='srl_nokia-te-policies:state')
    ] = None
    """
    Indicates whether the last make-before-break was successful, failed or was not required as path was already optimal.
    """
    end_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:end-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Specifies the system time when the last MBB ended.
    """
    failed_reason: Annotated[
        Optional[str], Field(alias='srl_nokia-te-policies:failed-reason')
    ] = None
    """
    Indicates the reason code for last MBB failure.
    """


class LastMbbContainer2(BaseModel):
    """
    The last make-before-break operational information.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[EnumerationEnum405], Field(alias='srl_nokia-te-policies:type')
    ] = None
    """
    Indicates the type of the make-before-break (MBB) that is in progress.
    """
    state: Annotated[
        Optional[EnumerationEnum406], Field(alias='srl_nokia-te-policies:state')
    ] = None
    """
    Indicates whether the last make-before-break was successful, failed or was not required as path was already optimal.
    """
    end_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:end-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Specifies the system time when the last MBB ended.
    """
    failed_reason: Annotated[
        Optional[str], Field(alias='srl_nokia-te-policies:failed-reason')
    ] = None
    """
    Indicates the reason code for last MBB failure.
    """


class LastPceUpdateContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Indicates the system time when the last update occured.
    """
    update_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:update-id', ge=0, le=4294967295),
    ] = None
    """
    Indicates the last update ID which was processed.
    """
    state: Annotated[
        Optional[EnumerationEnum399], Field(alias='srl_nokia-te-policies:state')
    ] = None
    """
    Indicates whether the last update was successful or failed.
    """
    failure_reason: Annotated[
        Optional[str], Field(alias='srl_nokia-te-policies:failure-reason')
    ] = None
    """
    Indicates the reason code for last MBB failure.
    """


class LastPceUpdateContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Indicates the system time when the last update occured.
    """
    update_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:update-id', ge=0, le=4294967295),
    ] = None
    """
    Indicates the last update ID which was processed.
    """
    state: Annotated[
        Optional[EnumerationEnum408], Field(alias='srl_nokia-te-policies:state')
    ] = None
    """
    Indicates whether the last update was successful or failed.
    """
    failure_reason: Annotated[
        Optional[str], Field(alias='srl_nokia-te-policies:failure-reason')
    ] = None
    """
    Indicates the reason code for last MBB failure.
    """


class LastResortLookupContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    network_instance: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-network-instance:network-instance',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$',
        ),
    ] = None
    """
    A reference to another network-instance in which the system will try to find a matching IP route if this network instance does not have any route to the destination IP
    """


class LdpSynchronizationContainer2(BaseModel):
    """
    Container with configuration options and state that pertains to the operation of LDP-IGP synchronization on this interface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    disable: Annotated[
        Optional[DisableLeaf2], Field(alias='srl_nokia-isis:disable')
    ] = None
    hold_down_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:hold-down-timer', ge=1, le=1800)
    ] = None
    """
    The maximum amount of time that the IGP advertises a maximum metric for an interface, measured from the time that the LDP adjacency is re-established after going down.

    This overrides the global/instance level setting
    """
    end_of_lib: Annotated[Optional[bool], Field(alias='srl_nokia-isis:end-of-lib')] = (
        None
    )
    """
    When set to true, the IGP restores the normal metric for the IGP adjacency when learning from LDP that all label-FEC mappings have been received from the LDP peer, even if there is remaining time on the hold-down-timer.

    When set to false, the IGP always waits for the full duration of the hold-down-timer to restore the normal metric for the IGP adjacency.

    This overrides the global/instance level setting
    """
    sync_state: Annotated[
        Optional[EnumerationEnum154], Field(alias='srl_nokia-isis:sync-state')
    ] = None
    """
    The current state of the interface with respect to LDP-IGP sync
    """
    duration: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:duration', ge=0, le=4294967295)
    ] = None
    """
    The length of time that the IGP interface has been in sync or out of sync
    """


class LdpSynchronizationContainer4(BaseModel):
    """
    Container with configuration options and state that pertains to the operation of LDP-IGP synchronization on this interface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    disable: Annotated[
        Optional[DisableLeaf3], Field(alias='srl_nokia-ospf:disable')
    ] = None
    hold_down_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:hold-down-timer', ge=1, le=1800)
    ] = None
    """
    The maximum amount of time that the IGP advertises a maximum metric for an interface, measured from the time that the LDP adjacency is re-established after going down.

    This overrides the global/instance level setting
    """
    end_of_lib: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:end-of-lib')] = (
        None
    )
    """
    When set to true, the IGP restores the normal metric for the IGP adjacency when learning from LDP that all label-FEC mappings have been received from the LDP peer, even if there is remaining time on the hold-down-timer.

    When set to false, the IGP always waits for the full duration of the hold-down-timer to restore the normal metric for the IGP adjacency.

    This overrides the global/instance level setting
    """
    sync_state: Annotated[
        Optional[EnumerationEnum237], Field(alias='srl_nokia-ospf:sync-state')
    ] = None
    """
    The current state of the interface with respect to LDP-IGP sync
    """
    duration: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:duration', ge=0, le=4294967295)
    ] = None
    """
    The length of time that the IGP interface has been in sync or out of sync
    """


class LearntEntriesContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mac: Annotated[
        Optional[List[MacListEntry3]],
        Field(alias='srl_nokia-bridge-table-mac-learning-entries:mac'),
    ] = None


class LearntEntriesContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mac: Annotated[
        Optional[List[MacListEntry8]],
        Field(alias='srl_nokia-connection-point-bridge-table-mac-learning-entries:mac'),
    ] = None


class LinkAttributesContainer(BaseModel):
    """
    This container defines link-attributes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_protection: Annotated[
        Optional[List[EnumerationEnum170]],
        Field(alias='srl_nokia-isis:local-protection'),
    ] = []
    """
    Link local-protection attributes.
    """


class LinkAttributesContainer2(BaseModel):
    """
    This container defines link-attributes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_protection: Annotated[
        Optional[List[EnumerationEnum179]],
        Field(alias='srl_nokia-isis:local-protection'),
    ] = []
    """
    Link local-protection attributes.
    """


class LinkAttributesContainer3(BaseModel):
    """
    This container defines link-attributes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_protection: Annotated[
        Optional[List[EnumerationEnum183]],
        Field(alias='srl_nokia-isis:local-protection'),
    ] = []
    """
    Link local-protection attributes.
    """


class LinkAttributesContainer4(BaseModel):
    """
    This container defines link-attributes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_protection: Annotated[
        Optional[List[EnumerationEnum187]],
        Field(alias='srl_nokia-isis:local-protection'),
    ] = []
    """
    Link local-protection attributes.
    """


class LinkProtectionTypeContainer(BaseModel):
    """
    ISIS LSDB parameters relating to the type of link protection offered.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[List[EnumerationEnum171]], Field(alias='srl_nokia-isis:type')
    ] = []
    """
    Link protection capabilities.
    """


class LinkProtectionTypeContainer2(BaseModel):
    """
    ISIS LSDB parameters relating to the type of link protection offered.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[List[EnumerationEnum180]], Field(alias='srl_nokia-isis:type')
    ] = []
    """
    Link protection capabilities.
    """


class LinkProtectionTypeContainer3(BaseModel):
    """
    ISIS LSDB parameters relating to the type of link protection offered.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[List[EnumerationEnum184]], Field(alias='srl_nokia-isis:type')
    ] = []
    """
    Link protection capabilities.
    """


class LinkProtectionTypeContainer4(BaseModel):
    """
    ISIS LSDB parameters relating to the type of link protection offered.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[List[EnumerationEnum188]], Field(alias='srl_nokia-isis:type')
    ] = []
    """
    Link protection capabilities.
    """


class LinkListEntry(BaseModel):
    """
    Router LSA link.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_id: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:interface-id', ge=0, le=4294967295)
    ] = None
    """
    Interface ID for link.
    """
    neighbor_interface_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:neighbor-interface-id', ge=0, le=4294967295),
    ] = None
    """
    Neighbor's Interface ID for link.
    """
    neighbor_router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:neighbor-router-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Neighbor's Router ID for link.
    """
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The sub-type of the Router LSA.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:metric', ge=0, le=65535)
    ] = None
    """
    Link Metric.
    """


class LinksListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The sub-type of the Router LSA.
    """
    link_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:link-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The identifier for the link specified. The value of the link
    identifier is dependent upon the type of the LSA. The value is
    specified to be, per sub-type:
     1) Neighbouring router's router ID.
     2) IP address of DR.
     3) IP network address.
     4) Neighbouring router router's ID.
    """
    link_data: Annotated[
        Optional[Union[DottedQuadType2, LinkDataLeaf31]],
        Field(alias='srl_nokia-ospf:link-data'),
    ] = None
    """
    The data associated with the link type. The value is
    dependent upon the subtype of the LSA. When the connection is
    to a stub network it represents the mask; for p2p connections
    that are unnumbered it represents the ifIndex value of the
    router's interface; for all other connections it represents
    the local system's IP address
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:metric', ge=0, le=65535)
    ] = None
    """
    The cost of utilising the link specified independent of TOS
    """
    number_tos_metrics: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:number-tos-metrics', ge=0, le=65535)
    ] = None
    """
    The number of different TOS metrics given for this link, not
    including the link metric (which is referred to as TOS 0).
    """
    types_of_service: Annotated[
        Optional[TypesOfServiceContainer2],
        Field(alias='srl_nokia-ospf:types-of-service'),
    ] = None


class LocalAttachmentCircuitListEntry(BaseModel):
    """
    A local attachment circuit in the VPWS

    Each local attachment circuit is identified in EVPN with an
    Ethernet Tag that is advertised in the Auto Discovery per EVI
    route. Configurable on network instances of type vpws.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp-evpn:name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The list of local attachment circuits in the network instance
    """
    ethernet_tag: Annotated[
        int, Field(alias='srl_nokia-bgp-evpn:ethernet-tag', ge=0, le=16777215)
    ]
    """
    The Ethernet Tag ID advertised in the Auto Discovery per EVI route

    The Ethernet Tag ID identifies the local attachment circuit in the
    EVPN control plane.
    """
    connection_point: Annotated[
        str,
        Field(
            alias='srl_nokia-bgp-evpn:connection-point',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ]
    """
    The connection-point associated to the local attachement circuit
    """
    ingress_mpls_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp-evpn:ingress-mpls-label', ge=16, le=1048575),
    ] = None
    """
    The ingress label allocated for EVPN VPWS traffic

    The ingress mpls label is advertised by the EVPN Auto-Discovery
    per EVI routes and it is expected on received EVPN packets
    for the VPWS network instance.
    """


class LocalPrefixSidListEntry(BaseModel):
    """
    List of configured protocol-independent prefix SIDs associated with the network-instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_sid_index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-segment-routing:prefix-sid-index', ge=1, le=4),
    ] = None
    """
    An index to enumerate the different prefix sids
    """
    interface: Annotated[str, Field(alias='srl_nokia-segment-routing:interface')]
    """
    Reference to the subinterface that owns the prefix(es) to be advertised.

    If ipv4-label-index is assigned a value then the primary IPv4 address of the referenced subinterface is advertised as a prefix SID.

    If ipv6-label-index is assigned a value then the primary IPv6 address of the referenced subinterface is advertised as a prefix SID.
    """
    ipv4_label_index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-segment-routing:ipv4-label-index', ge=0, le=1048575),
    ] = None
    """
    Label index to add to SRGB base.
    """
    ipv6_label_index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-segment-routing:ipv6-label-index', ge=0, le=1048575),
    ] = None
    """
    Label index to add to SRGB base.
    """
    node_sid: Annotated[
        Optional[bool], Field(alias='srl_nokia-segment-routing:node-sid')
    ] = True
    """
    If set, the prefix SID(s) identity the router as a whole.
    """


class LocalContainer(BaseModel):
    """
    The local parameters of the VPWS
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_attachment_circuit: Annotated[
        Optional[List[LocalAttachmentCircuitListEntry]],
        Field(alias='srl_nokia-bgp-evpn:local-attachment-circuit'),
    ] = None


class LocalContainer2(BaseModel):
    """
    The local parameters of the pseudowire
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    pseudowire_status: Annotated[
        Optional[List[EnumerationEnum311]],
        Field(alias='srl_nokia-network-instance:pseudowire-status'),
    ] = []
    """
    Indicates a local fault in the pseudowire

    The bits are signaled in the pseudowire status bits TLV
    of the TLDP messages to the peer.
    """
    operational_ingress_vc_label: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-network-instance:operational-ingress-vc-label',
            ge=16,
            le=1048575,
        ),
    ] = None
    """
    The value of the operational ingress vc label

    The ingress virtual circuit mpls label is allocated by the
    system when the signaling is of type TLDP or configured if the signaling is
    static.
    """


class LoopfreeAlternateContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-ldp:admin-state')
    ] = 'disable'
    """
    Administratively enable or disable Loop Free Alternates
    """


class LsdbContainer(BaseModel):
    """
    Trace OSPF LSDB events
    Only one type can be enabled at a time
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[EnumerationEnum212], Field(alias='srl_nokia-ospf:type')
    ] = None
    router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:router-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    An IPv4 address in dotted quad notation.
    """
    link_state_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:link-state-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    An IPv4 address in dotted quad notation.
    """


class LspAuthenticationContainer(BaseModel):
    """
    Container with options to control the authentication of Link State PDUs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    generate: Annotated[Optional[bool], Field(alias='srl_nokia-isis:generate')] = None
    """
    When set to true, IS-IS is instructed to add an authentication TLV to every transmitted PDU of the specified type
    """
    check_received: Annotated[
        Optional[EnumerationEnum137], Field(alias='srl_nokia-isis:check-received')
    ] = None
    """
    Specifies the type of authentication checks done for received PDUs of the specified type.
    """


class LspAuthenticationContainer2(BaseModel):
    """
    Container with options to control the authentication of Link State PDUs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    generate: Annotated[Optional[bool], Field(alias='srl_nokia-isis:generate')] = None
    """
    When set to true, IS-IS is instructed to add an authentication TLV to every transmitted PDU of the specified type
    """
    check_received: Annotated[
        Optional[EnumerationEnum137], Field(alias='srl_nokia-isis:check-received')
    ] = None
    """
    Specifies the type of authentication checks done for received PDUs of the specified type.
    """


class MacDuplicationContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    action: Annotated[
        Optional[EnumerationEnum305], Field(alias='srl_nokia-network-instance:action')
    ] = 'use-net-instance-action'
    """
    Action to take on all the subinterfaces or pseudowires of the connection-point upon detecting at least one mac addresses as duplicate

    In particular:
    - use-net-instance-action: upon detecting a duplicate mac on the subinterface, the action on the connection-point will be
      inherited from the action configured under network-instance/bridge-table/mac-duplication/action.
    - oper-down: if configured, upon detecting a duplicate mac on the subinterface, the connection-point objects
      will be brought oper-down, with oper-down-reason mac-dup-detected. The duplicate macs on the interface will be kept
      in CPM though, and shown in the duplicate-entries state. In this case, arriving frames on a different subinterface/pw with
      the duplicate mac as source mac are dropped. Arriving frames on a different subinterface/pw with a destination mac
      matching the duplicate mac are dropped.
    - blackhole: upon detecting a duplicate mac on the connection-point, the mac will be blackholed. Any
      frame received on this or any other subinterface with source mac matching a blackhole mac will be discarded. Any frame
      received with destination mac matching the blackhole mac will be discarded, although still processed for source mac
      learning.
    - stop-learning: upon detecting a duplicate mac on the connection-point, existing macs are kept (and refreshed) but new macs
      are no longer learned on this subinterface/pw. The duplicate mac will stay learned on the subinterface/pw. Frames arriving to
      a different subinterface/pw with a source mac matching the duplicate mac will be dropped. Frames arriving to a different
      subinterface/pw with a destination mac matching the duplicate mac will be forwarded normally.
    """
    duplicate_entries: Annotated[
        Optional[DuplicateEntriesContainer4],
        Field(
            alias='srl_nokia-connection-point-bridge-table-mac-duplication-entries:duplicate-entries'
        ),
    ] = None


class MacLearningContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-network-instance:admin-state')
    ] = 'enable'
    """
    Configurable state of the learning procedures for dynamic mac addresses

    If disabled, the existing macs in the bridge-table will be kept (and refreshed
    if new frames arrive for them) but no new mac addresses will be learned. Frames
    with unknown mac addresses are not dropped, unless discard-unknown-src-mac is
    configured.
    """
    aging: Annotated[
        Optional[AgingContainer2], Field(alias='srl_nokia-network-instance:aging')
    ] = None
    learnt_entries: Annotated[
        Optional[LearntEntriesContainer2],
        Field(
            alias='srl_nokia-connection-point-bridge-table-mac-learning-entries:learnt-entries'
        ),
    ] = None


class MacTypeListEntry(BaseModel):
    """
    The type of the mac on the evpn-mpls instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[EnumerationEnum17],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics:type'
        ),
    ] = None
    """
    type of mac addresses in the system
    """
    active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics:active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of entries of this type on the evpn-mpls instance.
    """
    total_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics:total-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs of this type, active and inactive, on the evpn-mpls instance.
    """
    failed_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics:failed-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs of this type, which have not been programmed on at least one slot
    """


class MacTypeListEntry2(BaseModel):
    """
    the type of the mac on the sub-interface.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[EnumerationEnum17],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:type'
        ),
    ] = None
    """
    type of mac addresses in the system
    """
    active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of entries of this type on the sub-interface
    """
    total_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:total-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs of this type , active and inactive, on the sub-interface.
    """
    failed_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:failed-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs of this type, which have not been programmed on atleast one slot
    """


class MacTypeListEntry3(BaseModel):
    """
    the type of the mac on the sub-interface.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[EnumerationEnum17],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:type'
        ),
    ] = None
    """
    type of mac addresses in the system
    """
    active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of entries of this type on the sub-interface
    """
    total_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:total-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs of this type , active and inactive, on the sub-interface.
    """
    failed_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:failed-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs of this type, which have not been programmed on atleast one slot
    """


class MacTypeListEntry4(BaseModel):
    """
    the type of the mac installed in the fib.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[EnumerationEnum17],
        Field(alias='srl_nokia-bridge-table-mac-table:type'),
    ] = None
    """
    type of mac addresses in the system
    """
    active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-mac-table:active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of entries of this type that are active in the mac-table.
    """
    total_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-mac-table:total-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs of this type , active and inactive, that are present in the mac-table.
    """
    failed_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-mac-table:failed-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs of this type, which have not been programmed on atleast one slot
    """


class MacTypeListEntry5(BaseModel):
    """
    the type of the mac on the sub-interface.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[EnumerationEnum17],
        Field(alias='srl_nokia-connection-point-bridge-table-statistics:type'),
    ] = None
    """
    type of mac addresses in the system
    """
    active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-connection-point-bridge-table-statistics:active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of entries of this type on the sub-interface
    """
    total_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-connection-point-bridge-table-statistics:total-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs of this type , active and inactive, on the sub-interface.
    """
    failed_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-connection-point-bridge-table-statistics:failed-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs of this type, which have not been programmed on atleast one slot
    """


class MacListEntry(BaseModel):
    """
    macs learnt on the bridging instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The mac-address type represents an IEEE 802 MAC address.
    The canonical representation uses lowercase characters.

    In the value set and its semantics, this type is equivalent
    to the MacAddress textual convention of the SMIv2.
    """
    type: Annotated[
        Optional[EnumerationEnum17],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:type'
        ),
    ] = None
    """
    the type of the mac installed in the fib.
    """
    last_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:last-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this mac
    """
    not_programmed_reason: Annotated[
        Optional[EnumerationEnum19],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:not-programmed-reason'
        ),
    ] = None
    """
    The reason why the mac is not programmed
    """
    failed_slots: Annotated[
        Optional[List[FailedSlotsLeafList]],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:failed-slots'
        ),
    ] = []
    """
    The list of slot IDs corresponding to the linecards that did not successfully program the mac
    """


class MacListEntry10(BaseModel):
    """
    macs learnt on the bridging instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-connection-point-bridge-table-mac-table:address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The mac-address type represents an IEEE 802 MAC address.
    The canonical representation uses lowercase characters.

    In the value set and its semantics, this type is equivalent
    to the MacAddress textual convention of the SMIv2.
    """
    type: Annotated[
        Optional[EnumerationEnum17],
        Field(alias='srl_nokia-connection-point-bridge-table-mac-table:type'),
    ] = None
    """
    the type of the mac installed in the fib.
    """
    last_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-connection-point-bridge-table-mac-table:last-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this mac
    """
    not_programmed_reason: Annotated[
        Optional[EnumerationEnum307],
        Field(
            alias='srl_nokia-connection-point-bridge-table-mac-table:not-programmed-reason'
        ),
    ] = None
    """
    The reason why the mac is not programmed
    """
    failed_slots: Annotated[
        Optional[List[FailedSlotsLeafList4]],
        Field(alias='srl_nokia-connection-point-bridge-table-mac-table:failed-slots'),
    ] = []
    """
    The list of slot IDs corresponding to the linecards that did not successfully program the mac
    """


class MacListEntry2(BaseModel):
    """
    macs learnt on the bridging instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The mac-address type represents an IEEE 802 MAC address.
    The canonical representation uses lowercase characters.

    In the value set and its semantics, this type is equivalent
    to the MacAddress textual convention of the SMIv2.
    """
    type: Annotated[
        Optional[EnumerationEnum17],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:type'
        ),
    ] = None
    """
    the type of the mac installed in the fib.
    """
    last_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:last-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this mac
    """
    not_programmed_reason: Annotated[
        Optional[EnumerationEnum20],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:not-programmed-reason'
        ),
    ] = None
    """
    The reason why the mac is not programmed
    """
    failed_slots: Annotated[
        Optional[List[FailedSlotsLeafList2]],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:failed-slots'
        ),
    ] = []
    """
    The list of slot IDs corresponding to the linecards that did not successfully program the mac
    """


class MacListEntry4(BaseModel):
    """
    macs duplicate on the bridging instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-mac-duplication-entries:address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The mac-address type represents an IEEE 802 MAC address.
    The canonical representation uses lowercase characters.

    In the value set and its semantics, this type is equivalent
    to the MacAddress textual convention of the SMIv2.
    """
    destination_type: Annotated[
        Optional[EnumerationEnum269],
        Field(alias='srl_nokia-bridge-table-mac-duplication-entries:destination-type'),
    ] = None
    """
    the type of the destination the duplicate mac is installed against in the fdb.
    """
    destination_index: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-mac-duplication-entries:destination-index',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    A system-wide unique identifier of a subinterface object (system allocated).
    """
    dup_detect_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-mac-duplication-entries:dup-detect-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time when the mac was declared duplicate
    """
    hold_down_time_remaining: Annotated[
        Optional[Union[EnumerationEnum270, HoldDownTimeRemainingLeaf1]],
        Field(
            alias='srl_nokia-bridge-table-mac-duplication-entries:hold-down-time-remaining'
        ),
    ] = None
    """
    remaining hold down time for duplicate mac
    """
    destination: Annotated[
        Optional[str],
        Field(alias='srl_nokia-bridge-table-mac-duplication-entries:destination'),
    ] = None
    """
    the name of the destination the duplicate mac is installed against in the fdb.
    """


class MacListEntry5(BaseModel):
    """
    static macs configured on the bridging instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-static-mac:address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The mac-address type represents an IEEE 802 MAC address.
    The canonical representation uses lowercase characters.

    In the value set and its semantics, this type is equivalent
    to the MacAddress textual convention of the SMIv2.
    """
    destination: Annotated[
        Union[EnumerationEnum291, NameType, str],
        Field(alias='srl_nokia-bridge-table-static-mac:destination'),
    ]
    """
    The destination against which the mac is programmed

    This parameter is mandatory and may be configured as a subinterface, a blackhole or a connection-point.
    When a connection-point is configured as destination, the name of the connection-point is given
    as input, as follows: 'destination <name>'.
    """


class MacListEntry6(BaseModel):
    """
    macs learnt on the bridging instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-mac-table:address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The mac-address type represents an IEEE 802 MAC address.
    The canonical representation uses lowercase characters.

    In the value set and its semantics, this type is equivalent
    to the MacAddress textual convention of the SMIv2.
    """
    destination_type: Annotated[
        Optional[EnumerationEnum269],
        Field(alias='srl_nokia-bridge-table-mac-table:destination-type'),
    ] = None
    """
    the type of the destination the mac installed against in the fdb.
    """
    destination_index: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-mac-table:destination-index',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    A system-wide unique identifier of a subinterface object (system allocated).
    """
    type: Annotated[
        Optional[EnumerationEnum17],
        Field(alias='srl_nokia-bridge-table-mac-table:type'),
    ] = None
    """
    the type of the mac installed in the fib.
    """
    last_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-mac-table:last-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this mac
    """
    not_programmed_reason: Annotated[
        Optional[EnumerationEnum292],
        Field(alias='srl_nokia-bridge-table-mac-table:not-programmed-reason'),
    ] = None
    """
    The reason why the mac is not programmed
    """
    failed_slots: Annotated[
        Optional[List[FailedSlotsLeafList3]],
        Field(alias='srl_nokia-bridge-table-mac-table:failed-slots'),
    ] = []
    """
    The list of slot IDs corresponding to the linecards that did not successfully program the mac
    """
    destination: Annotated[
        Optional[str], Field(alias='srl_nokia-bridge-table-mac-table:destination')
    ] = None
    """
    the name of the destination where the mac is programmed against.
    """
    is_protected: Annotated[
        Optional[bool], Field(alias='srl_nokia-bridge-table-mac-table:is-protected')
    ] = None
    """
    Indicates if the mac is protected in the hardware.
    """


class MappingsContainer(BaseModel):
    """
    A list of source specific multicast (SSM) mappings
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group_range: Annotated[
        Optional[List[GroupRangeListEntry2]], Field(alias='srl_nokia-mld:group-range')
    ] = None


class MappingsContainer2(BaseModel):
    """
    A list of source specific multicast (SSM) mappings
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group_range: Annotated[
        Optional[List[GroupRangeListEntry3]], Field(alias='srl_nokia-mld:group-range')
    ] = None


class MappingsContainer3(BaseModel):
    """
    A list of source specific multicast (SSM) mappings
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group_range: Annotated[
        Optional[List[GroupRangeListEntry5]], Field(alias='srl_nokia-igmp:group-range')
    ] = None


class MappingsContainer4(BaseModel):
    """
    A list of source specific multicast (SSM) mappings
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group_range: Annotated[
        Optional[List[GroupRangeListEntry6]], Field(alias='srl_nokia-igmp:group-range')
    ] = None


class MatchListEntry(BaseModel):
    """
    List of prefix and group-id combinations from which incoming TCP connections to port 179 will be accepted

    An incoming TCP connection to port 179 is matched to a list entry if:
    (a) the source IP does not match a configured BGP neighbor address
    (b) the list entry prefix is the longest prefix match of the source IP.
    (c) the source IP is not an IPv6 link-local address associated with an (unnumbered) interface configured for dynamic-neighbor sessions.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-bgp:prefix'),
    ] = None
    """
    The IP prefix used to match an incoming dynamic BGP session to a group.
    """
    allowed_peer_as: Annotated[
        Optional[List[AllowedPeerAsLeafList]],
        Field(alias='srl_nokia-bgp:allowed-peer-as'),
    ] = []
    """
    The allowed AS numbers that can establish incoming BGP sessions from this prefix and group-id-range combination

    If the OPEN message from a peer matched to this prefix contains a MyAS number that is not in this allowed list then a NOTIFICATION is sent to the peer with the indication Bad Peer AS. Each entry in this list can be a single AS number or a range of AS numbers in the format as1..as2
    """
    peer_group: Annotated[
        str,
        Field(
            alias='srl_nokia-bgp:peer-group',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ]
    """
    Reference to a peer-group

    When an incoming session is matched to this list entry it is associated with the peer-group referenced by this leaf. The peer-group provides all the parameters needed to complete the establishment of the dynamic session. If the referenced peer-group has a configured peer-as this is ignored by dynamic BGP sessions using the group as a template.
    """


class MbbContainer(BaseModel):
    """
    The make-before-break operational information.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    last_mbb: Annotated[
        Optional[LastMbbContainer], Field(alias='srl_nokia-te-policies:last-mbb')
    ] = None
    in_progress_mbb: Annotated[
        Optional[InProgressMbbContainer],
        Field(alias='srl_nokia-te-policies:in-progress-mbb'),
    ] = None


class MbbContainer2(BaseModel):
    """
    The make-before-break operational information.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    last_mbb: Annotated[
        Optional[LastMbbContainer2], Field(alias='srl_nokia-te-policies:last-mbb')
    ] = None
    in_progress_mbb: Annotated[
        Optional[InProgressMbbContainer2],
        Field(alias='srl_nokia-te-policies:in-progress-mbb'),
    ] = None


class MldpContainer(BaseModel):
    """
    multipoint ldp for provider tunnel
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-mvpn-l3:admin-state')
    ] = 'disable'
    """
    Administratively enable or disable mldp as a provider tunnel
    """


class MldpContainer3(BaseModel):
    """
    multipoint ldp for provider tunnel
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-mvpn-l3:admin-state')
    ] = 'disable'
    """
    Administratively enable or disable mldp as a provider tunnel
    """


class MplsContainer6(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    pushed_mpls_label_stack: Annotated[
        Optional[List[Union[MplsLabelNonReservedType, EnumerationEnum95]]],
        Field(alias='srl_nokia-ip-route-tables:pushed-mpls-label-stack'),
    ] = []
    """
    The list of MPLS labels to push onto the packet when forwarding to this particular next-hop.
    """
    entropy_label_transmit: Annotated[
        Optional[bool], Field(alias='srl_nokia-ip-route-tables:entropy-label-transmit')
    ] = None
    """
    Entropy label (EL/ELI) is pushed when transmitting to this next-hop
    """


class MplsContainer7(BaseModel):
    """
    The container for the MPLS routing table of the network instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    label_entry: Annotated[
        Optional[List[LabelEntryListEntry]],
        Field(alias='srl_nokia-mpls-route-tables:label-entry'),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer36],
        Field(alias='srl_nokia-mpls-route-tables:statistics'),
    ] = None


class MsdInfoListEntry(BaseModel):
    """
    List of MSD entries
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    msd_type: Annotated[
        Optional[Union[EnumerationEnum197, MsdTypeLeaf1]],
        Field(alias='srl_nokia-isis:msd-type'),
    ] = None
    """
    MSD type
    """
    msd_value: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:msd-value', ge=0, le=255)
    ] = None
    """
    A number in the range of 0-255 representing the maximum SID depth; for all MSD-Types, 0 represents the lack of ability to support a SID stack of any depth
    """


class MsdInfoListEntry2(BaseModel):
    """
    List of MSD entries
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    msd_type: Annotated[
        Optional[Union[EnumerationEnum201, MsdTypeLeaf21]],
        Field(alias='srl_nokia-isis:msd-type'),
    ] = None
    """
    MSD type
    """
    msd_value: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:msd-value', ge=0, le=255)
    ] = None
    """
    A number in the range of 0-255 representing the maximum SID depth; for all MSD-Types, 0 represents the lack of ability to support a SID stack of any depth
    """


class MsdInfoListEntry3(BaseModel):
    """
    List of MSD entries
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    msd_type: Annotated[
        Optional[Union[EnumerationEnum204, MsdTypeLeaf31]],
        Field(alias='srl_nokia-isis:msd-type'),
    ] = None
    """
    MSD type
    """
    msd_value: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:msd-value', ge=0, le=255)
    ] = None
    """
    A number in the range of 0-255 representing the maximum SID depth; for all MSD-Types, 0 represents the lack of ability to support a SID stack of any depth
    """


class MstInstanceListEntry(BaseModel):
    """
    MST instance used by this mstp-global
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mst_instance: Annotated[
        Optional[int], Field(alias='srl_nokia-stp:mst-instance', ge=0, le=4294967295)
    ] = None
    """
    Key of type uint32
    """
    mst_priority: Annotated[
        Optional[int], Field(alias='srl_nokia-stp:mst-priority', ge=4, le=20)
    ] = None
    """
    Multiple Spanning Tree instance bridge priority the bridge-priority
    for this specific mst-instance. It follows the same rules as
    bridge-priority. For the CIST, the bridge-priority is used.
    """
    mst_vlan_range: Annotated[
        Optional[List[MstVlanRangeListEntry]],
        Field(alias='srl_nokia-stp:mst-vlan-range'),
    ] = None


class MtIpv4ReachabilityListEntry(BaseModel):
    """
    TLV specifying multi-topology IPv4 reachability information in the LSP. TLV type = 235
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv4-prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$',
        ),
    ] = None
    """
    An IPv4 prefix that is reachable to the router.
    """
    mt_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:mt-id', ge=0, le=4095)
    ] = None
    """
    A multi-topology ID.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=0, le=16777215)
    ] = None
    """
    The default metric to reach the IPv4 prefix.
    """
    down: Annotated[Optional[bool], Field(alias='srl_nokia-isis:down')] = None
    """
    Reads true when the IPv4 prefix was leaked down from Level2 to Level1.
    """
    sub_tlvs: Annotated[
        Optional[SubTlvsContainer5], Field(alias='srl_nokia-isis:sub-tlvs')
    ] = None


class MtIpv6ReachabilityListEntry(BaseModel):
    """
    TLV specifying IPv6 Reachability information in the LSP. TLV type = 237
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv6_prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv6-prefix',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))$).*$',
        ),
    ] = None
    """
    An IPv6 prefix that is reachable to the router.
    """
    mt_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:mt-id', ge=0, le=4095)
    ] = None
    """
    A multi-topology ID.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=0, le=16777215)
    ] = None
    """
    The metric to reach this IPv6 prefix.
    """
    external: Annotated[Optional[bool], Field(alias='srl_nokia-isis:external')] = None
    """
    Reads true when the IPv6 prefix reachability is external (learned from another protocol).
    """
    down: Annotated[Optional[bool], Field(alias='srl_nokia-isis:down')] = None
    """
    Reads true when the IPv6 prefix was leaked down from Level2 to Level1.
    """
    sub_tlvs: Annotated[
        Optional[SubTlvsContainer6], Field(alias='srl_nokia-isis:sub-tlvs')
    ] = None


class MultiHomedPrefixContainer(BaseModel):
    """
    Multi-homed-prefix context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-isis:admin-state')
    ] = 'disable'
    """
    When set, multi-homed prefix context is enabled for
    the ISIS instance
    """
    preference: Annotated[
        Optional[EnumerationEnum136], Field(alias='srl_nokia-isis:preference')
    ] = 'none'
    """
    Backup preference of a multi-homed prefix
    """


class MulticastRoutersListEntry(BaseModel):
    """
    Enter the multicast-router list instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The source IP address used by queries sent out by this multicast router
    """
    version: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp-snooping:version', ge=1, le=3)
    ] = None
    """
    The version of the protocol that is sent by this multicast router
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time since this multicast router has been known in this service
    """
    expiry_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:expiry-time', ge=0, le=4294967295),
    ] = None
    """
    The time remaining before this multicast router is aged out
    """
    igmp_v3_states: Annotated[
        Optional[IgmpV3StatesContainer2],
        Field(alias='srl_nokia-igmp-snooping:igmp-v3-states'),
    ] = None
    interface: Annotated[
        Optional[str], Field(alias='srl_nokia-igmp-snooping:interface')
    ] = None
    """
    Interface behind which this multicast router is located
    """


class MulticastRoutersListEntry2(BaseModel):
    """
    Enter the multicast-router list instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    The source IP address used by queries sent out by this multicast router
    """
    version: Annotated[
        Optional[int], Field(alias='srl_nokia-mld-snooping:version', ge=1, le=2)
    ] = None
    """
    The version of the protocol that is sent by this multicast router
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time since this multicast router has been known in this service
    """
    expiry_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:expiry-time', ge=0, le=4294967295),
    ] = None
    """
    The time remaining before this multicast router is aged out
    """
    mld_v2_states: Annotated[
        Optional[MldV2StatesContainer2],
        Field(alias='srl_nokia-mld-snooping:mld-v2-states'),
    ] = None
    interface: Annotated[
        Optional[str], Field(alias='srl_nokia-mld-snooping:interface')
    ] = None
    """
    Interface behind which this multicast router is located
    """


class MulticastStatesContainer(BaseModel):
    """
    Multicast state count for this network instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    star_group_entries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld:star-group-entries', ge=0, le=4294967295),
    ] = 0
    """
    The number of (*,G)s
    """
    source_group_entries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld:source-group-entries', ge=0, le=4294967295),
    ] = 0
    """
    The number of (S,G)s
    """


class MulticastStatesContainer2(BaseModel):
    """
    Multicast state count for this network instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    star_group_entries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:star-group-entries', ge=0, le=4294967295),
    ] = 0
    """
    The number of (*,G)s
    """
    source_group_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:source-group-entries', ge=0, le=4294967295
        ),
    ] = 0
    """
    The number of (S,G)s
    """


class MulticastStatesContainer3(BaseModel):
    """
    Multicast state count for this network instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    star_group_entries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:star-group-entries', ge=0, le=4294967295),
    ] = 0
    """
    The number of (*,G)s
    """
    source_group_entries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:source-group-entries', ge=0, le=4294967295),
    ] = 0
    """
    The number of (S,G)s
    """


class MulticastStatesContainer4(BaseModel):
    """
    Multicast state count for this network instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    star_group_entries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp:star-group-entries', ge=0, le=4294967295),
    ] = 0
    """
    The number of (*,G)s
    """
    source_group_entries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp:source-group-entries', ge=0, le=4294967295),
    ] = 0
    """
    The number of (S,G)s
    """


class MultihopContainer(BaseModel):
    """
    Configuration parameters specifying the multihop behaviour for IBGP and EBGP peers in the peer group.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = None
    """
    When enabled, IBGP and EBGP peers in the group are allowed to be indirectly connected by up to N hops, where N is controlled by the maximum-hops parameter. When disabled, only IBGP peers within the peer group support multihop.

    This can be overriden on a per neighbor basis. It is inherited by neighbors in the peer-group only if maximum-hops is also specified.

    By default this is disabled.
    """
    maximum_hops: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:maximum-hops', ge=1, le=255)
    ] = None
    """
    This sets the maximum number of routing hops towards each peer. It determines the IP TTL value in originated BGP TCP/IP packets. By default the TTL is set to 1 towards EBGP peers and 64 towards IBGP peers. This leaf sets a new IP TTL to use towards both EBGP and IBGP peers in the peer group.

    This can be overriden on a per neighbor basis. It is inherited by neighbors in the peer-group only if admin-state is also specified.
    """


class MultihopContainer2(BaseModel):
    """
    Configuration parameters specifying the multihop behaviour for an EBGP peer. This is not applicable to an IBGP peer.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = None
    """
    When enabled, the peer is allowed to be indirectly connected by up to N hops, where N is controlled by the maximum-hops parameter. When disabled, multihop is allowed only if the peer type is IBGP.

    This overrides the group setting for admin-state.
    """
    maximum_hops: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:maximum-hops', ge=1, le=255)
    ] = None
    """
    This sets the maximum number of routing hops towards the peer. It determines the IP TTL value in originated BGP TCP/IP packets. By default the TTL is set to 1 towards an EBGP peer and 64 towards an IBGP peer.

    This overrides the group setting for maximum-hops.
    """


class NdkLabelBlockListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    application_name: Annotated[
        Optional[str], Field(alias='srl_nokia-mpls:application-name')
    ] = None
    static_label_block: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mpls:static-label-block',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The name of the static label block
    """
    static_label_block_status: Annotated[
        Optional[EnumerationEnum321],
        Field(alias='srl_nokia-mpls:static-label-block-status'),
    ] = None
    """
    Status of the label block.

    The label block may show as unavailable if there is pending cleanup.
    """


class NeighborOriginListEntry(BaseModel):
    """
    The origin of the proxy entry installed in the table
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    origin: Annotated[
        Optional[EnumerationEnum280],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:origin'),
    ] = None
    """
    The origin of the neighbor entry.
    """
    total_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:total-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of proxy ARP entries.
    """
    active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of active proxy ARP entries.
    """
    in_active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:in-active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of inactive proxy ARP entries.
    """
    pending_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:pending-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of pending proxy ARP entries.
    """


class NeighborOriginListEntry2(BaseModel):
    """
    The origin of the proxy entry installed in the table
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    origin: Annotated[
        Optional[EnumerationEnum280],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:origin'),
    ] = None
    """
    The origin of the neighbor entry.
    """
    total_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:total-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of proxy ARP entries.
    """
    active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of active proxy ARP entries.
    """
    in_active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:in-active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of inactive proxy ARP entries.
    """
    pending_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:pending-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of pending proxy ARP entries.
    """


class NeighborListEntry10(BaseModel):
    """
    List of static proxy ARP entries that map an IPv4 address to a MAC address

    To configure a static proxy ARP entry a value must be written into this leaf, as well as the link-layer-address leaf.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:ipv4-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    IPv4 address resolved by the proxy ARP entry

    To configure a static neighbor entry a value must be written into this leaf, as well as the link-layer-address leaf.
    """
    link_layer_address: Annotated[
        str,
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:link-layer-address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ]
    """
    The resolving MAC address of the proxy entry

    To configure a static proxy entry a value must be written into this leaf and the ip-address leaf.
    """
    last_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:last-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this proxy entry
    """
    state: Annotated[
        Optional[EnumerationEnum277],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:state'),
    ] = None
    """
    The state of the proxy entry
    """
    is_immutable: Annotated[
        Optional[bool], Field(alias='srl_nokia-bridge-table-proxy-arp-nd:is-immutable')
    ] = False
    """
    The immutable property of the proxy entry
    """


class NeighborListEntry11(BaseModel):
    """
    List of duplicate proxy ARP entries.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:ipv4-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    IPv4 address of the proxy ARP entry
    """
    link_layer_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:link-layer-address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The resolving MAC address of the proxy entry
    """
    detect_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:detect-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time when the proxy entry was declared duplicate
    """
    hold_down_time_remaining: Annotated[
        Optional[Union[EnumerationEnum278, HoldDownTimeRemainingLeaf21]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:hold-down-time-remaining'),
    ] = None
    """
    Remaining hold down time for the duplicate proxy entry
    """
    state: Annotated[
        Optional[EnumerationEnum277],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:state'),
    ] = None
    """
    The state of the proxy entry
    """
    is_immutable: Annotated[
        Optional[bool], Field(alias='srl_nokia-bridge-table-proxy-arp-nd:is-immutable')
    ] = False
    """
    The immutable property of the proxy entry
    """


class NeighborListEntry12(BaseModel):
    """
    List of dynamic proxy ARP entries
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:ipv4-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    IPv4 address of the proxy ARP entry
    """
    link_layer_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:link-layer-address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The resolving MAC address of the proxy entry
    """
    last_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:last-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this proxy entry
    """
    aging: Annotated[
        Optional[Union[AgingLeaf21, EnumerationEnum279]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:aging'),
    ] = None
    """
    The remaining age time for learnt proxy entry
    """
    state: Annotated[
        Optional[EnumerationEnum277],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:state'),
    ] = None
    """
    The state of the proxy entry
    """
    is_immutable: Annotated[
        Optional[bool], Field(alias='srl_nokia-bridge-table-proxy-arp-nd:is-immutable')
    ] = False
    """
    The immutable property of the proxy entry
    """


class NeighborListEntry13(BaseModel):
    """
    List of static and dynamic proxy ARP entries that map an IPv4 address to a MAC address
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:ipv4-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    IPv4 address resolved by the proxy ARP entry
    """
    link_layer_address: Annotated[
        str,
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:link-layer-address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ]
    """
    The resolving MAC address of the proxy entry
    """
    origin: Annotated[
        Optional[EnumerationEnum280],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:origin'),
    ] = None
    """
    The origin of the proxy entry
    """
    last_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:last-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this proxy entry
    """
    state: Annotated[
        Optional[EnumerationEnum277],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:state'),
    ] = None
    """
    The state of the proxy entry
    """
    is_immutable: Annotated[
        Optional[bool], Field(alias='srl_nokia-bridge-table-proxy-arp-nd:is-immutable')
    ] = False
    """
    The immutable property of the proxy entry
    """


class NeighborListEntry14(BaseModel):
    """
    List of EVPN proxy ARP entries.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:ipv4-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    IPv4 address of the proxy ARP entry
    """
    link_layer_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:link-layer-address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The resolving MAC address of the proxy entry
    """
    last_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:last-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this proxy entry
    """
    state: Annotated[
        Optional[EnumerationEnum277],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:state'),
    ] = None
    """
    The state of the proxy entry
    """
    is_immutable: Annotated[
        Optional[bool], Field(alias='srl_nokia-bridge-table-proxy-arp-nd:is-immutable')
    ] = False
    """
    The immutable property of the proxy entry
    """


class NeighborListEntry15(BaseModel):
    """
    List of static proxy ND entries that map an IPv6 address to a MAC address

    To configure a static proxy ND entry a value must be written into this leaf, as well as the link-layer-address leaf.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv6_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:ipv6-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    IPv6 address resolved by the proxy ND entry

    To configure a static neighbor entry a value must be written into this leaf, as well as the link-layer-address leaf.
    """
    link_layer_address: Annotated[
        str,
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:link-layer-address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ]
    """
    The resolving MAC address of the proxy entry

    To configure a static proxy entry a value must be written into this leaf and the ip-address leaf.
    """
    last_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:last-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this proxy entry
    """
    state: Annotated[
        Optional[EnumerationEnum277],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:state'),
    ] = None
    """
    The state of the proxy entry
    """
    is_immutable: Annotated[
        Optional[bool], Field(alias='srl_nokia-bridge-table-proxy-arp-nd:is-immutable')
    ] = False
    """
    The immutable property of the proxy entry
    """
    type: Annotated[
        Optional[EnumerationEnum288],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:type'),
    ] = 'router'
    """
    The type of the neighbor entry
    """
    evpn_override: Annotated[
        Optional[bool], Field(alias='srl_nokia-bridge-table-proxy-arp-nd:evpn-override')
    ] = False
    """
    The evpn-override property of the proxy entry
    """


class NeighborListEntry16(BaseModel):
    """
    List of duplicate proxy ND entries
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv6_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:ipv6-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    IPv6 address of the proxy ND entry
    """
    link_layer_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:link-layer-address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The resolving MAC address of the proxy entry
    """
    detect_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:detect-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time when the proxy entry was declared duplicate
    """
    hold_down_time_remaining: Annotated[
        Optional[Union[EnumerationEnum289, HoldDownTimeRemainingLeaf31]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:hold-down-time-remaining'),
    ] = None
    """
    Remaining hold down time for the duplicate proxy entry
    """
    state: Annotated[
        Optional[EnumerationEnum277],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:state'),
    ] = None
    """
    The state of the proxy entry
    """
    is_immutable: Annotated[
        Optional[bool], Field(alias='srl_nokia-bridge-table-proxy-arp-nd:is-immutable')
    ] = False
    """
    The immutable property of the proxy entry
    """
    type: Annotated[
        Optional[EnumerationEnum288],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:type'),
    ] = None
    """
    The type of the neighbor entry
    """
    evpn_override: Annotated[
        Optional[bool], Field(alias='srl_nokia-bridge-table-proxy-arp-nd:evpn-override')
    ] = False
    """
    The evpn-override property of the proxy entry
    """


class NeighborListEntry17(BaseModel):
    """
    List of dynamic proxy ND entries
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv6_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:ipv6-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    IPv6 address of the proxy ND entry
    """
    link_layer_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:link-layer-address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The resolving MAC address of the proxy entry
    """
    last_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:last-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this proxy entry
    """
    aging: Annotated[
        Optional[Union[AgingLeaf31, EnumerationEnum290]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:aging'),
    ] = None
    """
    The remaining age time for learnt proxy entry
    """
    state: Annotated[
        Optional[EnumerationEnum277],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:state'),
    ] = None
    """
    The state of the proxy entry
    """
    is_immutable: Annotated[
        Optional[bool], Field(alias='srl_nokia-bridge-table-proxy-arp-nd:is-immutable')
    ] = False
    """
    The immutable property of the proxy entry
    """
    type: Annotated[
        Optional[EnumerationEnum288],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:type'),
    ] = None
    """
    The type of the neighbor entry
    """
    evpn_override: Annotated[
        Optional[bool], Field(alias='srl_nokia-bridge-table-proxy-arp-nd:evpn-override')
    ] = False
    """
    The evpn-override property of the proxy entry
    """


class NeighborListEntry18(BaseModel):
    """
    List of proxy ND entries that map an IPv6 address to a MAC address
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv6_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:ipv6-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    IPv6 address resolved by the proxy ND entry
    """
    link_layer_address: Annotated[
        str,
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:link-layer-address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ]
    """
    The resolving MAC address of the proxy entry
    """
    origin: Annotated[
        Optional[EnumerationEnum280],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:origin'),
    ] = None
    """
    The origin of the proxy entry
    """
    last_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:last-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this proxy entry
    """
    state: Annotated[
        Optional[EnumerationEnum277],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:state'),
    ] = None
    """
    The state of the proxy entry
    """
    is_immutable: Annotated[
        Optional[bool], Field(alias='srl_nokia-bridge-table-proxy-arp-nd:is-immutable')
    ] = False
    """
    The immutable property of the proxy entry
    """
    type: Annotated[
        Optional[EnumerationEnum288],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:type'),
    ] = None
    """
    The type of the neighbor entry
    """
    evpn_override: Annotated[
        Optional[bool], Field(alias='srl_nokia-bridge-table-proxy-arp-nd:evpn-override')
    ] = False
    """
    The evpn-override property of the proxy entry
    """


class NeighborListEntry19(BaseModel):
    """
    List of EVPN proxy ND entries.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv6_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:ipv6-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    IPv6 address of the proxy ND entry
    """
    link_layer_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:link-layer-address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The resolving MAC address of the proxy entry
    """
    last_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:last-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this proxy entry
    """
    state: Annotated[
        Optional[EnumerationEnum277],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:state'),
    ] = None
    """
    The state of the proxy entry
    """
    is_immutable: Annotated[
        Optional[bool], Field(alias='srl_nokia-bridge-table-proxy-arp-nd:is-immutable')
    ] = False
    """
    The immutable property of the proxy entry
    """
    type: Annotated[
        Optional[EnumerationEnum288],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:type'),
    ] = None
    """
    The type of the neighbor entry
    """
    evpn_override: Annotated[
        Optional[bool], Field(alias='srl_nokia-bridge-table-proxy-arp-nd:evpn-override')
    ] = False
    """
    The evpn-override property of the proxy entry
    """


class NeighborListEntry2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-pim:address'),
    ] = None
    """
    IP address of a neighbor router
    """
    dr_priority: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:dr-priority', ge=0, le=4294967295)
    ] = None
    """
    The dr-priority value received on hello message

    This value indicates neighbor's DR priority which is received in the hello message.
    If the Hello Message did not contain the Designated Router (DR) priority field, the value of priority will be '1'.
    """
    dr_priority_present: Annotated[
        Optional[bool], Field(alias='srl_nokia-pim:dr-priority-present')
    ] = None
    """
    Indication of existence of DR priority on received hello message

    This value of indicates whether the DR priority field was present in the Hello message received from the PIM neighbor.
    """
    tracking_support: Annotated[
        Optional[bool], Field(alias='srl_nokia-pim:tracking-support')
    ] = None
    """
    Indication of existence of tracking-support on received hello message

    This value indicates whether the T bit in the LAN Prune Delay option was present in the Hello message.
    This indicates the neighbor's capability to disable Join message suppression.
    """
    lan_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:lan-delay', ge=0, le=4294967295)
    ] = None
    """
    The lan-delay value on received hello message

    This value indicates the value of lan delay field present in the Hello message received from the neighbor. 
    """
    lan_delay_present: Annotated[
        Optional[bool], Field(alias='srl_nokia-pim:lan-delay-present')
    ] = None
    """
    Indication of existence of Lan Delay on received hello message

    This value indicates whether the Hello message received from the neighbor contained the Lan Delay field.
    """
    generated_id: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:generated-id', ge=0, le=4294967295)
    ] = None
    """
    The Gen-Id value on the received hello message

    This value indicates a randomly generated 32-bit value that is regenerated each time PIM forwarding is started or restarted on the interface, including when the router itself restarts.
    """
    override_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:override-interval', ge=0, le=4294967295),
    ] = None
    """
    The override interval on the received hello message

    This value indicates the value of the override interval present in the Hello message.
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-pim:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time since when the neighbor has come up

    This value indicates the time since this PIM neighbor (last) became a neighbor of the local router.
    """
    expiry_time: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:expiry-time', ge=0, le=4294967295)
    ] = None
    """
    The time until the expiry of this neighbor

    This value indicates the minimum time remaining before this PIM neighbor will be aged out.
    """
    hold_time: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:hold-time', ge=0, le=4294967295)
    ] = None
    """
    This value indicates the value of the hold time present in the Hello message
    """
    join_attribute_support: Annotated[
        Optional[bool], Field(alias='srl_nokia-pim:join-attribute-support')
    ] = None
    """
    Existence of Join-attribute in the received hello message

    This value indicates whether the Hello Message received from the neighbor contained the Join Attribute field.
    """


class NeighborListEntry9(BaseModel):
    """
    List of neighbors associated with this OSPF interface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:router-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The router-id advertised by the neighbor
    """
    address: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-ospf:address'),
    ] = None
    """
    the value of address indicates the IP address of the neighbor associated with the local link.
    """
    priority: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:priority', ge=0, le=255)
    ] = None
    """
    Router priority advertised by neighbor
    """
    dead_time: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:dead-time', ge=0, le=4294967295)
    ] = None
    """
    The remaining number of seconds remaining in the neighbor's dead time interval
    """
    designated_router: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:designated-router',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Advertised designated router
    """
    backup_designated_router: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:backup-designated-router',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Advertised backup designated router
    """
    optional_capabilities: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:optional-capabilities',
            pattern='^(?=^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?$).*$',
        ),
    ] = None
    """
    Advertised Optional Capabilities
    """
    last_established_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:last-established-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time then OSPF neighbor was last established
    """
    adjacency_state: Annotated[
        Optional[str], Field(alias='srl_nokia-ospf:adjacency-state')
    ] = None
    """
    Current OSPF Neighbor state
    """
    state_changes: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:state-changes', ge=0, le=4294967295)
    ] = None
    """
    total numer of OSPF state changes
    """
    retransmission_queue_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:retransmission-queue-length', ge=0, le=4294967295),
    ] = None
    restart_helper_status: Annotated[
        Optional[EnumerationEnum227],
        Field(alias='srl_nokia-ospf:restart-helper-status'),
    ] = None
    """
    the value of restart-helper-status indicates whether the router is acting as a graceful restart helper for the neighbor.
    """
    restart_helper_age: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:restart-helper-age', ge=0, le=1800)
    ] = None
    """
    the value of restart-helper-age indicates the remaining time in the current OSPF graceful restart interval, if the router is acting as a restart helper for the neighbor.
    """
    restart_helper_exit_rc: Annotated[
        Optional[EnumerationEnum228],
        Field(alias='srl_nokia-ospf:restart-helper-exit-rc'),
    ] = None
    """
    the value of restart-helper-exit-rc indicates the outcome of the last attempt at acting as a graceful restart helper for the neighbor. none no restart has yet been attempted. in-progress A restart attempt is currently underway. completed the last restart completed successfully. timed-out the last restart timed out. topology-changed the last restart was aborted due to a topology change.
    """
    last_restart_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:last-restart-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    the value of last-restart-time indicates the last time the neighbor attempted restart.
    """
    restart_reason: Annotated[
        Optional[Union[RestartReasonTypeType1, EnumerationEnum229]],
        Field(alias='srl_nokia-ospf:restart-reason'),
    ] = None
    """
    the value of restart-reason indicates the OSPF neighbor's graceful restart reason.
    """
    up_time: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:up-time', ge=0, le=2147483647)
    ] = None
    """
    the value of up-time indicates the uninterrupted time, in hundredths of seconds, the adjacency to this neighbour has been up.
    """
    last_event_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:last-event-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    the value of last-event-time indicates the value of sys-up-time when the last event occurred that affected the adjacency to the neighbour.
    """
    statistics: Annotated[
        Optional[StatisticsContainer28], Field(alias='srl_nokia-ospf:statistics')
    ] = None


class NeighborsContainer(BaseModel):
    """
    Details about PIM neighbors
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[List[NeighborListEntry2]], Field(alias='srl_nokia-pim:neighbor')
    ] = None


class NextHopGroupListEntry2(BaseModel):
    """
    An individual set of next-hops grouped into a common group

    Each entry within an abstract forwarding table points to a next-hop-group. Traffic is forwarded to the
    next-hops in the next-hop-group according to the weights specified.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    id: Annotated[
        Optional[int], Field(alias='srl_nokia-aft:id', ge=0, le=18446744073709551615)
    ] = None
    """
    A unique identifier for the next-hop-group

    This index is not expected to be consistent across reboots, or reprogramming of the next-hop-group.
    """
    programmed_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-aft:programmed-id', ge=0, le=18446744073709551615),
    ] = None
    """
    The ID of the next-hop group as provided by the original programming mechanism (for example gRIBI)
    """
    backup_next_hop_group: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-aft:backup-next-hop-group', ge=0, le=18446744073709551615
        ),
    ] = None
    """
    The backup next-hop-group for the current group
    """
    next_hop: Annotated[
        Optional[List[NextHopListEntry5]], Field(alias='srl_nokia-aft:next-hop')
    ] = None


class NextHopResolutionContainer(BaseModel):
    """
    Options related to the resolution of IPv4 or IPv6 BGP next-hops to Tunnels
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    allowed_tunnel_types: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-bgp-evpn:allowed-tunnel-types')
    ] = []
    """
    list of allowed tunnel types
    """
    selection_attributes: Annotated[
        Optional[SelectionAttributesContainer],
        Field(alias='srl_nokia-bgp-evpn:selection-attributes'),
    ] = None


class NextHopResolutionContainer2(BaseModel):
    """
    Options related to the resolution of IPv4 or IPv6 BGP next-hops to Tunnels
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    allowed_tunnel_types: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-bgp-ipvpn:allowed-tunnel-types')
    ] = []
    """
    List of allowed tunnel types
    """
    selection_attributes: Annotated[
        Optional[SelectionAttributesContainer2],
        Field(alias='srl_nokia-bgp-ipvpn:selection-attributes'),
    ] = None


class NextHopResolutionContainer4(BaseModel):
    """
    Options for controlling next-hop resolution procedures
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_next_hops: Annotated[
        Optional[Ipv4NextHopsContainer2], Field(alias='srl_nokia-bgp:ipv4-next-hops')
    ] = None
    ipv6_next_hops: Annotated[
        Optional[Ipv6NextHopsContainer2], Field(alias='srl_nokia-bgp:ipv6-next-hops')
    ] = None


class NextHopResolutionContainer6(BaseModel):
    """
    Options for controlling next-hop resolution procedures
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_next_hops: Annotated[
        Optional[Ipv4NextHopsContainer4], Field(alias='srl_nokia-bgp:ipv4-next-hops')
    ] = None
    ipv6_next_hops: Annotated[
        Optional[Ipv6NextHopsContainer4], Field(alias='srl_nokia-bgp:ipv6-next-hops')
    ] = None


class NextHopListEntry(BaseModel):
    """
    List of ECMP next-hops towards the LDP peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    index: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:index', ge=0, le=4294967295)
    ] = None
    """
    Label ID index entry
    """
    next_hop: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-ldp:next-hop'),
    ] = None
    """
    The IP next-hop towards the LDP peer
    """
    next_hop_type: Annotated[
        Optional[EnumerationEnum96], Field(alias='srl_nokia-ldp:next-hop-type')
    ] = None
    """
    Type of next-hop
    """
    interface: Annotated[Optional[str], Field(alias='srl_nokia-ldp:interface')] = None
    """
    The outgoing interface towards the LDP peer
    """
    outer_label: Annotated[
        Optional[Union[MplsLabelNonReservedType, EnumerationEnum95]],
        Field(alias='srl_nokia-ldp:outer-label'),
    ] = None
    """
    Outer label value for RLFA
    """


class NextHopListEntry2(BaseModel):
    """
    List of ECMP next-hops towards the LDP peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    index: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:index', ge=0, le=4294967295)
    ] = None
    """
    Label ID index entry
    """
    next_hop: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-ldp:next-hop'),
    ] = None
    """
    The IP next-hop towards the LDP peer
    """
    next_hop_type: Annotated[
        Optional[EnumerationEnum108], Field(alias='srl_nokia-ldp:next-hop-type')
    ] = None
    """
    Type of next-hop
    """
    interface: Annotated[Optional[str], Field(alias='srl_nokia-ldp:interface')] = None
    """
    The outgoing interface towards the LDP peer
    """
    outer_label: Annotated[
        Optional[Union[MplsLabelNonReservedType, EnumerationEnum95]],
        Field(alias='srl_nokia-ldp:outer-label'),
    ] = None
    """
    Outer label value for RLFA
    """


class NextHopListEntry3(BaseModel):
    """
    List of primary next-hops associated with the NHG
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    id: Annotated[
        Optional[int], Field(alias='srl_nokia-ip-route-tables:id', ge=0, le=1023)
    ] = None
    """
    A unique identifier of a next-hop member (system allocated).
    """
    next_hop: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ip-route-tables:next-hop', ge=0, le=18446744073709551615
        ),
    ] = None
    """
    A system-wide unique identifier of a next-hop object (system allocated).
    """
    weight: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ip-route-tables:weight', ge=0, le=18446744073709551615),
    ] = None
    """
    The configured/programmed weight assigned to the next-hop within the group

    This may be different from the actual weight used by the datapath, which changes depending on the next-hops that are up/down in the group. Traffic is balanced across the next-hops within the group in proportion of the actual weight.
    """
    resolved: Annotated[
        Optional[EnumerationEnum294], Field(alias='srl_nokia-ip-route-tables:resolved')
    ] = None
    """
    Set to true when the next-hop was resolved. This reads not-applicable for resolve=false next-hops.
    """


class NlpidContainer(BaseModel):
    """
    This container defines TLV 129.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    nlpid: Annotated[
        Optional[List[EnumerationEnum159]], Field(alias='srl_nokia-isis:nlpid')
    ] = []
    """
    Protocol supported. IPv4 is defined as (0xcc) and IPv6 -(0x8e)
    """


class NodeMsdContainer(BaseModel):
    """
    Used to carry the provisioned SID depth of the router originating the capability TLV. Node MSD is the smallest MSD supported by the node on the set of interfaces configured for use by the advertising IGP instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    msd_info: Annotated[
        Optional[List[MsdInfoListEntry3]], Field(alias='srl_nokia-isis:msd-info')
    ] = None


class NodeProtectContainer(BaseModel):
    """
    Node protect context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-isis:admin-state')
    ] = 'disable'
    """
    When set, the IS-IS instance enables node protection
    using remote lfa. Remote LFA seeks for a viable P,Q
    intersection that can protect against node failures.
    """
    max_pq_nodes: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:max-pq-nodes', ge=0, le=32)
    ] = 16
    """
    Maximum number of PQ nodes found in the LFA SPFs.
    Value 0 disables node protect
    """


class NodeProtectContainer2(BaseModel):
    """
    Node-protect context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-isis:admin-state')
    ] = 'disable'
    """
    When set to enabled, the IS-IS instance
    enables ti-lfa node protection.
    """


class NonStopForwardingContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-isis:admin-state')
    ] = 'disable'
    """
    Used to administratively enable or disable the IS-IS non-stop forwarding functionality.
    """


class Ospfv3InterAreaPrefixLsaContainer(BaseModel):
    """
    Prefix LSA.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:metric', ge=0, le=4294967295)
    ] = None
    """
    Inter-Area Prefix Metric
    """
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-ospf:prefix'),
    ] = None
    """
    LSA Prefix.
    """
    prefix_options: Annotated[
        Optional[PrefixOptionsContainer3], Field(alias='srl_nokia-ospf:prefix-options')
    ] = None


class Ospfv3IntraAreaPrefixLsaContainer(BaseModel):
    """
    Intra-Area-Prefix LSA.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    referenced_ls_type: Annotated[
        Optional[str], Field(alias='srl_nokia-ospf:referenced-ls-type')
    ] = None
    """
    Referenced Link State type.
    """
    unknown_referenced_ls_type: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:unknown-referenced-ls-type', ge=0, le=65535),
    ] = None
    """
    Value for an unknown Referenced Link State type.
    """
    referenced_link_state_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:referenced-link-state-id', ge=0, le=4294967295),
    ] = None
    """
    Referenced Link State ID.
    """
    referenced_adv_router: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:referenced-adv-router',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Referenced Advertising Router.
    """
    num_of_prefixes: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:num-of-prefixes', ge=0, le=65535)
    ] = None
    """
    Number of prefixes.
    """
    prefixes: Annotated[
        Optional[List[PrefixesListEntry2]], Field(alias='srl_nokia-ospf:prefixes')
    ] = None


class Ospfv3LinkLsaContainer(BaseModel):
    """
    Link LSA.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rtr_priority: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:rtr-priority', ge=0, le=255)
    ] = None
    """
    Router priority for DR election. A router with a
    higher priority will be preferred in the election
    and a value of 0 indicates the router is not
    eligible to become Designated Router or Backup
    Designated Router (BDR).
    """
    lsa_options: Annotated[
        Optional[LsaOptionsContainer], Field(alias='srl_nokia-ospf:lsa-options')
    ] = None
    link_local_interface_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:link-local-interface-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    The originating router's link-local
    interface address for the link.
    """
    num_of_prefixes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:num-of-prefixes', ge=0, le=4294967295),
    ] = None
    """
    Number of prefixes.
    """
    prefixes: Annotated[
        Optional[List[PrefixesListEntry]], Field(alias='srl_nokia-ospf:prefixes')
    ] = None


class Ospfv3RouterLsaContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsa_options: Annotated[
        Optional[LsaOptionsContainer2], Field(alias='srl_nokia-ospf:lsa-options')
    ] = None
    flags: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:flags', ge=0, le=255)
    ] = None
    """
    Router-LSA flag values
    """
    link: Annotated[
        Optional[List[LinkListEntry]], Field(alias='srl_nokia-ospf:link')
    ] = None


class OutgoingInterfaceListEntry(BaseModel):
    """
    List of the PIM enabled interfaces for the Multicast entry <S,G>
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[Optional[str], Field(alias='srl_nokia-pim:name')] = None
    """
    Router interface name
    """
    flags: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-pim:flags',
            pattern='^(immediate-oif-list|inherited-oif-list|inherited-rpt-oif-list|local-rx-include|local-rx-exclude|join-prune-list|lost-assert-list|sg-rpt-prune-oif-list|\\s)*$',
        ),
    ] = None
    """
    Set of lists to which this interface belongs
    """


class OverloadContainer3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    active: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:active')] = False
    overload_include_ext_1: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:overload-include-ext-1')
    ] = False
    overload_include_ext_2: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:overload-include-ext-2')
    ] = False
    overload_include_stub: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:overload-include-stub')
    ] = False
    overload_on_boot: Annotated[
        Optional[OverloadOnBootContainer],
        Field(alias='srl_nokia-ospf:overload-on-boot'),
    ] = None
    rtr_adv_lsa_limit: Annotated[
        Optional[RtrAdvLsaLimitContainer],
        Field(alias='srl_nokia-ospf:rtr-adv-lsa-limit'),
    ] = None


class OverrideLsrIdContainer3(BaseModel):
    """
    Options to override the LSR ID
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    subinterface_ipv4: Annotated[
        Optional[str], Field(alias='srl_nokia-ldp:subinterface-ipv4')
    ] = None
    """
    Set to use configured subinterface IPv4 address as LSR ID for Targeted LDP session

    Configured sub-interface must either be an LDP or a loopback interface.
    """


class OverrideLsrIdContainer4(BaseModel):
    """
    Options to override the LSR ID
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    subinterface_ipv4: Annotated[
        Optional[str], Field(alias='srl_nokia-ldp:subinterface-ipv4')
    ] = None
    """
    Set to use configured subinterface IPv4 address as LSR ID for Targeted LDP session

    Configured sub-interface must either be an LDP or a loopback interface.
    """
    subinterface_ipv6: Annotated[
        Optional[str], Field(alias='srl_nokia-ldp:subinterface-ipv6')
    ] = None
    """
    Set to use configured subinterface IPv6 address as LSR ID for Targeted LDP session

    Configured sub-interface must either be an LDP or a loopback interface.
    """


class PacketContainer3(BaseModel):
    """
    Trace IGMP Packet types
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Optional[List[InterfaceListEntry7]],
        Field(alias='srl_nokia-igmp-snooping:interface'),
    ] = None
    source_mac: Annotated[
        Optional[List[SourceMacListEntry]],
        Field(alias='srl_nokia-igmp-snooping:source-mac'),
    ] = None
    modifier: Annotated[
        Optional[EnumerationEnum205], Field(alias='srl_nokia-igmp-snooping:modifier')
    ] = None


class PacketContainer4(BaseModel):
    """
    Trace MLD Packet types
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Optional[List[InterfaceListEntry9]],
        Field(alias='srl_nokia-mld-snooping:interface'),
    ] = None
    source_mac: Annotated[
        Optional[List[SourceMacListEntry2]],
        Field(alias='srl_nokia-mld-snooping:source-mac'),
    ] = None
    modifier: Annotated[
        Optional[EnumerationEnum207], Field(alias='srl_nokia-mld-snooping:modifier')
    ] = None


class PacketContainer5(BaseModel):
    """
    Trace OSPF Packet types
    Only one type can be enabled at a time
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[EnumerationEnum210], Field(alias='srl_nokia-ospf:type')
    ] = None
    modifier: Annotated[
        Optional[EnumerationEnum211], Field(alias='srl_nokia-ospf:modifier')
    ] = None
    detail: Annotated[Optional[DetailLeaf9], Field(alias='srl_nokia-ospf:detail')] = (
        None
    )


class PacketContainer6(BaseModel):
    """
    Trace OSPF Packet types
    Only one type can be enabled at a time
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[EnumerationEnum225], Field(alias='srl_nokia-ospf:type')
    ] = None
    modifier: Annotated[
        Optional[EnumerationEnum226], Field(alias='srl_nokia-ospf:modifier')
    ] = None
    detail: Annotated[Optional[DetailLeaf10], Field(alias='srl_nokia-ospf:detail')] = (
        None
    )


class PduListEntry(BaseModel):
    """
    List of PDUs processed by the IS-IS instance since the IS-IS manager restarted
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    pdu_name: Annotated[
        Optional[EnumerationEnum139], Field(alias='srl_nokia-isis:pdu-name')
    ] = None
    """
    The PDU type that was processed
    """
    received: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:received', ge=0, le=4294967295)
    ] = 0
    """
    The number of PDUs that were received
    """
    processed: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:processed', ge=0, le=4294967295)
    ] = 0
    """
    The number of PDUs that were received and processed
    """
    dropped: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:dropped', ge=0, le=4294967295)
    ] = 0
    """
    The number of PDUs that were received and dropped
    """
    sent: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:sent', ge=0, le=4294967295)
    ] = 0
    """
    The number of PDUs that were transmitted
    """


class PduListEntry2(BaseModel):
    """
    List of PDUs processed by the IS-IS instance since the IS-IS manager restarted
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    pdu_name: Annotated[
        Optional[EnumerationEnum139], Field(alias='srl_nokia-isis:pdu-name')
    ] = None
    """
    The PDU type that was processed
    """
    received: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:received', ge=0, le=4294967295)
    ] = 0
    """
    The number of PDUs that were received
    """
    processed: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:processed', ge=0, le=4294967295)
    ] = 0
    """
    The number of PDUs that were received and processed
    """
    dropped: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:dropped', ge=0, le=4294967295)
    ] = 0
    """
    The number of PDUs that were received and dropped
    """
    sent: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:sent', ge=0, le=4294967295)
    ] = 0
    """
    The number of PDUs that were transmitted
    """


class PolicyListEntry3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    maintenance_policy_name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-maintenance-policies:maintenance-policy-name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    A unique identifying name for the maintenance policy
    """
    revert_timer: Annotated[
        Optional[Union[RevertTimerLeaf1, EnumerationEnum372]],
        Field(alias='srl_nokia-maintenance-policies:revert-timer'),
    ] = 'disable'
    """
    Revert timer for the segment-list.

    Timer till a revert to primary/best path after it is recovered from a failure. In case of uncolored te-policy, applies to primary segment-list and in case of colored te-policy applies to best candidate path.

    The default is 0 seconds.
    """
    seamless_bfd: Annotated[
        Optional[SeamlessBfdContainer2],
        Field(alias='srl_nokia-maintenance-policies:seamless-bfd'),
    ] = None


class PrefixSidContainer(BaseModel):
    """
    This container defines Prefix SID TLVs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlv: Annotated[
        Optional[List[TlvListEntry14]], Field(alias='srl_nokia-rib-bgp:tlv')
    ] = None


class PrefixSidListEntry(BaseModel):
    """
    List of prefix SIDs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-isis:prefix'),
    ] = None
    """
    The IPv4 or IPv6 prefix associated with the SID.
    """
    sid_label_value: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:sid-label-value', ge=16, le=1048575)
    ] = None
    """
    The MPLS label value associated with the SID.
    """
    multi_topology_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:multi-topology-id', ge=0, le=4095)
    ] = None
    """
    The multi-topology ID that provided the prefix SID
    """
    algorithm: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:algorithm', ge=0, le=255)
    ] = None
    """
    Contains the identifier of the algorithm the router uses to compute the reachability of the prefix to which the Prefix-SID is associated
    """
    active: Annotated[Optional[bool], Field(alias='srl_nokia-isis:active')] = None
    """
    When false, the prefix SID is inactive.

    It could be inactive for any of these reasons:
    -  it is involved in a prefix or SID conflict and lost to some other entry in the scope of this IS-IS instance
    -  its SID index or label is out of range of the locally defined SRGB
    """
    prefix_conflict: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:prefix-conflict')
    ] = None
    """
    Reads true when the prefix SID entry is involved in a prefix conflict within the scope of this IS-IS instance. This occurs when there are multiple entries for the same (prefix, multi-topology-id, algorithm). All the conflicting entries become inactive except for the one with the smallest sid-index.
    """
    sid_conflict: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:sid-conflict')
    ] = None
    """
    Reads true when the prefix SID entry is involved in a SID conflict within the scope of this IS-IS instance. This occurs when the same SID has been assigned to different prefixes after first eliminating entries that have lost the prefix-conflict comparison. All entries involved in a SID conflict that do not have the absolute lowest 'preference' value become inactive. In the SRL implementation SID entries associated with interfaces of this IS-IS instance are considered to have a lower numerical preference than remote prefix-sid entries. If there are still SID conflicts then all the remaining conflicting entries become inactive except for the one with the smallest sid-index.
    """
    sid_out_of_range: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:sid-out-of-range')
    ] = None
    """
    Reads true when a received prefix SID from another router has a SID index or label value that is not within the locally defined SRGB range of the network instance; the prefix SID entry will be inactive.
    """
    source_router: Annotated[
        Optional[List[SourceRouterListEntry]],
        Field(alias='srl_nokia-isis:source-router'),
    ] = None


class PrefixSidListEntry6(BaseModel):
    """
    List of prefix SIDs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-segment-routing:prefix'),
    ] = None
    """
    The IPv4 or IPv6 prefix associated with the SID.
    """
    sid_label_value: Annotated[
        Optional[int],
        Field(alias='srl_nokia-segment-routing:sid-label-value', ge=16, le=1048575),
    ] = None
    """
    The MPLS label value associated with the SID.
    """
    protocol: Annotated[
        Optional[EnumerationEnum313], Field(alias='srl_nokia-segment-routing:protocol')
    ] = None
    """
    The protocol that provided the prefix SID
    """
    protocol_instance: Annotated[
        Optional[int],
        Field(alias='srl_nokia-segment-routing:protocol-instance', ge=0, le=255),
    ] = None
    """
    The instance ID that provided the prefix SID
    """
    protocol_multi_topology: Annotated[
        Optional[int],
        Field(alias='srl_nokia-segment-routing:protocol-multi-topology', ge=0, le=4095),
    ] = None
    """
    The multi-topology ID that provided the prefix SID
    """
    algorithm: Annotated[
        Optional[int], Field(alias='srl_nokia-segment-routing:algorithm', ge=0, le=255)
    ] = None
    """
    Contains the identifier of the algorithm the router uses to compute the reachability of the prefix to which the Prefix-SID is associated
    """
    active: Annotated[
        Optional[bool], Field(alias='srl_nokia-segment-routing:active')
    ] = None
    """
    When false, the prefix SID is inactive.

    It could be inactive because it is involved in a prefix or SID conflict that occurred between different protocol-instance. It could also be inactive because datapath programming failed.
    """
    prefix_conflict: Annotated[
        Optional[bool], Field(alias='srl_nokia-segment-routing:prefix-conflict')
    ] = None
    """
    Reads true when the prefix SID entry is involved in a prefix conflict that has occurred between protocols. This occurs when there are multiple entries in the SID database for the same prefix. All the conflicting entries become inactive except for the one with the smallest sid-index.
    """
    sid_conflict: Annotated[
        Optional[bool], Field(alias='srl_nokia-segment-routing:sid-conflict')
    ] = None
    """
    Reads true when the prefix SID entry is involved in a SID conflict that has occurred between protocols (after first removing inter-protocol prefix conflict entries). All entries involved in a SID conflict that do not have the absolute lowest 'preference' value become inactive. In the SRL implementation local-prefix-sid entries are considered to have a lower numerical preference than remote prefix-sid entries. If there are still SID conflicts then all the remaining conflicting entries become inactive except for the one with the smallest sid-index.
    """


class ProgrammedSidsListEntry(BaseModel):
    """
    The list of IPv4 adjacency SIDs that have been programmed in association with this interface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    label_value: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:label-value', ge=16, le=1048575)
    ] = None
    """
    The adjacency SID represented by the MPLS label value.
    """
    neighbor_system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:neighbor-system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    The neighbor router's system ID.
    """
    adjacency_level: Annotated[
        Optional[EnumerationEnum133], Field(alias='srl_nokia-isis:adjacency-level')
    ] = 'L1L2'
    """
    The level of the adjacency that is formed.

    Only populated for dynamic adjacency SIDs on broacast interfaces.
    """


class ProgrammedSidsListEntry2(BaseModel):
    """
    The list of IPv4 adjacency SIDs that have been programmed in association with this interface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    label_value: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:label-value', ge=16, le=1048575)
    ] = None
    """
    The adjacency SID represented by the MPLS label value.
    """
    neighbor_system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:neighbor-system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    The neighbor router's system ID.
    """
    adjacency_level: Annotated[
        Optional[EnumerationEnum133], Field(alias='srl_nokia-isis:adjacency-level')
    ] = 'L1L2'
    """
    The level of the adjacency that is formed.

    Only populated for dynamic adjacency SIDs on broacast interfaces.
    """


class ProtocolErrorsContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bad_ldp_identifier: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:bad-ldp-identifier', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of notification messages sent to advise of a bad LDP identifier
    """
    bad_protocol_version: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ldp:bad-protocol-version', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The number of notification messages sent to advise of a bad protocol version
    """
    bad_pdu_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:bad-pdu-length', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of notification messages sent to advise of a bad PDU length
    """
    unknown_message_type: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ldp:unknown-message-type', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The number of notification messages sent to advise of an unknown message type
    """
    bad_message_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:bad-message-length', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of notification messages sent to advise of a bad message length
    """
    unknown_tlv: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:unknown-tlv', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of notification messages sent to advise of an unknown TLV
    """
    bad_tlv_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:bad-tlv-length', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of notification messages sent to advise of a bad TLV length
    """
    malformed_tlv_value: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:malformed-tlv-value', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of notification messages sent to advise of a malformed TLV value
    """
    missing_message_parameters: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ldp:missing-message-parameters',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The number of notification messages sent to advise of missing mandatory parameters
    """
    session_rejected_no_hello: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ldp:session-rejected-no-hello',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The number of notification messages sent to advise that a TCP connection was closed because there was no matching Hello adjacency
    """
    session_rejected_parameters_adv_mode: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ldp:session-rejected-parameters-adv-mode',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The number of notification messages sent to advise that a TCP connection was closed because the requested label advertisement mode is not acceptable
    """
    session_rejected_parameters_max_pdu_length: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ldp:session-rejected-parameters-max-pdu-length',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The number of notification messages sent to advise that a TCP connection was closed because the requested Maximum PDU Length is not acceptable
    """
    session_rejected_parameters_label_range: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ldp:session-rejected-parameters-label-range',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The number of notification messages sent to advise that a TCP connection was closed because the requested label range is not acceptable
    """
    session_rejected_bad_keepalive_time: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ldp:session-rejected-bad-keepalive-time',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The number of notification messages sent to advise that a TCP connection was closed because the requested keepalive time is not acceptable
    """
    unsupported_address_family: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ldp:unsupported-address-family',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The number of notification messages sent to advise that a TCP connection was closed because the FEC type is not IPv4 or IPv6
    """


class PrunedFloodListContainer(BaseModel):
    """
    A container for the optimized ingress replication pruned flood list flags.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    broadcast_multicast: Annotated[
        Optional[EnumerationEnum369],
        Field(alias='srl_nokia-rib-bgp:broadcast-multicast'),
    ] = None
    """
    The value of the broadcast-multicast flag.
    """
    unknown_unicast: Annotated[
        Optional[EnumerationEnum370], Field(alias='srl_nokia-rib-bgp:unknown-unicast')
    ] = None
    """
    The value of the unknown-unicast flag.
    """


class PsnpAuthenticationContainer(BaseModel):
    """
    Container with options to control the authentication of PSNP PDUs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    generate: Annotated[Optional[bool], Field(alias='srl_nokia-isis:generate')] = None
    """
    When set to true, IS-IS is instructed to add an authentication TLV to every transmitted PDU of the specified type
    """
    check_received: Annotated[
        Optional[EnumerationEnum137], Field(alias='srl_nokia-isis:check-received')
    ] = None
    """
    Specifies the type of authentication checks done for received PDUs of the specified type.
    """


class PsnpAuthenticationContainer2(BaseModel):
    """
    Container with options to control the authentication of PSNP PDUs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    generate: Annotated[Optional[bool], Field(alias='srl_nokia-isis:generate')] = None
    """
    When set to true, IS-IS is instructed to add an authentication TLV to every transmitted PDU of the specified type
    """
    check_received: Annotated[
        Optional[EnumerationEnum137], Field(alias='srl_nokia-isis:check-received')
    ] = None
    """
    Specifies the type of authentication checks done for received PDUs of the specified type.
    """


class PtpContainer(BaseModel):
    """
    Per network instance PTP configuration and state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    peer_limit: Annotated[
        Optional[int], Field(alias='srl_nokia-sync-ptp:peer-limit', ge=1, le=512)
    ] = None
    """
    Number of discovered peers allowed for network-instance

    If not defined then the number is not restricted within this network-instance.
    """
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-sync-ptp:oper-state')
    ] = None
    """
    Operational state of PTP within the network instance

    This is dependent on the administrative state of the ptp instance, the administrative state of the this network-instance under ptp, and the operational state of the network-instance itself.
    """
    source_address_ipv4: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-sync-ptp:source-address-ipv4',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    IPv4 source address to be used for PTP messages sent in this network-instance

    Only unicast IP supported.
    """
    source_address_ipv6: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-sync-ptp:source-address-ipv6',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    IPv6 source address to be used for PTP messages sent in this network-instance

    Only unicast IP supported.
    """


class QuerierContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld:address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    The address of the MLD Querier on the IP subnet to which this interface is attached
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time since this querier was last elected
    """
    expiry_time: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:expiry-time', ge=0, le=4294967295)
    ] = None
    """
    The time remaining before this querier is aged out
    """


class QuerierContainer2(BaseModel):
    """
    Enter the querier context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The source IP address used by queries sent out by this multicast router
    """
    version: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp-snooping:version', ge=1, le=3)
    ] = None
    """
    The version of the protocol that is sent by this multicast router
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time since this multicast router has been known in this service
    """
    expiry_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:expiry-time', ge=0, le=4294967295),
    ] = None
    """
    The time remaining before this multicast router is aged out
    """
    igmp_v3_states: Annotated[
        Optional[IgmpV3StatesContainer],
        Field(alias='srl_nokia-igmp-snooping:igmp-v3-states'),
    ] = None
    interface: Annotated[
        Optional[str], Field(alias='srl_nokia-igmp-snooping:interface')
    ] = None
    """
    Interface behind which this multicast router is located
    """


class QuerierContainer3(BaseModel):
    """
    Enter the querier context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    The source IP address used by queries sent out by this multicast router
    """
    version: Annotated[
        Optional[int], Field(alias='srl_nokia-mld-snooping:version', ge=1, le=2)
    ] = None
    """
    The version of the protocol that is sent by this multicast router
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time since this multicast router has been known in this service
    """
    expiry_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:expiry-time', ge=0, le=4294967295),
    ] = None
    """
    The time remaining before this multicast router is aged out
    """
    mld_v2_states: Annotated[
        Optional[MldV2StatesContainer],
        Field(alias='srl_nokia-mld-snooping:mld-v2-states'),
    ] = None
    interface: Annotated[
        Optional[str], Field(alias='srl_nokia-mld-snooping:interface')
    ] = None
    """
    Interface behind which this multicast router is located
    """


class QuerierContainer4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp:address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The address of the IGMP Querier on the IP subnet to which this interface is attached
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """
    expiry_time: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:expiry-time', ge=0, le=4294967295)
    ] = None
    """
    The time remaining before this querier is aged out
    """


class ReceivedMessagesContainer(BaseModel):
    """
    Container for state information about BGP messages received from the peer.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    queue_depth: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:queue-depth', ge=0, le=4294967295)
    ] = None
    """
    The number of messages received from the peer currently queued.
    """
    total_updates: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:total-updates', ge=0, le=18446744073709551615),
    ] = 0
    """
    Number of BGP UPDATE messages received from the peer over the lifetime of its configuration or since the last clear.
    """
    total_non_updates: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:total-non-updates', ge=0, le=18446744073709551615),
    ] = None
    """
    Number of BGP NON UPDATE messages received from the peer over the lifetime of its configuration or since the last clear.
    """
    malformed_updates: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:malformed-updates', ge=0, le=18446744073709551615),
    ] = 0
    """
    Number of BGP UPDATE messages received from the peer that were malformed but recoverable through treat-as-withdraw or attribute-discard (i.e. without session reset)
    """
    route_refresh: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:route-refresh', ge=0, le=18446744073709551615),
    ] = 0
    """
    Number of BGP ROUTE_REFRESH messages received from the peer over the lifetime of its configuration or since the last clear.
    """
    total_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:total-messages', ge=0, le=18446744073709551615),
    ] = 0
    """
    Total number of BGP messages received from the peer over the lifetime of its configuration or since the last clear.
    """
    last_update_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp:last-update-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The timestamp when the last UPDATE was received from this peer.
    """
    last_notification_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp:last-notification-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Timestamp representing the time of the last Notification message received from the peer.
    """
    last_notification_error_code: Annotated[
        Optional[EnumerationEnum66],
        Field(alias='srl_nokia-bgp:last-notification-error-code'),
    ] = None
    """
    The error code in the last NOTIFICATION received from this peer.
    """
    last_notification_error_subcode: Annotated[
        Optional[EnumerationEnum67],
        Field(alias='srl_nokia-bgp:last-notification-error-subcode'),
    ] = None
    """
    The error subcode in the last NOTIFICATION received from the peer.
    """
    total_notifications: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:total-notifications', ge=0, le=4294967295),
    ] = None
    """
    Number of BGP Notification messages received from the peer over the lifetime of its configuration or since the last clear.
    """


class ReceivedMessagesContainer2(BaseModel):
    """
    Inbound statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    total_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:total-messages', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of messages sent or received
    """
    address: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:address', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of address messages sent or received
    """
    address_withdraw: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:address-withdraw', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of address-withdraw messages sent or received
    """
    initialization: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:initialization', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of initialization messages sent or received
    """
    keepalive: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:keepalive', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of keepalive messages sent or received
    """
    label_abort_request: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:label-abort-request', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of label-abort-request messages sent or received
    """
    label_mapping: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:label-mapping', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of label-mapping messages sent or received
    """
    label_release: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:label-release', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of label-release messages sent or received
    """
    label_request: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:label-request', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of label-request messages sent or received
    """
    label_withdraw: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:label-withdraw', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of label-withdraw messages sent or received
    """
    notification: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:notification', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of messages sent or received
    """
    capability: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:capability', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of messages sent or received
    """


class ReceivedContainer10(BaseModel):
    """
    Received message statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    general_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp:general-queries', ge=0, le=4294967295),
    ] = 0
    """
    General Queries
    """
    group_queries: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:group-queries', ge=0, le=4294967295)
    ] = 0
    """
    Group Specific Queries
    """
    group_source_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp:group-source-queries', ge=0, le=4294967295),
    ] = 0
    """
    Group and Source Specific Queries
    """
    v1_reports: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:v1-reports', ge=0, le=4294967295)
    ] = 0
    """
    V1 Reports
    """
    v2_reports: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:v2-reports', ge=0, le=4294967295)
    ] = 0
    """
    V2 Reports
    """
    v3_reports: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:v3-reports', ge=0, le=4294967295)
    ] = 0
    """
    V3 Reports
    """
    leaves: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:leaves', ge=0, le=4294967295)
    ] = 0
    """
    Leaves
    """
    drops: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:drops', ge=0, le=4294967295)
    ] = 0
    """
    Total number of dropped packets
    """


class ReceivedContainer3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    hello_messages: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:hello-messages', ge=0, le=4294967295)
    ] = 0
    """
    The number of PIM hello messages received on this interface
    """
    hellos_dropped: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:hellos-dropped', ge=0, le=4294967295)
    ] = 0
    """
    The number of dropped Hello messages which were received
    """
    join_prune_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:join-prune-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of Join Prune messages received on this interface
    """
    join_prune_errors: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:join-prune-errors', ge=0, le=4294967295),
    ] = 0
    """
    The number of errors while processing Join-Prune messages received on this interface
    """
    assert_messages: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:assert-messages', ge=0, le=4294967295)
    ] = 0
    """
    The number of PIM Assert messages received on this interface
    """
    assert_errors: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:assert-errors', ge=0, le=4294967295)
    ] = 0
    """
    The number of errors while processing Assert messages received on this interface
    """
    register_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:register-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of PIM Register messages received on this interface
    """
    register_errors: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:register-errors', ge=0, le=4294967295)
    ] = 0
    """
    The number of errors while processing Register messages received on this interface
    """
    null_register_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:null-register-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of PIM Null Register messages received on this interface
    """
    register_stop_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:register-stop-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of PIM Register Stop messages received on this interface
    """
    register_stop_errors: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:register-stop-errors', ge=0, le=4294967295),
    ] = 0
    """
    The number of errors while processing Register Stop messages received on this interface
    """
    packets: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:packets', ge=0, le=4294967295)
    ] = 0
    """
    The number of multicast data packets received on this interface
    """
    invalid_register_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:invalid-register-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of invalid PIM Register messages received on this interface

    A Register message is invalid when the RP address in the message is not the RP for the group specified in the message.
    If such a message arrives, a Invalid Register notification is sent.
    """
    neighbor_unknown: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:neighbor-unknown', ge=0, le=4294967295),
    ] = 0
    """
    The number of PDUs dropped due to uknown neighborship

    The number of PIM messages (other than Hello messages) which were received on this interface and were rejected because the adjacency with the neighbor router was not already established.
    """
    bad_checksum_discard: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:bad-checksum-discard', ge=0, le=4294967295),
    ] = 0
    """
    The number of discarded messages due to bad checksum received on this interface
    """
    bad_encodings: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:bad-encodings', ge=0, le=4294967295)
    ] = 0
    """
    The number of PIM messages with bad encodings received on this interface
    """
    bad_version_discard: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:bad-version-discard', ge=0, le=4294967295),
    ] = 0
    """
    The number of PIM messages with bad versions received on this interface
    """
    candidate_rp_adv_no_router_alert: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:candidate-rp-adv-no-router-alert', ge=0, le=4294967295
        ),
    ] = 0
    """
    The number of Candidate-RP Advertisements without router alert option received on this interface
    """
    invalid_join_prune_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:invalid-join-prune-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of invalid PIM Join Prune messages received on this interface

    A Join Prune message is invalid when the RP address in the message is not the RP for the group specified in the message.
    If such a message arrives, a Invalid Join Prune notification is sent.
    """
    unknown_pdu_type: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:unknown-pdu-type', ge=0, le=4294967295),
    ] = 0
    """
    The number of packets received with an unsupported PIM type
    """


class ReceivedContainer4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    hello_messages: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:hello-messages', ge=0, le=4294967295)
    ] = 0
    """
    The number of PIM hello messages received on this interface
    """
    hellos_dropped: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:hellos-dropped', ge=0, le=4294967295)
    ] = 0
    """
    The number of dropped Hello messages which were received
    """
    join_prune_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:join-prune-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of Join Prune messages received on this interface
    """
    join_prune_errors: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:join-prune-errors', ge=0, le=4294967295),
    ] = 0
    """
    The number of errors while processing Join-Prune messages received on this interface
    """
    assert_messages: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:assert-messages', ge=0, le=4294967295)
    ] = 0
    """
    The number of PIM Assert messages received on this interface
    """
    assert_errors: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:assert-errors', ge=0, le=4294967295)
    ] = 0
    """
    The number of errors while processing Assert messages received on this interface
    """
    register_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:register-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of PIM Register messages received on this interface
    """
    register_errors: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:register-errors', ge=0, le=4294967295)
    ] = 0
    """
    The number of errors while processing Register messages received on this interface
    """
    null_register_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:null-register-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of PIM Null Register messages received on this interface
    """
    register_stop_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:register-stop-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of PIM Register Stop messages received on this interface
    """
    register_stop_errors: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:register-stop-errors', ge=0, le=4294967295),
    ] = 0
    """
    The number of errors while processing Register Stop messages received on this interface
    """
    packets: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:packets', ge=0, le=4294967295)
    ] = 0
    """
    The number of multicast data packets received on this interface
    """
    invalid_register_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:invalid-register-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of invalid PIM Register messages received on this interface

    A Register message is invalid when the RP address in the message is not the RP for the group specified in the message.
    If such a message arrives, a Invalid Register notification is sent.
    """
    neighbor_unknown: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:neighbor-unknown', ge=0, le=4294967295),
    ] = 0
    """
    The number of PDUs dropped due to uknown neighborship

    The number of PIM messages (other than Hello messages) which were received on this interface and were rejected because the adjacency with the neighbor router was not already established.
    """
    bad_checksum_discard: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:bad-checksum-discard', ge=0, le=4294967295),
    ] = 0
    """
    The number of discarded messages due to bad checksum received on this interface
    """
    bad_encodings: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:bad-encodings', ge=0, le=4294967295)
    ] = 0
    """
    The number of PIM messages with bad encodings received on this interface
    """
    bad_version_discard: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:bad-version-discard', ge=0, le=4294967295),
    ] = 0
    """
    The number of PIM messages with bad versions received on this interface
    """
    candidate_rp_adv_no_router_alert: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:candidate-rp-adv-no-router-alert', ge=0, le=4294967295
        ),
    ] = 0
    """
    The number of Candidate-RP Advertisements without router alert option received on this interface
    """
    invalid_join_prune_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:invalid-join-prune-messages', ge=0, le=4294967295),
    ] = 0
    """
    The number of invalid PIM Join Prune messages received on this interface

    A Join Prune message is invalid when the RP address in the message is not the RP for the group specified in the message.
    If such a message arrives, a Invalid Join Prune notification is sent.
    """
    unknown_pdu_type: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:unknown-pdu-type', ge=0, le=4294967295),
    ] = 0
    """
    The number of packets received with an unsupported PIM type
    """


class ReceivedContainer5(BaseModel):
    """
    Received message statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    general_queries: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:general-queries', ge=0, le=4294967295)
    ] = 0
    """
    General Queries
    """
    group_queries: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:group-queries', ge=0, le=4294967295)
    ] = 0
    """
    Group Specific Queries
    """
    group_source_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld:group-source-queries', ge=0, le=4294967295),
    ] = 0
    """
    Group and Source Specific Queries
    """
    v1_reports: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:v1-reports', ge=0, le=4294967295)
    ] = 0
    """
    V1 Reports
    """
    v2_reports: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:v2-reports', ge=0, le=4294967295)
    ] = 0
    """
    V2 Reports
    """
    leaves: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:leaves', ge=0, le=4294967295)
    ] = 0
    """
    Leaves
    """
    drops: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:drops', ge=0, le=4294967295)
    ] = 0
    """
    Total number of dropped packets
    """


class ReceivedContainer6(BaseModel):
    """
    Configuration and state related to received service FECs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    label: Annotated[
        Optional[Union[MplsLabelNonReservedType, EnumerationEnum95]],
        Field(alias='srl_nokia-ldp:label'),
    ] = None
    """
    The received label from the remote peer
    """
    label_status: Annotated[
        Optional[List[EnumerationEnum106]], Field(alias='srl_nokia-ldp:label-status')
    ] = []
    """
    The status of the received label
    """
    l2_mtu: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:l2-mtu', ge=0, le=65535)
    ] = None
    """
    Layer-2 MTU received from the remote peer in bytes
    """
    control_word: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:control-word')
    ] = None
    """
    Whether control word capability is received
    """
    flow_aware_transport_label_transmit_capability: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-ldp:flow-aware-transport-label-transmit-capability'),
    ] = None
    """
    Whether the capability to transmit the flow-aware transport label is received from the peer
    """
    flow_aware_transport_label_receive_capability: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-ldp:flow-aware-transport-label-receive-capability'),
    ] = None
    """
    Whether the capability to receive the flow-aware transport label is received from the peer
    """
    pw_status: Annotated[Optional[bool], Field(alias='srl_nokia-ldp:pw-status')] = None
    """
    Whether or not the router advertising the associated label
    supports pseudowire status signaling
    """
    signaling_status: Annotated[
        Optional[List[EnumerationEnum104]],
        Field(alias='srl_nokia-ldp:signaling-status'),
    ] = []
    """
    Indicates the signaling status
    """


class ReceivedContainer7(BaseModel):
    """
    Configuration and state related to received service FECs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    label: Annotated[
        Optional[Union[MplsLabelNonReservedType, EnumerationEnum95]],
        Field(alias='srl_nokia-ldp:label'),
    ] = None
    """
    The received label from the remote peer
    """
    label_status: Annotated[
        Optional[List[EnumerationEnum114]], Field(alias='srl_nokia-ldp:label-status')
    ] = []
    """
    The status of the received label
    """
    l2_mtu: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:l2-mtu', ge=0, le=65535)
    ] = None
    """
    Layer-2 MTU received from the remote peer in bytes
    """
    control_word: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:control-word')
    ] = None
    """
    Whether control word capability is received
    """
    flow_aware_transport_label_transmit_capability: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-ldp:flow-aware-transport-label-transmit-capability'),
    ] = None
    """
    Whether the capability to transmit the flow-aware transport label is received from the peer
    """
    flow_aware_transport_label_receive_capability: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-ldp:flow-aware-transport-label-receive-capability'),
    ] = None
    """
    Whether the capability to receive the flow-aware transport label is received from the peer
    """
    pw_status: Annotated[Optional[bool], Field(alias='srl_nokia-ldp:pw-status')] = None
    """
    Whether or not the router advertising the associated label
    supports pseudowire status signaling
    """
    signaling_status: Annotated[
        Optional[List[EnumerationEnum104]],
        Field(alias='srl_nokia-ldp:signaling-status'),
    ] = []
    """
    Indicates the signaling status
    """


class ReceivedContainer8(BaseModel):
    """
    Received message statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    general_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:general-queries', ge=0, le=4294967295),
    ] = 0
    """
    General Queries
    """
    group_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:group-queries', ge=0, le=4294967295),
    ] = 0
    """
    Group Specific Queries
    """
    group_source_queries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:group-source-queries', ge=0, le=4294967295
        ),
    ] = 0
    """
    Group and Source Specific Queries
    """
    v1_reports: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:v1-reports', ge=0, le=4294967295),
    ] = 0
    """
    V1 Reports
    """
    v2_reports: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:v2-reports', ge=0, le=4294967295),
    ] = 0
    """
    V2 Reports
    """
    v3_reports: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:v3-reports', ge=0, le=4294967295),
    ] = 0
    """
    V3 Reports
    """
    leave_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:leave-messages', ge=0, le=4294967295),
    ] = 0
    """
    Leave messages
    """
    discarded_packets: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:discarded-packets', ge=0, le=4294967295),
    ] = 0
    """
    Total number of discarded IGMP packets
    """
    bgp_join_sync: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:bgp-join-sync', ge=0, le=4294967295),
    ] = 0
    """
    Bgp join sync routes
    """
    bgp_leave_sync: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:bgp-leave-sync', ge=0, le=4294967295),
    ] = 0
    """
    Bgp leave sync routes
    """


class ReceivedContainer9(BaseModel):
    """
    Received message statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    general_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:general-queries', ge=0, le=4294967295),
    ] = 0
    """
    General Queries
    """
    group_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:group-queries', ge=0, le=4294967295),
    ] = 0
    """
    Group Specific Queries
    """
    group_source_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:group-source-queries', ge=0, le=4294967295),
    ] = 0
    """
    Group and Source Specific Queries
    """
    v1_reports: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:v1-reports', ge=0, le=4294967295),
    ] = 0
    """
    V1 Reports
    """
    v2_reports: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:v2-reports', ge=0, le=4294967295),
    ] = 0
    """
    V2 Reports
    """
    leave_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:leave-messages', ge=0, le=4294967295),
    ] = 0
    """
    Leave messages
    """
    discarded_packets: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:discarded-packets', ge=0, le=4294967295),
    ] = 0
    """
    Total number of discarded MLD packets
    """
    bgp_join_sync: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:bgp-join-sync', ge=0, le=4294967295),
    ] = 0
    """
    Bgp join sync routes
    """
    bgp_leave_sync: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:bgp-leave-sync', ge=0, le=4294967295),
    ] = 0
    """
    Bgp leave sync routes
    """


class ReflectorListEntry(BaseModel):
    """
    List of seamless BFD reflector instances
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-seamless-bfd:name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    A name for the local seamless-bfd reflector agent
    """
    local_discriminator: Annotated[
        Optional[int],
        Field(alias='srl_nokia-seamless-bfd:local-discriminator', ge=524288, le=526335),
    ] = None
    """
    Seamless-BFD discriminator for the local reflector agent
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-seamless-bfd:admin-state')
    ] = None
    """
    Used to administratively enable or disable seamless-bfd reflector
    """
    description: Annotated[
        Optional[str],
        Field(alias='srl_nokia-seamless-bfd:description', max_length=255, min_length=1),
    ] = None
    """
    Description of the seamless-bfd reflector
    """


class RemoteLfaContainer(BaseModel):
    """
    Remote LFA context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-isis:admin-state')
    ] = 'disable'
    """
    When set, remote lfa protection is enabled for the
    ISIS instance. Enables ability to seek for an eligible
    remote-LFA node (P,Q intersection), doesn't guarantee
    existance of remote-LFA protection.
    """
    max_pq_cost: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:max-pq-cost', ge=0, le=4294967295)
    ] = 4261412864
    """
    Maximum cost of destination node during reverse SPF calculation
    """
    node_protect: Annotated[
        Optional[NodeProtectContainer], Field(alias='srl_nokia-isis:node-protect')
    ] = None


class ResilientHashPrefixListEntry(BaseModel):
    """
    List of IPv4 and IPv6 prefixes which should be programmed for resilient ECMP hashing.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ip_prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-network-instance:ip-prefix'),
    ] = None
    """
    IPv4 or IPv6 prefix. Active routes in the FIB that exactly match this prefix or that are longer matches of this prefix are provided with resilient-hash programming.
    """
    hash_buckets_per_path: Annotated[
        Optional[int],
        Field(alias='srl_nokia-network-instance:hash-buckets-per-path', ge=1, le=32),
    ] = 1
    """
    The number of times each next-hop is repeated in the fill pattern if there are max-paths ECMP next-hops

    A larger number consumes more resources but provides more granularity when flows need to be moved. There is a platform-specific limit to the product of this hash-buckets-per-path value and the max-paths value.
    """
    max_paths: Annotated[
        Optional[int], Field(alias='srl_nokia-network-instance:max-paths', ge=1, le=64)
    ] = 1
    """
    The maximum number of ECMP next-hops per route associated with the resilient-hash prefix

    If a matching route has more than this number of ECMP next-hops only the first N are used, where N is the value of this parameter. There is a platform-specific limit to the product of this max-paths value and the hash-buckets-per-path value.
    """


class ResolvingRouteContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ip_prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-ip-route-tables:ip-prefix'),
    ] = None
    """
    The prefix of the resolving route.
    """
    route_type: Annotated[
        Optional[str], Field(alias='srl_nokia-ip-route-tables:route-type')
    ] = None
    """
    The type of the resolving route.
    """
    route_owner: Annotated[
        Optional[str], Field(alias='srl_nokia-ip-route-tables:route-owner')
    ] = None
    """
    The application name of the owner of the resolving route.
    """
    next_hop_group: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ip-route-tables:next-hop-group',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    Reference to the next-hop-group used by the route that resolves this next-hop
    """


class ResolvingTunnelContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ip_prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-ip-route-tables:ip-prefix'),
    ] = None
    """
    The prefix of the resolving tunnel.
    """
    tunnel_type: Annotated[
        Optional[str], Field(alias='srl_nokia-ip-route-tables:tunnel-type')
    ] = None
    """
    The type of the tunnel.
    """
    tunnel_owner: Annotated[
        Optional[str], Field(alias='srl_nokia-ip-route-tables:tunnel-owner')
    ] = None
    """
    The application name of the owner of the resolving tunnel.
    """
    tunnel_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ip-route-tables:tunnel-id', ge=0, le=4294967295),
    ] = None
    """
    An owner-assigned index value that is unique for each of the tunnels terminating at a particular prefix
    """
    next_hop_group: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ip-route-tables:next-hop-group',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    Reference to the next-hop-group used by the tunnel that resolves this next-hop
    """


class RibInPreContainer(BaseModel):
    """
    Container for the pre-import-policy version of BGP routes learned from BGP neighbors
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry4]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibInPreContainer2(BaseModel):
    """
    Container for the pre-import-policy version of BGP routes learned from BGP neighbors
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry8]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibInPreContainer5(BaseModel):
    """
    Container for the pre-import-policy version of BGP routes learned from BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry20]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibInPreContainer6(BaseModel):
    """
    Container for the pre-import-policy version of BGP routes learned from BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry24]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibInPreContainer8(BaseModel):
    """
    Container for the pre-import-policy version of BGP routes learned from BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry27]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibManagementContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    table: Annotated[
        Optional[List[TableListEntry]], Field(alias='srl_nokia-bgp:table')
    ] = None


class RibOutPostContainer(BaseModel):
    """
    Container for the post-export-policy version of BGP routes advertised to BGP neighbors
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry6]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibOutPostContainer5(BaseModel):
    """
    Container for the post-export-policy version of BGP routes advertised to BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry22]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibOutPostContainer8(BaseModel):
    """
    Container for the post-export-policy version of BGP routes advertised to BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry29]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RouteResolutionContainer(BaseModel):
    """
    Options related to resolution using IP routes in the FIB
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = 'enable'
    """
    Enable or disable route resolution if no resolving tunnel is found
    """
    ignore_default_routes: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:ignore-default-routes')
    ] = True
    """
    Ignore default routes, regardless of route type
    """


class RouteResolutionContainer2(BaseModel):
    """
    Options related to resolution using IP routes in the FIB
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = 'enable'
    """
    Enable or disable route resolution if no resolving tunnel is found
    """
    ignore_default_routes: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:ignore-default-routes')
    ] = True
    """
    Ignore default routes, regardless of route type
    """


class RouteResolutionContainer3(BaseModel):
    """
    Options related to resolution using IP routes in the FIB
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = 'enable'
    """
    Enable or disable route resolution if no resolving tunnel is found
    """
    ignore_default_routes: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:ignore-default-routes')
    ] = True
    """
    Ignore default routes, regardless of route type
    """


class RouteResolutionContainer4(BaseModel):
    """
    Options related to resolution using IP routes in the FIB
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = 'enable'
    """
    Enable or disable route resolution if no resolving tunnel is found
    """
    ignore_default_routes: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:ignore-default-routes')
    ] = True
    """
    Ignore default routes, regardless of route type
    """


class RouteResolutionContainer5(BaseModel):
    """
    Options related to resolution using IP routes in the FIB
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = 'enable'
    """
    Enable or disable route resolution if no resolving tunnel is found
    """
    ignore_default_routes: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:ignore-default-routes')
    ] = True
    """
    Ignore default routes, regardless of route type
    """


class RouteResolutionContainer6(BaseModel):
    """
    Options related to resolution using IP routes in the FIB
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = 'enable'
    """
    Enable or disable route resolution if no resolving tunnel is found
    """
    ignore_default_routes: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:ignore-default-routes')
    ] = True
    """
    Ignore default routes, regardless of route type
    """


class RouteResolutionContainer7(BaseModel):
    """
    Options related to resolution using IP routes in the FIB
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = 'enable'
    """
    Enable or disable route resolution if no resolving tunnel is found
    """
    ignore_default_routes: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:ignore-default-routes')
    ] = True
    """
    Ignore default routes, regardless of route type
    """


class RouteResolutionContainer8(BaseModel):
    """
    Options related to resolution using IP routes in the FIB
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = 'enable'
    """
    Enable or disable route resolution if no resolving tunnel is found
    """
    ignore_default_routes: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:ignore-default-routes')
    ] = True
    """
    Ignore default routes, regardless of route type
    """


class RouteListEntry10(BaseModel):
    """
    List of IPv4 routes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    advertised_mpls_label: Annotated[
        Optional[List[Union[MplsLabelNonReservedType, EnumerationEnum95]]],
        Field(alias='srl_nokia-rib-bgp:advertised-mpls-label'),
    ] = []
    """
    Advertised MPLS label value
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.
    """


class RouteListEntry11(BaseModel):
    """
    List of VPN-IPv4 unicast routes in the local RIB.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI.
    """
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum327], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer5],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer6],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    imported_ip_vrf_network_instances: Annotated[
        Optional[List[ImportedIpVrfNetworkInstancesLeafList]],
        Field(alias='srl_nokia-rib-bgp:imported-ip-vrf-network-instances'),
    ] = []
    """
    List of IP-VRF network instances that imported the route
    """
    received_mpls_label: Annotated[
        Optional[List[Union[MplsLabelNonReservedType, EnumerationEnum95]]],
        Field(alias='srl_nokia-rib-bgp:received-mpls-label'),
    ] = []
    """
    Received MPLS label value
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/bgp-rib/attr-sets/attr-set/index
    """


class RouteListEntry12(BaseModel):
    """
    List of VPN-IPv4 unicast routes learned from BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI.
    """
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    imported_ip_vrf_network_instances: Annotated[
        Optional[List[ImportedIpVrfNetworkInstancesLeafList2]],
        Field(alias='srl_nokia-rib-bgp:imported-ip-vrf-network-instances'),
    ] = []
    """
    List of IP-VRF network instances that imported the route
    """
    received_mpls_label: Annotated[
        Optional[List[Union[MplsLabelNonReservedType, EnumerationEnum95]]],
        Field(alias='srl_nokia-rib-bgp:received-mpls-label'),
    ] = []
    """
    Received MPLS label value
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.
    """


class RouteListEntry13(BaseModel):
    """
    List of VPN-IPv4 unicast routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI.
    """
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum328], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer6],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer7],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    imported_ip_vrf_network_instances: Annotated[
        Optional[List[ImportedIpVrfNetworkInstancesLeafList3]],
        Field(alias='srl_nokia-rib-bgp:imported-ip-vrf-network-instances'),
    ] = []
    """
    List of IP-VRF network instances that imported the route
    """
    received_mpls_label: Annotated[
        Optional[List[Union[MplsLabelNonReservedType, EnumerationEnum95]]],
        Field(alias='srl_nokia-rib-bgp:received-mpls-label'),
    ] = []
    """
    Received MPLS label value
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/
    attr-sets/attr-set/index.
    """
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class RouteListEntry14(BaseModel):
    """
    List of VPN-IPv4 unicast routes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI.
    """
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    advertised_mpls_label: Annotated[
        Optional[List[Union[MplsLabelNonReservedType, EnumerationEnum95]]],
        Field(alias='srl_nokia-rib-bgp:advertised-mpls-label'),
    ] = []
    """
    Advertised MPLS label value
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.
    """


class RouteListEntry15(BaseModel):
    """
    List of VPN-IPv6 unicast routes in the local RIB.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI.
    """
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum329], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer7],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer8],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    imported_ip_vrf_network_instances: Annotated[
        Optional[List[ImportedIpVrfNetworkInstancesLeafList4]],
        Field(alias='srl_nokia-rib-bgp:imported-ip-vrf-network-instances'),
    ] = []
    """
    List of IP-VRF network instances that imported the route
    """
    received_mpls_label: Annotated[
        Optional[List[Union[MplsLabelNonReservedType, EnumerationEnum95]]],
        Field(alias='srl_nokia-rib-bgp:received-mpls-label'),
    ] = []
    """
    Received MPLS label value
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/bgp-rib/attr-sets/attr-set/index
    """


class RouteListEntry16(BaseModel):
    """
    List of VPN-IPv6 unicast routes learned from BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI.
    """
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    imported_ip_vrf_network_instances: Annotated[
        Optional[List[ImportedIpVrfNetworkInstancesLeafList5]],
        Field(alias='srl_nokia-rib-bgp:imported-ip-vrf-network-instances'),
    ] = []
    """
    List of IP-VRF network instances that imported the route
    """
    received_mpls_label: Annotated[
        Optional[List[Union[MplsLabelNonReservedType, EnumerationEnum95]]],
        Field(alias='srl_nokia-rib-bgp:received-mpls-label'),
    ] = []
    """
    Received MPLS label value
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.
    """


class RouteListEntry17(BaseModel):
    """
    List of VPN-IPv6 unicast routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI.
    """
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum330], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer8],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer9],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    imported_ip_vrf_network_instances: Annotated[
        Optional[List[ImportedIpVrfNetworkInstancesLeafList6]],
        Field(alias='srl_nokia-rib-bgp:imported-ip-vrf-network-instances'),
    ] = []
    """
    List of IP-VRF network instances that imported the route
    """
    received_mpls_label: Annotated[
        Optional[List[Union[MplsLabelNonReservedType, EnumerationEnum95]]],
        Field(alias='srl_nokia-rib-bgp:received-mpls-label'),
    ] = []
    """
    Received MPLS label value
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/
    attr-sets/attr-set/index.
    """
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class RouteListEntry18(BaseModel):
    """
    List of VPN-IPv6 unicast routes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI.
    """
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    advertised_mpls_label: Annotated[
        Optional[List[Union[MplsLabelNonReservedType, EnumerationEnum95]]],
        Field(alias='srl_nokia-rib-bgp:advertised-mpls-label'),
    ] = []
    """
    Advertised MPLS label value
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.
    """


class RouteListEntry19(BaseModel):
    """
    List of IPv6 routes in the local RIB.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    origin_protocol: Annotated[
        Optional[str], Field(alias='srl_nokia-rib-bgp:origin-protocol')
    ] = None
    """
    If the route was imported from another protocol, this is the protocol name.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum331], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer9],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer10],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """


class RouteListEntry21(BaseModel):
    """
    List of IPv6 routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum332], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer10],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer11],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.
    """
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class RouteListEntry23(BaseModel):
    """
    List of label-IPv6 routes in the local RIB.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    origin_protocol: Annotated[
        Optional[str], Field(alias='srl_nokia-rib-bgp:origin-protocol')
    ] = None
    """
    If the route was imported from another protocol, this is the protocol name.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum333], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer11],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer12],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    received_mpls_label: Annotated[
        Optional[List[Union[MplsLabelNonReservedType, EnumerationEnum95]]],
        Field(alias='srl_nokia-rib-bgp:received-mpls-label'),
    ] = []
    """
    Received MPLS label value
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/bgp-rib/attr-sets/attr-set/index
    """


class RouteListEntry25(BaseModel):
    """
    List of label-IPv6 routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum334], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer12],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer13],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    received_mpls_label: Annotated[
        Optional[List[Union[MplsLabelNonReservedType, EnumerationEnum95]]],
        Field(alias='srl_nokia-rib-bgp:received-mpls-label'),
    ] = []
    """
    Received MPLS label value
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.
    """
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class RouteListEntry26(BaseModel):
    """
    List of label-IPv6 routes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    advertised_mpls_label: Annotated[
        Optional[List[Union[MplsLabelNonReservedType, EnumerationEnum95]]],
        Field(alias='srl_nokia-rib-bgp:advertised-mpls-label'),
    ] = []
    """
    Advertised MPLS label value
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.
    """


class RouteListEntry28(BaseModel):
    """
    List of RTC routes in the RIB-IN, after import-policy modification.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    origin_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:origin-as', ge=1, le=4294967295)
    ] = None
    """
    The origin AS of the RTC route
    """
    route_target_prefix: Annotated[
        Optional[str], Field(alias='srl_nokia-rib-bgp:route-target-prefix')
    ] = None
    """
    The RTC prefix in the format number1:number2/length, where number1 is an IPv4 address or a 2-byte ASN or a 4-byte ASN, number2 is a 2-byte or 4-byte administrative value and length is a number of bits between 0 and 96

    The default RTC prefix is represented by 0:0/0
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum364], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer29],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer30],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/
    attr-sets/attr-set/index.
    """
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class RouteListEntry3(BaseModel):
    """
    List of IPv4 routes in the local RIB
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    origin_protocol: Annotated[
        Optional[str], Field(alias='srl_nokia-rib-bgp:origin-protocol')
    ] = None
    """
    If the route was imported from another protocol, this is the protocol name.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum323], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer2],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/bgp-rib/attr-sets/attr-set/index
    """


class RouteListEntry30(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-aggregate-routes:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-aggregate-routes:admin-state')
    ] = 'enable'
    """
    Administratively enable or disable this aggregate route.
    """
    installed: Annotated[
        Optional[bool], Field(alias='srl_nokia-aggregate-routes:installed')
    ] = None
    """
    If set to true, this indicates that the aggregate route was installed into the datapath. If this is false then there are 2 possible reasons:
    (a) the admin-state is disable
    (b) there is another IP route for the same prefix that has a superior preference
    """
    generate_icmp: Annotated[
        Optional[bool], Field(alias='srl_nokia-aggregate-routes:generate-icmp')
    ] = None
    """
    When set to true the router generares ICMP unreachable messages for packets matching the aggregate route (and not a more specific route).
    """
    summary_only: Annotated[
        Optional[bool], Field(alias='srl_nokia-aggregate-routes:summary-only')
    ] = False
    """
    When set to true the router blocks the advertisement of all contributing
    routes of this aggregate route in dynamic protocols such as BGP.
    """
    aggregator: Annotated[
        Optional[AggregatorContainer2],
        Field(alias='srl_nokia-aggregate-routes:aggregator'),
    ] = None
    communities: Annotated[
        Optional[CommunitiesContainer2],
        Field(alias='srl_nokia-aggregate-routes:communities'),
    ] = None


class RouteListEntry31(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-static-routes:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-static-routes:admin-state')
    ] = 'enable'
    """
    Administratively enable or disable the static route.
    """
    metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-static-routes:metric', ge=0, le=4294967295),
    ] = 1
    """
    IGP metric of the static route.
    """
    preference: Annotated[
        Optional[int], Field(alias='srl_nokia-static-routes:preference', ge=0, le=255)
    ] = 5
    """
    Route preference with lower values indicating a higher degree of preference.
    """
    next_hop_group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-static-routes:next-hop-group',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Specifies the next hop group name
    """
    tag_set: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-static-routes:tag-set',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Tag set to associate with the static route
    """
    tag_value: Annotated[
        Optional[Union[TagTypeType1, HexStringType]],
        Field(alias='srl_nokia-static-routes:tag-value'),
    ] = None
    """
    Tag value to associate with the static route
    """
    installed: Annotated[
        Optional[bool], Field(alias='srl_nokia-static-routes:installed')
    ] = None
    """
    If set to true, this indicates that the static route was installed into the datapath. If this is false then there are 3 possible reasons:
    (a) the admin-state is disable
    (b) there is another IP route for the same prefix that has a superior preference
    (c) the next-hop-group has no resolvable next-hops
    """


class RouteListEntry5(BaseModel):
    """
    List of IPv4 routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum324], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer2],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer3],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class RouteListEntry7(BaseModel):
    """
    List of label-IPv4 routes in the local RIB
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    origin_protocol: Annotated[
        Optional[str], Field(alias='srl_nokia-rib-bgp:origin-protocol')
    ] = None
    """
    If the route was imported from another protocol, this is the protocol name.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum325], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer3],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer4],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    received_mpls_label: Annotated[
        Optional[List[Union[MplsLabelNonReservedType, EnumerationEnum95]]],
        Field(alias='srl_nokia-rib-bgp:received-mpls-label'),
    ] = []
    """
    Received MPLS label value
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/bgp-rib/attr-sets/attr-set/index
    """


class RouteListEntry9(BaseModel):
    """
    List of IPv4 routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:prefix'),
    ] = None
    """
    An IPv4 or IPv6 prefix.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum326], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer4],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer5],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    received_mpls_label: Annotated[
        Optional[List[Union[MplsLabelNonReservedType, EnumerationEnum95]]],
        Field(alias='srl_nokia-rib-bgp:received-mpls-label'),
    ] = []
    """
    Received MPLS label value
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/
    attr-sets/attr-set/index
    """
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class RouterLsaContainer(BaseModel):
    """
    Contents of the router LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    flags: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:flags', ge=0, le=255)
    ] = None
    """
    Router-LSA flag values
    """
    number_links: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:number-links', ge=0, le=65535)
    ] = None
    """
    The number of links that are described within the LSA
    """
    links: Annotated[
        Optional[List[LinksListEntry]], Field(alias='srl_nokia-ospf:links')
    ] = None


class SegmentRoutingCapabilityContainer(BaseModel):
    """
    This container defines SR Capability sub-TLV 2.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    flags: Annotated[
        Optional[List[EnumerationEnum164]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    Segment Routing Capability Flags.
    """
    srgb_descriptors: Annotated[
        Optional[SrgbDescriptorsContainer],
        Field(alias='srl_nokia-isis:srgb-descriptors'),
    ] = None


class SegmentRoutingMplsContainer(BaseModel):
    """
    BGP support for segment routing using MPLS dataplane
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = 'disable'
    """
    Enable SR-MPLS support within BGP
    """


class SegmentListEntry(BaseModel):
    """
    A list of segments. Each segment has a type and a list of one or more AS
    numbers.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    as_path_index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:as-path-index', ge=0, le=4294967295),
    ] = None
    """
    RIB attribute AS Path index
    """
    type: Annotated[
        Optional[EnumerationEnum365], Field(alias='srl_nokia-rib-bgp:type')
    ] = None
    """
    The type of the AS path segment.
    """
    member: Annotated[
        Optional[List[MemberLeafList]], Field(alias='srl_nokia-rib-bgp:member')
    ] = []
    """
    A list of AS numbers (each of which is a 2byte-ASN or a 4byte-ASN) that belong
    to the AS path segment.
    """


class SendDefaultRouteContainer(BaseModel):
    """
    Options for controlling the generation of default routes towards group peers
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_unicast: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:ipv4-unicast')
    ] = False
    """
    Enables the sending of a synthetically generated default IPv4 route [0/0] to each peer in the group
    """
    ipv6_unicast: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:ipv6-unicast')
    ] = False
    """
    Enables the sending of a synthetically generated default IPv6 route [::/0] to each peer in the group
    """
    export_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp:export-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The name of a policy that should be applied to the advertised default routes, in order to set their attributes to non-default values

    Only the default-action of this policy is parsed and applied.
    """


class SendDefaultRouteContainer2(BaseModel):
    """
    Options for controlling the generation of default routes towards the peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_unicast: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:ipv4-unicast')
    ] = None
    """
    Enables the sending of a synthetically generated default IPv4 route [0/0] to the peer
    """
    ipv6_unicast: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:ipv6-unicast')
    ] = None
    """
    Enables the sending of a synthetically generated default IPv6 route [::/0] to the peer
    """
    export_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp:export-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The name of a policy that should be applied to the advertised default routes, in order to set their attributes to non-default values

    Only the default-action of this policy is parsed and applied.
    """


class SentMessagesContainer(BaseModel):
    """
    Container for state information about BGP messages sent to the peer.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    queue_depth: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:queue-depth', ge=0, le=4294967295)
    ] = None
    """
    The number of messages queued to be sent to the peer.
    """
    total_updates: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:total-updates', ge=0, le=18446744073709551615),
    ] = 0
    """
    Number of BGP UPDATE messages sent to the peer over the lifetime of its configuration or since the last clear.
    """
    total_non_updates: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:total-non-updates', ge=0, le=18446744073709551615),
    ] = None
    """
    Number of BGP NON UPDATE messages sent to the peer over the lifetime of its configuration or since the last clear.
    """
    route_refresh: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:route-refresh', ge=0, le=18446744073709551615),
    ] = 0
    """
    Number of BGP ROUTE_REFRESH messages sent to the peer over the lifetime of its configuration or since the last clear.
    """
    total_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:total-messages', ge=0, le=18446744073709551615),
    ] = 0
    """
    Total number of BGP messages sent to the peer over the lifetime of its configuration or since the last clear.
    """
    last_notification_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp:last-notification-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Timestamp representing the time of the last Notification message sent to the peer.
    """
    last_notification_error_code: Annotated[
        Optional[EnumerationEnum64],
        Field(alias='srl_nokia-bgp:last-notification-error-code'),
    ] = None
    """
    The error code in the last NOTIFICATION sent to this peer.
    """
    last_notification_error_subcode: Annotated[
        Optional[EnumerationEnum65],
        Field(alias='srl_nokia-bgp:last-notification-error-subcode'),
    ] = None
    """
    The error subcode in the last NOTIFICATION sent to this peer.
    """
    total_notifications: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:total-notifications', ge=0, le=4294967295),
    ] = None
    """
    Number of BGP Notification messages sent to the peer over the lifetime of its configuration or since the last clear.
    """


class SentMessagesContainer2(BaseModel):
    """
    Outbound statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    total_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:total-messages', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of messages sent or received
    """
    address: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:address', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of address messages sent or received
    """
    address_withdraw: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:address-withdraw', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of address-withdraw messages sent or received
    """
    initialization: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:initialization', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of initialization messages sent or received
    """
    keepalive: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:keepalive', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of keepalive messages sent or received
    """
    label_abort_request: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:label-abort-request', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of label-abort-request messages sent or received
    """
    label_mapping: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:label-mapping', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of label-mapping messages sent or received
    """
    label_release: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:label-release', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of label-release messages sent or received
    """
    label_request: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:label-request', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of label-request messages sent or received
    """
    label_withdraw: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:label-withdraw', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of label-withdraw messages sent or received
    """
    notification: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:notification', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of messages sent or received
    """
    capability: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:capability', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of messages sent or received
    """


class SharedRiskLinkGroupsContainer(BaseModel):
    """
    Container for configuring SRLGs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry21]],
        Field(alias='srl_nokia-traffic-engineering:group'),
    ] = None


class SidDatabaseContainer(BaseModel):
    """
    Database of all prefix SIDs associated with the IS-IS instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_sid: Annotated[
        Optional[List[PrefixSidListEntry]], Field(alias='srl_nokia-isis:prefix-sid')
    ] = None


class SidDatabaseContainer2(BaseModel):
    """
    Database of all known prefix SIDs, local and remote.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_sid: Annotated[
        Optional[List[PrefixSidListEntry6]],
        Field(alias='srl_nokia-segment-routing:prefix-sid'),
    ] = None


class SmetRouteListEntry(BaseModel):
    """
    List of Selective Multicast Ethernet Tag routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI

    The Ethernet Tag ID identifies a broadcast domain
    """
    multicast_source_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-source-length', ge=0, le=128),
    ] = None
    """
    The multicast source address length
    """
    multicast_source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-source-address'),
    ] = None
    """
    The multicast source IP address
    """
    multicast_group_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-group-length', ge=0, le=128),
    ] = None
    """
    The multicast group address length
    """
    multicast_group_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-group-address'),
    ] = None
    """
    The multicast group IP address
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    flags: Annotated[
        Optional[FlagsContainer6], Field(alias='srl_nokia-rib-bgp:flags')
    ] = None
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum342], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer18],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer19],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    imported_network_instances: Annotated[
        Optional[List[ImportedNetworkInstancesLeafList5]],
        Field(alias='srl_nokia-rib-bgp:imported-network-instances'),
    ] = []
    """
    List of network instances that imported the route
    """
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class SmetRouteListEntry2(BaseModel):
    """
    List of Selective Multicast Ethernet Tag routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI

    The Ethernet Tag ID identifies a broadcast domain
    """
    multicast_source_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-source-length', ge=0, le=128),
    ] = None
    """
    The multicast source address length
    """
    multicast_source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-source-address'),
    ] = None
    """
    The multicast source IP address
    """
    multicast_group_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-group-length', ge=0, le=128),
    ] = None
    """
    The multicast group address length
    """
    multicast_group_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-group-address'),
    ] = None
    """
    The multicast group IP address
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    flags: Annotated[
        Optional[FlagsContainer9], Field(alias='srl_nokia-rib-bgp:flags')
    ] = None
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """


class SmetRouteListEntry3(BaseModel):
    """
    List of Selective Multicast Ethernet Tag routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI

    The Ethernet Tag ID identifies a broadcast domain
    """
    multicast_source_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-source-length', ge=0, le=128),
    ] = None
    """
    The multicast source address length
    """
    multicast_source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-source-address'),
    ] = None
    """
    The multicast source IP address
    """
    multicast_group_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-group-length', ge=0, le=128),
    ] = None
    """
    The multicast group address length
    """
    multicast_group_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-group-address'),
    ] = None
    """
    The multicast group IP address
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    flags: Annotated[
        Optional[FlagsContainer12], Field(alias='srl_nokia-rib-bgp:flags')
    ] = None
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum356], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer26],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer27],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class SmetRouteListEntry4(BaseModel):
    """
    List of Selective Multicast Ethernet Tag routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI

    The Ethernet Tag ID identifies a broadcast domain
    """
    multicast_source_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-source-length', ge=0, le=128),
    ] = None
    """
    The multicast source address length
    """
    multicast_source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-source-address'),
    ] = None
    """
    The multicast source IP address
    """
    multicast_group_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-group-length', ge=0, le=128),
    ] = None
    """
    The multicast group address length
    """
    multicast_group_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-group-address'),
    ] = None
    """
    The multicast group IP address
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    flags: Annotated[
        Optional[FlagsContainer15], Field(alias='srl_nokia-rib-bgp:flags')
    ] = None
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    next_hop: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:next-hop'),
    ] = None
    """
    The advertised BGP next-hop address.
    """


class SourceCase(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[List[SourceListEntry4]], Field(alias='srl_nokia-mld:source')
    ] = None


class SourceCase2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[List[SourceListEntry8]], Field(alias='srl_nokia-igmp-snooping:source')
    ] = None


class SourceCase3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[List[SourceListEntry13]], Field(alias='srl_nokia-mld-snooping:source')
    ] = None


class SourceCase4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[List[SourceListEntry19]], Field(alias='srl_nokia-igmp:source')
    ] = None


class SourceListEntry10(BaseModel):
    """
    Source addresses of multicast
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:source',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Source address of multicast
    """
    source_type: Annotated[
        Optional[EnumerationEnum89], Field(alias='srl_nokia-igmp-snooping:source-type')
    ] = None
    """
    How this group entry was learned.
    """
    forwarding_state: Annotated[
        Optional[EnumerationEnum92],
        Field(alias='srl_nokia-igmp-snooping:forwarding-state'),
    ] = None
    """
    Traffic forwardeding state on this port
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """
    expiry_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:expiry-time', ge=0, le=4294967295),
    ] = None
    """
    The time left before multicast group timeout
    """


class SourceListEntry11(BaseModel):
    """
    Source addresses of multicast
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:source',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Source address of multicast
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """


class SourceListEntry12(BaseModel):
    """
    Source addresses of multicast
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:source',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Source address of multicast
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """


class SourceListEntry14(BaseModel):
    """
    Source addresses of multicast
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:source',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Source address of multicast
    """
    source_type: Annotated[
        Optional[EnumerationEnum89], Field(alias='srl_nokia-mld-snooping:source-type')
    ] = None
    """
    How this group entry was learned.
    """
    forwarding_state: Annotated[
        Optional[EnumerationEnum92],
        Field(alias='srl_nokia-mld-snooping:forwarding-state'),
    ] = None
    """
    Traffic forwardeding state on this port
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """
    expiry_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:expiry-time', ge=0, le=4294967295),
    ] = None
    """
    The time left before multicast group timeout
    """


class SourceListEntry15(BaseModel):
    """
    Source addresses of multicast
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:source',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Source address of multicast
    """
    source_type: Annotated[
        Optional[EnumerationEnum89], Field(alias='srl_nokia-mld-snooping:source-type')
    ] = None
    """
    How this group entry was learned.
    """
    forwarding_state: Annotated[
        Optional[EnumerationEnum92],
        Field(alias='srl_nokia-mld-snooping:forwarding-state'),
    ] = None
    """
    Traffic forwardeding state on this port
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """
    expiry_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:expiry-time', ge=0, le=4294967295),
    ] = None
    """
    The time left before multicast group timeout
    """


class SourceListEntry20(BaseModel):
    """
    Source addresses of multicast
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp:source',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Source address of multicast
    """
    source_type: Annotated[
        Optional[EnumerationEnum89], Field(alias='srl_nokia-igmp:source-type')
    ] = None
    """
    How this group entry was learned.
    """
    forwarding_state: Annotated[
        Optional[EnumerationEnum92], Field(alias='srl_nokia-igmp:forwarding-state')
    ] = None
    """
    Traffic forwardeding state on this port
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """
    expiry_time: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:expiry-time', ge=0, le=4294967295)
    ] = None
    """
    The time left before multicast group timeout
    """


class SourceListEntry5(BaseModel):
    """
    Source addresses of multicast
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld:source',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Source address of multicast
    """
    source_type: Annotated[
        Optional[EnumerationEnum89], Field(alias='srl_nokia-mld:source-type')
    ] = None
    """
    How this group entry was learned.
    """
    forwarding_state: Annotated[
        Optional[EnumerationEnum92], Field(alias='srl_nokia-mld:forwarding-state')
    ] = None
    """
    Traffic forwardeding state on this port
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """
    expiry_time: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:expiry-time', ge=0, le=4294967295)
    ] = None
    """
    The time left before multicast group timeout
    """


class SourceListEntry6(BaseModel):
    """
    Source addresses of multicast
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:source',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Source address of multicast
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """


class SourceListEntry7(BaseModel):
    """
    Source addresses of multicast
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:source',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Source address of multicast
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """


class SourceListEntry9(BaseModel):
    """
    Source addresses of multicast
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:source',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Source address of multicast
    """
    source_type: Annotated[
        Optional[EnumerationEnum89], Field(alias='srl_nokia-igmp-snooping:source-type')
    ] = None
    """
    How this group entry was learned.
    """
    forwarding_state: Annotated[
        Optional[EnumerationEnum92],
        Field(alias='srl_nokia-igmp-snooping:forwarding-state'),
    ] = None
    """
    Traffic forwardeding state on this port
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """
    expiry_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:expiry-time', ge=0, le=4294967295),
    ] = None
    """
    The time left before multicast group timeout
    """


class SpfContainer3(BaseModel):
    """
    SPF related information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    full_spf_runs: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:full-spf-runs', ge=0, le=4294967295)
    ] = None
    """
    The total number of times that complete SPF has been run on the router since OSPF was last enabled.
    """
    ext_spf_runs: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:ext-spf-runs', ge=0, le=4294967295)
    ] = None
    """
    The total number of times that only the external portion of the SPF has been run since OSPF was last enabled.
    """
    incremental_inter_spf_runs: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:incremental-inter-spf-runs', ge=0, le=4294967295),
    ] = None
    """
    The total number of incremental SPF runs triggered by new or updated inter-area prefix or inter-area router LS-as.
    """
    incremental_ext_spf_runs: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:incremental-ext-spf-runs', ge=0, le=4294967295),
    ] = None
    """
    The total number of incremental SPF runs triggered by new or updated external LS-as.
    """
    spf_attempts_failed: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:spf-attempts-failed', ge=0, le=4294967295),
    ] = None
    """
    The number of times an attempt to run SPF has failed because SPF runs have been stopped as a result of insufficient memory resources.
    """
    max_spf_run_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:max-spf-run-interval', ge=0, le=2147483647),
    ] = None
    """
    the value of max-spf-run-interval indicates the maximum time, in hundredths of seconds, used to perform a total SPF calculation.
    """
    min_spf_run_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:min-spf-run-interval', ge=0, le=2147483647),
    ] = None
    """
    the value of min-spf-run-interval indicates the minimum time, in hundredths of seconds, used to perform a total SPF calculation.
    """
    avg_spf_run_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:avg-spf-run-interval', ge=0, le=2147483647),
    ] = None
    """
    the value of avg-spf-run-interval indicates the average time, in hundredths of seconds, of all the total SPF calculations performed by this OSPF router.
    """
    last_full_spf: Annotated[
        Optional[LastFullSpfContainer], Field(alias='srl_nokia-ospf:last-full-spf')
    ] = None
    last_ext_spf: Annotated[
        Optional[LastExtSpfContainer], Field(alias='srl_nokia-ospf:last-ext-spf')
    ] = None


class SptSwitchoverContainer(BaseModel):
    """
    Define Shortest Path Tree (SPT) switchover threshold for multicast groups
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry5]], Field(alias='srl_nokia-pim:group')
    ] = None


class SsmContainer2(BaseModel):
    """
    Container to configure Source specific multicast (SSM) options
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mappings: Annotated[
        Optional[MappingsContainer], Field(alias='srl_nokia-mld:mappings')
    ] = None


class SsmContainer3(BaseModel):
    """
    Container to configure Source specific multicast (SSM) options
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mappings: Annotated[
        Optional[MappingsContainer2], Field(alias='srl_nokia-mld:mappings')
    ] = None


class SsmContainer4(BaseModel):
    """
    Container to configure Source specific multicast (SSM) options.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mappings: Annotated[
        Optional[MappingsContainer3], Field(alias='srl_nokia-igmp:mappings')
    ] = None


class SsmContainer5(BaseModel):
    """
    Container to configure Source specific multicast (SSM) options.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mappings: Annotated[
        Optional[MappingsContainer4], Field(alias='srl_nokia-igmp:mappings')
    ] = None


class StateTimerContainer(BaseModel):
    """
    Holds state timer information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    timer: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:timer', ge=1, le=3600)
    ] = 180
    """
    Configure state-timer
    """
    timer_action: Annotated[
        Optional[EnumerationEnum245], Field(alias='srl_nokia-pcep:timer-action')
    ] = 'remove'
    """
    State timer action remove/none
    """


class StaticEntriesContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[List[NeighborListEntry10]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:neighbor'),
    ] = None


class StaticEntriesContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[List[NeighborListEntry15]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:neighbor'),
    ] = None


class StaticEntryListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    top_label: Annotated[
        Optional[int], Field(alias='srl_nokia-mpls:top-label', ge=16, le=1048575)
    ] = None
    """
    A received MPLS packet, received on any subinterface, matches this static entry if its top label stack entry contains the label value specified by this leaf.
    """
    preference: Annotated[
        Optional[int], Field(alias='srl_nokia-mpls:preference', ge=0, le=255)
    ] = None
    """
    For a given top label value the entry with the lowest preference is selected as the active entry
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-mpls:admin-state')
    ] = 'enable'
    """
    Used to disable the entire static route and all its next-hops.
    """
    operation: Annotated[
        Optional[EnumerationEnum322], Field(alias='srl_nokia-mpls:operation')
    ] = 'swap'
    """
    The operation to be performed with the top label.
    """
    collect_stats: Annotated[
        Optional[bool], Field(alias='srl_nokia-mpls:collect-stats')
    ] = False
    """
    When set to true, stats resources are used to count the number of incoming packets matching the top label value of this static MPLS route
    """
    installed: Annotated[Optional[bool], Field(alias='srl_nokia-mpls:installed')] = None
    """
    Indicates whether the MPLS route entry was programmed in the data path.
    """
    next_hop_group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mpls:next-hop-group',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Specifies the next hop group name
    """
    resolved_next_hop_group_id: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mpls:resolved-next-hop-group-id',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    A system-wide unique identifier of a next-hop-group indirection object (system allocated).
    """


class StaticFecListEntry(BaseModel):
    """
    Configure static FEC
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    fec_prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-ldp:fec-prefix'),
    ] = None
    """
    Static FEC IP prefix
    """
    swap: Annotated[Optional[bool], Field(alias='srl_nokia-ldp:swap')] = None
    """
    Swap label. If false, label is popped
    """


class StaticMacContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mac: Annotated[
        Optional[List[MacListEntry5]],
        Field(alias='srl_nokia-bridge-table-static-mac:mac'),
    ] = None


class StaticRoutesContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-static-routes:admin-state')
    ] = 'enable'
    """
    general admin-state option.
    """
    route: Annotated[
        Optional[List[RouteListEntry31]], Field(alias='srl_nokia-static-routes:route')
    ] = None


class StaticCase(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    static: Annotated[
        Optional[StaticContainer2], Field(alias='srl_nokia-network-instance:static')
    ] = None


class StatisticsContainer(BaseModel):
    """
    ICMP version 4 statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    total: Annotated[
        Optional[TotalContainer], Field(alias='srl_nokia-network-instance:total')
    ] = None
    type: Annotated[
        Optional[List[TypeListEntry]], Field(alias='srl_nokia-network-instance:type')
    ] = None
    last_clear: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-network-instance:last-clear',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Timestamp of the last time the interface counters were cleared.
    """


class StatisticsContainer10(BaseModel):
    """
    PIM Interface Statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received: Annotated[
        Optional[ReceivedContainer3], Field(alias='srl_nokia-pim:received')
    ] = None
    transmitted: Annotated[
        Optional[TransmittedContainer3], Field(alias='srl_nokia-pim:transmitted')
    ] = None
    join_policy_drops: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:join-policy-drops', ge=0, le=4294967295),
    ] = 0
    """
    The number of Join Prune PDU drops due to policy mismatch

    The number of times the join policy match resulted in dropping Join-Prune message or one of the source group contained in the message.
    """
    register_policy_drops: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:register-policy-drops', ge=0, le=4294967295),
    ] = 0
    """
    The number of times the register policy match resulted in dropping Register Message
    """
    sg_count: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:sg-count', ge=0, le=4294967295)
    ] = 0
    """
    The number of (S,G) entries on this interface
    """
    star_g_count: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:star-g-count', ge=0, le=4294967295)
    ] = 0
    """
    The number of (*,G) entries on this interface
    """
    star_star_rp_count: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:star-star-rp-count', ge=0, le=4294967295),
    ] = 0
    """
    The number of (*,*,RP) entries on this interface
    """


class StatisticsContainer11(BaseModel):
    """
    PIM Interface statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received: Annotated[
        Optional[ReceivedContainer4], Field(alias='srl_nokia-pim:received')
    ] = None
    transmitted: Annotated[
        Optional[TransmittedContainer4], Field(alias='srl_nokia-pim:transmitted')
    ] = None
    join_policy_drops: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:join-policy-drops', ge=0, le=4294967295),
    ] = 0
    """
    The number of Join Prune PDU drops due to policy mismatch

    The number of times the join policy match resulted in dropping Join-Prune message or one of the source group contained in the message.
    """
    register_policy_drops: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:register-policy-drops', ge=0, le=4294967295),
    ] = 0
    """
    The number of times the register policy match resulted in dropping Register Message
    """
    sg_count: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:sg-count', ge=0, le=4294967295)
    ] = 0
    """
    The number of (S,G) entries on this interface
    """
    star_g_count: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:star-g-count', ge=0, le=4294967295)
    ] = 0
    """
    The number of (*,G) entries on this interface
    """
    star_star_rp_count: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:star-star-rp-count', ge=0, le=4294967295),
    ] = 0
    """
    The number of (*,*,RP) entries on this interface
    """


class StatisticsContainer13(BaseModel):
    """
    Global MLD statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received: Annotated[
        Optional[ReceivedContainer5], Field(alias='srl_nokia-mld:received')
    ] = None
    transmitted: Annotated[
        Optional[TransmittedContainer5], Field(alias='srl_nokia-mld:transmitted')
    ] = None
    error: Annotated[Optional[ErrorContainer], Field(alias='srl_nokia-mld:error')] = (
        None
    )
    multicast_states: Annotated[
        Optional[MulticastStatesContainer],
        Field(alias='srl_nokia-mld:multicast-states'),
    ] = None


class StatisticsContainer14(BaseModel):
    """
    Statistics objects
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    hello_received: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:hello-received', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages received
    """
    hello_sent: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:hello-sent', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages sent
    """
    hello_message_errors: Annotated[
        Optional[HelloMessageErrorsContainer],
        Field(alias='srl_nokia-ldp:hello-message-errors'),
    ] = None


class StatisticsContainer15(BaseModel):
    """
    Statistics objects
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    hello_received: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:hello-received', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages received
    """
    hello_sent: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:hello-sent', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages sent
    """
    hello_message_errors: Annotated[
        Optional[HelloMessageErrorsContainer2],
        Field(alias='srl_nokia-ldp:hello-message-errors'),
    ] = None


class StatisticsContainer16(BaseModel):
    """
    Statistics objects
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    hello_message_errors: Annotated[
        Optional[HelloMessageErrorsContainer3],
        Field(alias='srl_nokia-ldp:hello-message-errors'),
    ] = None


class StatisticsContainer17(BaseModel):
    """
    Statistics objects
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    hello_message_errors: Annotated[
        Optional[HelloMessageErrorsContainer4],
        Field(alias='srl_nokia-ldp:hello-message-errors'),
    ] = None


class StatisticsContainer2(BaseModel):
    """
    ICMP version 6 statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    total: Annotated[
        Optional[TotalContainer2], Field(alias='srl_nokia-network-instance:total')
    ] = None
    type: Annotated[
        Optional[List[TypeListEntry2]], Field(alias='srl_nokia-network-instance:type')
    ] = None
    last_clear: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-network-instance:last-clear',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Timestamp of the last time the interface counters were cleared.
    """


class StatisticsContainer20(BaseModel):
    """
    Instance level statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    spf_runs: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:spf-runs', ge=0, le=4294967295)
    ] = 0
    """
    The number of times a full SPF run has been performed on either the L1 or L2 LSDB since the IS-IS manager restarted
    """
    last_spf: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:last-spf',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The elapsed time since the last time a full SPF run was run on either the L1 or L2 LSDB
    """
    partial_spf_runs: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:partial-spf-runs', ge=0, le=4294967295),
    ] = 0
    """
    The number of times a partial SPF run has been performed on either the L1 or L2 LSDB since the IS-IS manager restarted
    """
    last_partial_spf: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:last-partial-spf',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The elapsed time since the last time a partial SPF run was run on either the L1 or L2 LSDB
    """
    pdu: Annotated[Optional[List[PduListEntry]], Field(alias='srl_nokia-isis:pdu')] = (
        None
    )


class StatisticsContainer21(BaseModel):
    """
    Interface per level statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    pdu: Annotated[Optional[List[PduListEntry2]], Field(alias='srl_nokia-isis:pdu')] = (
        None
    )


class StatisticsContainer22(BaseModel):
    """
    Statistics associated with this IS-IS interface.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    adjacency_changes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:adjacency-changes', ge=0, le=4294967295),
    ] = 0
    """
    Number of times an adjacency state change has occurred on this circuit(summed across all adjacencies).
    """
    adjacency_number: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:adjacency-number', ge=0, le=4294967295),
    ] = 0
    """
    Number of adjacencies on this circuit.
    """
    authentication_failures: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:authentication-failures', ge=0, le=4294967295),
    ] = 0
    """
    Number of times an IS-IS control PDU with the correct auth type has failed to pass authentication validation on the interface.
    """
    authentication_type_failures: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:authentication-type-failures', ge=0, le=4294967295),
    ] = 0
    """
    Number of times an IS-IS control PDU with an auth type field different from that for this system has been received on the interface.
    """
    system_id_length_mismatches: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:system-id-length-mismatches', ge=0, le=4294967295),
    ] = 0
    """
    Number of times an IS-IS control PDU with a system ID field length different from that for this system has been received on the interface.
    """
    designated_is_changes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:designated-is-changes', ge=0, le=4294967295),
    ] = 0
    """
    Number of times the Designated IS has changed on this circuit.
    """
    max_area_address_mismatches: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:max-area-address-mismatches', ge=0, le=4294967295),
    ] = 0
    """
    Number of times an IS-IS control PDU with a max area address field different from that for this system has been received on the interface.
    """
    rejected_adjacencies: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:rejected-adjacencies', ge=0, le=4294967295),
    ] = 0
    """
    Number of times an adjacency has been rejected on this circuit.
    """
    area_address_mismatches: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:area-address-mismatches', ge=0, le=4294967295),
    ] = 0
    """
    Number of times an IS-IS L1 hello was received on this circuit with a area address field different from that for this system
    """


class StatisticsContainer23(BaseModel):
    """
    Per level statistics in an ISIS instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    authentication_failures: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:authentication-failures', ge=0, le=4294967295),
    ] = 0
    """
    Number of times an IS-IS control PDU associated with this level had the correct auth type but failed to pass authentication validation
    """
    authentication_type_failures: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:authentication-type-failures', ge=0, le=4294967295),
    ] = 0
    """
    Number of times an IS-IS control PDU associated with this level had an auth type field different from that for this system
    """
    total_lsps: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:total-lsps', ge=0, le=4294967295)
    ] = 0
    """
    Number of LSPs in the database at the system level
    """
    corrupted_lsps: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:corrupted-lsps', ge=0, le=4294967295)
    ] = 0
    """
    Number of corrupted in-memory LSPs detected. LSPs received from the wire with a bad checksum are silently dropped and not counted. LSPs received from the wire with parse errors are counted by lsp-errors
    """
    database_overloads: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:database-overloads', ge=0, le=4294967295),
    ] = 0
    """
    Number of times the database has become overloaded
    """
    exceeded_max_sequence_number: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:exceeded-max-sequence-number', ge=0, le=4294967295),
    ] = 0
    """
    Number of times the system has attempted to exceed the maximum sequence number
    """
    system_id_length_mismatches: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:system-id-length-mismatches', ge=0, le=4294967295),
    ] = 0
    """
    Number of times an IS-IS control PDU associated with this level was received with a system ID field length different from that for this system
    """
    lsp_errors: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:lsp-errors', ge=0, le=4294967295)
    ] = 0
    """
    Number of received LSPs with parse errors
    """
    manual_address_drop_from_area: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-isis:manual-address-drop-from-area', ge=0, le=4294967295
        ),
    ] = 0
    """
    number of times a manual address has been dropped from area
    """
    max_area_address_mismatches: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:max-area-address-mismatches', ge=0, le=4294967295),
    ] = 0
    """
    Number of times an IS-IS control PDU associated with this level was received with a max area address field different from that for this system
    """
    own_lsp_purges: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:own-lsp-purges', ge=0, le=4294967295)
    ] = 0
    """
    Number of times a zero-aged copy of the system's own LSP is received from some other node
    """
    sequence_number_skips: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:sequence-number-skips', ge=0, le=4294967295),
    ] = 0
    """
    Number of times a sequence number skip has occurred
    """
    spf_runs: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:spf-runs', ge=0, le=4294967295)
    ] = 0
    """
    number of times a full SPF run has been performed on the level LSDB since the IS-IS manager restarted
    """


class StatisticsContainer3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics:active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of entries that are active on the evpn-mpls instance.
    """
    total_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics:total-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs, active and inactive, on the evpn-mpls instance.
    """
    failed_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics:failed-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs, which have not been programmed on at least one slot.
    """
    mac_type: Annotated[
        Optional[List[MacTypeListEntry]],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics:mac-type'
        ),
    ] = None


class StatisticsContainer30(BaseModel):
    """
    Global IGMP statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received: Annotated[
        Optional[ReceivedContainer10], Field(alias='srl_nokia-igmp:received')
    ] = None
    transmitted: Annotated[
        Optional[TransmittedContainer8], Field(alias='srl_nokia-igmp:transmitted')
    ] = None
    error: Annotated[Optional[ErrorContainer4], Field(alias='srl_nokia-igmp:error')] = (
        None
    )
    multicast_states: Annotated[
        Optional[MulticastStatesContainer4],
        Field(alias='srl_nokia-igmp:multicast-states'),
    ] = None


class StatisticsContainer31(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    total_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:total-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of proxy ARP entries.
    """
    active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of active proxy ARP entries.
    """
    in_active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:in-active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of inactive proxy ARP entries.
    """
    pending_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:pending-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of pending proxy ARP entries.
    """
    neighbor_origin: Annotated[
        Optional[List[NeighborOriginListEntry]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:neighbor-origin'),
    ] = None


class StatisticsContainer32(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    total_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:total-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of proxy ARP entries.
    """
    active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of active proxy ARP entries.
    """
    in_active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:in-active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of inactive proxy ARP entries.
    """
    pending_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:pending-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of pending proxy ARP entries.
    """
    neighbor_origin: Annotated[
        Optional[List[NeighborOriginListEntry2]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:neighbor-origin'),
    ] = None


class StatisticsContainer33(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-mac-table:active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of entries that are active in the mac-table.
    """
    total_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-mac-table:total-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs, active and inactive, that are present in the mac-table.
    """
    failed_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bridge-table-mac-table:failed-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs, which have not been programmed on atleast one slot
    """
    mac_type: Annotated[
        Optional[List[MacTypeListEntry4]],
        Field(alias='srl_nokia-bridge-table-mac-table:mac-type'),
    ] = None


class StatisticsContainer34(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    active_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ip-route-tables:active-routes', ge=0, le=4294967295),
    ] = None
    """
    The total number of prefixes, belonging to this address family, with an active route in the FIB.
    """
    active_routes_with_ecmp: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ip-route-tables:active-routes-with-ecmp',
            ge=0,
            le=4294967295,
        ),
    ] = None
    """
    The total number of prefixes, belonging to this address family, that have an active route in the FIB with multiple ECMP next-hops.
    """
    resilient_hash_routes: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ip-route-tables:resilient-hash-routes', ge=0, le=4294967295
        ),
    ] = None
    """
    The total number of prefixes, belonging to this address family, with an active route in the FIB that have resilient hash support.
    """
    fib_failed_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ip-route-tables:fib-failed-routes', ge=0, le=4294967295),
    ] = None
    """
    The total number of prefixes, belonging to this address family, that were not installed successfully because datapath resources were unavailable.
    """
    total_routes: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ip-route-tables:total-routes',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of routes, active and inactive, belonging to this address family, that are present in the routing table.
    """


class StatisticsContainer35(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    active_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ip-route-tables:active-routes', ge=0, le=4294967295),
    ] = None
    """
    The total number of prefixes, belonging to this address family, with an active route in the FIB.
    """
    active_routes_with_ecmp: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ip-route-tables:active-routes-with-ecmp',
            ge=0,
            le=4294967295,
        ),
    ] = None
    """
    The total number of prefixes, belonging to this address family, that have an active route in the FIB with multiple ECMP next-hops.
    """
    resilient_hash_routes: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ip-route-tables:resilient-hash-routes', ge=0, le=4294967295
        ),
    ] = None
    """
    The total number of prefixes, belonging to this address family, with an active route in the FIB that have resilient hash support.
    """
    fib_failed_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ip-route-tables:fib-failed-routes', ge=0, le=4294967295),
    ] = None
    """
    The total number of prefixes, belonging to this address family, that were not installed successfully because datapath resources were unavailable.
    """
    total_routes: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ip-route-tables:total-routes',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of routes, active and inactive, belonging to this address family, that are present in the routing table.
    """


class StatisticsContainer37(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    active_tunnels: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tunnel-tables:active-tunnels', ge=0, le=4294967295),
    ] = None
    """
    The total number of tunnels, belonging to this address family, that are active.
    """
    inactive_tunnels: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tunnel-tables:inactive-tunnels', ge=0, le=4294967295),
    ] = None
    """
    The total number of tunnels, belonging to this address family, that are inactive (not programmed).
    """
    total_tunnels: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-tunnel-tables:total-tunnels', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of tunnels, active and inactive, belonging to this address family
    """


class StatisticsContainer38(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    active_tunnels: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tunnel-tables:active-tunnels', ge=0, le=4294967295),
    ] = None
    """
    The total number of tunnels, belonging to this address family, that are active.
    """
    inactive_tunnels: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tunnel-tables:inactive-tunnels', ge=0, le=4294967295),
    ] = None
    """
    The total number of tunnels, belonging to this address family, that are inactive (not programmed).
    """
    total_tunnels: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-tunnel-tables:total-tunnels', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of tunnels, active and inactive, belonging to this address family
    """


class StatisticsContainer39(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-connection-point-bridge-table-statistics:active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of entries that are active on the sub-interface.
    """
    total_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-connection-point-bridge-table-statistics:total-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs, active and inactive, on the sub-interface.
    """
    failed_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-connection-point-bridge-table-statistics:failed-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs, which have not been programmed on atleast one slot
    """
    mac_type: Annotated[
        Optional[List[MacTypeListEntry5]],
        Field(alias='srl_nokia-connection-point-bridge-table-statistics:mac-type'),
    ] = None


class StatisticsContainer4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of entries that are active on the sub-interface.
    """
    total_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:total-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs, active and inactive, on the sub-interface.
    """
    failed_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:failed-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs, which have not been programmed on atleast one slot
    """
    mac_type: Annotated[
        Optional[List[MacTypeListEntry2]],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:mac-type'
        ),
    ] = None


class StatisticsContainer5(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    active_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:active-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of entries that are active on the sub-interface.
    """
    total_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:total-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs, active and inactive, on the sub-interface.
    """
    failed_entries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:failed-entries',
            ge=0,
            le=18446744073709551615,
        ),
    ] = 0
    """
    The total number of macs, which have not been programmed on atleast one slot
    """
    mac_type: Annotated[
        Optional[List[MacTypeListEntry3]],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:mac-type'
        ),
    ] = None


class StatisticsContainer6(BaseModel):
    """
    Container for BGP statistics.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    total_paths: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:total-paths', ge=0, le=18446744073709551615),
    ] = 0
    """
    The total number of path attribute objects used by all received BGP routes
    """
    total_prefixes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:total-prefixes', ge=0, le=18446744073709551615),
    ] = None
    """
    The total number of unique NLRI contained in all received BGP routes associated with the BGP instance or the peer-group.
    """
    path_memory: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:path-memory', ge=0, le=18446744073709551615),
    ] = 0
    """
    The total number of bytes required to store the path attribute objects used by all received BGP routes
    """
    total_received_routes: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp:total-received-routes', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of received BGP routes, summed across all address families
    """
    total_active_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:total-active-routes', ge=0, le=18446744073709551615),
    ] = 0
    """
    The total number of received BGP routes that are active (installed for forwarding), summed across all address families
    """
    total_decayed_routes: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp:total-decayed-routes', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of received BGP routes that are eligible for use but have a route-flap-damping FOM greater than 0 and less than the suppress-threshold
    """
    total_history_routes: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp:total-history-routes', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of recently withdrawn BGP routes that are still held in the BGP RIB because their route-flap-damping FOM is greater than 0
    """
    total_suppressed_routes: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp:total-suppressed-routes', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of received BGP routes that are suppressed because their route-flap-damping FOM is greater than the suppress-threshold
    """
    total_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:total-peers', ge=0, le=65535)
    ] = None
    """
    The total number of configured BGP peers
    """
    up_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:up-peers', ge=0, le=65535)
    ] = None
    """
    The number of configured BGP peers that are currently in the established state
    """
    disabled_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:disabled-peers', ge=0, le=65535)
    ] = None
    """
    The number of configured BGP peers that are administratively disabled
    """
    dynamic_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:dynamic-peers', ge=0, le=65535)
    ] = None
    """
    The number of dynamic BGP peers that are currently in the established state, counting sessions resulting from accepted incoming TCP connections and outgoing TCP connections triggered by LLDP auto-discovery
    """


class StatisticsContainer7(BaseModel):
    """
    Container for BGP statistics.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    total_paths: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:total-paths', ge=0, le=18446744073709551615),
    ] = 0
    """
    The total number of path attribute objects used by received BGP routes associated with the peer-group
    """
    total_prefixes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:total-prefixes', ge=0, le=18446744073709551615),
    ] = None
    """
    The total number of unique NLRI contained in all received BGP routes associated with the BGP instance or the peer-group.
    """
    path_memory: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:path-memory', ge=0, le=18446744073709551615),
    ] = 0
    """
    The total number of bytes required to store the path attribute objects used by received BGP routes associated with the peer-group
    """
    total_received_routes: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp:total-received-routes', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of received BGP routes associated with the peer-group, summed across all address families
    """
    total_active_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:total-active-routes', ge=0, le=18446744073709551615),
    ] = 0
    """
    The total number of received BGP routes that are active (installed for forwarding) and associated with the peer-group, summed across all address families
    """
    total_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:total-peers', ge=0, le=65535)
    ] = None
    """
    The total number of configured BGP peers associated with the peer-group
    """
    up_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:up-peers', ge=0, le=65535)
    ] = None
    """
    The number of configured BGP peers associated with the peer-group that are currently in the established state
    """
    disabled_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:disabled-peers', ge=0, le=65535)
    ] = None
    """
    The number of configured BGP peers associated with the peer-group that are administratively disabled
    """
    dynamic_peers: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:dynamic-peers', ge=0, le=65535)
    ] = None
    """
    The number of dynamic BGP peers associated with the peer-group that are currently in the established state, counting sessions resulting from accepted incoming TCP connections and outgoing TCP connections triggered by LLDP auto-discovery
    """


class StatisticsContainer8(BaseModel):
    """
    Global PIM address family statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received: Annotated[
        Optional[ReceivedContainer], Field(alias='srl_nokia-pim:received')
    ] = None
    transmitted: Annotated[
        Optional[TransmittedContainer], Field(alias='srl_nokia-pim:transmitted')
    ] = None
    forwarded_candidate_rp_advertisements: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:forwarded-candidate-rp-advertisements',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    The number of Candidate-RP Advertisements that were forwarded

    C-RP-Adv's are forwarded when the received advertisement has a router alert set and the destination address is not the router's local address.
    """
    forwarded_candidate_rp_advertisement_drops: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:forwarded-candidate-rp-advertisement-drops',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    The number of times the Candidate-RP Advertisements could not be forwarded
    """
    sg_count: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:sg-count', ge=0, le=4294967295)
    ] = 0
    """
    The number of (S,G)s
    """
    star_g_count: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:star-g-count', ge=0, le=4294967295)
    ] = 0
    """
    The number of (*,G)s
    """
    star_star_rp_count: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:star-star-rp-count', ge=0, le=4294967295),
    ] = 0
    """
    The number of (*,*,RP)s
    """


class StatisticsContainer9(BaseModel):
    """
    Global PIM address family statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received: Annotated[
        Optional[ReceivedContainer2], Field(alias='srl_nokia-pim:received')
    ] = None
    transmitted: Annotated[
        Optional[TransmittedContainer2], Field(alias='srl_nokia-pim:transmitted')
    ] = None
    forwarded_candidate_rp_advertisements: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:forwarded-candidate-rp-advertisements',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    The number of Candidate-RP Advertisements that were forwarded

    C-RP-Adv's are forwarded when the received advertisement has a router alert set and the destination address is not the router's local address.
    """
    forwarded_candidate_rp_advertisement_drops: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:forwarded-candidate-rp-advertisement-drops',
            ge=0,
            le=4294967295,
        ),
    ] = 0
    """
    The number of times the Candidate-RP Advertisements could not be forwarded
    """
    sg_count: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:sg-count', ge=0, le=4294967295)
    ] = 0
    """
    The number of (S,G)s
    """
    star_g_count: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:star-g-count', ge=0, le=4294967295)
    ] = 0
    """
    The number of (*,G)s
    """
    star_star_rp_count: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:star-star-rp-count', ge=0, le=4294967295),
    ] = 0
    """
    The number of (*,*,RP)s
    """


class StpContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-stp:admin-state')
    ] = 'disable'
    """
    Administratively enable or disable the stp instance.

    When STP on the network instance is administratively disabled,
    any BPDUs are forwarded transparently.
    When STP on the network instance is administratively enabled,
    but the administrative state on a sub-interface is disabled,
    BPDUs received on such a subinterface are discarded.
    """
    mode: Annotated[Optional[EnumerationEnum86], Field(alias='srl_nokia-stp:mode')] = (
        'rstp'
    )
    """
    To be compatible with the different iterations of the IEEE 802.1D
    standard, the following variants of the Spanning Tree protocol
    are supported:

    rstp
    Rapid Spanning Tree Protocol (RSTP) compliant with IEEE 802.1D-2004.
    dot1w
    Compliant with IEEE 802.1w
    comp-dot1w
    Operation as in RSTP but backwards compatible with IEEE 802.1w
    This mode was introduced for interoperability with some MTU types.
    mstp
    Compliant with the Multiple Spanning Tree Protocol specified in
    IEEE 802.1Q REV/D5.0-09/2005.
    pmstp
    Compliant with the Multiple Spanning Tree Protocol specified in
    IEEE 802.1Q REV/D3.0-04/2005 but with some changes to make it backwards
    compatible to 802.1Q 2003 edition and IEEE 802.1w
    """
    bridge_priority: Annotated[
        Optional[int], Field(alias='srl_nokia-stp:bridge-priority', ge=1, le=65535)
    ] = 32768
    """
    The bridge-priority command is used to populate the priority portion
    of the bridge ID field within outbound BPDUs (the most significant 4
    bits of the bridge ID). It is also used as part of the decision process
    when determining the best BPDU between messages received and sent.
    When running MSTP, this is the bridge priority used for the CIST.

    All values are truncated to multiples of 4096, conforming with
    IEEE 802.1t and 802.1D-2004.
    """
    max_age: Annotated[
        Optional[int], Field(alias='srl_nokia-stp:max-age', ge=6, le=40)
    ] = 20
    """
    The max-age command indicates how many hops a BPDU can traverse the
    network starting from the root bridge. The message age field in a BPDU
    transmitted by the root bridge is initialized to 0. Each other bridge
    takes the message_age value from BPDUs received on their root port and
    increment this value by 1. Therefore, the message_age reflects the
    distance from the root bridge. BPDUs with a message age exceeding
    max-age are ignored.

    STP uses the max-age value configured in the root bridge.
    This value is propagated to the other bridges by the BPDUs.
    Modifying the max-age parameter must be done in the constraints of the
    following two formulas:

    2 x (Bridge_Forward_Delay - 1.0 seconds) ? Bridge_Max_Age Bridge_Max_Age ?
    2 x (Bridge_Hello_Time + 1.0 seconds)
    """
    forward_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-stp:forward-delay', ge=4, le=30)
    ] = 15
    """
    RSTP, as defined in the IEEE 802.1D-2004 standards, normally transitions
    to the forwarding state by a handshaking mechanism (rapid transition),
    without any waiting times. If handshaking fails (for example, on shared
    links, as follows), the system falls back to the timer-based mechanism
    defined in the original STP (802.1D-1998) standard.

    A shared link is a link with more than two Ethernet bridges (for example,
    a shared 10/100BaseT segment). The port-type command is used to
    configure a link as point-to-point or shared.

    For timer-based transitions, the 802.1D-2004 standard defines an internal
    variable forward-delay, which is used in calculating the default number
    of seconds that a instance or sub-interface spends in the discarding and
    learning states when transitioning to the forwarding state.
    The value of the forward-delay variable depends on the STP operating mode
    of the instance:

    In RSTP mode, but only when the instance or sub-interface has not fallen
    back to legacy STP operation, the value configured by the hello-time
    command is used.

    In all other situations, the value configured by the forward-delay
    command is used.

    Modifying the forward-delay parameter must be done in the constraints of the
    following two formulas:

    2 x (Bridge_Forward_Delay - 1.0 seconds) ? Bridge_Max_Age Bridge_Max_Age ?
    2 x (Bridge_Hello_Time + 1.0 seconds)
    """
    hello_time: Annotated[
        Optional[int], Field(alias='srl_nokia-stp:hello-time', ge=1, le=10)
    ] = 2
    """
    The hello-time command configures the Spanning Tree Protocol (STP)
    hello time for the Virtual Private LAN Service (VPLS) STP instance.

    The seconds parameter defines the default timer value that controls
    the sending interval between BPDU configuration messages by this bridge,
    on ports where this bridge assumes the designated role.

    The active hello time for the spanning tree is determined by the root
    bridge (except when the STP is running in RSTP mode, then the hello time
    is always taken from the locally configured parameter).

    Modifying the hello-time parameter must be done in the constraints of the
    following two formulas:

    2 x (Bridge_Forward_Delay - 1.0 seconds) ? Bridge_Max_Age Bridge_Max_Age ?
    2 x (Bridge_Hello_Time + 1.0 seconds)
    """
    hold_count: Annotated[
        Optional[int], Field(alias='srl_nokia-stp:hold-count', ge=4, le=20)
    ] = 6
    """
    The hold-count command configures the peak number of BPDUs that
    can be transmitted in a period of one second.
    """
    mst_name: Annotated[Optional[str], Field(alias='srl_nokia-stp:mst-name')] = None
    """
    The MST name defines the name that the operator gives to a region.
    Together with MST revision and the VLAN to mst-instance mapping,
    it forms the MST configuration identifier. Two bridges that have
    the same MST configuration identifier form a region if they exchange
    BPDUs.
    """
    mst_revision: Annotated[
        Optional[int], Field(alias='srl_nokia-stp:mst-revision', ge=1, le=65535)
    ] = None
    """
    Multiple Spanning Tree configuration revision. The MST revision together
    with MST-name and VLAN to MST-instance mapping define the MST
    configuration identifier. Two bridges that have the same MST
    configuration identifier form a region if they exchange BPDUs.
    """
    mst_max_hops: Annotated[
        Optional[int], Field(alias='srl_nokia-stp:mst-max-hops', ge=1, le=40)
    ] = None
    """
    Maximum number of hops the BPDU can traverse inside the region.
    Outside the region, max-age is used.
    """
    mst_instance: Annotated[
        Optional[List[MstInstanceListEntry]], Field(alias='srl_nokia-stp:mst-instance')
    ] = None


class SubTlvsContainer8(BaseModel):
    """
    Sub-TLVs of TLV 242
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    sr_capabilities: Annotated[
        Optional[SrCapabilitiesContainer], Field(alias='srl_nokia-isis:sr-capabilities')
    ] = None
    sr_algorithm: Annotated[
        Optional[SrAlgorithmContainer], Field(alias='srl_nokia-isis:sr-algorithm')
    ] = None
    sr_local_block: Annotated[
        Optional[SrLocalBlockContainer], Field(alias='srl_nokia-isis:sr-local-block')
    ] = None
    node_msd: Annotated[
        Optional[NodeMsdContainer], Field(alias='srl_nokia-isis:node-msd')
    ] = None


class SubtlvListEntry(BaseModel):
    """
    List of subTLV types in the LSDB for the specified TLV
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    segment_routing_algorithms: Annotated[
        Optional[SegmentRoutingAlgorithmsContainer],
        Field(alias='srl_nokia-isis:segment-routing-algorithms'),
    ] = None
    segment_routing_capability: Annotated[
        Optional[SegmentRoutingCapabilityContainer],
        Field(alias='srl_nokia-isis:segment-routing-capability'),
    ] = None
    node_msds: Annotated[
        Optional[NodeMsdsContainer], Field(alias='srl_nokia-isis:node-msds')
    ] = None
    sbfd_discriminators: Annotated[
        Optional[SbfdDiscriminatorsContainer],
        Field(alias='srl_nokia-isis:sbfd-discriminators'),
    ] = None


class SubtlvListEntry2(BaseModel):
    """
    List of subTLV types in the LSDB for the specified TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    admin_group: Annotated[
        Optional[AdminGroupContainer], Field(alias='srl_nokia-isis:admin-group')
    ] = None
    link_id: Annotated[
        Optional[LinkIdContainer], Field(alias='srl_nokia-isis:link-id')
    ] = None
    ipv4_interface_address: Annotated[
        Optional[Ipv4InterfaceAddressContainer],
        Field(alias='srl_nokia-isis:ipv4-interface-address'),
    ] = None
    ipv4_neighbor_address: Annotated[
        Optional[Ipv4NeighborAddressContainer],
        Field(alias='srl_nokia-isis:ipv4-neighbor-address'),
    ] = None
    max_link_bandwidth: Annotated[
        Optional[MaxLinkBandwidthContainer],
        Field(alias='srl_nokia-isis:max-link-bandwidth'),
    ] = None
    max_reservable_link_bandwidth: Annotated[
        Optional[MaxReservableLinkBandwidthContainer],
        Field(alias='srl_nokia-isis:max-reservable-link-bandwidth'),
    ] = None
    unreserved_bandwidth: Annotated[
        Optional[UnreservedBandwidthContainer],
        Field(alias='srl_nokia-isis:unreserved-bandwidth'),
    ] = None
    ipv6_interface_address: Annotated[
        Optional[Ipv6InterfaceAddressContainer],
        Field(alias='srl_nokia-isis:ipv6-interface-address'),
    ] = None
    ipv6_neighbor_address: Annotated[
        Optional[Ipv6NeighborAddressContainer],
        Field(alias='srl_nokia-isis:ipv6-neighbor-address'),
    ] = None
    extended_admin_group: Annotated[
        Optional[ExtendedAdminGroupContainer],
        Field(alias='srl_nokia-isis:extended-admin-group'),
    ] = None
    te_default_metric: Annotated[
        Optional[TeDefaultMetricContainer],
        Field(alias='srl_nokia-isis:te-default-metric'),
    ] = None
    link_attributes: Annotated[
        Optional[LinkAttributesContainer], Field(alias='srl_nokia-isis:link-attributes')
    ] = None
    link_protection_type: Annotated[
        Optional[LinkProtectionTypeContainer],
        Field(alias='srl_nokia-isis:link-protection-type'),
    ] = None
    bandwidth_constraints: Annotated[
        Optional[BandwidthConstraintsContainer],
        Field(alias='srl_nokia-isis:bandwidth-constraints'),
    ] = None
    unconstrained_lsp: Annotated[
        Optional[UnconstrainedLspContainer],
        Field(alias='srl_nokia-isis:unconstrained-lsp'),
    ] = None
    adjacency_sids: Annotated[
        Optional[AdjacencySidsContainer], Field(alias='srl_nokia-isis:adjacency-sids')
    ] = None
    lan_adjacency_sids: Annotated[
        Optional[LanAdjacencySidsContainer],
        Field(alias='srl_nokia-isis:lan-adjacency-sids'),
    ] = None
    link_delay: Annotated[
        Optional[LinkDelayContainer], Field(alias='srl_nokia-isis:link-delay')
    ] = None
    min_max_link_delay: Annotated[
        Optional[MinMaxLinkDelayContainer],
        Field(alias='srl_nokia-isis:min-max-link-delay'),
    ] = None
    link_delay_variation: Annotated[
        Optional[LinkDelayVariationContainer],
        Field(alias='srl_nokia-isis:link-delay-variation'),
    ] = None
    link_loss: Annotated[
        Optional[LinkLossContainer], Field(alias='srl_nokia-isis:link-loss')
    ] = None
    residual_bandwidth: Annotated[
        Optional[ResidualBandwidthContainer],
        Field(alias='srl_nokia-isis:residual-bandwidth'),
    ] = None
    available_bandwidth: Annotated[
        Optional[AvailableBandwidthContainer],
        Field(alias='srl_nokia-isis:available-bandwidth'),
    ] = None
    utilized_bandwidth: Annotated[
        Optional[UtilizedBandwidthContainer],
        Field(alias='srl_nokia-isis:utilized-bandwidth'),
    ] = None
    application_specific_link_attributes: Annotated[
        Optional[ApplicationSpecificLinkAttributesContainer],
        Field(alias='srl_nokia-isis:application-specific-link-attributes'),
    ] = None


class SubtlvListEntry3(BaseModel):
    """
    List of subTLV types in the LSDB for the specified TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    tag: Annotated[Optional[TagContainer15], Field(alias='srl_nokia-isis:tag')] = None
    tag64: Annotated[Optional[Tag64Container], Field(alias='srl_nokia-isis:tag64')] = (
        None
    )
    flags: Annotated[Optional[FlagsContainer2], Field(alias='srl_nokia-isis:flags')] = (
        None
    )
    ipv4_source_router_id: Annotated[
        Optional[Ipv4SourceRouterIdContainer],
        Field(alias='srl_nokia-isis:ipv4-source-router-id'),
    ] = None
    ipv6_source_router_id: Annotated[
        Optional[Ipv6SourceRouterIdContainer],
        Field(alias='srl_nokia-isis:ipv6-source-router-id'),
    ] = None
    prefix_sids: Annotated[
        Optional[PrefixSidsContainer], Field(alias='srl_nokia-isis:prefix-sids')
    ] = None


class SubtlvListEntry4(BaseModel):
    """
    List of subTLV types in the LSDB for the specified TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    tag: Annotated[Optional[TagContainer16], Field(alias='srl_nokia-isis:tag')] = None
    tag64: Annotated[Optional[Tag64Container2], Field(alias='srl_nokia-isis:tag64')] = (
        None
    )
    flags: Annotated[Optional[FlagsContainer3], Field(alias='srl_nokia-isis:flags')] = (
        None
    )
    ipv4_source_router_id: Annotated[
        Optional[Ipv4SourceRouterIdContainer2],
        Field(alias='srl_nokia-isis:ipv4-source-router-id'),
    ] = None
    ipv6_source_router_id: Annotated[
        Optional[Ipv6SourceRouterIdContainer2],
        Field(alias='srl_nokia-isis:ipv6-source-router-id'),
    ] = None
    prefix_sids: Annotated[
        Optional[PrefixSidsContainer2], Field(alias='srl_nokia-isis:prefix-sids')
    ] = None


class SubtlvListEntry5(BaseModel):
    """
    List of subTLV types in the LSDB for the specified TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    admin_group: Annotated[
        Optional[AdminGroupContainer2], Field(alias='srl_nokia-isis:admin-group')
    ] = None
    link_id: Annotated[
        Optional[LinkIdContainer2], Field(alias='srl_nokia-isis:link-id')
    ] = None
    ipv4_interface_address: Annotated[
        Optional[Ipv4InterfaceAddressContainer2],
        Field(alias='srl_nokia-isis:ipv4-interface-address'),
    ] = None
    ipv4_neighbor_address: Annotated[
        Optional[Ipv4NeighborAddressContainer2],
        Field(alias='srl_nokia-isis:ipv4-neighbor-address'),
    ] = None
    max_link_bandwidth: Annotated[
        Optional[MaxLinkBandwidthContainer2],
        Field(alias='srl_nokia-isis:max-link-bandwidth'),
    ] = None
    max_reservable_link_bandwidth: Annotated[
        Optional[MaxReservableLinkBandwidthContainer2],
        Field(alias='srl_nokia-isis:max-reservable-link-bandwidth'),
    ] = None
    unreserved_bandwidth: Annotated[
        Optional[UnreservedBandwidthContainer2],
        Field(alias='srl_nokia-isis:unreserved-bandwidth'),
    ] = None
    ipv6_interface_address: Annotated[
        Optional[Ipv6InterfaceAddressContainer2],
        Field(alias='srl_nokia-isis:ipv6-interface-address'),
    ] = None
    ipv6_neighbor_address: Annotated[
        Optional[Ipv6NeighborAddressContainer2],
        Field(alias='srl_nokia-isis:ipv6-neighbor-address'),
    ] = None
    extended_admin_group: Annotated[
        Optional[ExtendedAdminGroupContainer2],
        Field(alias='srl_nokia-isis:extended-admin-group'),
    ] = None
    te_default_metric: Annotated[
        Optional[TeDefaultMetricContainer2],
        Field(alias='srl_nokia-isis:te-default-metric'),
    ] = None
    link_attributes: Annotated[
        Optional[LinkAttributesContainer2],
        Field(alias='srl_nokia-isis:link-attributes'),
    ] = None
    link_protection_type: Annotated[
        Optional[LinkProtectionTypeContainer2],
        Field(alias='srl_nokia-isis:link-protection-type'),
    ] = None
    bandwidth_constraints: Annotated[
        Optional[BandwidthConstraintsContainer2],
        Field(alias='srl_nokia-isis:bandwidth-constraints'),
    ] = None
    unconstrained_lsp: Annotated[
        Optional[UnconstrainedLspContainer2],
        Field(alias='srl_nokia-isis:unconstrained-lsp'),
    ] = None
    adjacency_sids: Annotated[
        Optional[AdjacencySidsContainer2], Field(alias='srl_nokia-isis:adjacency-sids')
    ] = None
    lan_adjacency_sids: Annotated[
        Optional[LanAdjacencySidsContainer2],
        Field(alias='srl_nokia-isis:lan-adjacency-sids'),
    ] = None
    link_delay: Annotated[
        Optional[LinkDelayContainer2], Field(alias='srl_nokia-isis:link-delay')
    ] = None
    min_max_link_delay: Annotated[
        Optional[MinMaxLinkDelayContainer2],
        Field(alias='srl_nokia-isis:min-max-link-delay'),
    ] = None
    link_delay_variation: Annotated[
        Optional[LinkDelayVariationContainer2],
        Field(alias='srl_nokia-isis:link-delay-variation'),
    ] = None
    link_loss: Annotated[
        Optional[LinkLossContainer2], Field(alias='srl_nokia-isis:link-loss')
    ] = None
    residual_bandwidth: Annotated[
        Optional[ResidualBandwidthContainer2],
        Field(alias='srl_nokia-isis:residual-bandwidth'),
    ] = None
    available_bandwidth: Annotated[
        Optional[AvailableBandwidthContainer2],
        Field(alias='srl_nokia-isis:available-bandwidth'),
    ] = None
    utilized_bandwidth: Annotated[
        Optional[UtilizedBandwidthContainer2],
        Field(alias='srl_nokia-isis:utilized-bandwidth'),
    ] = None


class SubtlvListEntry6(BaseModel):
    """
    List of subTLV types in the LSDB for the specified TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    admin_group: Annotated[
        Optional[AdminGroupContainer3], Field(alias='srl_nokia-isis:admin-group')
    ] = None
    link_id: Annotated[
        Optional[LinkIdContainer3], Field(alias='srl_nokia-isis:link-id')
    ] = None
    ipv4_interface_address: Annotated[
        Optional[Ipv4InterfaceAddressContainer3],
        Field(alias='srl_nokia-isis:ipv4-interface-address'),
    ] = None
    ipv4_neighbor_address: Annotated[
        Optional[Ipv4NeighborAddressContainer3],
        Field(alias='srl_nokia-isis:ipv4-neighbor-address'),
    ] = None
    max_link_bandwidth: Annotated[
        Optional[MaxLinkBandwidthContainer3],
        Field(alias='srl_nokia-isis:max-link-bandwidth'),
    ] = None
    max_reservable_link_bandwidth: Annotated[
        Optional[MaxReservableLinkBandwidthContainer3],
        Field(alias='srl_nokia-isis:max-reservable-link-bandwidth'),
    ] = None
    unreserved_bandwidth: Annotated[
        Optional[UnreservedBandwidthContainer3],
        Field(alias='srl_nokia-isis:unreserved-bandwidth'),
    ] = None
    ipv6_interface_address: Annotated[
        Optional[Ipv6InterfaceAddressContainer3],
        Field(alias='srl_nokia-isis:ipv6-interface-address'),
    ] = None
    ipv6_neighbor_address: Annotated[
        Optional[Ipv6NeighborAddressContainer3],
        Field(alias='srl_nokia-isis:ipv6-neighbor-address'),
    ] = None
    extended_admin_group: Annotated[
        Optional[ExtendedAdminGroupContainer3],
        Field(alias='srl_nokia-isis:extended-admin-group'),
    ] = None
    te_default_metric: Annotated[
        Optional[TeDefaultMetricContainer3],
        Field(alias='srl_nokia-isis:te-default-metric'),
    ] = None
    link_attributes: Annotated[
        Optional[LinkAttributesContainer3],
        Field(alias='srl_nokia-isis:link-attributes'),
    ] = None
    link_protection_type: Annotated[
        Optional[LinkProtectionTypeContainer3],
        Field(alias='srl_nokia-isis:link-protection-type'),
    ] = None
    bandwidth_constraints: Annotated[
        Optional[BandwidthConstraintsContainer3],
        Field(alias='srl_nokia-isis:bandwidth-constraints'),
    ] = None
    unconstrained_lsp: Annotated[
        Optional[UnconstrainedLspContainer3],
        Field(alias='srl_nokia-isis:unconstrained-lsp'),
    ] = None
    adjacency_sids: Annotated[
        Optional[AdjacencySidsContainer3], Field(alias='srl_nokia-isis:adjacency-sids')
    ] = None
    lan_adjacency_sids: Annotated[
        Optional[LanAdjacencySidsContainer3],
        Field(alias='srl_nokia-isis:lan-adjacency-sids'),
    ] = None
    link_delay: Annotated[
        Optional[LinkDelayContainer3], Field(alias='srl_nokia-isis:link-delay')
    ] = None
    min_max_link_delay: Annotated[
        Optional[MinMaxLinkDelayContainer3],
        Field(alias='srl_nokia-isis:min-max-link-delay'),
    ] = None
    link_delay_variation: Annotated[
        Optional[LinkDelayVariationContainer3],
        Field(alias='srl_nokia-isis:link-delay-variation'),
    ] = None
    link_loss: Annotated[
        Optional[LinkLossContainer3], Field(alias='srl_nokia-isis:link-loss')
    ] = None
    residual_bandwidth: Annotated[
        Optional[ResidualBandwidthContainer3],
        Field(alias='srl_nokia-isis:residual-bandwidth'),
    ] = None
    available_bandwidth: Annotated[
        Optional[AvailableBandwidthContainer3],
        Field(alias='srl_nokia-isis:available-bandwidth'),
    ] = None
    utilized_bandwidth: Annotated[
        Optional[UtilizedBandwidthContainer3],
        Field(alias='srl_nokia-isis:utilized-bandwidth'),
    ] = None
    application_specific_link_attributes: Annotated[
        Optional[ApplicationSpecificLinkAttributesContainer2],
        Field(alias='srl_nokia-isis:application-specific-link-attributes'),
    ] = None


class SubtlvListEntry7(BaseModel):
    """
    List of subTLV types in the LSDB for the specified TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    admin_group: Annotated[
        Optional[AdminGroupContainer4], Field(alias='srl_nokia-isis:admin-group')
    ] = None
    link_id: Annotated[
        Optional[LinkIdContainer4], Field(alias='srl_nokia-isis:link-id')
    ] = None
    ipv4_interface_address: Annotated[
        Optional[Ipv4InterfaceAddressContainer4],
        Field(alias='srl_nokia-isis:ipv4-interface-address'),
    ] = None
    ipv4_neighbor_address: Annotated[
        Optional[Ipv4NeighborAddressContainer4],
        Field(alias='srl_nokia-isis:ipv4-neighbor-address'),
    ] = None
    max_link_bandwidth: Annotated[
        Optional[MaxLinkBandwidthContainer4],
        Field(alias='srl_nokia-isis:max-link-bandwidth'),
    ] = None
    max_reservable_link_bandwidth: Annotated[
        Optional[MaxReservableLinkBandwidthContainer4],
        Field(alias='srl_nokia-isis:max-reservable-link-bandwidth'),
    ] = None
    unreserved_bandwidth: Annotated[
        Optional[UnreservedBandwidthContainer4],
        Field(alias='srl_nokia-isis:unreserved-bandwidth'),
    ] = None
    ipv6_interface_address: Annotated[
        Optional[Ipv6InterfaceAddressContainer4],
        Field(alias='srl_nokia-isis:ipv6-interface-address'),
    ] = None
    ipv6_neighbor_address: Annotated[
        Optional[Ipv6NeighborAddressContainer4],
        Field(alias='srl_nokia-isis:ipv6-neighbor-address'),
    ] = None
    extended_admin_group: Annotated[
        Optional[ExtendedAdminGroupContainer4],
        Field(alias='srl_nokia-isis:extended-admin-group'),
    ] = None
    te_default_metric: Annotated[
        Optional[TeDefaultMetricContainer4],
        Field(alias='srl_nokia-isis:te-default-metric'),
    ] = None
    link_attributes: Annotated[
        Optional[LinkAttributesContainer4],
        Field(alias='srl_nokia-isis:link-attributes'),
    ] = None
    link_protection_type: Annotated[
        Optional[LinkProtectionTypeContainer4],
        Field(alias='srl_nokia-isis:link-protection-type'),
    ] = None
    bandwidth_constraints: Annotated[
        Optional[BandwidthConstraintsContainer4],
        Field(alias='srl_nokia-isis:bandwidth-constraints'),
    ] = None
    unconstrained_lsp: Annotated[
        Optional[UnconstrainedLspContainer4],
        Field(alias='srl_nokia-isis:unconstrained-lsp'),
    ] = None
    adjacency_sids: Annotated[
        Optional[AdjacencySidsContainer4], Field(alias='srl_nokia-isis:adjacency-sids')
    ] = None
    lan_adjacency_sids: Annotated[
        Optional[LanAdjacencySidsContainer4],
        Field(alias='srl_nokia-isis:lan-adjacency-sids'),
    ] = None
    link_delay: Annotated[
        Optional[LinkDelayContainer4], Field(alias='srl_nokia-isis:link-delay')
    ] = None
    min_max_link_delay: Annotated[
        Optional[MinMaxLinkDelayContainer4],
        Field(alias='srl_nokia-isis:min-max-link-delay'),
    ] = None
    link_delay_variation: Annotated[
        Optional[LinkDelayVariationContainer4],
        Field(alias='srl_nokia-isis:link-delay-variation'),
    ] = None
    link_loss: Annotated[
        Optional[LinkLossContainer4], Field(alias='srl_nokia-isis:link-loss')
    ] = None
    residual_bandwidth: Annotated[
        Optional[ResidualBandwidthContainer4],
        Field(alias='srl_nokia-isis:residual-bandwidth'),
    ] = None
    available_bandwidth: Annotated[
        Optional[AvailableBandwidthContainer4],
        Field(alias='srl_nokia-isis:available-bandwidth'),
    ] = None
    utilized_bandwidth: Annotated[
        Optional[UtilizedBandwidthContainer4],
        Field(alias='srl_nokia-isis:utilized-bandwidth'),
    ] = None
    application_specific_link_attributes: Annotated[
        Optional[ApplicationSpecificLinkAttributesContainer3],
        Field(alias='srl_nokia-isis:application-specific-link-attributes'),
    ] = None


class SubtlvListEntry8(BaseModel):
    """
    List of subTLV types in the LSDB for the specified TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    tag: Annotated[Optional[TagContainer17], Field(alias='srl_nokia-isis:tag')] = None
    tag64: Annotated[Optional[Tag64Container3], Field(alias='srl_nokia-isis:tag64')] = (
        None
    )
    flags: Annotated[Optional[FlagsContainer4], Field(alias='srl_nokia-isis:flags')] = (
        None
    )
    ipv4_source_router_id: Annotated[
        Optional[Ipv4SourceRouterIdContainer3],
        Field(alias='srl_nokia-isis:ipv4-source-router-id'),
    ] = None
    ipv6_source_router_id: Annotated[
        Optional[Ipv6SourceRouterIdContainer3],
        Field(alias='srl_nokia-isis:ipv6-source-router-id'),
    ] = None
    prefix_sids: Annotated[
        Optional[PrefixSidsContainer3], Field(alias='srl_nokia-isis:prefix-sids')
    ] = None


class SubtlvListEntry9(BaseModel):
    """
    List of subTLV types in the LSDB for the specified TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of subTLV being described. The type of subTLV is expressed as a canonical name.
    """
    tag: Annotated[Optional[TagContainer18], Field(alias='srl_nokia-isis:tag')] = None
    tag64: Annotated[Optional[Tag64Container4], Field(alias='srl_nokia-isis:tag64')] = (
        None
    )
    flags: Annotated[Optional[FlagsContainer5], Field(alias='srl_nokia-isis:flags')] = (
        None
    )
    ipv4_source_router_id: Annotated[
        Optional[Ipv4SourceRouterIdContainer4],
        Field(alias='srl_nokia-isis:ipv4-source-router-id'),
    ] = None
    ipv6_source_router_id: Annotated[
        Optional[Ipv6SourceRouterIdContainer4],
        Field(alias='srl_nokia-isis:ipv6-source-router-id'),
    ] = None
    prefix_sids: Annotated[
        Optional[PrefixSidsContainer4], Field(alias='srl_nokia-isis:prefix-sids')
    ] = None


class SubtlvsContainer(BaseModel):
    """
    This container describes router capability TLV sub-TLVs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    subtlv: Annotated[
        Optional[List[SubtlvListEntry]], Field(alias='srl_nokia-isis:subtlv')
    ] = None


class SubtlvsContainer2(BaseModel):
    """
    This container describes IS Neighbor sub-TLVs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    subtlv: Annotated[
        Optional[List[SubtlvListEntry2]], Field(alias='srl_nokia-isis:subtlv')
    ] = None


class SubtlvsContainer3(BaseModel):
    """
    This container describes IS prefix sub-TLVs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    subtlv: Annotated[
        Optional[List[SubtlvListEntry3]], Field(alias='srl_nokia-isis:subtlv')
    ] = None


class SubtlvsContainer4(BaseModel):
    """
    This container describes IS prefix sub-TLVs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    subtlv: Annotated[
        Optional[List[SubtlvListEntry4]], Field(alias='srl_nokia-isis:subtlv')
    ] = None


class SubtlvsContainer5(BaseModel):
    """
    This container describes IS Neighbor sub-TLVs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    subtlv: Annotated[
        Optional[List[SubtlvListEntry5]], Field(alias='srl_nokia-isis:subtlv')
    ] = None


class SubtlvsContainer6(BaseModel):
    """
    This container describes IS Neighbor sub-TLVs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    subtlv: Annotated[
        Optional[List[SubtlvListEntry6]], Field(alias='srl_nokia-isis:subtlv')
    ] = None


class SubtlvsContainer7(BaseModel):
    """
    This container describes IS Neighbor sub-TLVs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    subtlv: Annotated[
        Optional[List[SubtlvListEntry7]], Field(alias='srl_nokia-isis:subtlv')
    ] = None


class SubtlvsContainer8(BaseModel):
    """
    This container describes IS prefix sub-TLVs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    subtlv: Annotated[
        Optional[List[SubtlvListEntry8]], Field(alias='srl_nokia-isis:subtlv')
    ] = None


class SubtlvsContainer9(BaseModel):
    """
    This container describes IS prefix sub-TLVs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    subtlv: Annotated[
        Optional[List[SubtlvListEntry9]], Field(alias='srl_nokia-isis:subtlv')
    ] = None


class SummaryAddressListEntry(BaseModel):
    """
    List of summarization prefixes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ip_prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-isis:ip-prefix'),
    ] = None
    """
    An IP prefix advertised into L2 that summarizes one or more L1 prefixes and causes them to be suppressed
    """
    route_tag: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:route-tag', ge=1, le=4294967295)
    ] = None
    """
    Specifies route tag value to assign to the summary route
    """


class SummaryLsaContainer(BaseModel):
    """
    Contents of the summary LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    network_mask: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:network-mask', ge=0, le=32)
    ] = None
    """
    The mask of the network described by the Summary LSA
    represented as a CIDR mask.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:metric', ge=0, le=4294967295)
    ] = None
    """
    The cost of utilising this network specified independent of TOS
    """
    types_of_service: Annotated[
        Optional[TypesOfServiceContainer3],
        Field(alias='srl_nokia-ospf:types-of-service'),
    ] = None


class SystemIpv4AddressContainer(BaseModel):
    """
    Container for displaying information about the system IPv4 address of the default network-instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-network-instance:oper-state')
    ] = None
    """
    The operational state of the system IPv4 address binding
    """
    oper_down_reason: Annotated[
        Optional[EnumerationEnum7],
        Field(alias='srl_nokia-network-instance:oper-down-reason'),
    ] = None
    """
    The reason why the default network instance does not have a system IPv4 address
    """


class SystemIpv6AddressContainer(BaseModel):
    """
    Container for displaying information about the system IPv6 address of the default network-instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-network-instance:oper-state')
    ] = None
    """
    The operational state of the system IPv6 address binding
    """
    oper_down_reason: Annotated[
        Optional[EnumerationEnum8],
        Field(alias='srl_nokia-network-instance:oper-down-reason'),
    ] = None
    """
    The reason why the default network instance does not have a system IPv6 address
    """


class TableConnectionListEntry(BaseModel):
    """
    List of connections describing vectors of possible route redistribution between a source and destination protocol instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source_protocol: Annotated[
        Optional[str], Field(alias='srl_nokia-table-connections:source-protocol')
    ] = None
    """
    The source protocol for the table connection
    """
    address_family: Annotated[
        Optional[EnumerationEnum410],
        Field(alias='srl_nokia-table-connections:address-family'),
    ] = None
    """
    The address family associated with the connection

    The target address family is implicitly the same as the address family specified for the source protocol.
    """
    destination_protocol: Annotated[
        Optional[str], Field(alias='srl_nokia-table-connections:destination-protocol')
    ] = None
    """
    The destination protocol for the table connection
    """
    disable_metric_propagation: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-table-connections:disable-metric-propagation'),
    ] = False
    """
    When set to true, the metric is not carried over from the source to the destination protocol

    When set to false, the metric in the destination protocol is carried over in some way from the source protocol. For example:

    * IS-IS metric may be reflected in BGP MED
    * OSPF metric may be reflected in the BGP MED
    """
    import_policy: Annotated[
        Optional[List[ImportPolicyLeafList8]],
        Field(alias='srl_nokia-table-connections:import-policy'),
    ] = []
    """
    The sequence of import policies that determine the set of routes to be redistributed from the source protocol to the dest protocol
    """
    default_import_policy: Annotated[
        Optional[EnumerationEnum411],
        Field(alias='srl_nokia-table-connections:default-import-policy'),
    ] = 'reject'
    """
    Specify the route redistribution behavior if no import policy rule is matched
    """


class TableConnectionsContainer(BaseModel):
    """
    Container with all defined table connections
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum],
        Field(alias='srl_nokia-table-connections:admin-state'),
    ] = 'disable'
    """
    Enable/disable table connections in the network instance

    When set to disable, configuration of table-connection list entries is blocked. For protocol B to advertise active routes of protocol A, it is sufficient for protocol B to be configured with an export-policy that accepts routes of protocol A.

    When admin-state  is set to enable, protocol B cannot advertise an active route of protocol A unless there is an A->B table connection that causes the route to be accepted. When a route of protocol A is redistributed to protocol B, it is added to the RIB of protocol B and as such it is advertisable to peers of protocol B without any export policy. However if protocol B does have an export policy, this policy (or list of policies) has final control over the advertisement of the redistributed route.
    """
    table_connection: Annotated[
        Optional[List[TableConnectionListEntry]],
        Field(alias='srl_nokia-table-connections:table-connection'),
    ] = None


class TableEntriesContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[List[NeighborListEntry13]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:neighbor'),
    ] = None


class TableEntriesContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[List[NeighborListEntry18]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:neighbor'),
    ] = None


class TargetListEntry3(BaseModel):
    """
    Identifier for the GRE target group.
    Each target specified within this list should be treated as a
    endpoint to which packets should be GRE encapsulated. Where the
    set of destinations described within a single entry expands to
    more than one destination IP address, packets should be load
    shared across the destination using the local system's ECMP hashing
    mechanisms.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    id: Annotated[Optional[str], Field(alias='srl_nokia-policy-forwarding:id')] = None
    """
    A unique identifier for the target.
    """
    source: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-policy-forwarding:source'),
    ] = None
    """
    The source IP address that should be used when encapsulating
    packets from the local system.
    """
    destination: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-policy-forwarding:destination'),
    ] = None
    """
    The set of destination addresses that should be encapsulated towards.
    Where a subnet is specified, each address within the subnet should be
    treated as an independent destination for encapsulated traffic. Packets
    should be distributed with ECMP across the set of tunnel destination
    addresses.
    """
    ip_ttl: Annotated[
        Optional[int], Field(alias='srl_nokia-policy-forwarding:ip-ttl', ge=0, le=255)
    ] = None
    """
    The TTL that should be specified in the IP header of the GRE packet
    encapsulating the packet matching the rule.
    """


class TcpTransportContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-ldp:local-address'),
    ] = None
    """
    Local address
    """
    local_port: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:local-port', ge=0, le=65535)
    ] = None
    """
    Local port number
    """
    remote_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-ldp:remote-address'),
    ] = None
    """
    Remote address
    """
    remote_port: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:remote-port', ge=0, le=65535)
    ] = None
    """
    Remote port number
    """


class TerminationSubnetListEntry(BaseModel):
    """
    List of decapsulation subnets for the associated decapsulation group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ip_prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-ni-gre:ip-prefix'),
    ] = None
    """
    IP prefix to match for decapsulation
    """


class TiLfaContainer(BaseModel):
    """
    ti-lfa context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-isis:admin-state')
    ] = 'disable'
    """
    When set, ti-lfa protection is enabled for the ISIS instance.
    ti-LFA seeks for a viable P,Q intersection based on
    constraints including max ti-lfa labels.
    """
    max_sr_policy_lfa_labels: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:max-sr-policy-lfa-labels', ge=0, le=3),
    ] = 2
    """
    Maximum number of labels the TI-LFA backup path can use
    """
    node_protect: Annotated[
        Optional[NodeProtectContainer2], Field(alias='srl_nokia-isis:node-protect')
    ] = None


class TldpContainer(BaseModel):
    """
    Targeted Label Distribution Protocol pseudowire signaling parameters

    When the network instance is of type vpws, the use of TLDP is
    specified in RFC4447. When the network instance is of type mac-vrf,
    the use of TLDP is specified in RFC4762.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    virtual_circuit_type: Annotated[
        Optional[EnumerationEnum310],
        Field(alias='srl_nokia-network-instance:virtual-circuit-type'),
    ] = 'ethernet'
    """
    The virtual circuit (VC) type of the pseudowire

    When set to vlan, the router signals vc-type 'vlan' and pushes
    vlan tag in the inner frame when sending frames over the
    pseudowire.
    """
    advertise_l2_mtu: Annotated[
        Optional[int],
        Field(alias='srl_nokia-network-instance:advertise-l2-mtu', ge=1450, le=9500),
    ] = None
    """
    Layer-2 MTU advertised to the remote peer in bytes.

    The default value signaled for a pseudowire is taken from the oper-mac-vrf-mtu
    (in case of a mac-vrf) or from the oper-vpws-mtu (in case of a vpws) parameters.
    However, that default value is overridden by the value configured with this
    command.
    """
    ignore_mtu_mismatch: Annotated[
        Optional[bool], Field(alias='srl_nokia-network-instance:ignore-mtu-mismatch')
    ] = False
    """
    Whether the received signaled Layer-2 MTU is ignored

    In case the local advertised l2-mtu and the received remote l2-mtu do not match
    the pseudowire will be kept operationally down if this command is set to false.
    When set to true, the received l2-mtu is ignored and the pseudowire can be
    operationally up even if the local and remote l2-mtu values do not match.
    """


class TlvListEntry10(BaseModel):
    """
    TLV entry in the Grace LSA, advertised by a system undergoing
    graceful restart
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The type of the sub-TLV received within the Grace LSA
    """
    period: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:period', ge=0, le=4294967295)
    ] = None
    """
    The number of seconds that the router's neighbors should advertise
    the local system as fully adjacent regardless of database
    synchronization state
    """
    reason: Annotated[
        Optional[EnumerationEnum240], Field(alias='srl_nokia-ospf:reason')
    ] = None
    """
    The reason for the graceful restart event occurring, as advertised
    by the restarting system
    """
    ip_interface_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:ip-interface-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The restarting system's IP address on the interface via which the
    Grace LSA is being advertised.
    """
    unknown_tlv: Annotated[
        Optional[UnknownTlvContainer11], Field(alias='srl_nokia-ospf:unknown-tlv')
    ] = None


class TlvListEntry11(BaseModel):
    """
    TLV entry in the Router Information LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[Union[str, EnumerationEnum241]], Field(alias='srl_nokia-ospf:type')
    ] = None
    """
    The type of sub-TLV of the Router Information opaque LSA
    """
    unknown_tlv: Annotated[
        Optional[UnknownTlvContainer12], Field(alias='srl_nokia-ospf:unknown-tlv')
    ] = None
    informational_capabilities: Annotated[
        Optional[InformationalCapabilitiesContainer3],
        Field(alias='srl_nokia-ospf:informational-capabilities'),
    ] = None
    node_administrative_tags: Annotated[
        Optional[NodeAdministrativeTagsContainer3],
        Field(alias='srl_nokia-ospf:node-administrative-tags'),
    ] = None


class TlvListEntry12(BaseModel):
    """
    A TLV contained within the extended prefix LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The type of sub-TLV as indicated by the Extended Prefix LSA
    """
    extended_prefix_range: Annotated[
        Optional[ExtendedPrefixRangeContainer3],
        Field(alias='srl_nokia-ospf:extended-prefix-range'),
    ] = None
    unknown_tlv: Annotated[
        Optional[UnknownTlvContainer13], Field(alias='srl_nokia-ospf:unknown-tlv')
    ] = None


class TlvListEntry13(BaseModel):
    """
    List of TLVs within the Extended Link LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The type of the sub-TLV contained within the extended link TLV
    """
    unknown_tlv: Annotated[
        Optional[UnknownTlvContainer14], Field(alias='srl_nokia-ospf:unknown-tlv')
    ] = None


class TlvListEntry2(BaseModel):
    """
    TLV entry in the Grace LSA, advertised by a system undergoing
    graceful restart
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The type of the sub-TLV received within the Grace LSA
    """
    period: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:period', ge=0, le=4294967295)
    ] = None
    """
    The number of seconds that the router's neighbors should advertise
    the local system as fully adjacent regardless of database
    synchronization state
    """
    reason: Annotated[
        Optional[EnumerationEnum218], Field(alias='srl_nokia-ospf:reason')
    ] = None
    """
    The reason for the graceful restart event occurring, as advertised
    by the restarting system
    """
    ip_interface_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:ip-interface-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The restarting system's IP address on the interface via which the
    Grace LSA is being advertised.
    """
    unknown_tlv: Annotated[
        Optional[UnknownTlvContainer], Field(alias='srl_nokia-ospf:unknown-tlv')
    ] = None


class TlvListEntry3(BaseModel):
    """
    TLV entry in the Router Information LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[Union[str, EnumerationEnum219]], Field(alias='srl_nokia-ospf:type')
    ] = None
    """
    The type of sub-TLV of the Router Information opaque LSA
    """
    unknown_tlv: Annotated[
        Optional[UnknownTlvContainer2], Field(alias='srl_nokia-ospf:unknown-tlv')
    ] = None
    informational_capabilities: Annotated[
        Optional[InformationalCapabilitiesContainer],
        Field(alias='srl_nokia-ospf:informational-capabilities'),
    ] = None
    node_administrative_tags: Annotated[
        Optional[NodeAdministrativeTagsContainer],
        Field(alias='srl_nokia-ospf:node-administrative-tags'),
    ] = None


class TlvListEntry4(BaseModel):
    """
    A TLV contained within the extended prefix LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The type of sub-TLV as indicated by the Extended Prefix LSA
    """
    extended_prefix_range: Annotated[
        Optional[ExtendedPrefixRangeContainer],
        Field(alias='srl_nokia-ospf:extended-prefix-range'),
    ] = None
    unknown_tlv: Annotated[
        Optional[UnknownTlvContainer3], Field(alias='srl_nokia-ospf:unknown-tlv')
    ] = None


class TlvListEntry5(BaseModel):
    """
    List of TLVs within the Extended Link LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The type of the sub-TLV contained within the extended link TLV
    """
    unknown_tlv: Annotated[
        Optional[UnknownTlvContainer4], Field(alias='srl_nokia-ospf:unknown-tlv')
    ] = None


class TlvListEntry6(BaseModel):
    """
    TLV entry in the Grace LSA, advertised by a system undergoing
    graceful restart
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The type of the sub-TLV received within the Grace LSA
    """
    period: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:period', ge=0, le=4294967295)
    ] = None
    """
    The number of seconds that the router's neighbors should advertise
    the local system as fully adjacent regardless of database
    synchronization state
    """
    reason: Annotated[
        Optional[EnumerationEnum232], Field(alias='srl_nokia-ospf:reason')
    ] = None
    """
    The reason for the graceful restart event occurring, as advertised
    by the restarting system
    """
    ip_interface_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:ip-interface-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The restarting system's IP address on the interface via which the
    Grace LSA is being advertised.
    """
    unknown_tlv: Annotated[
        Optional[UnknownTlvContainer6], Field(alias='srl_nokia-ospf:unknown-tlv')
    ] = None


class TlvListEntry7(BaseModel):
    """
    TLV entry in the Router Information LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[Union[str, EnumerationEnum233]], Field(alias='srl_nokia-ospf:type')
    ] = None
    """
    The type of sub-TLV of the Router Information opaque LSA
    """
    unknown_tlv: Annotated[
        Optional[UnknownTlvContainer7], Field(alias='srl_nokia-ospf:unknown-tlv')
    ] = None
    informational_capabilities: Annotated[
        Optional[InformationalCapabilitiesContainer2],
        Field(alias='srl_nokia-ospf:informational-capabilities'),
    ] = None
    node_administrative_tags: Annotated[
        Optional[NodeAdministrativeTagsContainer2],
        Field(alias='srl_nokia-ospf:node-administrative-tags'),
    ] = None


class TlvListEntry8(BaseModel):
    """
    A TLV contained within the extended prefix LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The type of sub-TLV as indicated by the Extended Prefix LSA
    """
    extended_prefix_range: Annotated[
        Optional[ExtendedPrefixRangeContainer2],
        Field(alias='srl_nokia-ospf:extended-prefix-range'),
    ] = None
    unknown_tlv: Annotated[
        Optional[UnknownTlvContainer8], Field(alias='srl_nokia-ospf:unknown-tlv')
    ] = None


class TlvListEntry9(BaseModel):
    """
    List of TLVs within the Extended Link LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The type of the sub-TLV contained within the extended link TLV
    """
    unknown_tlv: Annotated[
        Optional[UnknownTlvContainer9], Field(alias='srl_nokia-ospf:unknown-tlv')
    ] = None


class TlvsContainer10(BaseModel):
    """
    TLVs of the Grace LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlv: Annotated[
        Optional[List[TlvListEntry10]], Field(alias='srl_nokia-ospf:tlv')
    ] = None


class TlvsContainer11(BaseModel):
    """
    The TLVs included within the Router Information LSA.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlv: Annotated[
        Optional[List[TlvListEntry11]], Field(alias='srl_nokia-ospf:tlv')
    ] = None


class TlvsContainer12(BaseModel):
    """
    TLVs contained within the Extended Prefix LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlv: Annotated[
        Optional[List[TlvListEntry12]], Field(alias='srl_nokia-ospf:tlv')
    ] = None


class TlvsContainer13(BaseModel):
    """
    TLVs contained within the Extended Link LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlv: Annotated[
        Optional[List[TlvListEntry13]], Field(alias='srl_nokia-ospf:tlv')
    ] = None


class TlvsContainer2(BaseModel):
    """
    TLVs of the Grace LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlv: Annotated[Optional[List[TlvListEntry2]], Field(alias='srl_nokia-ospf:tlv')] = (
        None
    )


class TlvsContainer3(BaseModel):
    """
    The TLVs included within the Router Information LSA.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlv: Annotated[Optional[List[TlvListEntry3]], Field(alias='srl_nokia-ospf:tlv')] = (
        None
    )


class TlvsContainer4(BaseModel):
    """
    TLVs contained within the Extended Prefix LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlv: Annotated[Optional[List[TlvListEntry4]], Field(alias='srl_nokia-ospf:tlv')] = (
        None
    )


class TlvsContainer5(BaseModel):
    """
    TLVs contained within the Extended Link LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlv: Annotated[Optional[List[TlvListEntry5]], Field(alias='srl_nokia-ospf:tlv')] = (
        None
    )


class TlvsContainer6(BaseModel):
    """
    TLVs of the Grace LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlv: Annotated[Optional[List[TlvListEntry6]], Field(alias='srl_nokia-ospf:tlv')] = (
        None
    )


class TlvsContainer7(BaseModel):
    """
    The TLVs included within the Router Information LSA.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlv: Annotated[Optional[List[TlvListEntry7]], Field(alias='srl_nokia-ospf:tlv')] = (
        None
    )


class TlvsContainer8(BaseModel):
    """
    TLVs contained within the Extended Prefix LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlv: Annotated[Optional[List[TlvListEntry8]], Field(alias='srl_nokia-ospf:tlv')] = (
        None
    )


class TlvsContainer9(BaseModel):
    """
    TLVs contained within the Extended Link LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlv: Annotated[Optional[List[TlvListEntry9]], Field(alias='srl_nokia-ospf:tlv')] = (
        None
    )


class TopologiesContainer(BaseModel):
    """
    This container describes IS topologies.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    topology: Annotated[
        Optional[List[TopologyListEntry]], Field(alias='srl_nokia-isis:topology')
    ] = None


class TraceOptionsContainer(BaseModel):
    """
    Debug traceoptions for BGP
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    flag: Annotated[
        Optional[List[FlagListEntry]], Field(alias='srl_nokia-bgp:flag')
    ] = None


class TraceOptionsContainer10(BaseModel):
    """
    Configure event/packet tracing for one specific session
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    trace: Annotated[
        Optional[List[EnumerationEnum128]], Field(alias='srl_nokia-ldp:trace')
    ] = []
    """
    Specifies the trace information to be captured
    """


class TraceOptionsContainer11(BaseModel):
    """
    Instance level debug trace options for IS-IS
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    trace: Annotated[
        Optional[List[EnumerationEnum135]], Field(alias='srl_nokia-isis:trace')
    ] = []
    """
    List of tracing options
    """


class TraceOptionsContainer12(BaseModel):
    """
    Interface level debug trace options for IS-IS
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    trace: Annotated[
        Optional[List[EnumerationEnum145]], Field(alias='srl_nokia-isis:trace')
    ] = []
    """
    List of tracing options
    """


class TraceOptionsContainer13(BaseModel):
    """
    Level debug trace options for IS-IS
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    trace: Annotated[
        Optional[List[EnumerationEnum156]], Field(alias='srl_nokia-isis:trace')
    ] = []
    """
    List of tracing options
    """


class TraceOptionsContainer19(BaseModel):
    """
    Debug trace-options for Proxy-ARP
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    flag: Annotated[
        Optional[List[FlagListEntry4]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:flag'),
    ] = None


class TraceOptionsContainer2(BaseModel):
    """
    Debug traceoptions for BGP
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    flag: Annotated[
        Optional[List[FlagListEntry2]], Field(alias='srl_nokia-bgp:flag')
    ] = None


class TraceOptionsContainer20(BaseModel):
    """
    Debug traceoptions for Proxy-ARP
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    flag: Annotated[
        Optional[List[FlagListEntry5]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:flag'),
    ] = None


class TraceOptionsContainer3(BaseModel):
    """
    Debug traceoptions for BGP
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    flag: Annotated[
        Optional[List[FlagListEntry3]], Field(alias='srl_nokia-bgp:flag')
    ] = None


class TraceOptionsContainer6(BaseModel):
    """
    Configure event/packet tracing for all LDP interfaces
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    trace: Annotated[
        Optional[List[EnumerationEnum115]], Field(alias='srl_nokia-ldp:trace')
    ] = []
    """
    Specifies the trace information to be captured
    """


class TraceOptionsContainer7(BaseModel):
    """
    Configure event/packet tracing for one specific LDP interface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    trace: Annotated[
        Optional[List[EnumerationEnum115]], Field(alias='srl_nokia-ldp:trace')
    ] = []
    """
    Specifies the trace information to be captured
    """


class TraceOptionsContainer8(BaseModel):
    """
    Configure event/packet tracing for one specific LDP interface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    trace: Annotated[
        Optional[List[EnumerationEnum115]], Field(alias='srl_nokia-ldp:trace')
    ] = []
    """
    Specifies the trace information to be captured
    """


class TraceOptionsContainer9(BaseModel):
    """
    Configure event/packet tracing for all sessions (configured and dynamic)
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    trace: Annotated[
        Optional[List[EnumerationEnum128]], Field(alias='srl_nokia-ldp:trace')
    ] = []
    """
    Specifies the trace information to be captured
    """


class TraceContainer3(BaseModel):
    """
    Tracing parameter flags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    packet: Annotated[
        Optional[PacketContainer3], Field(alias='srl_nokia-igmp-snooping:packet')
    ] = None


class TraceContainer4(BaseModel):
    """
    Tracing parameter flags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    packet: Annotated[
        Optional[PacketContainer4], Field(alias='srl_nokia-mld-snooping:packet')
    ] = None


class TraceContainer6(BaseModel):
    """
    Tracing parameter flags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    adjacencies: Annotated[
        Optional[AdjacenciesLeaf2], Field(alias='srl_nokia-ospf:adjacencies')
    ] = None
    interfaces: Annotated[
        Optional[InterfacesLeaf2], Field(alias='srl_nokia-ospf:interfaces')
    ] = None
    packet: Annotated[
        Optional[PacketContainer6], Field(alias='srl_nokia-ospf:packet')
    ] = None


class TransmittedContainer6(BaseModel):
    """
    Transmit message statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    general_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:general-queries', ge=0, le=4294967295),
    ] = 0
    """
    General Queries
    """
    group_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:group-queries', ge=0, le=4294967295),
    ] = 0
    """
    Group Specific Queries
    """
    group_source_queries: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:group-source-queries', ge=0, le=4294967295
        ),
    ] = 0
    """
    Group and Source Specific Queries
    """
    v1_reports: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:v1-reports', ge=0, le=4294967295),
    ] = 0
    """
    V1 Reports
    """
    v2_reports: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:v2-reports', ge=0, le=4294967295),
    ] = 0
    """
    V2 Reports
    """
    v3_reports: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:v3-reports', ge=0, le=4294967295),
    ] = 0
    """
    V3 Reports
    """
    leave_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:leave-messages', ge=0, le=4294967295),
    ] = 0
    """
    Leave messages
    """
    error_packets: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:error-packets', ge=0, le=4294967295),
    ] = 0
    """
    Transmission error IGMP packets
    """
    bgp_join_sync: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:bgp-join-sync', ge=0, le=4294967295),
    ] = 0
    """
    Bgp join sync routes
    """
    bgp_leave_sync: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:bgp-leave-sync', ge=0, le=4294967295),
    ] = 0
    """
    Bgp leave sync routes
    """


class TransmittedContainer7(BaseModel):
    """
    Transmit message statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    general_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:general-queries', ge=0, le=4294967295),
    ] = 0
    """
    General Queries
    """
    group_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:group-queries', ge=0, le=4294967295),
    ] = 0
    """
    Group Specific Queries
    """
    group_source_queries: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:group-source-queries', ge=0, le=4294967295),
    ] = 0
    """
    Group and Source Specific Queries
    """
    v1_reports: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:v1-reports', ge=0, le=4294967295),
    ] = 0
    """
    V1 Reports
    """
    v2_reports: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:v2-reports', ge=0, le=4294967295),
    ] = 0
    """
    V2 Reports
    """
    leave_messages: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:leave-messages', ge=0, le=4294967295),
    ] = 0
    """
    Leave messages
    """
    error_packets: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:error-packets', ge=0, le=4294967295),
    ] = 0
    """
    Transmission error MLD packets
    """
    bgp_join_sync: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:bgp-join-sync', ge=0, le=4294967295),
    ] = 0
    """
    Bgp join sync routes
    """
    bgp_leave_sync: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:bgp-leave-sync', ge=0, le=4294967295),
    ] = 0
    """
    Bgp leave sync routes
    """


class TransportContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mtu_discovery: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:mtu-discovery')
    ] = None
    """
    Turns path mtu discovery for BGP TCP sessions on (true) or off (false)
    """
    tcp_mss: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:tcp-mss', ge=536, le=9446)
    ] = None
    """
    The maximum segment size of BGP TCP packets

    The actual value used in the transmit direction towards a particular peer should be checked at the neighbor level.
    """
    passive_mode: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:passive-mode')
    ] = False
    """
    The true setting causes BGP to wait for the peer to initiate the TCP connection

    The false setting causes BGP to initiate a TCP connection whenever the BGP session is started or restarted.
    """
    local_address: Annotated[
        Optional[Union[Union[Ipv4AddressType, Ipv6AddressType], str]],
        Field(alias='srl_nokia-bgp:local-address'),
    ] = None
    """
    The local TCP endpoint of used for all BGP sessions in the group

    This also the source address for next-hop-self, if it applies. The local-address can be specified as an IP address that is resolvable to a local interface.

    This address must be the primary address of an interface, otherwise the session will not come up.
    """


class TransportContainer3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mtu_discovery: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:mtu-discovery')
    ] = None
    """
    Turns path mtu discovery on (true) or off (false)
    """
    tcp_mss: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:tcp-mss', ge=536, le=9446)
    ] = None
    """
    The maximum segment size of BGP TCP packets

    The configured value of this leaf is the TCP MSS value advertised to the peer during TCP connection setup (in the TCP MSS option), reduced if necessary to accommodate the outgoing interface IP MTU.
    The state value of this leaf is the operational TCP MSS used in the data transmit direction towards the peer. It may be less than the received TCP MSS option value due to adjustment for TCP options used in the transit direction and/or the path MTU discovery process (if enabled).
    """
    passive_mode: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:passive-mode')
    ] = None
    """
    The true setting causes BGP to wait for the peer to initiate the TCP connection

    The false setting causes BGP to initiate a TCP connection whenever the BGP session is started or restarted.
    """
    local_address: Annotated[
        Optional[Union[Union[Ipv4AddressType, Ipv6AddressType], str]],
        Field(alias='srl_nokia-bgp:local-address'),
    ] = None
    """
    The local TCP endpoint of used for the BGP session

    This also the source address for next-hop-self, if it applies. The local-address can be specified as an IP address that is resolvable to a local interface.

    This address must be the primary address of an interface, otherwise the session will not come up.
    """
    local_port: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:local-port', ge=0, le=65535)
    ] = None
    """
    Local TCP port used for the TCP connection to the peer
    """
    remote_port: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:remote-port', ge=0, le=65535)
    ] = None
    """
    Remote TCP port used by the peer for its TCP connection to the local router
    """


class TransportContainer5(BaseModel):
    """
    Container for match conditions associated with transport-layer packet fields
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source_port: Annotated[
        Optional[Union[PortRangeType1, Union[L4PortTypeType1, EnumerationEnum319]]],
        Field(alias='srl_nokia-policy-forwarding:source-port'),
    ] = None
    """
    Source port or range
    """
    destination_port: Annotated[
        Optional[Union[PortRangeType1, Union[L4PortTypeType1, EnumerationEnum319]]],
        Field(alias='srl_nokia-policy-forwarding:destination-port'),
    ] = None
    """
    Destination port or range
    """


class TunnelSummaryContainer(BaseModel):
    """
    Tunnel summary information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tunnel_type: Annotated[
        Optional[List[TunnelTypeListEntry]],
        Field(alias='srl_nokia-tunnel-tables:tunnel-type'),
    ] = None


class TunnelSummaryContainer2(BaseModel):
    """
    Tunnel summary information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tunnel_type: Annotated[
        Optional[List[TunnelTypeListEntry2]],
        Field(alias='srl_nokia-tunnel-tables:tunnel-type'),
    ] = None


class TypeOfServiceListEntry(BaseModel):
    """
    Per-type of service parameters for the AS External LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    forwarding_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:forwarding-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The destination to which traffic for the external prefix
    should be advertised. When this value is set to 0.0.0.0 then
    traffic should be forwarded to the LSA's originator
    """
    external_route_tag: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:external-route-tag', ge=0, le=4294967295),
    ] = None
    """
    An opaque tag that set by the LSA originator to carry
    information relating to the external route
    """
    tos: Annotated[Optional[int], Field(alias='srl_nokia-ospf:tos', ge=0, le=255)] = (
        None
    )
    """
    OSPF encoding of the type of service referred to by this
    LSA. Encoding for OSPF TOS are described in RFC2328.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:metric', ge=0, le=4294967295)
    ] = None
    """
    The metric value to be used for the TOS specified. This value
    represents the cost of use of the link for the specific type
    of service.
    """


class TypeOfServiceListEntry4(BaseModel):
    """
    Per-type of service parameters for the NSSA external LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    forwarding_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:forwarding-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The destination to which traffic for the external prefix
    should be advertised. When this value is set to 0.0.0.0 then
    traffic should be forwarded to the LSA's originator
    """
    external_route_tag: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:external-route-tag', ge=0, le=4294967295),
    ] = None
    """
    An opaque tag that set by the LSA originator to carry
    information relating to the external route
    """
    tos: Annotated[Optional[int], Field(alias='srl_nokia-ospf:tos', ge=0, le=255)] = (
        None
    )
    """
    OSPF encoding of the type of service referred to by this
    LSA. Encoding for OSPF TOS are described in RFC2328.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:metric', ge=0, le=4294967295)
    ] = None
    """
    The metric value to be used for the TOS specified. This value
    represents the cost of use of the link for the specific type
    of service.
    """


class TypesOfServiceContainer(BaseModel):
    """
    Breakdown of External LSA contents specifying multiple
    TOS values
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type_of_service: Annotated[
        Optional[List[TypeOfServiceListEntry]],
        Field(alias='srl_nokia-ospf:type-of-service'),
    ] = None


class TypesOfServiceContainer4(BaseModel):
    """
    Breakdown of the NSSA External LSA contents specifying multiple
    TOS values
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type_of_service: Annotated[
        Optional[List[TypeOfServiceListEntry4]],
        Field(alias='srl_nokia-ospf:type-of-service'),
    ] = None


class VxlanInterfaceListEntry(BaseModel):
    """
    List of vxlan-interfaces used by this network-instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-network-instance:name',
            pattern='^(?=^(vxlan(0|1[0-9][0-9]|2([0-4][0-9]|5[0-5])|[1-9][0-9]|[1-9])\\.(0|[1-9](\\d){0,8}))$).*$',
        ),
    ] = None
    """
    Identifier of vxlan-interface used in this network-instance
    """
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-network-instance:oper-state')
    ] = None
    """
    The operational state of this vxlan-interface.
    """
    oper_down_reason: Annotated[
        Optional[EnumerationEnum9],
        Field(alias='srl_nokia-network-instance:oper-down-reason'),
    ] = None
    """
    The reason for the vxlan-interface being down in the network-instance
    """


class WeightedEcmpContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp-evpn:admin-state')
    ] = 'disable'
    """
    Setting enable triggers weighted ECMP programming for all elegible multipath EVPN IFL routes

    When set to enable, the router processes the evpn-link-bandwidth extended community when installing
    an ECMP set for an EVPN IP-Prefix route in the ip-vrf route table. Flows to an IP Prefix received
    with a weight and a zero-ESI are sprayed based on the weight. If the EVPN IP Prefix route
    received with the weight has a non-zero ESI, the weight is divided into the number of PEs attached
    to the Ethernet Segment (and rounded up if the result is not an integer). The command also enables
    the weighted ECMP functionality for BGP CEs that are configured with the parameter evpn-link-bandwidth
    add-weight-to-received-bgp-routes <weight>.
    """
    max_ecmp_hash_buckets_per_next_hop_group: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn:max-ecmp-hash-buckets-per-next-hop-group',
            ge=1,
            le=256,
        ),
    ] = None
    """
    Specifies the maximum number of ECMP hash buckets per next-hop-group

    Weighted ECMP weights are normalized based on this number of hash buckets.
    """


class WeightedEcmpContainer2(BaseModel):
    """
    Weighted-ecmp for the AFI/SAFI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = None
    """
    When set to enable, weighted ECMP is programmed for all routes of the AFI-SAFI for which the best path was received an EBGP peer

    Irrespective of this setting, weighted ECMP is only possible if all the multipath-eligible routes have link-bandwidth extended communities
    """


class WeightedEcmpContainer3(BaseModel):
    """
    Weighted-ecmp for the AFI/SAFI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = None
    """
    When set to enable, weighted ECMP is programmed for all routes of the AFI-SAFI for which the best path was received an IBGP peer

    Irrespective of this setting, weighted ECMP is only possible if all the multipath-eligible routes have link-bandwidth extended communities
    """


class WeightedEcmpContainer4(BaseModel):
    """
    Weighted-ecmp for the AFI/SAFI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = None
    """
    When set to enable, weighted ECMP is programmed for all routes of the AFI-SAFI for which the best path was received an EBGP peer within the group

    Irrespective of this setting, weighted ECMP is only possible if all the multipath-eligible routes have link-bandwidth extended communities
    """


class WeightedEcmpContainer5(BaseModel):
    """
    Weighted-ecmp for the AFI/SAFI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = None
    """
    When set to enable, weighted ECMP is programmed for all routes of the AFI-SAFI for which the best path was received an IBGP peer within the group

    Irrespective of this setting, weighted ECMP is only possible if all the multipath-eligible routes have link-bandwidth extended communities
    """


class WeightedEcmpContainer6(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-isis:admin-state')
    ] = 'disable'
    """
    Setting enable triggers weighted ECMP programming for all eligible multipath IS-IS routes associated with the instance

    An IS-IS route is eligible for weighted ECMP if all the next-hop interfaces in the multipath set have a load-balancing-weight other than 'none'.

    When weighted ECMP is disabled in an IS-IS instance all IS-IS multipath routes are programmed as normal ECMP, even if some or all of the next-hop interfaces in any particular multipath set have a load-balancing-weight other than 'none'.
    """
    max_ecmp_hash_buckets_per_next_hop_group: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-isis:max-ecmp-hash-buckets-per-next-hop-group',
            ge=1,
            le=256,
        ),
    ] = None
    """
    Specifies the maximum number of ECMP hash buckets per next-hop-group.

    Weighted ECMP weights are normalized based on this number of hash buckets.
    """


class AcceptContainer(BaseModel):
    """
    Options related to the acceptance of dynamic BGP sessions from remote peers
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    match: Annotated[
        Optional[List[MatchListEntry]], Field(alias='srl_nokia-bgp:match')
    ] = None
    max_sessions: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:max-sessions', ge=0, le=65535)
    ] = 0
    """
    The maximum number of incoming BGP sessions that will be accepted by the router

    A value of 0 means no limit.
    """


class AddPathsContainer(BaseModel):
    """
    Configure support for the advertisement and receipt of multiple paths for the AFI/SAFI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    receive: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:receive')] = None
    """
    Enable capability negotiation to receive multiple path advertisements from a single peer for a single NLRI belonging to the AFI/SAFI
    """
    send: Annotated[Optional[bool], Field(alias='srl_nokia-bgp:send')] = None
    """
    Enable capability negotiation to send multiple path advertisements to a single peer for a single NLRI belonging to the AFI/SAFI
    """
    selection_algorithm: Annotated[
        Optional[Union[SendMaxCase, SendMultipathCase]],
        Field(alias='srl_nokia-bgp:selection-algorithm'),
    ] = None
    eligible_prefix_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp:eligible-prefix-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Specifies a route policy to control the set prefixes that are eligible for the add-paths send behavior

    If no policy is configured: advertise add-paths for every prefix according to the afi-safi configuration
    If a policy is configured and there is no match: advertise add-paths for the prefix according to the afi-safi configuration
    If a policy is configured and a route for prefix P is matched with an accept action: advertise add-paths for the prefix P according to the afi-safi configuration
    If a policy is configured and a route for prefix P is matched with a reject action: no add-paths are advertised for prefix P
    """


class AddressStatisticsContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4: Annotated[Optional[Ipv4Container6], Field(alias='srl_nokia-ldp:ipv4')] = None
    ipv6: Annotated[Optional[Ipv6Container6], Field(alias='srl_nokia-ldp:ipv6')] = None


class AdjacencyListEntry5(BaseModel):
    """
    List of adjacencies formed through this interface.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor_system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:neighbor-system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    The neighbor router's system ID.
    """
    adjacency_level: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:adjacency-level', pattern='^(?=^L1|L2|L1L2$).*$'),
    ] = None
    """
    The level of the adjacency that is formed.
    """
    neighbor_hostname: Annotated[
        Optional[str], Field(alias='srl_nokia-isis:neighbor-hostname')
    ] = None
    """
    The hostname of the neighbor, as learned by TLV 137.
    """
    area_address: Annotated[
        Optional[List[AreaAddressLeafList]], Field(alias='srl_nokia-isis:area-address')
    ] = []
    """
    Area address of the neighbor.
    """
    designated_is_system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:designated-is-system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    System id of the designated IS router.
    """
    state: Annotated[
        Optional[EnumerationEnum149], Field(alias='srl_nokia-isis:state')
    ] = None
    """
    The current state of the adjacency.
    """
    down_reason: Annotated[
        Optional[EnumerationEnum150], Field(alias='srl_nokia-isis:down-reason')
    ] = None
    """
    The reason why the adjacency is down.
    """
    remaining_holdtime: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:remaining-holdtime', ge=0, le=65535)
    ] = None
    """
    The time remaining until the hold timer will expire.
    """
    last_up_down_transition: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:last-up-down-transition',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The last time when the adjacency entered the up or down state.
    """
    up_down_transitions: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:up-down-transitions', ge=0, le=4294967295),
    ] = 0
    """
    The total number of transitions from Up state to a lower state, since the last clear.
    """
    neighbor_priority: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:neighbor-priority', ge=0, le=127)
    ] = None
    """
    The priority signalled by the neighbor to become the DIS on a LAN
    """
    neighbor_circuit_type: Annotated[
        Optional[EnumerationEnum133],
        Field(alias='srl_nokia-isis:neighbor-circuit-type'),
    ] = 'L1L2'
    """
    The circuit type signalled by the neighbor.
    """
    neighbor_extended_circuit_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:neighbor-extended-circuit-id', ge=0, le=4294967295),
    ] = None
    """
    Extended circuit ID assigned by the neighbor.
    """
    neighbor_snpa: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:neighbor-snpa', max_length=20, min_length=0),
    ] = None
    """
    The SNPA of the neighbor.
    """
    local_extended_circuit_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:local-extended-circuit-id', ge=0, le=4294967295),
    ] = None
    """
    Local extended circuit ID.
    """
    neighbor_ipv4: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:neighbor-ipv4',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The IPv4 address of the neighbor.
    """
    neighbor_ipv6: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:neighbor-ipv6',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    The IPv6 address of the neighbor.
    """
    neighbor_restart_capable: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:neighbor-restart-capable')
    ] = None
    """
    Reads true when the neighbor has signalled that it is restart capable.
    """
    neighbor_restart_status: Annotated[
        Optional[EnumerationEnum151],
        Field(alias='srl_nokia-isis:neighbor-restart-status'),
    ] = None
    """
    The status of the neighbor with respect to graceful restart
    """
    neighbor_restarts: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:neighbor-restarts', ge=0, le=4294967295),
    ] = None
    """
    The number of times the neighbor has restarted under protection of graceful restart.
    """
    neighbor_last_restart: Annotated[
        Optional[Union[EnumerationEnum152, DateAndTimeDeltaType]],
        Field(alias='srl_nokia-isis:neighbor-last-restart'),
    ] = None
    """
    The last time the neighbor restarted under protection of graceful restart.
    """
    nlpid: Annotated[
        Optional[List[EnumerationEnum153]], Field(alias='srl_nokia-isis:nlpid')
    ] = []
    """
    List of protocols supported by the adjacency.
    """


class AdminGroupsContainer(BaseModel):
    """
    Container for configuring admin groups
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry20]],
        Field(alias='srl_nokia-traffic-engineering:group'),
    ] = None


class AdvertisedContainer(BaseModel):
    """
    Configuration and state related to advertised service FECs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    label: Annotated[
        Optional[Union[MplsLabelNonReservedType, EnumerationEnum95]],
        Field(alias='srl_nokia-ldp:label'),
    ] = None
    """
    The received label from the remote peer
    """
    label_status: Annotated[
        Optional[List[EnumerationEnum103]], Field(alias='srl_nokia-ldp:label-status')
    ] = []
    """
    The status of the advertised label
    """
    l2_mtu: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:l2-mtu', ge=0, le=65535)
    ] = None
    """
    Layer-2 MTU advertised to the remote peer in bytes
    """
    control_word: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:control-word')
    ] = None
    """
    Whether control word capability is advertised
    """
    flow_aware_transport_label_transmit_capability: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-ldp:flow-aware-transport-label-transmit-capability'),
    ] = None
    """
    Whether the capability to transmit the flow-aware transport label is advertised to the peer
    """
    flow_aware_transport_label_receive_capability: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-ldp:flow-aware-transport-label-receive-capability'),
    ] = None
    """
    Whether the capability to receive the flow-aware transport label is advertised to the peer
    """
    pw_status: Annotated[Optional[bool], Field(alias='srl_nokia-ldp:pw-status')] = None
    """
    Whether or not the router advertising the associated label
    supports pseudowire status signaling
    """
    signaling_status: Annotated[
        Optional[List[EnumerationEnum104]],
        Field(alias='srl_nokia-ldp:signaling-status'),
    ] = []
    """
    Indicates the signaling status
    """
    withdraw_reason: Annotated[
        Optional[EnumerationEnum105], Field(alias='srl_nokia-ldp:withdraw-reason')
    ] = None
    """
    Indicates the reason of withdrawl of the ingress label
    """


class AdvertisedContainer2(BaseModel):
    """
    Configuration and state related to advertised service FECs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    label: Annotated[
        Optional[Union[MplsLabelNonReservedType, EnumerationEnum95]],
        Field(alias='srl_nokia-ldp:label'),
    ] = None
    """
    The received label from the remote peer
    """
    label_status: Annotated[
        Optional[List[EnumerationEnum113]], Field(alias='srl_nokia-ldp:label-status')
    ] = []
    """
    The status of the advertised label
    """
    l2_mtu: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:l2-mtu', ge=0, le=65535)
    ] = None
    """
    Layer-2 MTU advertised to the remote peer in bytes
    """
    control_word: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:control-word')
    ] = None
    """
    Whether control word capability is advertised
    """
    flow_aware_transport_label_transmit_capability: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-ldp:flow-aware-transport-label-transmit-capability'),
    ] = None
    """
    Whether the capability to transmit the flow-aware transport label is advertised to the peer
    """
    flow_aware_transport_label_receive_capability: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-ldp:flow-aware-transport-label-receive-capability'),
    ] = None
    """
    Whether the capability to receive the flow-aware transport label is advertised to the peer
    """
    pw_status: Annotated[Optional[bool], Field(alias='srl_nokia-ldp:pw-status')] = None
    """
    Whether or not the router advertising the associated label
    supports pseudowire status signaling
    """
    signaling_status: Annotated[
        Optional[List[EnumerationEnum104]],
        Field(alias='srl_nokia-ldp:signaling-status'),
    ] = []
    """
    Indicates the signaling status
    """
    withdraw_reason: Annotated[
        Optional[EnumerationEnum105], Field(alias='srl_nokia-ldp:withdraw-reason')
    ] = None
    """
    Indicates the reason of withdrawl of the ingress label
    """


class AfiSafiListEntry4(BaseModel):
    """
    List of address families supported by the BGP neighbor
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    afi_safi_name: Annotated[
        Optional[str], Field(alias='srl_nokia-bgp:afi-safi-name')
    ] = None
    """
    The name of a BGP address family, which translates to a specific AFI value and a specific SAFI value
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = None
    """
    This leaf indicates whether support for the AFI-SAFI is enabled/advertised to the neighbor
    """
    oper_state: Annotated[
        Optional[EnumerationEnum52], Field(alias='srl_nokia-bgp:oper-state')
    ] = None
    export_policy: Annotated[
        Optional[List[ExportPolicyLeafList6]],
        Field(alias='srl_nokia-bgp:export-policy'),
    ] = []
    """
    Apply an export policy to advertised BGP routes
    """
    import_policy: Annotated[
        Optional[List[ImportPolicyLeafList6]],
        Field(alias='srl_nokia-bgp:import-policy'),
    ] = []
    """
    Apply an import policy to received BGP routes
    """
    add_paths: Annotated[
        Optional[AddPathsContainer3], Field(alias='srl_nokia-bgp:add-paths')
    ] = None
    received_routes: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:received-routes', ge=0, le=4294967295)
    ] = None
    """
    The number of routes belonging to this AFI/SAFI received from the peer, including routes rejected by import policy
    """
    sent_routes: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:sent-routes', ge=0, le=4294967295)
    ] = None
    """
    The number of routes belonging to this AFI/SAFI advertised as reachable to the peer
    """
    active_routes: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:active-routes', ge=0, le=4294967295)
    ] = None
    """
    The number of routes belonging to this AFI/SAFI received from the peer that are installed and used, being best routes
    """
    rejected_routes: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:rejected-routes', ge=0, le=4294967295)
    ] = None
    """
    The number of routes belonging to this AFI/SAFI received from the peer that were rejected by import policy
    """
    suppressed_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:suppressed-routes', ge=0, le=4294967295),
    ] = None
    """
    The number of routes belonging to this AFI/SAFI received from the peer that are suppressed because their route-flap-damping FOM is greater than the suppress-threshold
    """
    received_routes_withdrawn_due_to_error: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp:received-routes-withdrawn-due-to-error',
            ge=0,
            le=4294967295,
        ),
    ] = None
    """
    The number of routes belonging to this AFI/SAFI received from the peer that were withdrawn due to an update packet error
    """
    ipv4_unicast: Annotated[
        Optional[Ipv4UnicastContainer3], Field(alias='srl_nokia-bgp:ipv4-unicast')
    ] = None
    ipv4_labeled_unicast: Annotated[
        Optional[Ipv4LabeledUnicastContainer3],
        Field(alias='srl_nokia-bgp:ipv4-labeled-unicast'),
    ] = None
    l3vpn_ipv4_unicast: Annotated[
        Optional[L3vpnIpv4UnicastContainer3],
        Field(alias='srl_nokia-bgp:l3vpn-ipv4-unicast'),
    ] = None
    ipv6_unicast: Annotated[
        Optional[Ipv6UnicastContainer3], Field(alias='srl_nokia-bgp:ipv6-unicast')
    ] = None
    ipv6_labeled_unicast: Annotated[
        Optional[Ipv6LabeledUnicastContainer3],
        Field(alias='srl_nokia-bgp:ipv6-labeled-unicast'),
    ] = None
    l3vpn_ipv6_unicast: Annotated[
        Optional[L3vpnIpv6UnicastContainer3],
        Field(alias='srl_nokia-bgp:l3vpn-ipv6-unicast'),
    ] = None
    evpn: Annotated[Optional[EvpnContainer3], Field(alias='srl_nokia-bgp:evpn')] = None
    route_target: Annotated[
        Optional[RouteTargetContainer2], Field(alias='srl_nokia-bgp:route-target')
    ] = None


class AftsContainer(BaseModel):
    """
    The abstract forwarding tables (AFTs) that are associated with the network instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    next_hop_group: Annotated[
        Optional[List[NextHopGroupListEntry2]],
        Field(alias='srl_nokia-aft:next-hop-group'),
    ] = None
    ipv4_unicast: Annotated[
        Optional[Ipv4UnicastContainer9], Field(alias='srl_nokia-aft:ipv4-unicast')
    ] = None
    ipv6_unicast: Annotated[
        Optional[Ipv6UnicastContainer9], Field(alias='srl_nokia-aft:ipv6-unicast')
    ] = None


class AggregateRoutesContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry30]],
        Field(alias='srl_nokia-aggregate-routes:route'),
    ] = None


class AggregatorContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    as_number: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:as-number', ge=1, le=4294967295)
    ] = None
    """
    The 2byte or 4byte AS number of the router that formed the aggregate
    route.
    """
    address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:address'),
    ] = None
    """
    The router ID of the BGP router that formed the aggregate route.
    """


class ApplyPolicyContainer(BaseModel):
    """
    Container for specifying route leaking import and export policies
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    import_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-network-instance:import-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Policy used to specify the routes leaked by other NIs that should be imported into this NI
    """
    export_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-network-instance:export-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Policy used to specify the routes of this NI that should be made available for leaking to other NIs
    """


class AreaRangeListEntry(BaseModel):
    """
    Enter the area-range context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ip_prefix_mask: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-ospf:ip-prefix-mask'),
    ] = None
    """
    ip-prefix with host bits set to  0
    """
    advertise: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:advertise')] = True
    """
    Advertise summarized range of addresses to other areas
    """


class AreaRangeListEntry2(BaseModel):
    """
    Enter the area-range context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ip_prefix_mask: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-ospf:ip-prefix-mask'),
    ] = None
    """
    ip-prefix with host bits set to  0
    """
    advertise: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:advertise')] = True
    """
    Advertise summarized range of addresses to other areas
    """


class AsExternalLsaContainer(BaseModel):
    """
    Contents of the AS External LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mask: Annotated[Optional[int], Field(alias='srl_nokia-ospf:mask', ge=0, le=32)] = (
        None
    )
    """
    The subnet mask for the advertised destination
    """
    metric_type: Annotated[
        Optional[EnumerationEnum216], Field(alias='srl_nokia-ospf:metric-type')
    ] = None
    """
    The type of metric included within the AS External LSA.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:metric', ge=0, le=4294967295)
    ] = None
    """
    The cost to reach the external network specified. The exact
    interpretation of this cost is dependent on the type of
    metric specified
    """
    forwarding_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:forwarding-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The destination to which traffic for the external prefix
    should be advertised. When this value is set to 0.0.0.0 then
    traffic should be forwarded to the LSA's originator
    """
    external_route_tag: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:external-route-tag', ge=0, le=4294967295),
    ] = None
    """
    An opaque tag that set by the LSA originator to carry
    information relating to the external route
    """
    types_of_service: Annotated[
        Optional[TypesOfServiceContainer],
        Field(alias='srl_nokia-ospf:types-of-service'),
    ] = None


class AsPathContainer(BaseModel):
    """
    A container for the AS path attribute of the attribute set.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    segment: Annotated[
        Optional[List[SegmentListEntry]], Field(alias='srl_nokia-rib-bgp:segment')
    ] = None


class AuthenticationContainer(BaseModel):
    """
    Container with authentication options that apply to all peers of the BGP instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    keychain: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp:keychain',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Reference to a keychain. The keychain type must be tcp-md5.
    """
    password: Annotated[Optional[str], Field(alias='srl_nokia-bgp:password')] = None
    """
    Configures an MD5 authentication password for use with neighboring devices.
    """


class AuthenticationContainer10(BaseModel):
    """
    Container with authentication options that apply to all peers in this peer-group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    keychain: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:keychain',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Reference to a keychain. The keychain type must be ospf
    """


class AuthenticationContainer2(BaseModel):
    """
    Container with authentication options that apply to all peers in this peer-group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    keychain: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp:keychain',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Reference to a keychain. The keychain type must be tcp-md5.
    """
    password: Annotated[Optional[str], Field(alias='srl_nokia-bgp:password')] = None
    """
    Configures an MD5 authentication password for use with neighboring devices.
    """


class AuthenticationContainer3(BaseModel):
    """
    Container with authentication options that apply to this specific peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    keychain: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp:keychain',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Reference to a keychain. The keychain type must be tcp-md5.
    """
    password: Annotated[Optional[str], Field(alias='srl_nokia-bgp:password')] = None
    """
    Configures an MD5 authentication password for use with neighboring devices.
    """
    transmit_active: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:transmit-active')
    ] = None
    """
    Reads true when the TCP segments being sent to the peer have authentication data.
    """


class BgpInstanceListEntry3(BaseModel):
    """
    List of bgp-vpn instances configured in the network-instance. Only one instance allowed in the current release.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    id: Annotated[Optional[int], Field(alias='srl_nokia-bgp-vpn:id', ge=1, le=2)] = None
    """
    The index of the bgp-vpn instance
    """
    route_distinguisher: Annotated[
        Optional[RouteDistinguisherContainer],
        Field(alias='srl_nokia-bgp-vpn:route-distinguisher'),
    ] = None
    route_target: Annotated[
        Optional[RouteTargetContainer3], Field(alias='srl_nokia-bgp-vpn:route-target')
    ] = None
    export_policy: Annotated[
        Optional[List[ExportPolicyLeafList7]],
        Field(alias='srl_nokia-bgp-vpn:export-policy'),
    ] = []
    """
    Apply an export policy to advertised BGP routes
    """
    import_policy: Annotated[
        Optional[List[ImportPolicyLeafList7]],
        Field(alias='srl_nokia-bgp-vpn:import-policy'),
    ] = []
    """
    Apply an import policy to received BGP routes
    """
    oper_down_reason: Annotated[
        Optional[EnumerationEnum71], Field(alias='srl_nokia-bgp-vpn:oper-down-reason')
    ] = None
    """
    Reason for bgp-instance being down
    """


class BgpInstanceListEntry4(BaseModel):
    """
    bgp l3 multicast vpn instances configured in net-instance

    currently only single bgp-instance is supported. In future for segmented l3 mvpn multiple bgp instances can be supported
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    id: Annotated[Optional[int], Field(alias='srl_nokia-mvpn-l3:id', ge=1, le=2)] = None
    """
    The index of the bgp-vpn instance
    """
    import_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mvpn-l3:import-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Policy used to specify the route types to be imported into this network instance MVPN
    """
    export_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mvpn-l3:export-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Policy used to specify the route types that should be made available for leaking to other Network Instances
    """
    route_target: Annotated[
        Optional[RouteTargetContainer4], Field(alias='srl_nokia-mvpn-l3:route-target')
    ] = None


class BgpVpnContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    dynamic_label_block: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp:dynamic-label-block',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Reference to a dynamic label block used for non-local BGP VPN routes advertised with next-hop-self
    """
    dynamic_label_block_status: Annotated[
        Optional[EnumerationEnum29],
        Field(alias='srl_nokia-bgp:dynamic-label-block-status'),
    ] = None
    """
    Status of the label block.

    The label block may show as unavailable if there is pending cleanup.
    """


class BgpVpnContainer2(BaseModel):
    """
    Top-level configuration and operational state for common bgp-ipvpn and bgp-evpn parameters
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    backup_paths: Annotated[
        Optional[BackupPathsContainer5], Field(alias='srl_nokia-bgp-vpn:backup-paths')
    ] = None
    combined_ecmp: Annotated[
        Optional[CombinedEcmpContainer], Field(alias='srl_nokia-bgp-vpn:combined-ecmp')
    ] = None
    bgp_instance: Annotated[
        Optional[List[BgpInstanceListEntry3]],
        Field(alias='srl_nokia-bgp-vpn:bgp-instance'),
    ] = None


class BgpContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bgp_instance: Annotated[
        Optional[List[BgpInstanceListEntry4]],
        Field(alias='srl_nokia-mvpn-l3:bgp-instance'),
    ] = None


class BlockedInterfaceListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-mld:interface-name')
    ] = None
    """
    Reference to a specific subinterface of the form <interface-name>.<subinterface-index>
    """


class BlockedInterfaceListEntry2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-igmp:interface-name')
    ] = None
    """
    Reference to a specific subinterface of the form <interface-name>.<subinterface-index>
    """


class BridgeTableContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    split_horizon_group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-network-instance:split-horizon-group',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Split-horizon-group created in the network-instance

    Multiple split-horizon-groups can be configured within the
    same network-instance of type mac-vrf. Only objects associated
    to different split-horizon-groups can forward packets among
    each other.
    """
    mac_relearn_only: Annotated[
        Optional[bool], Field(alias='srl_nokia-network-instance:mac-relearn-only')
    ] = True
    """
    The value of this leaf indicates that the interface will not
    learn any new mac addresses, but will relearn any that are already
    programmed
    """
    multicast_forwarding: Annotated[
        Optional[EnumerationEnum5],
        Field(alias='srl_nokia-network-instance:multicast-forwarding'),
    ] = None
    """
    The type of multicast data forwarded by this subinterface.
    """
    oper_mac_learning: Annotated[
        Optional[EnumerationEnum2],
        Field(alias='srl_nokia-network-instance:oper-mac-learning'),
    ] = None
    """
    The operational state of mac-learning on this subinterface.
    """
    oper_mac_learning_disabled_reason: Annotated[
        Optional[EnumerationEnum6],
        Field(alias='srl_nokia-network-instance:oper-mac-learning-disabled-reason'),
    ] = None
    """
    The reason for the mac-learning being disabled on this interface
    """


class CapabilityListEntry(BaseModel):
    """
    This list describes IS Router capabilities.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    instance_number: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:instance-number', ge=0, le=4294967295),
    ] = None
    """
    A unique instance number for the instance of the router capabilities TLV. The instance number should be autogenerated by the producer of the data and may be renumbered if the entire LSP contents are replaced in subsequent advertisements.
    """
    router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:router-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    IPv4 router-id.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum162]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    Router capability flags.
    """
    subtlvs: Annotated[
        Optional[SubtlvsContainer], Field(alias='srl_nokia-isis:subtlvs')
    ] = None


class ConnectionListEntry(BaseModel):
    """
    List of TCP connections that are established or that are in the process of being established – i.e. excluding those in the LISTEN state. An entry in this list is transient in that it ceases to exist when (or soon after) the connection makes the transition to the CLOSED state.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-tcp-udp:local-address'),
    ] = None
    """
    The local IP address for this TCP connection.
    """
    local_port: Annotated[
        Optional[int], Field(alias='srl_nokia-tcp-udp:local-port', ge=0, le=65535)
    ] = None
    """
    The local port number for this TCP connection.
    """
    remote_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-tcp-udp:remote-address'),
    ] = None
    """
    The remote IP address for this TCP connection.
    """
    remote_port: Annotated[
        Optional[int], Field(alias='srl_nokia-tcp-udp:remote-port', ge=0, le=65535)
    ] = None
    """
    The remote port number for this TCP connection.
    """
    session_state: Annotated[
        Optional[EnumerationEnum371], Field(alias='srl_nokia-tcp-udp:session-state')
    ] = None
    """
    The state of this TCP connection.
    """
    process_id: Annotated[
        Optional[int], Field(alias='srl_nokia-tcp-udp:process-id', ge=0, le=4294967295)
    ] = None
    """
    The process ID of the application that owns the socket.
    """


class DataRateThresholdContainer(BaseModel):
    """
    Enter the data-threshold context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group_range: Annotated[
        Optional[List[GroupRangeListEntry8]],
        Field(alias='srl_nokia-mvpn-l3:group-range'),
    ] = None


class DelayMetricContainer(BaseModel):
    """
    This container defines the ISIS delay metric.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=1, le=63)
    ] = None
    """
    ISIS delay metric value

    This metric measures the transit delay of the associated circuit. It is an optional metric, which if assigned to a circuit shall have a positive integral value. Higher values indicate a longer transit delay.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum166]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    ISIS Delay Metric Flags.
    """


class DelayMetricContainer2(BaseModel):
    """
    This container defines the ISIS delay metric.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=1, le=63)
    ] = None
    """
    ISIS delay metric value

    This metric measures the transit delay of the associated circuit. It is an optional metric, which if assigned to a circuit shall have a positive integral value. Higher values indicate a longer transit delay.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum166]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    ISIS Delay Metric Flags.
    """


class DelayMetricContainer3(BaseModel):
    """
    This container defines the ISIS delay metric.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=1, le=63)
    ] = None
    """
    ISIS delay metric value

    This metric measures the transit delay of the associated circuit. It is an optional metric, which if assigned to a circuit shall have a positive integral value. Higher values indicate a longer transit delay.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum166]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    ISIS Delay Metric Flags.
    """


class DestinationListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tep: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-bgp-evpn-bgp-instance-vpws-destinations-remote-ac:tep'),
    ] = None
    """
    The IP address that identifies the remote EVPN Termination Endpoint (TEP).
    """
    evi_label: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-vpws-destinations-remote-ac:evi-label',
            ge=16,
            le=1048575,
        ),
    ] = None
    """
    EVI label of the destination.
    """
    tunnel_id: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-vpws-destinations-remote-ac:tunnel-id',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    tunnel identitier of the destination.
    """
    destination_index: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-vpws-destinations-remote-ac:destination-index',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    A system-wide unique identifier of this evpn-mpls destination object (system allocated).
    """
    not_programmed_reason: Annotated[
        Optional[EnumerationEnum13],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-vpws-destinations-remote-ac:not-programmed-reason'
        ),
    ] = None
    """
    The reason why the evpn-mpls destination is not programmed.
    """


class DestinationListEntry2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tep: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-bgp-evpn-bgp-instance-vpws-destinations-remote-ac:tep'),
    ] = None
    """
    The IP address that identifies the remote EVPN Termination Endpoint (TEP).
    """
    evi_label: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-vpws-destinations-remote-ac:evi-label',
            ge=16,
            le=1048575,
        ),
    ] = None
    """
    EVI label of this next-hop.
    """
    tunnel_id: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-vpws-destinations-remote-ac:tunnel-id',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    tunnel identitier of this next-hop.
    """


class DestinationListEntry3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tep: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations:tep'
        ),
    ] = None
    """
    The IP address that identifies the remote EVPN Termination Endpoint (TEP).
    """
    evi_label: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations:evi-label',
            ge=16,
            le=1048575,
        ),
    ] = None
    """
    EVI label of the destination.
    """
    tunnel_id: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations:tunnel-id',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    tunnel identitier of the destination.
    """
    multicast_forwarding: Annotated[
        Optional[EnumerationEnum5],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations:multicast-forwarding'
        ),
    ] = None
    """
    The type of multicast data forwarded by this evpn-mpls destination.
    """
    destination_index: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations:destination-index',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    A system-wide unique identifier of this evpn-mpls destination object (system allocated).
    """
    not_programmed_reason: Annotated[
        Optional[EnumerationEnum16],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations:not-programmed-reason'
        ),
    ] = None
    """
    The reason why the destination is not programmed in the floodlist
    """


class DestinationListEntry5(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tep: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:tep'
        ),
    ] = None
    """
    The IP address that identifies the remote EVPN Termination Endpoint (TEP).
    """
    evi_label: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:evi-label',
            ge=16,
            le=1048575,
        ),
    ] = None
    """
    EVI label of this next-hop.
    """
    tunnel_id: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:tunnel-id',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    tunnel identitier of the next-hop.
    """


class DirectKeyCase(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    key: Annotated[Optional[KeyContainer], Field(alias='srl_nokia-isis:key')] = None


class DirectKeyCase2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    key: Annotated[Optional[KeyContainer2], Field(alias='srl_nokia-isis:key')] = None


class DirectKeyCase3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    key: Annotated[Optional[KeyContainer3], Field(alias='srl_nokia-isis:key')] = None


class DirectKeyCase4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    key: Annotated[Optional[KeyContainer4], Field(alias='srl_nokia-isis:key')] = None


class DuplicateEntriesContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mac: Annotated[
        Optional[List[MacListEntry4]],
        Field(alias='srl_nokia-bridge-table-mac-duplication-entries:mac'),
    ] = None


class DuplicateEntriesContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[List[NeighborListEntry11]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:neighbor'),
    ] = None


class DuplicateEntriesContainer3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[List[NeighborListEntry16]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:neighbor'),
    ] = None


class DynamicEntriesContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[List[NeighborListEntry12]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:neighbor'),
    ] = None


class DynamicEntriesContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[List[NeighborListEntry17]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:neighbor'),
    ] = None


class DynamicNeighborsContainer(BaseModel):
    """
    Options related to the acceptance and initiation of dynamic BGP sessions
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    accept: Annotated[
        Optional[AcceptContainer], Field(alias='srl_nokia-bgp:accept')
    ] = None
    interface: Annotated[
        Optional[List[InterfaceListEntry2]], Field(alias='srl_nokia-bgp:interface')
    ] = None


class EbgpContainer(BaseModel):
    """
    Multipath configuration options that apply when the best path for the prefix was received from an EBGP peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    maximum_paths: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:maximum-paths', ge=1, le=256)
    ] = 1
    """
    The maximum number of BGP ECMP next-hops for BGP routes with an NLRI belonging to the address family of this configuration context
    """
    weighted_ecmp: Annotated[
        Optional[WeightedEcmpContainer2], Field(alias='srl_nokia-bgp:weighted-ecmp')
    ] = None


class EbgpContainer2(BaseModel):
    """
    Multipath configuration options that apply when the best path for the prefix was received from an EBGP peer within the group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    weighted_ecmp: Annotated[
        Optional[WeightedEcmpContainer4], Field(alias='srl_nokia-bgp:weighted-ecmp')
    ] = None


class EnableBfdContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_address: Annotated[
        Union[Ipv4AddressType, Ipv6AddressType],
        Field(alias='srl_nokia-next-hop-groups:local-address'),
    ]
    """
    The local address to be used for the associated BFD session
    """
    local_discriminator: Annotated[
        Optional[int],
        Field(alias='srl_nokia-next-hop-groups:local-discriminator', ge=1, le=16384),
    ] = None
    """
    The local discriminator to be used for the associated BFD session
    """
    remote_discriminator: Annotated[
        Optional[int],
        Field(alias='srl_nokia-next-hop-groups:remote-discriminator', ge=1, le=16384),
    ] = None
    """
    The remote discriminator to be used for the associated BFD session
    """


class EncapsulateGreContainer(BaseModel):
    """
    Container for the GRE encapsulation actions to be applied to packets matching the policy forwarding rule.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    target: Annotated[
        Optional[List[TargetListEntry3]],
        Field(alias='srl_nokia-policy-forwarding:target'),
    ] = None


class ErrorMetricContainer(BaseModel):
    """
    This container defines the ISIS error metric.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=1, le=63)
    ] = None
    """
    ISIS error metric value

    This metric measures the residual error probability of the associated circuit. It is an optional metric, which if assigned to a circuit shall have a non-zero value. Higher values indicate a larger probability of undetected errors on the circuit.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum166]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    IS-IS error metric flags.
    """


class ErrorMetricContainer2(BaseModel):
    """
    This container defines the ISIS error metric.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=1, le=63)
    ] = None
    """
    ISIS error metric value

    This metric measures the residual error probability of the associated circuit. It is an optional metric, which if assigned to a circuit shall have a non-zero value. Higher values indicate a larger probability of undetected errors on the circuit.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum166]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    IS-IS error metric flags.
    """


class ErrorMetricContainer3(BaseModel):
    """
    This container defines the ISIS error metric.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=1, le=63)
    ] = None
    """
    ISIS error metric value

    This metric measures the residual error probability of the associated circuit. It is an optional metric, which if assigned to a circuit shall have a non-zero value. Higher values indicate a larger probability of undetected errors on the circuit.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum166]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    IS-IS error metric flags.
    """


class EsDestinationListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-vpws-destinations-remote-ac:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The 10-byte Ethernet Segment Identifier of the ethernet segment.
    ESI-0 or MAX-ESI values are not allowed.
    """
    destination_index: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-vpws-destinations-remote-ac:destination-index',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    A system-wide unique identifier of this evpn-mpls destination object (system allocated).
    """
    not_programmed_reason: Annotated[
        Optional[EnumerationEnum14],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-vpws-destinations-remote-ac:not-programmed-reason'
        ),
    ] = None
    """
    The reason why the evpn-mpls destination is not programmed.
    """
    destination: Annotated[
        Optional[List[DestinationListEntry2]],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-vpws-destinations-remote-ac:destination'
        ),
    ] = None


class EthernetAdRouteListEntry(BaseModel):
    """
    List of Ethernet AD (Auto-Discovery) routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier encoded in the NLRI
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    label: Annotated[
        Optional[LabelContainer], Field(alias='srl_nokia-rib-bgp:label')
    ] = None
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum336], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer13],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer14],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    imported_network_instances: Annotated[
        Optional[List[ImportedNetworkInstancesLeafList]],
        Field(alias='srl_nokia-rib-bgp:imported-network-instances'),
    ] = []
    """
    List of network instances that imported the route
    """
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class EthernetAdRouteListEntry2(BaseModel):
    """
    List of Ethernet AD (Auto-Discovery) routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier encoded in the NLRI
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    label: Annotated[
        Optional[LabelContainer3], Field(alias='srl_nokia-rib-bgp:label')
    ] = None
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.
    """


class EthernetAdRouteListEntry3(BaseModel):
    """
    List of Ethernet AD (Auto-Discovery) routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier encoded in the NLRI
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    label: Annotated[
        Optional[LabelContainer5], Field(alias='srl_nokia-rib-bgp:label')
    ] = None
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum350], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer21],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer22],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class EthernetAdRouteListEntry4(BaseModel):
    """
    List of Ethernet AD (Auto-Discovery) routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier encoded in the NLRI
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    label: Annotated[
        Optional[LabelContainer7], Field(alias='srl_nokia-rib-bgp:label')
    ] = None
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.
    """
    next_hop: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:next-hop'),
    ] = None
    """
    The advertised BGP next-hop address.
    """


class EthernetSegmentRouteListEntry(BaseModel):
    """
    List of Ethernet Segment routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum339], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer16],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer17],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class EthernetSegmentRouteListEntry2(BaseModel):
    """
    List of Ethernet Segment routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """


class EthernetSegmentRouteListEntry3(BaseModel):
    """
    List of Ethernet Segment routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum353], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer24],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer25],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class EthernetSegmentRouteListEntry4(BaseModel):
    """
    List of Ethernet Segment routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    next_hop: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:next-hop'),
    ] = None
    """
    The advertised BGP next-hop address.
    """


class EvpnEntriesContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[List[NeighborListEntry14]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:neighbor'),
    ] = None


class EvpnEntriesContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[List[NeighborListEntry19]],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:neighbor'),
    ] = None


class EvpnLinkBandwidthContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise: Annotated[
        Optional[AdvertiseContainer], Field(alias='srl_nokia-bgp-evpn:advertise')
    ] = None
    weighted_ecmp: Annotated[
        Optional[WeightedEcmpContainer], Field(alias='srl_nokia-bgp-evpn:weighted-ecmp')
    ] = None


class EvpnContainer4(BaseModel):
    """
    How proxy arp interacts with evpn
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    internal_tags: Annotated[
        Optional[InternalTagsContainer3],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:internal-tags'),
    ] = None
    flood: Annotated[
        Optional[FloodContainer],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:flood'),
    ] = None


class EvpnContainer5(BaseModel):
    """
    How proxy ARP/ND interacts with EVPN
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise_neighbor_type: Annotated[
        Optional[EnumerationEnum285],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:advertise-neighbor-type'),
    ] = 'router'
    """
    Whether to advertise router entries or host entries into EVPN MAC/IP routes

    It also specifies whether to reply to Neighbor Solicitations for EVPN entries with the router flag set or unset.
    """
    internal_tags: Annotated[
        Optional[InternalTagsContainer4],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:internal-tags'),
    ] = None
    flood: Annotated[
        Optional[FloodContainer2],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:flood'),
    ] = None


class ExpenseMetricContainer(BaseModel):
    """
    This container defines the ISIS expense metric.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=1, le=63)
    ] = None
    """
    ISIS expense metric value

    This metric measures the monetary cost of utilising the associated circuit. It is an optional metric, which if assigned to a circuit shall have a positive integral value1). Higher values indicate a larger monetary expense.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum166]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    ISIS Expense Metric Flags.
    """


class ExpenseMetricContainer2(BaseModel):
    """
    This container defines the ISIS expense metric.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=1, le=63)
    ] = None
    """
    ISIS expense metric value

    This metric measures the monetary cost of utilising the associated circuit. It is an optional metric, which if assigned to a circuit shall have a positive integral value1). Higher values indicate a larger monetary expense.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum166]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    ISIS Expense Metric Flags.
    """


class ExpenseMetricContainer3(BaseModel):
    """
    This container defines the ISIS expense metric.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=1, le=63)
    ] = None
    """
    ISIS expense metric value

    This metric measures the monetary cost of utilising the associated circuit. It is an optional metric, which if assigned to a circuit shall have a positive integral value1). Higher values indicate a larger monetary expense.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum166]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    ISIS Expense Metric Flags.
    """


class ExtendedLinkContainer(BaseModel):
    """
    The OSPFv2 Extended Link Opaque LSA, used to encapsulate TLV
    attributes associated with a link advertised in OSPF.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    link_type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:link-type')] = None
    """
    The type of link with which extended attributes are associated
    """
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The sub-type of the Router LSA.
    """
    link_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:link-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The identifier for the link specified. The value of the link
    identifier is dependent upon the type of the LSA. The value is
    specified to be, per sub-type:
     1) Neighbouring router's router ID.
     2) IP address of DR.
     3) IP network address.
     4) Neighbouring router router's ID.
    """
    link_data: Annotated[
        Optional[Union[DottedQuadType2, LinkDataLeaf1]],
        Field(alias='srl_nokia-ospf:link-data'),
    ] = None
    """
    The data associated with the link type. The value is
    dependent upon the subtype of the LSA. When the connection is
    to a stub network it represents the mask; for p2p connections
    that are unnumbered it represents the ifIndex value of the
    router's interface; for all other connections it represents
    the local system's IP address
    """
    tlvs: Annotated[Optional[TlvsContainer5], Field(alias='srl_nokia-ospf:tlvs')] = None


class ExtendedLinkContainer2(BaseModel):
    """
    The OSPFv2 Extended Link Opaque LSA, used to encapsulate TLV
    attributes associated with a link advertised in OSPF.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    link_type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:link-type')] = None
    """
    The type of link with which extended attributes are associated
    """
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The sub-type of the Router LSA.
    """
    link_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:link-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The identifier for the link specified. The value of the link
    identifier is dependent upon the type of the LSA. The value is
    specified to be, per sub-type:
     1) Neighbouring router's router ID.
     2) IP address of DR.
     3) IP network address.
     4) Neighbouring router router's ID.
    """
    link_data: Annotated[
        Optional[Union[DottedQuadType2, LinkDataLeaf21]],
        Field(alias='srl_nokia-ospf:link-data'),
    ] = None
    """
    The data associated with the link type. The value is
    dependent upon the subtype of the LSA. When the connection is
    to a stub network it represents the mask; for p2p connections
    that are unnumbered it represents the ifIndex value of the
    router's interface; for all other connections it represents
    the local system's IP address
    """
    tlvs: Annotated[Optional[TlvsContainer9], Field(alias='srl_nokia-ospf:tlvs')] = None


class ExtendedLinkContainer3(BaseModel):
    """
    The OSPFv2 Extended Link Opaque LSA, used to encapsulate TLV
    attributes associated with a link advertised in OSPF.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    link_type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:link-type')] = None
    """
    The type of link with which extended attributes are associated
    """
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The sub-type of the Router LSA.
    """
    link_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:link-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The identifier for the link specified. The value of the link
    identifier is dependent upon the type of the LSA. The value is
    specified to be, per sub-type:
     1) Neighbouring router's router ID.
     2) IP address of DR.
     3) IP network address.
     4) Neighbouring router router's ID.
    """
    link_data: Annotated[
        Optional[Union[DottedQuadType2, LinkDataLeaf41]],
        Field(alias='srl_nokia-ospf:link-data'),
    ] = None
    """
    The data associated with the link type. The value is
    dependent upon the subtype of the LSA. When the connection is
    to a stub network it represents the mask; for p2p connections
    that are unnumbered it represents the ifIndex value of the
    router's interface; for all other connections it represents
    the local system's IP address
    """
    tlvs: Annotated[Optional[TlvsContainer13], Field(alias='srl_nokia-ospf:tlvs')] = (
        None
    )


class ExtendedPrefixContainer(BaseModel):
    """
    An OSPFv2 Extended Prefix Opaque LSA, used to encapsulate
    TLV attributes associated with a prefix advertised in OSPF.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_type: Annotated[
        Optional[EnumerationEnum220], Field(alias='srl_nokia-ospf:route-type')
    ] = None
    """
    The type of prefix that is contained within the Extended Prefix LSA.
    The information contained in sub-TLVs of the attribute is applicable
    regardless of this value.
    """
    prefix_length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:prefix-length', ge=0, le=32)
    ] = None
    """
    The length of the IPv4 prefix contained in the Extended Prefix LSA
    """
    address_family: Annotated[
        Optional[EnumerationEnum221], Field(alias='srl_nokia-ospf:address-family')
    ] = None
    """
    The address family of the prefix contained in the Extended Prefix
    LSA
    """
    attached: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:attached')] = False
    """
    If this value is set to true, the prefix being advertised was
    generated by an ABR for an inter-area prefix. The value corresponds
    to the A-flag of the flags field of the Extended Prefix LSA
    """
    node: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:node')] = False
    """
    If this value is set to true, the prefix being advertised represents
    the advertising router. Typically, the prefix within the LSA is
    expected to be globally-reachable prefix associated with a loopback
    interface
    """
    prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The IPv4 prefix contained within the extended prefix LSA
    """
    tlvs: Annotated[Optional[TlvsContainer4], Field(alias='srl_nokia-ospf:tlvs')] = None


class ExtendedPrefixContainer2(BaseModel):
    """
    An OSPFv2 Extended Prefix Opaque LSA, used to encapsulate
    TLV attributes associated with a prefix advertised in OSPF.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_type: Annotated[
        Optional[EnumerationEnum234], Field(alias='srl_nokia-ospf:route-type')
    ] = None
    """
    The type of prefix that is contained within the Extended Prefix LSA.
    The information contained in sub-TLVs of the attribute is applicable
    regardless of this value.
    """
    prefix_length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:prefix-length', ge=0, le=32)
    ] = None
    """
    The length of the IPv4 prefix contained in the Extended Prefix LSA
    """
    address_family: Annotated[
        Optional[EnumerationEnum235], Field(alias='srl_nokia-ospf:address-family')
    ] = None
    """
    The address family of the prefix contained in the Extended Prefix
    LSA
    """
    attached: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:attached')] = False
    """
    If this value is set to true, the prefix being advertised was
    generated by an ABR for an inter-area prefix. The value corresponds
    to the A-flag of the flags field of the Extended Prefix LSA
    """
    node: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:node')] = False
    """
    If this value is set to true, the prefix being advertised represents
    the advertising router. Typically, the prefix within the LSA is
    expected to be globally-reachable prefix associated with a loopback
    interface
    """
    prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The IPv4 prefix contained within the extended prefix LSA
    """
    tlvs: Annotated[Optional[TlvsContainer8], Field(alias='srl_nokia-ospf:tlvs')] = None


class ExtendedPrefixContainer3(BaseModel):
    """
    An OSPFv2 Extended Prefix Opaque LSA, used to encapsulate
    TLV attributes associated with a prefix advertised in OSPF.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_type: Annotated[
        Optional[EnumerationEnum242], Field(alias='srl_nokia-ospf:route-type')
    ] = None
    """
    The type of prefix that is contained within the Extended Prefix LSA.
    The information contained in sub-TLVs of the attribute is applicable
    regardless of this value.
    """
    prefix_length: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:prefix-length', ge=0, le=32)
    ] = None
    """
    The length of the IPv4 prefix contained in the Extended Prefix LSA
    """
    address_family: Annotated[
        Optional[EnumerationEnum243], Field(alias='srl_nokia-ospf:address-family')
    ] = None
    """
    The address family of the prefix contained in the Extended Prefix
    LSA
    """
    attached: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:attached')] = False
    """
    If this value is set to true, the prefix being advertised was
    generated by an ABR for an inter-area prefix. The value corresponds
    to the A-flag of the flags field of the Extended Prefix LSA
    """
    node: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:node')] = False
    """
    If this value is set to true, the prefix being advertised represents
    the advertising router. Typically, the prefix within the LSA is
    expected to be globally-reachable prefix associated with a loopback
    interface
    """
    prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The IPv4 prefix contained within the extended prefix LSA
    """
    tlvs: Annotated[Optional[TlvsContainer12], Field(alias='srl_nokia-ospf:tlvs')] = (
        None
    )


class FailureDetectionContainer5(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    enable_bfd: Annotated[
        Optional[EnableBfdContainer],
        Field(alias='srl_nokia-next-hop-groups:enable-bfd'),
    ] = None


class FecStatisticsContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_prefix: Annotated[
        Optional[Ipv4PrefixContainer], Field(alias='srl_nokia-ldp:ipv4-prefix')
    ] = None
    ipv6_prefix: Annotated[
        Optional[Ipv6PrefixContainer], Field(alias='srl_nokia-ldp:ipv6-prefix')
    ] = None


class FecStatisticsContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_prefix: Annotated[
        Optional[Ipv4PrefixContainer2], Field(alias='srl_nokia-ldp:ipv4-prefix')
    ] = None
    ipv6_prefix: Annotated[
        Optional[Ipv6PrefixContainer2], Field(alias='srl_nokia-ldp:ipv6-prefix')
    ] = None


class FibProgrammingContainer(BaseModel):
    """
    Container for state related to the FIB programming of the object
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-ip-route-tables:suppressed')
    ] = None
    """
    When true, FIB programming for this entry has been suppressed and it is only installed in the control plane route table
    """
    last_successful_operation_type: Annotated[
        Optional[EnumerationEnum293],
        Field(alias='srl_nokia-ip-route-tables:last-successful-operation-type'),
    ] = None
    """
    The last operation type that completed successfully, if the entry was not suppressed.
    """
    last_successful_operation_timestamp: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ip-route-tables:last-successful-operation-timestamp',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last operation to complete successfully, if the entry was not suppressed.

    A delete operation is immediately timestamped by FIB manager on the assumption that it will ultimately be successful on all complexes. For other operations the timestamp is generated when the last complex that was expected to respond has responded with a success acknowledgement.
    """
    pending_operation_type: Annotated[
        Optional[EnumerationEnum293],
        Field(alias='srl_nokia-ip-route-tables:pending-operation-type'),
    ] = None
    """
    The current operation type that is in progress because not all complexes have responded.
    """
    last_failed_operation_type: Annotated[
        Optional[EnumerationEnum293],
        Field(alias='srl_nokia-ip-route-tables:last-failed-operation-type'),
    ] = None
    """
    The last operation type that failed.
    """
    last_failed_complexes: Annotated[
        Optional[List[LastFailedComplexesLeafList]],
        Field(alias='srl_nokia-ip-route-tables:last-failed-complexes'),
    ] = []
    """
    List of forwarding complexes that reported a failure for the last operation. They appear in the format (slot-number,complex-number).
    """


class FibProgrammingContainer2(BaseModel):
    """
    Container for state related to the FIB programming of the object
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-ip-route-tables:suppressed')
    ] = None
    """
    When true, FIB programming for this entry has been suppressed and it is only installed in the control plane route table
    """
    last_successful_operation_type: Annotated[
        Optional[EnumerationEnum293],
        Field(alias='srl_nokia-ip-route-tables:last-successful-operation-type'),
    ] = None
    """
    The last operation type that completed successfully, if the entry was not suppressed.
    """
    last_successful_operation_timestamp: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ip-route-tables:last-successful-operation-timestamp',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last operation to complete successfully, if the entry was not suppressed.

    A delete operation is immediately timestamped by FIB manager on the assumption that it will ultimately be successful on all complexes. For other operations the timestamp is generated when the last complex that was expected to respond has responded with a success acknowledgement.
    """
    pending_operation_type: Annotated[
        Optional[EnumerationEnum293],
        Field(alias='srl_nokia-ip-route-tables:pending-operation-type'),
    ] = None
    """
    The current operation type that is in progress because not all complexes have responded.
    """
    last_failed_operation_type: Annotated[
        Optional[EnumerationEnum293],
        Field(alias='srl_nokia-ip-route-tables:last-failed-operation-type'),
    ] = None
    """
    The last operation type that failed.
    """
    last_failed_complexes: Annotated[
        Optional[List[LastFailedComplexesLeafList2]],
        Field(alias='srl_nokia-ip-route-tables:last-failed-complexes'),
    ] = []
    """
    List of forwarding complexes that reported a failure for the last operation. They appear in the format (slot-number,complex-number).
    """


class FibProgrammingContainer3(BaseModel):
    """
    Container for state related to the FIB programming of the object
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    suppressed: Annotated[
        Optional[bool], Field(alias='srl_nokia-ip-route-tables:suppressed')
    ] = None
    """
    When true, FIB programming for this entry has been suppressed and it is only installed in the control plane route table
    """
    last_successful_operation_type: Annotated[
        Optional[EnumerationEnum293],
        Field(alias='srl_nokia-ip-route-tables:last-successful-operation-type'),
    ] = None
    """
    The last operation type that completed successfully, if the entry was not suppressed.
    """
    last_successful_operation_timestamp: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ip-route-tables:last-successful-operation-timestamp',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last operation to complete successfully, if the entry was not suppressed.

    A delete operation is immediately timestamped by FIB manager on the assumption that it will ultimately be successful on all complexes. For other operations the timestamp is generated when the last complex that was expected to respond has responded with a success acknowledgement.
    """
    pending_operation_type: Annotated[
        Optional[EnumerationEnum293],
        Field(alias='srl_nokia-ip-route-tables:pending-operation-type'),
    ] = None
    """
    The current operation type that is in progress because not all complexes have responded.
    """
    last_failed_operation_type: Annotated[
        Optional[EnumerationEnum293],
        Field(alias='srl_nokia-ip-route-tables:last-failed-operation-type'),
    ] = None
    """
    The last operation type that failed.
    """
    last_failed_complexes: Annotated[
        Optional[List[LastFailedComplexesLeafList3]],
        Field(alias='srl_nokia-ip-route-tables:last-failed-complexes'),
    ] = []
    """
    List of forwarding complexes that reported a failure for the last operation. They appear in the format (slot-number,complex-number).
    """


class FlagsContainer18(BaseModel):
    """
    A container for the PTA Flags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    assisted_replication_type: Annotated[
        Optional[EnumerationEnum368],
        Field(alias='srl_nokia-rib-bgp:assisted-replication-type'),
    ] = None
    """
    The value of the assisted-replication role type.
    """
    pruned_flood_list: Annotated[
        Optional[PrunedFloodListContainer],
        Field(alias='srl_nokia-rib-bgp:pruned-flood-list'),
    ] = None
    leaf_information_required: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:leaf-information-required')
    ] = None
    """
    The value of the Leaf Information Required (LIR) flag.
    """


class ForwardingInterfaceListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-mld:interface-name')
    ] = None
    """
    Reference to a specific subinterface of the form <interface-name>.<subinterface-index>
    """


class ForwardingInterfaceListEntry2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-igmp:interface-name')
    ] = None
    """
    Reference to a specific subinterface of the form <interface-name>.<subinterface-index>
    """


class GlobalBlockContainer(BaseModel):
    """
    Container with SRGB configuration that is applicable to all IGP protocol instances
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    label_range: Annotated[
        str,
        Field(
            alias='srl_nokia-segment-routing:label-range',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ]
    """
    Reference to a static label range
    """
    label_range_status: Annotated[
        Optional[EnumerationEnum312],
        Field(alias='srl_nokia-segment-routing:label-range-status'),
    ] = None
    """
    Status of the label block.
    The label block may show as unavailable if there is pending cleanup.
    """


class GraceLsaContainer(BaseModel):
    """
    The Grace LSA is utilised when a remote system is undergoing
    graceful restart
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlvs: Annotated[Optional[TlvsContainer2], Field(alias='srl_nokia-ospf:tlvs')] = None


class GraceLsaContainer2(BaseModel):
    """
    The Grace LSA is utilised when a remote system is undergoing
    graceful restart
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlvs: Annotated[Optional[TlvsContainer6], Field(alias='srl_nokia-ospf:tlvs')] = None


class GraceLsaContainer3(BaseModel):
    """
    The Grace LSA is utilised when a remote system is undergoing
    graceful restart
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlvs: Annotated[Optional[TlvsContainer10], Field(alias='srl_nokia-ospf:tlvs')] = (
        None
    )


class GribiContainer(BaseModel):
    """
    Container for gRIBI configuration and state.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-gribi:admin-state')
    ] = 'enable'
    """
    Administratively enable or disable gRIBI support.

    The enable setting only has an effect when the network-instance type is ip-vrf or default.

    When this is set to disable all IP entries and next-hop-groups associated with the network-instance are deleted from the gRIBI server database and the recovery of this state depends on the gRIBI clients to re-signal all of the deleted entries. While in a disabled state, no entries are accepted for this network-instance. (This is the same behavior when the network-instance does not exist at all.) 
    """
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-gribi:oper-state')
    ] = None
    """
    The operational state of gRIBI with respect to programming of entries in this network network-instance

    By default, even with no configuration, the state is up in all network-instances of type ip-vrf and default
    """
    default_metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-gribi:default-metric', ge=0, le=4294967295),
    ] = 1
    """
    Set the route table metric to use for all gRIBI-created IPv4 and IPv6 routes
    """
    default_preference: Annotated[
        Optional[int], Field(alias='srl_nokia-gribi:default-preference', ge=0, le=255)
    ] = 6
    """
    Lower values indicate a higher degree of preference when deciding the route to use from different protocols.
    """
    max_ecmp_hash_buckets_per_next_hop_group: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-gribi:max-ecmp-hash-buckets-per-next-hop-group',
            ge=1,
            le=256,
        ),
    ] = 256
    """
    Specifies the maximum number of ECMP hash buckets per next-hop-group.

    An error is returned to any gRIBI client that attempts to program more than this number of next-hops in a single next-hop-group.

    Weighted ECMP weights are normalized based on this number of hash buckets.
    """
    maximum_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-gribi:maximum-routes', ge=0, le=4294967295),
    ] = 0
    """
    Specifies the maximum number of gRIBI routes (sum of IPv4 and IPv6 entries).

    A value of 0 signifies no limit.
    """


class GroupRangeListEntry(BaseModel):
    """
    Define an accepted SSM group range
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ip_prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-pim:ip-prefix'),
    ] = None
    """
    A multicast IP prefix for SSM group range
    """


class GroupRangeListEntry4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    start: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld:start',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    start of the group range
    """
    end: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld:end',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    end of the group range
    """
    source_or_starg: Annotated[
        Union[SourceCase, StargCase], Field(alias='srl_nokia-mld:source-or-starg')
    ]


class GroupRangeListEntry7(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    start: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp:start',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Start of the group range.
    """
    end: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp:end',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    End of the group range.
    """
    source_or_starg: Annotated[
        Union[SourceCase4, StargCase4], Field(alias='srl_nokia-igmp:source-or-starg')
    ]


class GroupListEntry10(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:group',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    group address.
    """
    source_or_starg: Annotated[
        Union[SourceCase2, StargCase2],
        Field(alias='srl_nokia-igmp-snooping:source-or-starg'),
    ]


class GroupListEntry11(BaseModel):
    """
    Multicast group membership
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:group',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Multicast address.
    """
    group_type: Annotated[
        Optional[EnumerationEnum89], Field(alias='srl_nokia-igmp-snooping:group-type')
    ] = None
    """
    How this group entry was learned.
    """
    filter_mode: Annotated[
        Optional[EnumerationEnum90], Field(alias='srl_nokia-igmp-snooping:filter-mode')
    ] = None
    """
    The type of group membership.
    """
    expiry_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:expiry-time', ge=0, le=4294967295),
    ] = None
    """
    The time left before multicast group timeout
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """
    v1_host_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:v1-host-timer', ge=0, le=4294967295),
    ] = None
    """
    The time remaining until the local router will assume that
    there are no longer any version 1 members
    """
    v2_host_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:v2-host-timer', ge=0, le=4294967295),
    ] = None
    """
    The time remaining until the local router will assume that
    there are no longer any version 2 members
    """
    igmp_compatibility_mode: Annotated[
        Optional[EnumerationEnum206],
        Field(alias='srl_nokia-igmp-snooping:igmp-compatibility-mode'),
    ] = None
    """
    Compatibility with older version routers
    """
    source: Annotated[
        Optional[List[SourceListEntry9]], Field(alias='srl_nokia-igmp-snooping:source')
    ] = None


class GroupListEntry12(BaseModel):
    """
    Multicast group membership
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:group',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Multicast address.
    """
    group_type: Annotated[
        Optional[EnumerationEnum89], Field(alias='srl_nokia-igmp-snooping:group-type')
    ] = None
    """
    How this group entry was learned.
    """
    filter_mode: Annotated[
        Optional[EnumerationEnum90], Field(alias='srl_nokia-igmp-snooping:filter-mode')
    ] = None
    """
    The type of group membership.
    """
    expiry_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:expiry-time', ge=0, le=4294967295),
    ] = None
    """
    The time left before multicast group timeout
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """
    v1_host_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:v1-host-timer', ge=0, le=4294967295),
    ] = None
    """
    The time remaining until the local router will assume that
    there are no longer any version 1 members
    """
    v2_host_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:v2-host-timer', ge=0, le=4294967295),
    ] = None
    """
    The time remaining until the local router will assume that
    there are no longer any version 2 members
    """
    igmp_compatibility_mode: Annotated[
        Optional[EnumerationEnum206],
        Field(alias='srl_nokia-igmp-snooping:igmp-compatibility-mode'),
    ] = None
    """
    Compatibility with older version routers
    """
    source: Annotated[
        Optional[List[SourceListEntry10]], Field(alias='srl_nokia-igmp-snooping:source')
    ] = None


class GroupListEntry13(BaseModel):
    """
    Multicast group membership
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:group',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Multicast address.
    """
    filter_mode: Annotated[
        Optional[EnumerationEnum90], Field(alias='srl_nokia-mld-snooping:filter-mode')
    ] = None
    """
    The type of group membership.
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """
    source: Annotated[
        Optional[List[SourceListEntry11]], Field(alias='srl_nokia-mld-snooping:source')
    ] = None


class GroupListEntry14(BaseModel):
    """
    Multicast group membership
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:group',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Multicast address
    """
    filter_mode: Annotated[
        Optional[EnumerationEnum90], Field(alias='srl_nokia-mld-snooping:filter-mode')
    ] = None
    """
    The type of group membership.
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """
    v1_support: Annotated[
        Optional[bool], Field(alias='srl_nokia-mld-snooping:v1-support')
    ] = None
    """
    MLD Version 1 is supported
    """
    v2_support: Annotated[
        Optional[bool], Field(alias='srl_nokia-mld-snooping:v2-support')
    ] = None
    """
    MLD Version 2 is supported
    """
    source: Annotated[
        Optional[List[SourceListEntry12]], Field(alias='srl_nokia-mld-snooping:source')
    ] = None


class GroupListEntry15(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:group',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    group address.
    """
    source_or_starg: Annotated[
        Union[SourceCase3, StargCase3],
        Field(alias='srl_nokia-mld-snooping:source-or-starg'),
    ]


class GroupListEntry16(BaseModel):
    """
    Multicast group membership
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:group',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Multicast address
    """
    group_type: Annotated[
        Optional[EnumerationEnum89], Field(alias='srl_nokia-mld-snooping:group-type')
    ] = None
    """
    How this group entry was learned.
    """
    filter_mode: Annotated[
        Optional[EnumerationEnum90], Field(alias='srl_nokia-mld-snooping:filter-mode')
    ] = None
    """
    The type of group membership.
    """
    expiry_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:expiry-time', ge=0, le=4294967295),
    ] = None
    """
    The time left before multicast group timeout
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """
    v1_host_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:v1-host-timer', ge=0, le=4294967295),
    ] = None
    """
    The time remaining until the local router will assume that
    there are no longer any version 1 members
    """
    mld_compatibility_mode: Annotated[
        Optional[EnumerationEnum91],
        Field(alias='srl_nokia-mld-snooping:mld-compatibility-mode'),
    ] = None
    """
    Compatibility with older version routers
    """
    source: Annotated[
        Optional[List[SourceListEntry14]], Field(alias='srl_nokia-mld-snooping:source')
    ] = None


class GroupListEntry17(BaseModel):
    """
    Multicast group membership
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:group',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Multicast address
    """
    group_type: Annotated[
        Optional[EnumerationEnum89], Field(alias='srl_nokia-mld-snooping:group-type')
    ] = None
    """
    How this group entry was learned.
    """
    filter_mode: Annotated[
        Optional[EnumerationEnum90], Field(alias='srl_nokia-mld-snooping:filter-mode')
    ] = None
    """
    The type of group membership.
    """
    expiry_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:expiry-time', ge=0, le=4294967295),
    ] = None
    """
    The time left before multicast group timeout
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """
    v1_host_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:v1-host-timer', ge=0, le=4294967295),
    ] = None
    """
    The time remaining until the local router will assume that
    there are no longer any version 1 members
    """
    mld_compatibility_mode: Annotated[
        Optional[EnumerationEnum91],
        Field(alias='srl_nokia-mld-snooping:mld-compatibility-mode'),
    ] = None
    """
    Compatibility with older version routers
    """
    source: Annotated[
        Optional[List[SourceListEntry15]], Field(alias='srl_nokia-mld-snooping:source')
    ] = None


class GroupListEntry19(BaseModel):
    """
    Multicast group membership
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp:group',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Multicast address
    """
    last_reporter: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-igmp:last-reporter'),
    ] = None
    """
    The last host address which has sent the report to join the multicast group
    """
    group_type: Annotated[
        Optional[EnumerationEnum89], Field(alias='srl_nokia-igmp:group-type')
    ] = None
    """
    How this group entry was learned.
    """
    filter_mode: Annotated[
        Optional[EnumerationEnum90], Field(alias='srl_nokia-igmp:filter-mode')
    ] = None
    """
    The type of group membership.
    """
    expiry_time: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:expiry-time', ge=0, le=4294967295)
    ] = None
    """
    The time left before multicast group timeout
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """
    v1_host_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:v1-host-timer', ge=0, le=4294967295)
    ] = None
    """
    The time remaining until the local router will assume that there are no longer any version 1 members
    """
    v2_host_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:v2-host-timer', ge=0, le=4294967295)
    ] = None
    """
    The time remaining until the local router will assume that there are no longer any version 2 members
    """
    igmp_compatibility_mode: Annotated[
        Optional[EnumerationEnum206],
        Field(alias='srl_nokia-igmp:igmp-compatibility-mode'),
    ] = None
    """
    Compatibility with older version routers
    """
    source: Annotated[
        Optional[List[SourceListEntry20]], Field(alias='srl_nokia-igmp:source')
    ] = None


class GroupListEntry2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:group'),
    ] = None
    """
    Multicast group IP address
    """
    source: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:source'),
    ] = None
    """
    Source IP address
    """
    source_type: Annotated[
        Optional[EnumerationEnum73], Field(alias='srl_nokia-pim:source-type')
    ] = None
    """
    Type of this entry
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-pim:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time elapsed since this entry was created
    """
    jp_state: Annotated[
        Optional[EnumerationEnum74], Field(alias='srl_nokia-pim:jp-state')
    ] = None
    """
    The Join Prune state for this entry on the interface

    PIM Join or Prune messages are sent by the downstream routers towards the RPF neighbor.
    """
    jp_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:jp-timer', ge=0, le=4294967295)
    ] = None
    """
    The time remaining before the router transitions the value of
     jp-state to 'no-info'

     The timer is started or restarted when a valid Join message is received.
     If the value of this object is zero and jp-state is 'join' state, it means that the downstream router sent a holdtime of '0xffff'.
     In this case, jp-state will not transition until an appropriate cancelling of Join or Prune message is received.
    """
    prune_pending_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:prune-pending-timer', ge=0, le=4294967295),
    ] = None
    """
    The time remaining before the router transitions the value of jp-state to 'no-info'

    The timer is set when the PIM Prune message is received.
    """
    jp_rpt_state: Annotated[
        Optional[EnumerationEnum75], Field(alias='srl_nokia-pim:jp-rpt-state')
    ] = None
    """
    The Join Prune Rpt state for this entry on the interface

    PIM Join or Prune messages are sent by the downstream routers towards the RPF neighbor.
    (S,G,rpt) state is a result of receiving (S,G, rpt) JP message from the downstream router on the RP tree.
    """
    jp_rpt_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:jp-rpt-timer', ge=0, le=4294967295)
    ] = None
    """
    The time remaining before the router transitions the value of jp-rpt-state to 'no-info'

     The timer is started or restarted when a valid Join message is received.
     If the value of this object is zero and jp-rpt-state is in 'join' state, it means that the downstream router sent a holdtime of '0xffff'.
     In this case, jp-rpt-state will not transition until an appropriate cancelling of Join or Prune message is received from the downstream router.
    """
    jp_rpt_pending_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:jp-rpt-pending-timer', ge=0, le=4294967295),
    ] = None
    """
    The time remaining before the router transitions the value of jp-rpt-state to 'no-info'

     The timer is set when the (S,G,rpt) PIM Prune message is received.
    """
    rp_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:rp-address'),
    ] = None
    """
    IP address of the Rendezvous Point(RP)
    """
    assert_state: Annotated[
        Optional[EnumerationEnum76], Field(alias='srl_nokia-pim:assert-state')
    ] = None
    """
    The ASSERT state for this entry

    Where multiple PIM routers peer over a shared LAN it  possible for more than one upstream router to have valid forwarding state for a packet, which can lead to packet duplication.
    PIM does not attempt to prevent this from occurring.
    Instead it detects when this has happened and elects a single forwarder amongst the upstream routers to prevent further duplication.
    This election is performed using PIM Assert messages.
    Assert messages are also received by downstream routers on the LAN, and these cause subsequent Join or Prune messages to be sent to the upstream router that won the Assert.
    """
    assert_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:assert-timer', ge=0, le=4294967295)
    ] = None
    """
    Assert time remaining

    If the value of assert-state is 'lost-assert': the time remaining before the router transitions the assert-state to 'no-info'.
    If the value of assert-state is 'won-assert':  the time remaining before the ASSERT message is resent.
    """
    assert_metric: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:assert-metric', ge=0, le=4294967295)
    ] = None
    """
    The metric associated by the Multicast RIB for the route towards the source or the RP
    """
    assert_metric_preference: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:assert-metric-preference', ge=0, le=4294967295),
    ] = None
    """
    The preference associated by the Multicast RIB for the route towards the source or the RP
    """
    assert_rpt_bit: Annotated[
        Optional[bool], Field(alias='srl_nokia-pim:assert-rpt-bit')
    ] = None
    """
    The value is 'true' if the RPT bit is set and 'false' when the RPT bit is not set
    """
    assert_winner_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:assert-winner-address'),
    ] = None
    """
    The Assert Message winner's interface IP address
    """
    assert_winner_metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:assert-winner-metric', ge=0, le=4294967295),
    ] = None
    """
    The ASSERT winner's metric associated by its Multicast RIB for the route towards the source or the RP
    """
    assert_winner_metric_preference: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:assert-winner-metric-preference', ge=0, le=4294967295
        ),
    ] = None
    """
    The ASSERT winner's preference associated by its Multicast RIB for the route towards the source or the RP
    """
    assert_winner_rpt_bit: Annotated[
        Optional[bool], Field(alias='srl_nokia-pim:assert-winner-rpt-bit')
    ] = None
    """
    The value is 'true' if the RPT bit is set and 'false' when the RPT bit is not set
    """


class GroupListEntry23(BaseModel):
    """
    Name of the GRE decapsulation group

    Each decapsulation group can be used to terminate GRE encapsulated packets, which are then forwarded based on the headers of the underlying payload frame type.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ni-gre:name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    A unique identifier for the decapsulation group
    """
    allowed_payloads: Annotated[
        Optional[List[EnumerationEnum409]],
        Field(alias='srl_nokia-ni-gre:allowed-payloads'),
    ] = ['mpls']
    """
    Specifies the type of payload packet accepted and forwarded by the associated decapsulation group
    """
    termination_subnet: Annotated[
        Optional[List[TerminationSubnetListEntry]],
        Field(alias='srl_nokia-ni-gre:termination-subnet'),
    ] = None


class GroupListEntry3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:group'),
    ] = None
    """
    Multicast group IP address
    """
    source: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:source'),
    ] = None
    """
    Source IP address
    """
    source_type: Annotated[
        Optional[EnumerationEnum77], Field(alias='srl_nokia-pim:source-type')
    ] = None
    """
    Type of this entry
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-pim:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time elapsed since this entry was created
    """
    rpf_neighbor_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:rpf-neighbor-address'),
    ] = None
    """
    IP address of the Reverse Path Forwarding (RPF) neighbor
    """
    rpf_neighbor_interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-pim:rpf-neighbor-interface-name')
    ] = None
    """
    Router interface on which the RPF neighbor exists
    """
    sg_state: Annotated[
        Optional[EnumerationEnum78], Field(alias='srl_nokia-pim:sg-state')
    ] = None
    """
    Current state of the (S,G)
    """
    rp_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:rp-address'),
    ] = None
    """
    IP address of the Rendezvous Point (RP)
    """
    advertising_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:advertising-router'),
    ] = None
    """
    Router address that advertised the route to the source
    """
    source_flags: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-pim:source-flags',
            pattern='^(spt-bit|rpt-prune-desired|\\s)*$',
        ),
    ] = None
    """
    spt-bit and PruneDesired state of the entry

    This object is applicable only for (S,G) entries,i.e., when source-type is 'sg'.
    The (S,G) 'spt-bit' is used to distinguish whether to forward on (*,*,RP) or (*,G) or on (S,G) state.
    It is updated when the (S,G) data comes on the RPF interface towards the source.
    'rpt-prune-desired' is set according to the PruneDesired(S,G,rpt) algorithm.
    """
    multicast_rib_nh_address: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-pim:multicast-rib-nh-address'),
    ] = None
    """
    Next hop address towards the RP
    """
    multicast_rib_source_flags: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-pim:multicast-rib-source-flags',
            pattern='^(self|direct|remote|\\s)*$',
        ),
    ] = None
    """
    Multicast RIB (mrib) information about the source

    If the entry is of type 'star-g' or 'star-star-rp', it will contain information about the RP for this group.
    """
    keepalive_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:keepalive-timer', ge=0, le=4294967295)
    ] = None
    """
    Keepalive timer for (S,G)

    It Is applicable only for (S,G) entries.
    The (S,G) keepalive timer is updated by data being forwarded using this (S,G) forwarding state.
    It is used to keep (S,G) state alive in the absence of explicit (S,G) Joins.
    """
    resolved_by: Annotated[
        Optional[EnumerationEnum79], Field(alias='srl_nokia-pim:resolved-by')
    ] = None
    """
    Routing table used to resolve this entry

    The value of this object will be 'multicast-route-table' if the source or Rendezvous Point (RP) is resolved by the multicast route table.
    The value of this object will be 'unicast-route-table' if the source or Rendezvous Point (RP) is resolved by the unicast route table.
    The value will be 'none' if the source or RP is unresolved.
    """
    upstream_jp_state: Annotated[
        Optional[EnumerationEnum80], Field(alias='srl_nokia-pim:upstream-jp-state')
    ] = None
    """
    Upstream Join-Prune state

    This is a result of sending PIM Join-Prune messages towards the source or the RP.
    """
    upstream_jp_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:upstream-jp-timer', ge=0, le=4294967295),
    ] = None
    """
    Time remaining before the router sends another Join message to its upstream neighbor
    """
    upstream_rpt_jp_state: Annotated[
        Optional[EnumerationEnum81], Field(alias='srl_nokia-pim:upstream-rpt-jp-state')
    ] = None
    """
    Upstream RPT Join-Prune state

    (S,G,rpt) Joins and Prunes are (S,G) Joins or Prunes sent on the RP tree with the RPT bit set.
    To either modify the results of (*,G) Joins, or to override the behavior of other upstream LAN peers.
    """
    upstream_rpt_override_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:upstream-rpt-override-timer', ge=0, le=4294967295),
    ] = None
    """
    Delay to triggered Join(S,G,rpt) messages to prevent implosions of triggered messages

    If non-zero, it means that the router was in 'not-pruned' state and it saw a Prune(S,G,rpt) message being sent to RPF'(S,G,rpt).
    If the router sees a Join(S,G,rpt) override message being sent by some other router on the LAN while the timer is still non-zero, it simply cancels the override timer.
    If it does not see a Join(S,G,rpt) message, then on expiry of the override timer, it sends it's own Join(S,G,rpt) message to RPF'(S,G,rpt).
    A similar scenario exists when RPF'(S,G,rpt) changes to become equal to RPF'(*,G).
    """
    register_state: Annotated[
        Optional[EnumerationEnum82], Field(alias='srl_nokia-pim:register-state')
    ] = None
    """
    Register state kept at the source DR

    When the host starts sending multicast packets and if there are no entries programmed for that group, the source DR sends a Register packet to the RP(G).
    Register state transition happen based on the register stop timer and the response received from the RP.
    """
    register_stop_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:register-stop-timer', ge=0, le=4294967295),
    ] = None
    """
    Time remaining before the register-state might transition to a different state

    This timer has a non-zero value when the value of register-state is not 'no-info'.
    """
    register_from_anycast_rp: Annotated[
        Optional[bool], Field(alias='srl_nokia-pim:register-from-anycast-rp')
    ] = None
    """
    Register message received from anycast RP

    Whether a register message for this source group combination was received from the anycast RP and not from the Designated Router (DR) connected to the source.
    It is not applicable when the value of source-type is 'star-star-rp' or 'star-g'.
    """
    inherited_outgoing_interface_count: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:inherited-outgoing-interface-count',
            ge=0,
            le=4294967295,
        ),
    ] = None
    """
    Number of interfaces in the inherited outgoing interface list

    An 'inherited' list inherits state from other types.
    """
    s_g_rpt_prune_interface_count: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:s-g-rpt-prune-interface-count', ge=0, le=4294967295),
    ] = None
    """
    Number of interfaces on which the router received (S,G,Rpt) prunes
    """
    spt_switchover_threshold: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:spt-switchover-threshold', ge=0, le=4294967295),
    ] = None
    """
    Configured threshold in kilobits per second(kbps) for the group to which this (S,G) belongs

    For a group G configured with a threshold, switchover to SPT for an (S,G) is attempted only if the (S,G)'s rate exceeds this configured threshold.
    """
    rpt_rpf_neighbor_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:rpt-rpf-neighbor-address'),
    ] = None
    """
    The address of the RPF neighbor on the RPT
    """
    immediate_outgoing_interface_count: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:immediate-outgoing-interface-count',
            ge=0,
            le=4294967295,
        ),
    ] = None
    """
    Number of interfaces in the immediate outgoing interface list

    An outgoing list can be 'immediate' if it is built directly from the state of the relevant type as indicated by 'source-type'.
    """
    inherited_rpt_outgoing_interface_count: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:inherited-rpt-outgoing-interface-count',
            ge=0,
            le=4294967295,
        ),
    ] = None
    """
    Number of interfaces in the inherited outgoing interface list for (S,G,Rpt)
    """
    local_rx_include_interface_count: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:local-rx-include-interface-count', ge=0, le=4294967295
        ),
    ] = None
    """
    Number of interfaces in the local membership include interface list

    Local membership is the result of the local membership mechanism (MLD) running on a interface.
    Include list contains interfaces which are interested in receiving multicast traffic for this source group entry.
    """
    local_rx_exclude_interface_count: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:local-rx-exclude-interface-count', ge=0, le=4294967295
        ),
    ] = None
    """
    Number of interfaces in the local membership exclude interface list

    Local membership is the result of the local membership mechanism (MLD) running on the interface.
    Exclude list contains interfaces which are not interested in receiving multicast traffic for this source group entry.
    """
    join_or_prune_interface_count: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:join-or-prune-interface-count', ge=0, le=4294967295),
    ] = None
    """
    Number of interfaces on which the router received a Join or Prune message
    """
    lost_assert_interface_count: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:lost-assert-interface-count', ge=0, le=4294967295),
    ] = None
    """
    Number of interfaces on which the router lost assert
    """
    current_forwarding_rate: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:current-forwarding-rate', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    Current forwarding rate for the entry in bps

    Current forwarding rate being used by a source group(S,G) entry or (*,G) entry for the traffic in bits per second (bps), where * means any source entry.
    """
    outgoing_interface: Annotated[
        Optional[List[OutgoingInterfaceListEntry]],
        Field(alias='srl_nokia-pim:outgoing-interface'),
    ] = None
    outgoing_tunnel_interface: Annotated[
        Optional[OutgoingTunnelInterfaceContainer],
        Field(alias='srl_nokia-pim:outgoing-tunnel-interface'),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer12], Field(alias='srl_nokia-pim:statistics')
    ] = None


class GroupListEntry7(BaseModel):
    """
    Multicast group membership
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld:group',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Multicast address
    """
    last_reporter: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-mld:last-reporter'),
    ] = None
    """
    The last host address which has sent the report to join
    the multicast group.
    """
    group_type: Annotated[
        Optional[EnumerationEnum89], Field(alias='srl_nokia-mld:group-type')
    ] = None
    """
    How this group entry was learned.
    """
    filter_mode: Annotated[
        Optional[EnumerationEnum90], Field(alias='srl_nokia-mld:filter-mode')
    ] = None
    """
    The type of group membership.
    """
    expiry_time: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:expiry-time', ge=0, le=4294967295)
    ] = None
    """
    The time left before multicast group timeout
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """
    v1_host_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:v1-host-timer', ge=0, le=4294967295)
    ] = None
    """
    The time remaining until the local router will assume that
    there are no longer any version 1 members.
    """
    mld_compatibility_mode: Annotated[
        Optional[EnumerationEnum91], Field(alias='srl_nokia-mld:mld-compatibility-mode')
    ] = None
    """
    Compatibility with older version routers
    """
    source: Annotated[
        Optional[List[SourceListEntry5]], Field(alias='srl_nokia-mld:source')
    ] = None


class GroupListEntry8(BaseModel):
    """
    Multicast group membership
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:group',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Multicast address
    """
    filter_mode: Annotated[
        Optional[EnumerationEnum90], Field(alias='srl_nokia-igmp-snooping:filter-mode')
    ] = None
    """
    The type of group membership.
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """
    source: Annotated[
        Optional[List[SourceListEntry6]], Field(alias='srl_nokia-igmp-snooping:source')
    ] = None


class GroupListEntry9(BaseModel):
    """
    Multicast group membership
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:group',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Multicast address
    """
    filter_mode: Annotated[
        Optional[EnumerationEnum90], Field(alias='srl_nokia-igmp-snooping:filter-mode')
    ] = None
    """
    The type of group membership.
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time elapsed since this entry was created
    """
    v1_support: Annotated[
        Optional[bool], Field(alias='srl_nokia-igmp-snooping:v1-support')
    ] = None
    """
    IGMP Version 1 is supported
    """
    v2_support: Annotated[
        Optional[bool], Field(alias='srl_nokia-igmp-snooping:v2-support')
    ] = None
    """
    IGMP Version 2 is supported
    """
    v3_support: Annotated[
        Optional[bool], Field(alias='srl_nokia-igmp-snooping:v3-support')
    ] = None
    """
    IGMP Version 3 is supported
    """
    source: Annotated[
        Optional[List[SourceListEntry7]], Field(alias='srl_nokia-igmp-snooping:source')
    ] = None


class IbgpContainer(BaseModel):
    """
    Multipath configuration options that apply when the best path for the prefix was received from an IBGP peer
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    maximum_paths: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:maximum-paths', ge=1, le=256)
    ] = 1
    """
    The maximum number of BGP ECMP next-hops for BGP routes with an NLRI belonging to the address family of this configuration context
    """
    weighted_ecmp: Annotated[
        Optional[WeightedEcmpContainer3], Field(alias='srl_nokia-bgp:weighted-ecmp')
    ] = None


class IbgpContainer2(BaseModel):
    """
    Multipath configuration options that apply when the best path for the prefix was received from an IBGP peer within the group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    weighted_ecmp: Annotated[
        Optional[WeightedEcmpContainer5], Field(alias='srl_nokia-bgp:weighted-ecmp')
    ] = None


class Icmp6Container(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    statistics: Annotated[
        Optional[StatisticsContainer2],
        Field(alias='srl_nokia-network-instance:statistics'),
    ] = None


class IcmpContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    statistics: Annotated[
        Optional[StatisticsContainer],
        Field(alias='srl_nokia-network-instance:statistics'),
    ] = None


class ImetRouteListEntry(BaseModel):
    """
    List of Inclusive Multicast Ethernet Tag routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum338], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer15],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer16],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    imported_network_instances: Annotated[
        Optional[List[ImportedNetworkInstancesLeafList3]],
        Field(alias='srl_nokia-rib-bgp:imported-network-instances'),
    ] = []
    """
    List of network instances that imported the route
    """
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class ImetRouteListEntry2(BaseModel):
    """
    List of Inclusive Multicast Ethernet Tag routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """


class ImetRouteListEntry3(BaseModel):
    """
    List of Inclusive Multicast Ethernet Tag routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum352], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer23],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer24],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class ImetRouteListEntry4(BaseModel):
    """
    List of Inclusive Multicast Ethernet Tag routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    next_hop: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:next-hop'),
    ] = None
    """
    The advertised BGP next-hop address.
    """


class ImportPoliciesContainer(BaseModel):
    """
    Import policies.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    join_policy: Annotated[
        Optional[List[JoinPolicyLeafList]], Field(alias='srl_nokia-pim:join-policy')
    ] = []
    """
    Policies that apply to the Join message
    """
    register_policy: Annotated[
        Optional[List[RegisterPolicyLeafList]],
        Field(alias='srl_nokia-pim:register-policy'),
    ] = []
    """
    Policies that apply to the register message
    """


class InclusiveMcastContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp-evpn:advertise')
    ] = True
    """
    If set to true an inclusive multicast route will be advertised in this evpn instance.
    """
    originating_ip: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-bgp-evpn:originating-ip'),
    ] = None
    """
    The originating ip-address that the inclusive multicast route will be advertised with in this evpn instance
    """


class InstanceListEntry(BaseModel):
    """
    Instance of the TLV to the remote IS neighbor.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:id', ge=0, le=18446744073709551615)
    ] = None
    """
    Unique identifier for the instance of the TLV for the IS neighbor. The instance ID is not required to be consistent across across readvertisements of the LSP.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=1, le=16777215)
    ] = None
    """
    Metric value.
    """
    subtlvs: Annotated[
        Optional[SubtlvsContainer2], Field(alias='srl_nokia-isis:subtlvs')
    ] = None
    undefined_subtlvs: Annotated[
        Optional[UndefinedSubtlvsContainer],
        Field(alias='srl_nokia-isis:undefined-subtlvs'),
    ] = None


class InstanceListEntry2(BaseModel):
    """
    Instance of the TLV to the remote IS neighbor.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:id', ge=0, le=18446744073709551615)
    ] = None
    """
    Unique identifier for the instance of the TLV for the IS neighbor. The instance ID is not required to be consistent across across readvertisements of the LSP.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=1, le=16777215)
    ] = None
    """
    Metric value.
    """
    subtlvs: Annotated[
        Optional[SubtlvsContainer5], Field(alias='srl_nokia-isis:subtlvs')
    ] = None
    undefined_subtlvs: Annotated[
        Optional[UndefinedSubtlvsContainer4],
        Field(alias='srl_nokia-isis:undefined-subtlvs'),
    ] = None


class InstanceListEntry3(BaseModel):
    """
    Instance of TLV-222 between the originating and remote IS.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=0, le=16777215)
    ] = None
    """
    ISIS metric value.
    """
    id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:id', ge=0, le=18446744073709551615)
    ] = None
    """
    Unique identifier for the TLV instance for the neighbor. The ID is not required to be consistent across readvertisements of the LSP.
    """
    subtlvs: Annotated[
        Optional[SubtlvsContainer6], Field(alias='srl_nokia-isis:subtlvs')
    ] = None
    undefined_subtlvs: Annotated[
        Optional[UndefinedSubtlvsContainer5],
        Field(alias='srl_nokia-isis:undefined-subtlvs'),
    ] = None


class InstanceListEntry4(BaseModel):
    """
    Instance of TLV-222 between the originating and remote IS.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=0, le=16777215)
    ] = None
    """
    ISIS metric value.
    """
    id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:id', ge=0, le=18446744073709551615)
    ] = None
    """
    Unique identifier for the TLV instance for the neighbor. The ID is not required to be consistent across readvertisements of the LSP.
    """
    subtlvs: Annotated[
        Optional[SubtlvsContainer7], Field(alias='srl_nokia-isis:subtlvs')
    ] = None
    undefined_subtlvs: Annotated[
        Optional[UndefinedSubtlvsContainer6],
        Field(alias='srl_nokia-isis:undefined-subtlvs'),
    ] = None


class InstancesContainer(BaseModel):
    """
    This list contains all instances of an adjacency between the originating IS and the remote IS. Multiple instances are used where there are parallel adjacencies between two systems.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    instance: Annotated[
        Optional[List[InstanceListEntry]], Field(alias='srl_nokia-isis:instance')
    ] = None


class InstancesContainer2(BaseModel):
    """
    This list contains all instances of an adjacency between the originating IS and the remote IS. Multiple instances are used where there are parallel adjacencies between two systems.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    instance: Annotated[
        Optional[List[InstanceListEntry2]], Field(alias='srl_nokia-isis:instance')
    ] = None


class InstancesContainer3(BaseModel):
    """
    This list contains all instances of an adjacency between the originating and remote IS. Multiple instances are used to indicate where there are arallel adjacencies between systems.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    instance: Annotated[
        Optional[List[InstanceListEntry3]], Field(alias='srl_nokia-isis:instance')
    ] = None


class InstancesContainer4(BaseModel):
    """
    This list contains all instances of an adjacency between the originating and remote IS. Multiple instances are used to indicate where there are arallel adjacencies between systems.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    instance: Annotated[
        Optional[List[InstanceListEntry4]], Field(alias='srl_nokia-isis:instance')
    ] = None


class InterInstancePoliciesContainer(BaseModel):
    """
    Policies for leaking routes between this network instance and other network instances
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    apply_policy: Annotated[
        Optional[ApplyPolicyContainer],
        Field(alias='srl_nokia-network-instance:apply-policy'),
    ] = None


class InterfaceNameCase(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-pim:interface-name')
    ] = None
    """
    Enable packet tracing for a specific interface
    """


class InterfaceNameCase2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-pim:interface-name')
    ] = None
    """
    Enable packet tracing for a specific interface
    """


class InterfaceNameCase3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-pim:interface-name')
    ] = None
    """
    Enable packet tracing for a specific interface
    """


class InterfaceNameCase4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-pim:interface-name')
    ] = None
    """
    Enable packet tracing for a specific interface
    """


class InterfaceRefContainer(BaseModel):
    """
    Reference to a subinterface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Optional[str], Field(alias='srl_nokia-network-instance:interface')
    ] = None
    """
    Reference to a base interface, for example a port or LAG
    """
    subinterface: Annotated[
        Optional[int],
        Field(alias='srl_nokia-network-instance:subinterface', ge=0, le=9999),
    ] = None
    """
    Reference to a subinterface
    This requires the base interface to be specified using the interface leaf in this container.
    """


class InterfaceRefContainer2(BaseModel):
    """
    Reference to a subinterface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[Optional[str], Field(alias='srl_nokia-isis:interface')] = None
    """
    Reference to a base interface, for example a port or LAG
    """
    subinterface: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:subinterface', ge=0, le=9999)
    ] = None
    """
    Reference to a subinterface
    This requires the base interface to be specified using the interface leaf in this container.
    """


class InterfaceRefContainer3(BaseModel):
    """
    Reference to a subinterface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Optional[str], Field(alias='srl_nokia-policy-forwarding:interface')
    ] = None
    """
    Reference to a base interface, for example a port or LAG
    """
    subinterface: Annotated[
        Optional[int],
        Field(alias='srl_nokia-policy-forwarding:subinterface', ge=0, le=9999),
    ] = None
    """
    Reference to a subinterface
    This requires the base interface to be specified using the interface leaf in this container.
    """


class InterfaceRefContainer4(BaseModel):
    """
    Reference to a subinterface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Optional[str], Field(alias='srl_nokia-traffic-engineering:interface')
    ] = None
    """
    Reference to a base interface, for example a port or LAG
    """
    subinterface: Annotated[
        Optional[int],
        Field(alias='srl_nokia-traffic-engineering:subinterface', ge=0, le=9999),
    ] = None
    """
    Reference to a subinterface

    This requires the base interface to be specified using the interface leaf in this container.
    """


class InterfaceListEntry(BaseModel):
    """
    List of subinterfaces used by this network-instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[str],
        Field(alias='srl_nokia-network-instance:name', max_length=255, min_length=1),
    ] = None
    """
    Name of the subinterface bound to this network-instance
    """
    interface_ref: Annotated[
        Optional[InterfaceRefContainer],
        Field(alias='srl_nokia-network-instance:interface-ref'),
    ] = None
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-network-instance:oper-state')
    ] = None
    """
    The operational state of this subinterface.
    """
    oper_down_reason: Annotated[
        Optional[EnumerationEnum4],
        Field(alias='srl_nokia-network-instance:oper-down-reason'),
    ] = None
    """
    The reason for the interface being down in the network-instance
    """
    index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-network-instance:index', ge=0, le=18446744073709551615),
    ] = 0
    """
    network instance allocated sub interface index
    """
    bridge_table: Annotated[
        Optional[BridgeTableContainer],
        Field(alias='srl_nokia-network-instance:bridge-table'),
    ] = None
    connection_point: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-network-instance:connection-point',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    A unique name identifying the connection-point
    """


class InterfaceListEntry15(BaseModel):
    """
    List of subinterfaces that use the policy forwarding policy.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    subinterface: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-policy-forwarding:subinterface',
            max_length=255,
            min_length=1,
        ),
    ] = None
    """
    Name of the subinterface.
    """
    interface_ref: Annotated[
        Optional[InterfaceRefContainer3],
        Field(alias='srl_nokia-policy-forwarding:interface-ref'),
    ] = None
    apply_forwarding_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-policy-forwarding:apply-forwarding-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The policy to be applied on the interface. Packets ingress on the referenced interface should be compared to the match criteria within the specified policy, and in the case that these criteria are met, the forwarding actions specified applied.
    """


class InterfaceListEntry16(BaseModel):
    """
    List of routed subinterfaces that have associated TE information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-traffic-engineering:interface-name',
            max_length=255,
            min_length=1,
        ),
    ] = None
    """
    Name of a subinterface
    """
    interface_ref: Annotated[
        Optional[InterfaceRefContainer4],
        Field(alias='srl_nokia-traffic-engineering:interface-ref'),
    ] = None
    admin_group: Annotated[
        Optional[List[AdminGroupLeafList5]],
        Field(alias='srl_nokia-traffic-engineering:admin-group'),
    ] = []
    """
    The list of admin-groups generically associated with the interface (not application specific)
    """
    srlg_membership: Annotated[
        Optional[List[SrlgMembershipLeafList]],
        Field(alias='srl_nokia-traffic-engineering:srlg-membership'),
    ] = []
    """
    The list of srlgs generically associated with the interface (not application specific)
    """
    te_metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-traffic-engineering:te-metric', ge=1, le=16777215),
    ] = None
    """
    The TE metric associated with the interface (not application specific)
    """


class IpForwardingContainer(BaseModel):
    """
    Forwarding options that apply to the entire network instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    receive_ipv4_check: Annotated[
        Optional[bool], Field(alias='srl_nokia-network-instance:receive-ipv4-check')
    ] = None
    """
    If set to true then the following check is done on every subinterface of the network-instance: if an IPv4 packet is received on a subinterface and the IPv4 oper-status of this subinterface is down the packet is discarded. If this leaf is set to false then received IPv4 packets are accepted on all subinterfaces of the network-instance that are up, even if they do not have any IPv4 addresses.
    """
    receive_ipv6_check: Annotated[
        Optional[bool], Field(alias='srl_nokia-network-instance:receive-ipv6-check')
    ] = None
    """
    If set to true then the following check is done on every subinterface of the network-instance: if an IPv6 packet is received on a subinterface and the IPv6 oper-status of this subinterface is down the packet is discarded. If this leaf is set to false then received IPv6 packets are accepted on all subinterfaces of the network-instance that are up, even if they do not have any IPv6 addresses.
    """
    last_resort_lookup: Annotated[
        Optional[LastResortLookupContainer],
        Field(alias='srl_nokia-network-instance:last-resort-lookup'),
    ] = None


class IpInIpContainer(BaseModel):
    """
    Specifies details of the IP-in-IP header added to the packet. This is valid only when encapsulate-header is ipv4 or ipv6
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    src_ip: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-ip-route-tables:src-ip'),
    ] = None
    """
    Source IP address to use for the encapsulated packet.
    """
    dst_ip: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-ip-route-tables:dst-ip'),
    ] = None
    """
    Destination IP address to use for the encapsulated packet.
    """


class IpInIpContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    destination_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-tunnel-tables:destination-address'),
    ] = None
    """
    The IP address that identifies the destination of the tunnel.
    """
    source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-tunnel-tables:source-address'),
    ] = None
    """
    The IP address that identifies the source of the tunnel.
    """


class IpInIpContainer3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    destination_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-tunnel-tables:destination-address'),
    ] = None
    """
    The IP address that identifies the destination of the tunnel.
    """
    source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-tunnel-tables:source-address'),
    ] = None
    """
    The IP address that identifies the source of the tunnel.
    """


class IpLoadBalancingContainer(BaseModel):
    """
    Container for IP load-balancing options that are specific to the network-instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    resilient_hash_prefix: Annotated[
        Optional[List[ResilientHashPrefixListEntry]],
        Field(alias='srl_nokia-network-instance:resilient-hash-prefix'),
    ] = None


class IpPrefixRouteListEntry(BaseModel):
    """
    List of IP prefix routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain
    """
    ip_prefix_length: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:ip-prefix-length', ge=0, le=128)
    ] = None
    """
    IP prefix length
    """
    ip_prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:ip-prefix'),
    ] = None
    """
    The IPv4 or IPv6 prefix
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    gateway_ip: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:gateway-ip'),
    ] = None
    """
    An IP address that encodes an overlay index
    """
    label: Annotated[
        Optional[LabelContainer2], Field(alias='srl_nokia-rib-bgp:label')
    ] = None
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum340], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer17],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer18],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    imported_network_instances: Annotated[
        Optional[List[ImportedNetworkInstancesLeafList4]],
        Field(alias='srl_nokia-rib-bgp:imported-network-instances'),
    ] = []
    """
    List of network instances that imported the route
    """
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class IpPrefixRouteListEntry2(BaseModel):
    """
    List of IP prefix routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain
    """
    ip_prefix_length: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:ip-prefix-length', ge=0, le=128)
    ] = None
    """
    IP prefix length
    """
    ip_prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:ip-prefix'),
    ] = None
    """
    The IPv4 or IPv6 prefix
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    gateway_ip: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:gateway-ip'),
    ] = None
    """
    An IP address that encodes an overlay index
    """
    label: Annotated[
        Optional[LabelContainer4], Field(alias='srl_nokia-rib-bgp:label')
    ] = None
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """


class IpPrefixRouteListEntry3(BaseModel):
    """
    List of IP prefix routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain
    """
    ip_prefix_length: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:ip-prefix-length', ge=0, le=128)
    ] = None
    """
    IP prefix length
    """
    ip_prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:ip-prefix'),
    ] = None
    """
    The IPv4 or IPv6 prefix
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    gateway_ip: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:gateway-ip'),
    ] = None
    """
    An IP address that encodes an overlay index
    """
    label: Annotated[
        Optional[LabelContainer6], Field(alias='srl_nokia-rib-bgp:label')
    ] = None
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum354], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer25],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer26],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class IpPrefixRouteListEntry4(BaseModel):
    """
    List of IP prefix routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain
    """
    ip_prefix_length: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:ip-prefix-length', ge=0, le=128)
    ] = None
    """
    IP prefix length
    """
    ip_prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-rib-bgp:ip-prefix'),
    ] = None
    """
    The IPv4 or IPv6 prefix
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    gateway_ip: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:gateway-ip'),
    ] = None
    """
    An IP address that encodes an overlay index
    """
    label: Annotated[
        Optional[LabelContainer8], Field(alias='srl_nokia-rib-bgp:label')
    ] = None
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    next_hop: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:next-hop'),
    ] = None
    """
    The advertised BGP next-hop address.
    """


class IpPrefixContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    evpn_link_bandwidth: Annotated[
        Optional[EvpnLinkBandwidthContainer],
        Field(alias='srl_nokia-bgp-evpn:evpn-link-bandwidth'),
    ] = None


class IpTunnelDecapsulationContainer(BaseModel):
    """
    Container for the IP tunnel decapsulation group function
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry23]], Field(alias='srl_nokia-ni-gre:group')
    ] = None


class Ipv4AdjacencySidContainer(BaseModel):
    """
    The IPv4 adjacency SID associated with the interface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    assignment: Annotated[
        Optional[EnumerationEnum146], Field(alias='srl_nokia-isis:assignment')
    ] = None
    """
    The method that should be used to allocate an adjacency SID or multiple adjacency SIDs for this interface.

    This overrides the top level configuration to assign dynamic adjacency SIDs to all interfaces.
    """
    static: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:static', ge=16, le=1048575)
    ] = None
    """
    Configure a static adjacency SID represented by an MPLS label value.
    """
    programmed_sids: Annotated[
        Optional[List[ProgrammedSidsListEntry]],
        Field(alias='srl_nokia-isis:programmed-sids'),
    ] = None


class Ipv4NextHopsContainer(BaseModel):
    """
    Options related to the resolution of BGP next-hops that are IPv4 addresses
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_resolution: Annotated[
        Optional[RouteResolutionContainer],
        Field(alias='srl_nokia-bgp:route-resolution'),
    ] = None
    tunnel_resolution: Annotated[
        Optional[TunnelResolutionContainer],
        Field(alias='srl_nokia-bgp:tunnel-resolution'),
    ] = None


class Ipv4NextHopsContainer3(BaseModel):
    """
    Options related to the resolution of BGP next-hops that are IPv4 addresses
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_resolution: Annotated[
        Optional[RouteResolutionContainer3],
        Field(alias='srl_nokia-bgp:route-resolution'),
    ] = None
    tunnel_resolution: Annotated[
        Optional[TunnelResolutionContainer5],
        Field(alias='srl_nokia-bgp:tunnel-resolution'),
    ] = None


class Ipv4NextHopsContainer5(BaseModel):
    """
    Options related to the resolution of BGP next-hops that are IPv4 addresses
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_resolution: Annotated[
        Optional[RouteResolutionContainer5],
        Field(alias='srl_nokia-bgp:route-resolution'),
    ] = None
    tunnel_resolution: Annotated[
        Optional[TunnelResolutionContainer9],
        Field(alias='srl_nokia-bgp:tunnel-resolution'),
    ] = None


class Ipv4NextHopsContainer6(BaseModel):
    """
    Options related to the resolution of BGP next-hops that are IPv4 addresses
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_resolution: Annotated[
        Optional[RouteResolutionContainer7],
        Field(alias='srl_nokia-bgp:route-resolution'),
    ] = None
    tunnel_resolution: Annotated[
        Optional[TunnelResolutionContainer11],
        Field(alias='srl_nokia-bgp:tunnel-resolution'),
    ] = None


class Ipv4UnicastContainer(BaseModel):
    """
    Options related to the IPv4-unicast address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:advertise-ipv6-next-hops')
    ] = False
    """
    Enables advertisement of IPv4 routes with IPv6 next-hops
    """
    receive_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:receive-ipv6-next-hops')
    ] = False
    """
    Enables the advertisement of the RFC 8950 capability to receive IPv4 routes with IPv6 next-hops

    When set to true, BGP advertises an extended NH encoding (RFC 8950) capability to its peers. This capability indicates that local router is prepared to accept BGP routes for the AFI/SAFI with IPv6 next-hops from  peers in the scope of the command. When set to false, BGP handles received AFI/SAFI routes with IPv6 next-hops as an error and applies treat-as-withdraw.
    """
    backup_paths: Annotated[
        Optional[BackupPathsContainer], Field(alias='srl_nokia-bgp:backup-paths')
    ] = None
    convergence: Annotated[
        Optional[ConvergenceContainer2], Field(alias='srl_nokia-bgp:convergence')
    ] = None
    next_hop_resolution: Annotated[
        Optional[NextHopResolutionContainer4],
        Field(alias='srl_nokia-bgp:next-hop-resolution'),
    ] = None


class Ipv4Container(BaseModel):
    """
    IPv4 specific PIM parameters
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-pim:admin-state')
    ] = 'enable'
    """
    Administratively enable or disable PIM address family
    """
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-pim:oper-state')
    ] = None
    """
    The operational state of the PIM af instance
    """
    statistics: Annotated[
        Optional[StatisticsContainer8], Field(alias='srl_nokia-pim:statistics')
    ] = None


class Ipv4Container2(BaseModel):
    """
    IPv4 specific interface parameters
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-pim:oper-state')
    ] = None
    """
    The operational state of the PIM IPv4 interface
    """
    dr_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-pim:dr-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    IPv4 address of designated router
    """
    oper_priority: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:oper-priority', ge=0, le=4294967295)
    ] = None
    """
    The operational value of DR priority on this interface

    The value of this object specifies the value sent in PIM Hello messages and used by routers to elect the Designated Router (DR).
    This is the operational value.
    """
    statistics: Annotated[
        Optional[StatisticsContainer10], Field(alias='srl_nokia-pim:statistics')
    ] = None


class Ipv6AddressUnicastWithoutLocalType(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root: Annotated[
        str,
        Field(
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$'
        ),
    ]
    """
    A unicast IPv6 address represented as either a full address, shortened or mixed-shortened formats. Link-local addresses are not allowed.
    """


class Ipv6AdjacencySidContainer(BaseModel):
    """
    The IPv6 adjacency SID associated with the interface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    assignment: Annotated[
        Optional[EnumerationEnum147], Field(alias='srl_nokia-isis:assignment')
    ] = None
    """
    The method that should be used to allocate an adjacency SID or multiple adjacency SIDs for this interface.

    This overrides the top level configuration to assign dynamic adjacency SIDs to all interfaces.
    """
    static: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:static', ge=16, le=1048575)
    ] = None
    """
    Configure a static adjacency SID represented by an MPLS label value.
    """
    programmed_sids: Annotated[
        Optional[List[ProgrammedSidsListEntry2]],
        Field(alias='srl_nokia-isis:programmed-sids'),
    ] = None


class Ipv6NextHopsContainer(BaseModel):
    """
    Options related to the resolution of BGP next-hops that are IPv6 addresses
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_resolution: Annotated[
        Optional[RouteResolutionContainer2],
        Field(alias='srl_nokia-bgp:route-resolution'),
    ] = None
    tunnel_resolution: Annotated[
        Optional[TunnelResolutionContainer2],
        Field(alias='srl_nokia-bgp:tunnel-resolution'),
    ] = None


class Ipv6NextHopsContainer3(BaseModel):
    """
    Options related to the resolution of BGP next-hops that are IPv6 addresses
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_resolution: Annotated[
        Optional[RouteResolutionContainer4],
        Field(alias='srl_nokia-bgp:route-resolution'),
    ] = None
    tunnel_resolution: Annotated[
        Optional[TunnelResolutionContainer6],
        Field(alias='srl_nokia-bgp:tunnel-resolution'),
    ] = None


class Ipv6NextHopsContainer5(BaseModel):
    """
    Options related to the resolution of BGP next-hops that are IPv6 addresses
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_resolution: Annotated[
        Optional[RouteResolutionContainer6],
        Field(alias='srl_nokia-bgp:route-resolution'),
    ] = None
    tunnel_resolution: Annotated[
        Optional[TunnelResolutionContainer10],
        Field(alias='srl_nokia-bgp:tunnel-resolution'),
    ] = None


class Ipv6NextHopsContainer6(BaseModel):
    """
    Options related to the resolution of BGP next-hops that are IPv6 addresses
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_resolution: Annotated[
        Optional[RouteResolutionContainer8],
        Field(alias='srl_nokia-bgp:route-resolution'),
    ] = None
    tunnel_resolution: Annotated[
        Optional[TunnelResolutionContainer12],
        Field(alias='srl_nokia-bgp:tunnel-resolution'),
    ] = None


class Ipv6UnicastContainer(BaseModel):
    """
    Options related to the IPv6-unicast address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    backup_paths: Annotated[
        Optional[BackupPathsContainer3], Field(alias='srl_nokia-bgp:backup-paths')
    ] = None
    convergence: Annotated[
        Optional[ConvergenceContainer5], Field(alias='srl_nokia-bgp:convergence')
    ] = None
    next_hop_resolution: Annotated[
        Optional[NextHopResolutionContainer6],
        Field(alias='srl_nokia-bgp:next-hop-resolution'),
    ] = None


class Ipv6Container(BaseModel):
    """
    IPv6 specific PIM parameters
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-pim:admin-state')
    ] = 'enable'
    """
    Administratively enable or disable PIM address family
    """
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-pim:oper-state')
    ] = None
    """
    The operational state of the PIM af instance
    """
    statistics: Annotated[
        Optional[StatisticsContainer9], Field(alias='srl_nokia-pim:statistics')
    ] = None


class Ipv6Container2(BaseModel):
    """
    IPv6 specific interface parameters
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-pim:oper-state')
    ] = None
    """
    The operational state of the PIM IPv6 interface
    """
    dr_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-pim:dr-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    IPv6 address of Designated Router (DR)
    """
    oper_priority: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:oper-priority', ge=0, le=4294967295)
    ] = None
    """
    The operational value of Designated Router (DR) priority on this interface

    The value of this object specifies the value sent in PIM Hello messages and used by routers to elect the Designated Router (DR).
    This is the operational value.
    """
    statistics: Annotated[
        Optional[StatisticsContainer11], Field(alias='srl_nokia-pim:statistics')
    ] = None


class JoinPruneContainer(BaseModel):
    """
    Enable tracing for jp events
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:group-address'),
    ] = None
    """
    The IP multicast group address for which to trace events
    """
    source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:source-address'),
    ] = None
    """
    The source address for which to trace events
    """
    detail: Annotated[Optional[bool], Field(alias='srl_nokia-pim:detail')] = False
    """
    Enable detail tracing.
    """


class KeychainCase(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    keychain: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:keychain',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Specifies a keychain to use for the authentication of PDUs when the behavior is controlled at this level of the configuration hierarchy.
    """


class KeychainCase2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    keychain: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:keychain',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Specifies a keychain to use for the authentication of Hello PDUs on this interface.
    """


class KeychainCase3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    keychain: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:keychain',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Specifies a keychain to use for the authentication of Hello PDUs on this interface.
    """


class KeychainCase4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    keychain: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:keychain',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Specifies a keychain to use for the authentication of PDUs when the behavior is controlled at this level of the configuration hierarchy.
    """


class Level1ToLevel2Container(BaseModel):
    """
    Container with options to control the propagation of prefixes from level 1 to level 2.

    By default all L1 prefixes are propagated without summarizarion into L2.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    summary_address: Annotated[
        Optional[List[SummaryAddressListEntry]],
        Field(alias='srl_nokia-isis:summary-address'),
    ] = None


class LinkMsdContainer(BaseModel):
    """
    The maximum segment depth of the link to the neighbor. Sub-TLV = 15.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    msd_info: Annotated[
        Optional[List[MsdInfoListEntry]], Field(alias='srl_nokia-isis:msd-info')
    ] = None


class LinkMsdContainer2(BaseModel):
    """
    The maximum segment depth of the link to the neighbor. Sub-TLV = 15.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    msd_info: Annotated[
        Optional[List[MsdInfoListEntry2]], Field(alias='srl_nokia-isis:msd-info')
    ] = None


class ListeningApplicationListEntry(BaseModel):
    """
    List of applications that are listening on a particular TCP port bound to the network-instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-tcp-udp:local-address'),
    ] = None
    """
    The local IP address accepted by the application. An all-zeroes value for the ipv4-address means that any IPv4 address is accepted. An all-zeroes value for the ipv6-address means that any IPv6 address is accepted.
    """
    local_port: Annotated[
        Optional[int], Field(alias='srl_nokia-tcp-udp:local-port', ge=0, le=65535)
    ] = None
    """
    The local port number accepted by the application.
    """
    process_id: Annotated[
        Optional[int], Field(alias='srl_nokia-tcp-udp:process-id', ge=0, le=4294967295)
    ] = None
    """
    The process ID of the application that owns the socket.
    """


class ListeningApplicationListEntry2(BaseModel):
    """
    List of applications that are listening on a particular UDP port bound to the network-instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-tcp-udp:local-address'),
    ] = None
    """
    The local IP address accepted by the application. An all-zeroes value for the ipv4-address means that any IPv4 address is accepted. An all-zeroes value for the ipv6-address means that any IPv6 address is accepted.
    """
    local_port: Annotated[
        Optional[int], Field(alias='srl_nokia-tcp-udp:local-port', ge=0, le=65535)
    ] = None
    """
    The local port number accepted by the application.
    """
    process_id: Annotated[
        Optional[int], Field(alias='srl_nokia-tcp-udp:process-id', ge=0, le=4294967295)
    ] = None
    """
    The process ID of the application that owns the socket.
    """


class LocalRibContainer(BaseModel):
    """
    Container for local RIB, containing all imported routes from other protocols plus the post-import-policy version of all IPv4 routes learned from all BGP neighbors
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry3]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class LocalRibContainer2(BaseModel):
    """
    Container for local RIB, containing all imported routes from other protocols plus the post-import-policy version of all label-IPv4 routes learned from all BGP neighbors
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry7]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class LocalRibContainer3(BaseModel):
    """
    Container for local RIB

    Includes the post import-policy RIB-INs corresponding to VPN-IPv4 routes received from default net-instance BGP peers (post import-policy means after processing by the BGP import policy attached to the default net-instance peer and after processing by the vrf-import policy of importing IP VRF network instances) plus the post vrf-export policy “imported” routes from local IP-VRF network instances.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry11]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class LocalRibContainer4(BaseModel):
    """
    Container for local RIB

    Includes the post import-policy RIB-INs corresponding to VPN-IPv6 routes received from default net-instance BGP peers (post import-policy means after processing by the BGP import policy attached to the default net-instance peer and after processing by the vrf-import policy of importing IP VRF network instances) plus the post vrf-export policy “imported” routes from local IP-VRF network instances.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry15]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class LocalRibContainer5(BaseModel):
    """
    Container for local RIB, containing all imported routes from other protocols plus the post-import-policy version of all IPv4 routes learned from all BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry19]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class LocalRibContainer6(BaseModel):
    """
    Container for local RIB, containing all imported routes from other protocols plus the post-import-policy version of all label-IPv4 routes learned from all BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry23]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class LoopfreeAlternateContainer2(BaseModel):
    """
    Loopfree-alternate related context for the instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-isis:admin-state')
    ] = 'disable'
    """
    When set, loopfree-alternate protection is enabled for
    the ISIS instance. Enables ability to seek for LFA,
    doesn't guarantee LFA protection.
    """
    augment_route_table: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:augment-route-table')
    ] = False
    """
    Extend remote LFA next-hop resolution path entry to RTM
    such that tunnel can be used in SPF decisions
    """
    exclude: Annotated[
        Optional[ExcludeContainer], Field(alias='srl_nokia-isis:exclude')
    ] = None
    multi_homed_prefix: Annotated[
        Optional[MultiHomedPrefixContainer],
        Field(alias='srl_nokia-isis:multi-homed-prefix'),
    ] = None
    remote_lfa: Annotated[
        Optional[RemoteLfaContainer], Field(alias='srl_nokia-isis:remote-lfa')
    ] = None
    ti_lfa: Annotated[
        Optional[TiLfaContainer], Field(alias='srl_nokia-isis:ti-lfa')
    ] = None


class MacDuplicationContainer(BaseModel):
    """
    Configuration of the MAC duplication procedures.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-network-instance:admin-state')
    ] = 'enable'
    """
    Configurable state of the mac-duplication procedures.
    Mac-duplication detects duplicate macs that move between different subinterfaces
    or a subinterface and an evpn destination.
    """
    monitoring_window: Annotated[
        Optional[int],
        Field(alias='srl_nokia-network-instance:monitoring-window', ge=1, le=15),
    ] = 3
    """
    Monitoring window for detecting duplication on a given mac address.
    A mac is declared as duplicate if it exceeds the num-moves within the monitoring-window.
    """
    num_moves: Annotated[
        Optional[int], Field(alias='srl_nokia-network-instance:num-moves', ge=3, le=10)
    ] = 5
    """
    Number of moves a mac is allowed within the monitoring-window, before it is declared duplicate.
    """
    hold_down_time: Annotated[
        Optional[Union[EnumerationEnum267, HoldDownTimeLeaf1]],
        Field(alias='srl_nokia-network-instance:hold-down-time'),
    ] = '9'
    """
    Time to wait from the moment a mac is declared duplicate to the mac is flushed from the bridge table.
    When the duplicate mac is flushed, the monitoring process for the mac is restarted.
    """
    action: Annotated[
        Optional[EnumerationEnum268], Field(alias='srl_nokia-network-instance:action')
    ] = 'stop-learning'
    """
    Action to take on the subinterface (if action is use-net-instance-action) upon detecting at least one mac addresses as duplicate
    on the subinterface. In particular:
    - oper-down: if configured, upon detecting a duplicate mac on the subinterface, the subinterface
      will be brought oper-down, with oper-down-reason mac-dup-detected. The duplicate macs on the interface will be kept
      in CPM though, and shown in the duplicate-entries state. In this case, arriving frames on a different subinterface with
      the duplicate mac as source mac are dropped. Arriving frames on a different subinterface with a destination mac
      matching the duplicate mac are dropped.
    - blackhole: upon detecting a duplicate mac on the subinterface, the mac will be blackholed. Any
      frame received on this or any other subinterface with source mac matching a blackhole mac will be discarded. Any frame
      received with destination mac matching the blackhole mac will be discarded, although still processed for source mac
      learning.
    - stop-learning: upon detecting a duplicate mac on the subinterface, existing macs are kept (and refreshed) but new macs
      are no longer learned on this subinterface. The duplicate mac will stay learned on the subinterface. Frames arriving to
      a different subinterface with a source mac matching the duplicate mac will be dropped. Frames arriving to a different
      subinterface with a destination mac matching the duplicate mac will be forwarded normally.
    """
    duplicate_entries: Annotated[
        Optional[DuplicateEntriesContainer],
        Field(alias='srl_nokia-bridge-table-mac-duplication-entries:duplicate-entries'),
    ] = None


class MacIpRouteListEntry(BaseModel):
    """
    List of Mac/IP Advertisement routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    mac_length: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:mac-length', ge=0, le=48)
    ] = None
    """
    MAC address length
    """
    mac_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:mac-address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The MAC address
    """
    ip_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:ip-address'),
    ] = None
    """
    The IP host address
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    label1: Annotated[
        Optional[Label1Container], Field(alias='srl_nokia-rib-bgp:label1')
    ] = None
    label2: Annotated[
        Optional[Label2Container], Field(alias='srl_nokia-rib-bgp:label2')
    ] = None
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum337], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer14],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer15],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    imported_network_instances: Annotated[
        Optional[List[ImportedNetworkInstancesLeafList2]],
        Field(alias='srl_nokia-rib-bgp:imported-network-instances'),
    ] = []
    """
    List of network instances that imported the route
    """
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class MacIpRouteListEntry2(BaseModel):
    """
    List of Mac/IP Advertisement routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    mac_length: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:mac-length', ge=0, le=48)
    ] = None
    """
    MAC address length
    """
    mac_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:mac-address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The MAC address
    """
    ip_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:ip-address'),
    ] = None
    """
    The IP host address
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    label1: Annotated[
        Optional[Label1Container2], Field(alias='srl_nokia-rib-bgp:label1')
    ] = None
    label2: Annotated[
        Optional[Label2Container2], Field(alias='srl_nokia-rib-bgp:label2')
    ] = None
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """


class MacIpRouteListEntry3(BaseModel):
    """
    List of Mac/IP Advertisement routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    mac_length: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:mac-length', ge=0, le=48)
    ] = None
    """
    MAC address length
    """
    mac_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:mac-address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The MAC address
    """
    ip_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:ip-address'),
    ] = None
    """
    The IP host address
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    label1: Annotated[
        Optional[Label1Container3], Field(alias='srl_nokia-rib-bgp:label1')
    ] = None
    label2: Annotated[
        Optional[Label2Container3], Field(alias='srl_nokia-rib-bgp:label2')
    ] = None
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum351], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer22],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer23],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class MacIpRouteListEntry4(BaseModel):
    """
    List of Mac/IP Advertisement routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    mac_length: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:mac-length', ge=0, le=48)
    ] = None
    """
    MAC address length
    """
    mac_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:mac-address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The MAC address
    """
    ip_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:ip-address'),
    ] = None
    """
    The IP host address
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain.
    """
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    label1: Annotated[
        Optional[Label1Container4], Field(alias='srl_nokia-rib-bgp:label1')
    ] = None
    label2: Annotated[
        Optional[Label2Container4], Field(alias='srl_nokia-rib-bgp:label2')
    ] = None
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    next_hop: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:next-hop'),
    ] = None
    """
    The advertised BGP next-hop address.
    """


class MacLearningContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-network-instance:admin-state')
    ] = 'enable'
    """
    Configurable state of the learning procedures for dynamic mac addresses.
    If disabled, the existing macs in the bridge-table will be kept (and refreshed
    if new frames arrive for them) but no new mac addresses will be learned. Frames
    with unknown mac addresses are not dropped, unless discard-unknown-src-mac is
    configured.
    """
    oper_mac_learning: Annotated[
        Optional[EnumerationEnum2],
        Field(alias='srl_nokia-network-instance:oper-mac-learning'),
    ] = None
    """
    The operational state of mac-learning on this network instance.
    """
    oper_mac_learning_disabled_reason: Annotated[
        Optional[EnumerationEnum265],
        Field(alias='srl_nokia-network-instance:oper-mac-learning-disabled-reason'),
    ] = None
    """
    The reason for the mac-learning being disabled on this network instance
    """
    mac_relearn_only: Annotated[
        Optional[bool], Field(alias='srl_nokia-network-instance:mac-relearn-only')
    ] = True
    """
    The value of this leaf indicates that network-instance will not
    learn any new mac addresses, but will relearn any that are already
    programmed
    """
    aging: Annotated[
        Optional[AgingContainer], Field(alias='srl_nokia-network-instance:aging')
    ] = None
    learnt_entries: Annotated[
        Optional[LearntEntriesContainer],
        Field(alias='srl_nokia-bridge-table-mac-learning-entries:learnt-entries'),
    ] = None


class MacTableContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mac: Annotated[
        Optional[List[MacListEntry]],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:mac'
        ),
    ] = None


class MacTableContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mac: Annotated[
        Optional[List[MacListEntry2]],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:mac'
        ),
    ] = None


class MacTableContainer3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mac: Annotated[
        Optional[List[MacListEntry6]],
        Field(alias='srl_nokia-bridge-table-mac-table:mac'),
    ] = None


class MacTableContainer4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mac: Annotated[
        Optional[List[MacListEntry10]],
        Field(alias='srl_nokia-connection-point-bridge-table-mac-table:mac'),
    ] = None


class MaintenancePoliciesContainer(BaseModel):
    """
    Container with maintenance policies
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    policy: Annotated[
        Optional[List[PolicyListEntry3]],
        Field(alias='srl_nokia-maintenance-policies:policy'),
    ] = None


class MatchContainer(BaseModel):
    """
    Container for the conditions that determine whether a packet matches this entry
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4: Annotated[
        Optional[Ipv4Container9], Field(alias='srl_nokia-policy-forwarding:ipv4')
    ] = None
    transport: Annotated[
        Optional[TransportContainer5],
        Field(alias='srl_nokia-policy-forwarding:transport'),
    ] = None
    ipv6: Annotated[
        Optional[Ipv6Container9], Field(alias='srl_nokia-policy-forwarding:ipv6')
    ] = None


class MembershipGroupsContainer2(BaseModel):
    """
    List of MLD Membership information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry7]], Field(alias='srl_nokia-mld:group')
    ] = None


class MembershipGroupsContainer3(BaseModel):
    """
    List of IGMP Membership information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry11]], Field(alias='srl_nokia-igmp-snooping:group')
    ] = None


class MembershipGroupsContainer4(BaseModel):
    """
    List of IGMP Membership information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry12]], Field(alias='srl_nokia-igmp-snooping:group')
    ] = None


class MembershipGroupsContainer5(BaseModel):
    """
    List of MLD Membership information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry16]], Field(alias='srl_nokia-mld-snooping:group')
    ] = None


class MembershipGroupsContainer6(BaseModel):
    """
    List of MLD Membership information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry17]], Field(alias='srl_nokia-mld-snooping:group')
    ] = None


class MembershipGroupsContainer8(BaseModel):
    """
    List of IGMP Membership information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry19]], Field(alias='srl_nokia-igmp:group')
    ] = None


class MldpContainer2(BaseModel):
    """
    Multipoint LDP inclusive provider tunnel identifier
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-mvpn-l3:root-address'),
    ] = None
    """
    Root address identifier for this inclusive pmsi
    """
    lsp_id: Annotated[
        Optional[int], Field(alias='srl_nokia-mvpn-l3:lsp-id', ge=0, le=4294967295)
    ] = None
    """
    lsp-id to identify the p2mp ldp inclusive pmsi
    """


class MldpContainer4(BaseModel):
    """
    Multipoint LDP inclusive provider tunnel identifier
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-mvpn-l3:root-address'),
    ] = None
    """
    Root address identifier for this selective pmsi
    """
    lsp_id: Annotated[
        Optional[int], Field(alias='srl_nokia-mvpn-l3:lsp-id', ge=0, le=4294967295)
    ] = None
    """
    lsp-id to identify the p2mp ldp selective pmsi
    """
    vpn_cscg_count: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mvpn-l3:vpn-cscg-count', ge=0, le=4294967295),
    ] = None
    """
    The number of (C-S,C-G)'s mapped to this PMSI
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mvpn-l3:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time elapsed since this PMSI entry was created
    """


class MplsContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    destination: Annotated[
        Optional[List[DestinationListEntry]],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-vpws-destinations-remote-ac:destination'
        ),
    ] = None
    es_destination: Annotated[
        Optional[List[EsDestinationListEntry]],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-vpws-destinations-remote-ac:es-destination'
        ),
    ] = None


class MplsContainer3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ingress_mpls_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp-ipvpn:ingress-mpls-label', ge=16, le=1048575),
    ] = None
    """
    The ingress label allocated for Routed traffic

    The ingress mpls label is advertised by the vpn
    route and it is expected on received routed packets.
    """
    next_hop_resolution: Annotated[
        Optional[NextHopResolutionContainer2],
        Field(alias='srl_nokia-bgp-ipvpn:next-hop-resolution'),
    ] = None


class MplsContainer4(BaseModel):
    """
    Context used to configure SR-MPLS options
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    dynamic_adjacency_sids: Annotated[
        Optional[DynamicAdjacencySidsContainer],
        Field(alias='srl_nokia-isis:dynamic-adjacency-sids'),
    ] = None
    entropy_label: Annotated[
        Optional[EntropyLabelContainer3], Field(alias='srl_nokia-isis:entropy-label')
    ] = None
    maximum_sid_depth: Annotated[
        Optional[MaximumSidDepthContainer],
        Field(alias='srl_nokia-isis:maximum-sid-depth'),
    ] = None
    static_label_block: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:static-label-block',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Reference to a static label block to use an SRLB.

    Configuration of this label block is mandatory in order to assign static adjacency SID labels.

    This label block is advertised as an SRLB in the router capabilities TLV.
    """
    static_label_block_status: Annotated[
        Optional[EnumerationEnum141],
        Field(alias='srl_nokia-isis:static-label-block-status'),
    ] = None
    """
    Status of the label block.

    The label block may show as unavailable if there is pending cleanup.
    """
    adjacency_sid_hold_time: Annotated[
        Optional[Union[EnumerationEnum142, AdjacencySidHoldTimeLeaf1]],
        Field(alias='srl_nokia-isis:adjacency-sid-hold-time'),
    ] = '15'
    """
    Timer to maintain the operational state of the adjacency SID following a failure of the adjacency.
    """
    sid_database: Annotated[
        Optional[SidDatabaseContainer], Field(alias='srl_nokia-isis:sid-database')
    ] = None


class MplsContainer5(BaseModel):
    """
    SR-MPLS interface options
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_node_sid: Annotated[
        Optional[Ipv4NodeSidContainer], Field(alias='srl_nokia-isis:ipv4-node-sid')
    ] = None
    ipv6_node_sid: Annotated[
        Optional[Ipv6NodeSidContainer], Field(alias='srl_nokia-isis:ipv6-node-sid')
    ] = None
    ipv4_adjacency_sid: Annotated[
        Optional[Ipv4AdjacencySidContainer],
        Field(alias='srl_nokia-isis:ipv4-adjacency-sid'),
    ] = None
    ipv6_adjacency_sid: Annotated[
        Optional[Ipv6AdjacencySidContainer],
        Field(alias='srl_nokia-isis:ipv6-adjacency-sid'),
    ] = None


class MplsContainer8(BaseModel):
    """
    Adding this container activates datapath support for SR-MPLS
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    global_block: Annotated[
        Optional[GlobalBlockContainer],
        Field(alias='srl_nokia-segment-routing:global-block'),
    ] = None
    local_prefix_sid: Annotated[
        Optional[List[LocalPrefixSidListEntry]],
        Field(alias='srl_nokia-segment-routing:local-prefix-sid'),
    ] = None
    sid_database: Annotated[
        Optional[SidDatabaseContainer2],
        Field(alias='srl_nokia-segment-routing:sid-database'),
    ] = None


class MplsContainer9(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    icmp_tunneling: Annotated[
        Optional[bool], Field(alias='srl_nokia-mpls:icmp-tunneling')
    ] = None
    """
    When enabled, ICMP messages generated by the router acting in the role of a transit LSR are injected in the forward direction of the LSP, to be turned around and sent back to the sender of the IP payload by the egress LER.

    If a transit LSR receives an MPLS packet that cannot be forwarded (e.g. label TTL has expired, or the egress subinterface MPLS MTU was exceeded) and the MPLS packet has an IP payload, the router will generate an appropriate ICMP error message. When icmp-tunneling is 'false' the ICMP error message is dropped if there is no IP route back to the source in the network-instance that received the MPLS packet.
    """
    static_label_block: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mpls:static-label-block',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The name of the static label block
    """
    static_label_block_status: Annotated[
        Optional[EnumerationEnum321],
        Field(alias='srl_nokia-mpls:static-label-block-status'),
    ] = None
    """
    Status of the label block.

    The label block may show as unavailable if there is pending cleanup.
    """
    ndk_label_block: Annotated[
        Optional[List[NdkLabelBlockListEntry]],
        Field(alias='srl_nokia-mpls:ndk-label-block'),
    ] = None
    static_entry: Annotated[
        Optional[List[StaticEntryListEntry]], Field(alias='srl_nokia-mpls:static-entry')
    ] = None


class MultiTopologyContainer(BaseModel):
    """
    This container defines the topology supported.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    topologies: Annotated[
        Optional[TopologiesContainer], Field(alias='srl_nokia-isis:topologies')
    ] = None


class MulticastDestinationsContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    multicast_limit: Annotated[
        Optional[MulticastLimitContainer],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations:multicast-limit'
        ),
    ] = None
    destination: Annotated[
        Optional[List[DestinationListEntry3]],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations:destination'
        ),
    ] = None


class MulticastLeaveSynchRouteListEntry(BaseModel):
    """
    List of Multicast Leave Synch routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI

    The Ethernet Tag ID identifies a broadcast domain.
    """
    multicast_source_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-source-length', ge=0, le=128),
    ] = None
    """
    The multicast source address length
    """
    multicast_source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-source-address'),
    ] = None
    """
    The multicast source IP address
    """
    multicast_group_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-group-length', ge=0, le=128),
    ] = None
    """
    The multicast group address length
    """
    multicast_group_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-group-address'),
    ] = None
    """
    The multicast group IP address
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    maximum_response_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:maximum-response-time', ge=0, le=255),
    ] = None
    """
    The value to be used while sending a query
    """
    flags: Annotated[
        Optional[FlagsContainer8], Field(alias='srl_nokia-rib-bgp:flags')
    ] = None
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum346], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer20],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer21],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    imported_network_instances: Annotated[
        Optional[List[ImportedNetworkInstancesLeafList7]],
        Field(alias='srl_nokia-rib-bgp:imported-network-instances'),
    ] = []
    """
    List of network instances that imported the route
    """
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class MulticastLeaveSynchRouteListEntry2(BaseModel):
    """
    List of Multicast Leave Synch routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI

    The Ethernet Tag ID identifies a broadcast domain.
    """
    multicast_source_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-source-length', ge=0, le=128),
    ] = None
    """
    The multicast source address length
    """
    multicast_source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-source-address'),
    ] = None
    """
    The multicast source IP address
    """
    multicast_group_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-group-length', ge=0, le=128),
    ] = None
    """
    The multicast group address length
    """
    multicast_group_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-group-address'),
    ] = None
    """
    The multicast group IP address
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    maximum_response_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:maximum-response-time', ge=0, le=255),
    ] = None
    """
    The value to be used while sending a query
    """
    flags: Annotated[
        Optional[FlagsContainer11], Field(alias='srl_nokia-rib-bgp:flags')
    ] = None
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """


class MulticastLeaveSynchRouteListEntry3(BaseModel):
    """
    List of Multicast Leave Synch routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI

    The Ethernet Tag ID identifies a broadcast domain.
    """
    multicast_source_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-source-length', ge=0, le=128),
    ] = None
    """
    The multicast source address length
    """
    multicast_source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-source-address'),
    ] = None
    """
    The multicast source IP address
    """
    multicast_group_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-group-length', ge=0, le=128),
    ] = None
    """
    The multicast group address length
    """
    multicast_group_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-group-address'),
    ] = None
    """
    The multicast group IP address
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    maximum_response_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:maximum-response-time', ge=0, le=255),
    ] = None
    """
    The value to be used while sending a query
    """
    flags: Annotated[
        Optional[FlagsContainer14], Field(alias='srl_nokia-rib-bgp:flags')
    ] = None
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum360], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer28],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer29],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class MulticastLeaveSynchRouteListEntry4(BaseModel):
    """
    List of Multicast Leave Synch routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI

    The Ethernet Tag ID identifies a broadcast domain.
    """
    multicast_source_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-source-length', ge=0, le=128),
    ] = None
    """
    The multicast source address length
    """
    multicast_source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-source-address'),
    ] = None
    """
    The multicast source IP address
    """
    multicast_group_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-group-length', ge=0, le=128),
    ] = None
    """
    The multicast group address length
    """
    multicast_group_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-group-address'),
    ] = None
    """
    The multicast group IP address
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    maximum_response_time: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:maximum-response-time', ge=0, le=255),
    ] = None
    """
    The value to be used while sending a query
    """
    flags: Annotated[
        Optional[FlagsContainer17], Field(alias='srl_nokia-rib-bgp:flags')
    ] = None
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    next_hop: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:next-hop'),
    ] = None
    """
    The advertised BGP next-hop address.
    """


class MulticastMembershipReportSynchRouteListEntry(BaseModel):
    """
    List of Multicast Membership Report Synch routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI

    The Ethernet Tag ID identifies a broadcast domain.
    """
    multicast_source_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-source-length', ge=0, le=128),
    ] = None
    """
    The multicast source address length
    """
    multicast_source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-source-address'),
    ] = None
    """
    The multicast source IP address
    """
    multicast_group_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-group-length', ge=0, le=128),
    ] = None
    """
    The multicast group address length
    """
    multicast_group_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-group-address'),
    ] = None
    """
    The multicast group IP address
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    flags: Annotated[
        Optional[FlagsContainer7], Field(alias='srl_nokia-rib-bgp:flags')
    ] = None
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum344], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer19],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer20],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    imported_network_instances: Annotated[
        Optional[List[ImportedNetworkInstancesLeafList6]],
        Field(alias='srl_nokia-rib-bgp:imported-network-instances'),
    ] = []
    """
    List of network instances that imported the route
    """
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class MulticastMembershipReportSynchRouteListEntry2(BaseModel):
    """
    List of Multicast Membership Report Synch routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI

    The Ethernet Tag ID identifies a broadcast domain.
    """
    multicast_source_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-source-length', ge=0, le=128),
    ] = None
    """
    The multicast source address length
    """
    multicast_source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-source-address'),
    ] = None
    """
    The multicast source IP address
    """
    multicast_group_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-group-length', ge=0, le=128),
    ] = None
    """
    The multicast group address length
    """
    multicast_group_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-group-address'),
    ] = None
    """
    The multicast group IP address
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    flags: Annotated[
        Optional[FlagsContainer10], Field(alias='srl_nokia-rib-bgp:flags')
    ] = None
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """


class MulticastMembershipReportSynchRouteListEntry3(BaseModel):
    """
    List of Multicast Membership Report Synch routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI

    The Ethernet Tag ID identifies a broadcast domain.
    """
    multicast_source_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-source-length', ge=0, le=128),
    ] = None
    """
    The multicast source address length
    """
    multicast_source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-source-address'),
    ] = None
    """
    The multicast source IP address
    """
    multicast_group_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-group-length', ge=0, le=128),
    ] = None
    """
    The multicast group address length
    """
    multicast_group_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-group-address'),
    ] = None
    """
    The multicast group IP address
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    flags: Annotated[
        Optional[FlagsContainer13], Field(alias='srl_nokia-rib-bgp:flags')
    ] = None
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    last_modified: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:last-modified',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.
    """
    used_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:used-route')
    ] = None
    """
    Indicates true if the route is being used for forwarding.
    """
    valid_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:valid-route')
    ] = None
    """
    Indicates true if the route is valid.
    """
    best_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:best-route')
    ] = None
    """
    Set to true if the route is the BGP best path for the prefix.
    """
    backup_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:backup-route')
    ] = None
    """
    Set to true if the route is being used as backup path for the prefix.
    """
    stale_route: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:stale-route')
    ] = None
    """
    Set to true if the route is stale due to BGP graceful restart.
    """
    pending_delete: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:pending-delete')
    ] = None
    """
    Set to true if the route is marked for deletion.
    """
    neighbor_as: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:neighbor-as', ge=1, le=4294967295)
    ] = None
    """
    The last external AS to advertise the route into the local AS
    """
    group_best: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:group-best')
    ] = None
    """
    Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS
    """
    tie_break_reason: Annotated[
        Optional[EnumerationEnum358], Field(alias='srl_nokia-rib-bgp:tie-break-reason')
    ] = None
    """
    Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.
    """
    invalid_reason: Annotated[
        Optional[InvalidReasonContainer27],
        Field(alias='srl_nokia-rib-bgp:invalid-reason'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer28],
        Field(alias='srl_nokia-rib-bgp:route-flap-damping'),
    ] = None
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-rib-bgp:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """


class MulticastMembershipReportSynchRouteListEntry4(BaseModel):
    """
    List of Multicast Membership Report Synch routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_distinguisher: Annotated[
        Optional[
            Union[
                RouteDistinguisherType0Type,
                RouteDistinguisherType1Type,
                RouteDistinguisherType2Type,
                RouteDistinguisherType2bType,
            ]
        ],
        Field(alias='srl_nokia-rib-bgp:route-distinguisher'),
    ] = None
    """
    The route distinguisher encoded in the NLRI
    """
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-rib-bgp:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The Ethernet Segment Identifier
    """
    ethernet_tag_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:ethernet-tag-id', ge=0, le=4294967295),
    ] = None
    """
    The 32-bit Ethernet Tag ID encoded in the NLRI

    The Ethernet Tag ID identifies a broadcast domain.
    """
    multicast_source_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-source-length', ge=0, le=128),
    ] = None
    """
    The multicast source address length
    """
    multicast_source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-source-address'),
    ] = None
    """
    The multicast source IP address
    """
    multicast_group_length: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:multicast-group-length', ge=0, le=128),
    ] = None
    """
    The multicast group address length
    """
    multicast_group_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:multicast-group-address'),
    ] = None
    """
    The multicast group IP address
    """
    originating_router: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originating-router'),
    ] = None
    """
    The IPv4 or IPv6 address of the originating router
    """
    flags: Annotated[
        Optional[FlagsContainer16], Field(alias='srl_nokia-rib-bgp:flags')
    ] = None
    neighbor: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:neighbor'),
    ] = None
    """
    If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor
    """
    path_id: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:path-id', ge=0, le=4294967295)
    ] = None
    """
    Path identifier of the BGP route
    """
    attr_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:attr-id', ge=0, le=18446744073709551615),
    ] = None
    """
    Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index
    """
    next_hop: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:next-hop'),
    ] = None
    """
    The advertised BGP next-hop address.
    """


class MulticastRouteListEntry(BaseModel):
    """
    List of all the MFIB entries in the instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-multicast-mfib-tables:source'),
    ] = None
    """
    Source IP address of the MFIB entry
    """
    group: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-multicast-mfib-tables:group'),
    ] = None
    """
    Multicast group address of the MFIB entry
    """
    last_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-multicast-mfib-tables:last-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Last update of this MFIB entry
    """
    outgoing_interface: Annotated[
        Optional[List[OutgoingInterfaceListEntry2]],
        Field(alias='srl_nokia-multicast-mfib-tables:outgoing-interface'),
    ] = None
    outgoing_next_hop_group: Annotated[
        Optional[List[OutgoingNextHopGroupListEntry]],
        Field(alias='srl_nokia-multicast-mfib-tables:outgoing-next-hop-group'),
    ] = None


class MultipathContainer(BaseModel):
    """
    Options related to BGP multipath
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    allow_multiple_as: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:allow-multiple-as')
    ] = True
    """
    When set to true, BGP is allowed to build a multipath set using BGP routes with different neighbor AS (most recent AS in the AS_PATH)

    When set to false, BGP is only allowed to use non-best paths for ECMP if they meet the multipath criteria and they have the same neighbor AS as the best path
    """
    maximum_paths: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:maximum-paths', ge=1, le=256)
    ] = 1
    """
    The maximum number of BGP ECMP next-hops for BGP routes with an NLRI belonging to the address family of this configuration context
    """
    ebgp: Annotated[Optional[EbgpContainer], Field(alias='srl_nokia-bgp:ebgp')] = None
    ibgp: Annotated[Optional[IbgpContainer], Field(alias='srl_nokia-bgp:ibgp')] = None


class MultipathContainer2(BaseModel):
    """
    Options related to BGP multipath
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ebgp: Annotated[Optional[EbgpContainer2], Field(alias='srl_nokia-bgp:ebgp')] = None
    ibgp: Annotated[Optional[IbgpContainer2], Field(alias='srl_nokia-bgp:ibgp')] = None


class NameCase(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[Optional[str], Field(alias='srl_nokia-mld:name')] = None
    """
    Trace for interface with this name
    """


class NameCase2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[Optional[str], Field(alias='srl_nokia-mld:name')] = None
    """
    Trace for interface with this name
    """


class NameCase3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[Optional[str], Field(alias='srl_nokia-igmp:name')] = None
    """
    Trace for interface with this name
    """


class NameCase4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[Optional[str], Field(alias='srl_nokia-igmp:name')] = None
    """
    Trace for interface with this name
    """


class NeighborListEntry(BaseModel):
    """
    Create a configured BGP session
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    peer_address: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-bgp:peer-address'),
    ] = None
    """
    The transport address of the BGP peer

    The peer-address must be a valid IPv4 unicast address, IPv6 global unicast address or IPv6 link-local address. An IPv6 link-local address requires the interface scope to be identified, using a format such as fe80::1234%ethernet-1/1.1
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = 'enable'
    """
    Administratively enable or disable the peer

    Disable will tear down the BGP session (return it to IDLE state).
    """
    description: Annotated[
        Optional[str],
        Field(alias='srl_nokia-bgp:description', max_length=255, min_length=1),
    ] = None
    """
    A user provided description string for the peer
    """
    under_maintenance: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:under-maintenance')
    ] = None
    """
    State field to determine if this bgp neighbor is in maintenance mode.
    """
    maintenance_group: Annotated[
        Optional[str], Field(alias='srl_nokia-bgp:maintenance-group')
    ] = None
    """
    State field to display the maintenance group to which this neighbor belongs to.
    """
    peer_type: Annotated[
        Optional[EnumerationEnum50], Field(alias='srl_nokia-bgp:peer-type')
    ] = None
    """
    The session type. The type is EBGP when the local AS and peer AS are different, and the type is IBGP when the local AS and peer AS have the same value.
    """
    export_policy: Annotated[
        Optional[List[ExportPolicyLeafList5]],
        Field(alias='srl_nokia-bgp:export-policy'),
    ] = []
    """
    Apply an export policy to advertised BGP routes
    """
    import_policy: Annotated[
        Optional[List[ImportPolicyLeafList5]],
        Field(alias='srl_nokia-bgp:import-policy'),
    ] = []
    """
    Apply an import policy to received BGP routes
    """
    local_preference: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:local-preference', ge=0, le=4294967295),
    ] = None
    """
    The value of the local-preference attribute that is added to received routes from the peer, if it is EBGP

    It is also used to encode the local preference attribute for locally generated BGP routes.
    """
    next_hop_self: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:next-hop-self')
    ] = None
    """
    When set to true, the next-hop in all IPv4-unicast, IPv6-unicast and EVPN BGP routes advertised to the peer, if IBGP, is set equal to the local-address used on this session (or to the router ID if the NLRI is IPv6 and there is no IPv6 local address to use). This is independent of the route origin (EBGP, IBGP-client, IBGP-non-client or redistributed direct/static/aggregate route).

    When set to false, normal BGP rules from RFC 4271 apply.
    """
    peer_as: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:peer-as', ge=1, le=4294967295)
    ] = None
    """
    The autonomous system number expected from the peer

    A configured session with a peer does not come up if this value does not match the AS value reported by the peer in its OPEN message.
    """
    peer_group: Annotated[
        str,
        Field(
            alias='srl_nokia-bgp:peer-group',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ]
    """
    A reference to the peer-group template to use for this BGP session

    This is not immutable.
    """
    last_prefix_limit_exceeded: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp:last-prefix-limit-exceeded',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time when the neighbor last violated a configured prefix-limit for any AFI/SAFI

    This value is set/updated when any AFI/SAFI prefix-limit-exceeded leaf transitions from false/unset to true.
    """
    as_path_options: Annotated[
        Optional[AsPathOptionsContainer3], Field(alias='srl_nokia-bgp:as-path-options')
    ] = None
    authentication: Annotated[
        Optional[AuthenticationContainer3], Field(alias='srl_nokia-bgp:authentication')
    ] = None
    failure_detection: Annotated[
        Optional[FailureDetectionContainer3],
        Field(alias='srl_nokia-bgp:failure-detection'),
    ] = None
    graceful_restart: Annotated[
        Optional[GracefulRestartContainer3],
        Field(alias='srl_nokia-bgp:graceful-restart'),
    ] = None
    multihop: Annotated[
        Optional[MultihopContainer2], Field(alias='srl_nokia-bgp:multihop')
    ] = None
    optional_attributes: Annotated[
        Optional[OptionalAttributesContainer2],
        Field(alias='srl_nokia-bgp:optional-attributes'),
    ] = None
    afi_safi: Annotated[
        Optional[List[AfiSafiListEntry4]], Field(alias='srl_nokia-bgp:afi-safi')
    ] = None
    local_as: Annotated[
        Optional[LocalAsContainer2], Field(alias='srl_nokia-bgp:local-as')
    ] = None
    route_flap_damping: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:route-flap-damping')
    ] = None
    """
    Enable/disable route flap damping procedures for routes received from this peer if it is an EBGP peer

    If no value is configured, the setting is inherited from the peer-group to which the peer belongs.

    The configured or omherited setting has no effect if the peer is IBGP.
    """
    route_reflector: Annotated[
        Optional[RouteReflectorContainer3], Field(alias='srl_nokia-bgp:route-reflector')
    ] = None
    send_community_type: Annotated[
        Optional[List[EnumerationEnum41]],
        Field(alias='srl_nokia-bgp:send-community-type'),
    ] = []
    """
    Specify the types of community that should be sent to the peer.

    If value none is included in the leaf-list, then other values are ignored
    """
    send_default_route: Annotated[
        Optional[SendDefaultRouteContainer2],
        Field(alias='srl_nokia-bgp:send-default-route'),
    ] = None
    timers: Annotated[
        Optional[TimersContainer2], Field(alias='srl_nokia-bgp:timers')
    ] = None
    trace_options: Annotated[
        Optional[TraceOptionsContainer3], Field(alias='srl_nokia-bgp:trace-options')
    ] = None
    transport: Annotated[
        Optional[TransportContainer3], Field(alias='srl_nokia-bgp:transport')
    ] = None
    peer_router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp:peer-router-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The BGP identifier advertised by the peer in its OPEN message
    """
    session_state: Annotated[
        Optional[EnumerationEnum58], Field(alias='srl_nokia-bgp:session-state')
    ] = None
    """
    Current state of the session
    """
    last_state: Annotated[
        Optional[EnumerationEnum59], Field(alias='srl_nokia-bgp:last-state')
    ] = None
    """
    Previous state of the session
    """
    last_event: Annotated[
        Optional[EnumerationEnum60], Field(alias='srl_nokia-bgp:last-event')
    ] = None
    last_established: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp:last-established',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The time when the session last transitioned into or out of the established state

    Uptime or downtime of the session can be calculated from this state.
    """
    established_transitions: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp:established-transitions', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    The total number of times the BGP FSM transitioned into the established state for this peer
    """
    advertised_capabilities: Annotated[
        Optional[List[EnumerationEnum61]],
        Field(alias='srl_nokia-bgp:advertised-capabilities'),
    ] = []
    """
    List of BGP capabilities advertised by the local routing device to the peer
    """
    received_capabilities: Annotated[
        Optional[List[EnumerationEnum62]],
        Field(alias='srl_nokia-bgp:received-capabilities'),
    ] = []
    """
    List of BGP capabilities received by the local routing device from the peer
    """
    received_afi_safi: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-bgp:received-afi-safi')
    ] = []
    """
    List of multiprotocol BGP address families supported by the peer, derived from the AFI/SAFI list in the MP-BGP capability received by the local routing device from the peer
    """
    received_end_of_rib: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-bgp:received-end-of-rib')
    ] = []
    """
    List of address families for which the peer has signaled the End of RIB marker
    """
    sent_end_of_rib: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-bgp:sent-end-of-rib')
    ] = []
    """
    List of address families for which this router sent the peer an End of RIB marker
    """
    slow_peer: Annotated[
        Optional[EnumerationEnum63], Field(alias='srl_nokia-bgp:slow-peer')
    ] = None
    """
    Set to 'yes' if, after the last BGP restart, the session was in a lesser state than established when the min-wait-to-advertise timer expired

    Set to unknown if the min-wait-to-advertise time has not yet elapsed.
    """
    dynamic_neighbor: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:dynamic-neighbor')
    ] = None
    """
    Indicates true if the neighbor is a dynamic peer that resulted from an accepted incoming TCP connection or an outgoing TCP connection triggered by LLDP auto-discovery
    """
    discovered_by_lldp: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:discovered-by-lldp')
    ] = None
    """
    Set to true if the peer IP address is known through LLDP (irrespective of whether the final TCP connection was originated by this router or not)
    """
    sent_messages: Annotated[
        Optional[SentMessagesContainer], Field(alias='srl_nokia-bgp:sent-messages')
    ] = None
    received_messages: Annotated[
        Optional[ReceivedMessagesContainer],
        Field(alias='srl_nokia-bgp:received-messages'),
    ] = None


class NeighborListEntry4(BaseModel):
    """
    IS reachability neighbor attributes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    System-ID of IS neighbor.
    """
    default_metric: Annotated[
        Optional[DefaultMetricContainer], Field(alias='srl_nokia-isis:default-metric')
    ] = None
    delay_metric: Annotated[
        Optional[DelayMetricContainer], Field(alias='srl_nokia-isis:delay-metric')
    ] = None
    expense_metric: Annotated[
        Optional[ExpenseMetricContainer], Field(alias='srl_nokia-isis:expense-metric')
    ] = None
    error_metric: Annotated[
        Optional[ErrorMetricContainer], Field(alias='srl_nokia-isis:error-metric')
    ] = None


class NeighborListEntry5(BaseModel):
    """
    This list describes ISIS extended neighbors and reachability attributes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    System-id of the neighbor.
    """
    instances: Annotated[
        Optional[InstancesContainer], Field(alias='srl_nokia-isis:instances')
    ] = None


class NeighborListEntry6(BaseModel):
    """
    This list describes ISIS extended neighbors and reachability attributes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    System-id of the neighbor.
    """
    instances: Annotated[
        Optional[InstancesContainer2], Field(alias='srl_nokia-isis:instances')
    ] = None


class NeighborListEntry7(BaseModel):
    """
    This container describes IS neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mt_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:mt-id', ge=0, le=4095)
    ] = None
    """
    Identifier of a topology being announced.
    """
    system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    System-id of the IS neighbor.
    """
    instances: Annotated[
        Optional[InstancesContainer3], Field(alias='srl_nokia-isis:instances')
    ] = None


class NeighborListEntry8(BaseModel):
    """
    This container describes IS neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mt_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:mt-id', ge=0, le=4095)
    ] = None
    """
    Identifier of a topology being announced.
    """
    system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    System-id of the IS neighbor.
    """
    instances: Annotated[
        Optional[InstancesContainer4], Field(alias='srl_nokia-isis:instances')
    ] = None


class NeighborsContainer2(BaseModel):
    """
    This container describes IS neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[List[NeighborListEntry4]], Field(alias='srl_nokia-isis:neighbor')
    ] = None


class NeighborsContainer3(BaseModel):
    """
    This container describes IS neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[List[NeighborListEntry5]], Field(alias='srl_nokia-isis:neighbor')
    ] = None


class NeighborsContainer4(BaseModel):
    """
    This container describes IS neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[List[NeighborListEntry6]], Field(alias='srl_nokia-isis:neighbor')
    ] = None


class NeighborsContainer5(BaseModel):
    """
    MT-IS neigbor attributes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[List[NeighborListEntry7]], Field(alias='srl_nokia-isis:neighbor')
    ] = None


class NeighborsContainer6(BaseModel):
    """
    MT-IS neigbor attributes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[List[NeighborListEntry8]], Field(alias='srl_nokia-isis:neighbor')
    ] = None


class NextHopGroupListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ip-route-tables:index', ge=0, le=18446744073709551615),
    ] = None
    """
    A system-wide unique identifier of a next-hop-group indirection object (system allocated).
    """
    group_name_alias: Annotated[
        Optional[str], Field(alias='srl_nokia-ip-route-tables:group-name-alias')
    ] = None
    """
    The alias name associated with this next-hop-group.
    """
    programmed_index: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ip-route-tables:programmed-index',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    The index assigned to the next-hop-group by the gRIBI client
    """
    backup_next_hop_group: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ip-route-tables:backup-next-hop-group',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    The backup next-hop-group for the current group. When all entries within the next-hop group become unusable, the backup next-hop group is used if specified.
    """
    fib_programming: Annotated[
        Optional[FibProgrammingContainer3],
        Field(alias='srl_nokia-ip-route-tables:fib-programming'),
    ] = None
    next_hop: Annotated[
        Optional[List[NextHopListEntry3]],
        Field(alias='srl_nokia-ip-route-tables:next-hop'),
    ] = None
    backup_next_hop: Annotated[
        Optional[List[BackupNextHopListEntry]],
        Field(alias='srl_nokia-ip-route-tables:backup-next-hop'),
    ] = None


class NextHopResolutionContainer3(BaseModel):
    """
    Options for controlling next-hop resolution procedures
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_next_hops: Annotated[
        Optional[Ipv4NextHopsContainer], Field(alias='srl_nokia-bgp:ipv4-next-hops')
    ] = None
    ipv6_next_hops: Annotated[
        Optional[Ipv6NextHopsContainer], Field(alias='srl_nokia-bgp:ipv6-next-hops')
    ] = None


class NextHopResolutionContainer5(BaseModel):
    """
    Options for controlling next-hop resolution procedures
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_next_hops: Annotated[
        Optional[Ipv4NextHopsContainer3], Field(alias='srl_nokia-bgp:ipv4-next-hops')
    ] = None
    ipv6_next_hops: Annotated[
        Optional[Ipv6NextHopsContainer3], Field(alias='srl_nokia-bgp:ipv6-next-hops')
    ] = None


class NextHopResolutionContainer7(BaseModel):
    """
    Options for controlling next-hop resolution procedures
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_next_hops: Annotated[
        Optional[Ipv4NextHopsContainer5], Field(alias='srl_nokia-bgp:ipv4-next-hops')
    ] = None
    ipv6_next_hops: Annotated[
        Optional[Ipv6NextHopsContainer5], Field(alias='srl_nokia-bgp:ipv6-next-hops')
    ] = None


class NextHopResolutionContainer8(BaseModel):
    """
    Options for controlling next-hop resolution procedures
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_next_hops: Annotated[
        Optional[Ipv4NextHopsContainer6], Field(alias='srl_nokia-bgp:ipv4-next-hops')
    ] = None
    ipv6_next_hops: Annotated[
        Optional[Ipv6NextHopsContainer6], Field(alias='srl_nokia-bgp:ipv6-next-hops')
    ] = None


class NextHopListEntry4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ip-route-tables:index', ge=0, le=18446744073709551615),
    ] = None
    """
    A system-wide unique identifier of a next-hop object (system allocated).
    """
    programmed_index: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ip-route-tables:programmed-index',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    The index assigned to the next-hop by the gRIBI client
    """
    type: Annotated[Optional[str], Field(alias='srl_nokia-ip-route-tables:type')] = None
    """
    The next-hop type used by the datapath.
    """
    network_instance: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ip-route-tables:network-instance',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$',
        ),
    ] = None
    """
    Indicates that the next-hop is another network instance. If this is specified but an IP address or interface is not provided, the meaning is that a new IP lookup should occur in the other network instance.
    """
    ip_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-ip-route-tables:ip-address'),
    ] = None
    """
    The next-hop IP address. Only populated when the next-hop type is indirect or tunnel or static-mpls.

    For a VXLAN tunnel this is the destination VTEP address.
    """
    mac_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ip-route-tables:mac-address',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$).*$',
        ),
    ] = None
    """
    The MAC address of the next-hop that has been provided directly.

    No value is populated if the next-hop IP is resolved by an ARP or IPv6 ND entry.
    """
    subinterface: Annotated[
        Optional[str], Field(alias='srl_nokia-ip-route-tables:subinterface')
    ] = None
    """
    The next-hop interface. Only populated when the next-hop type is direct.
    """
    resolving_route: Annotated[
        Optional[ResolvingRouteContainer],
        Field(alias='srl_nokia-ip-route-tables:resolving-route'),
    ] = None
    resolving_tunnel: Annotated[
        Optional[ResolvingTunnelContainer],
        Field(alias='srl_nokia-ip-route-tables:resolving-tunnel'),
    ] = None
    mpls: Annotated[
        Optional[MplsContainer6], Field(alias='srl_nokia-ip-route-tables:mpls')
    ] = None
    vxlan: Annotated[
        Optional[VxlanContainer], Field(alias='srl_nokia-ip-route-tables:vxlan')
    ] = None
    decapsulate_header: Annotated[
        Optional[EnumerationEnum296],
        Field(alias='srl_nokia-ip-route-tables:decapsulate-header'),
    ] = None
    """
    Packets matching this next-hop are decapsulated by removing the specified header.
    """
    encapsulate_header: Annotated[
        Optional[EnumerationEnum296],
        Field(alias='srl_nokia-ip-route-tables:encapsulate-header'),
    ] = None
    """
    Packets matching this next-hop are encapsulated by adding the specified header.
    """
    ip_in_ip: Annotated[
        Optional[IpInIpContainer], Field(alias='srl_nokia-ip-route-tables:ip-in-ip')
    ] = None
    counters: Annotated[
        Optional[CountersContainer], Field(alias='srl_nokia-ip-route-tables:counters')
    ] = None


class NssaExternalLsaContainer(BaseModel):
    """
    Contents of the NSSA External LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mask: Annotated[Optional[int], Field(alias='srl_nokia-ospf:mask', ge=0, le=32)] = (
        None
    )
    """
    The subnet mask for the advertised destination
    """
    metric_type: Annotated[
        Optional[EnumerationEnum238], Field(alias='srl_nokia-ospf:metric-type')
    ] = None
    """
    The type of metric included within the AS External LSA.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:metric', ge=0, le=4294967295)
    ] = None
    """
    The cost to reach the external network specified. The exact
    interpretation of this cost is dependent on the type of
    metric specified
    """
    forwarding_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:forwarding-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The destination to which traffic for the external prefix
    should be advertised. When this value is set to 0.0.0.0 then
    traffic should be forwarded to the LSA's originator
    """
    external_route_tag: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:external-route-tag', ge=0, le=4294967295),
    ] = None
    """
    An opaque tag that set by the LSA originator to carry
    information relating to the external route
    """
    propagate: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:propagate')] = None
    """
    When this bit is set to true, an NSSA border router will
    translate a Type 7 LSA (NSSA External) to a Type 5 LSA
    (AS External).
    """
    types_of_service: Annotated[
        Optional[TypesOfServiceContainer4],
        Field(alias='srl_nokia-ospf:types-of-service'),
    ] = None


class NssaContainer(BaseModel):
    """
    This command creates the context to configure the associated OSPF or OSPF3
    area as Not So Stubby Area (NSSA).

    NSSAs are similar to stub areas in that no external routes are imported into
    the area from other OSPF areas. The major difference between a stub area and
    an NSSA is an NSSA has the capability to flood external routes that it
    learns throughout its area and via an ABR to the entire OSPF or OSPF3 domain.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    redistribute_external: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:redistribute-external')
    ] = True
    """
    Enables the redistribution of external routes into the Not So Stubby Area
    (NSSA) or an NSSA area border router (ABR) that is exporting the routes
    into non-NSSA areas
    """
    summaries: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:summaries')] = True
    """
    Enables sending summary (type 3) advertisements into a stub area or Not
    So Stubby Area (NSSA) on an Area Border Router (ABR)
    """
    area_range: Annotated[
        Optional[List[AreaRangeListEntry]], Field(alias='srl_nokia-ospf:area-range')
    ] = None
    originate_default_route: Annotated[
        Optional[OriginateDefaultRouteContainer],
        Field(alias='srl_nokia-ospf:originate-default-route'),
    ] = None


class Ospfv3ExternalLsaContainer(BaseModel):
    """
    AS-External and NSSA LSA.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:metric', ge=0, le=4294967295)
    ] = None
    """
    Metric
    """
    flags: Annotated[
        Optional[str], Field(alias='srl_nokia-ospf:flags', pattern='^(E|F|T|\\s)*$')
    ] = None
    """
    Flags.
    """
    referenced_ls_type: Annotated[
        Optional[str], Field(alias='srl_nokia-ospf:referenced-ls-type')
    ] = None
    """
    Referenced Link State type.
    """
    unknown_referenced_ls_type: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:unknown-referenced-ls-type', ge=0, le=65535),
    ] = None
    """
    Value for an unknown Referenced Link State type.
    """
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-ospf:prefix'),
    ] = None
    """
    LSA Prefix.
    """
    prefix_options: Annotated[
        Optional[PrefixOptionsContainer], Field(alias='srl_nokia-ospf:prefix-options')
    ] = None
    forwarding_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-ospf:forwarding-address'),
    ] = None
    """
    Forwarding address.
    """
    external_route_tag: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:external-route-tag', ge=0, le=4294967295),
    ] = None
    """
    Route tag.
    """
    referenced_link_state_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:referenced-link-state-id', ge=0, le=4294967295),
    ] = None
    """
    Referenced Link State ID.
    """


class Ospfv3ExternalLsaContainer2(BaseModel):
    """
    AS-External and NSSA LSA.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:metric', ge=0, le=4294967295)
    ] = None
    """
    Metric
    """
    flags: Annotated[
        Optional[str], Field(alias='srl_nokia-ospf:flags', pattern='^(E|F|T|\\s)*$')
    ] = None
    """
    Flags.
    """
    referenced_ls_type: Annotated[
        Optional[str], Field(alias='srl_nokia-ospf:referenced-ls-type')
    ] = None
    """
    Referenced Link State type.
    """
    unknown_referenced_ls_type: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:unknown-referenced-ls-type', ge=0, le=65535),
    ] = None
    """
    Value for an unknown Referenced Link State type.
    """
    prefix: Annotated[
        Optional[Union[Ipv4PrefixType, Ipv6PrefixType]],
        Field(alias='srl_nokia-ospf:prefix'),
    ] = None
    """
    LSA Prefix.
    """
    prefix_options: Annotated[
        Optional[PrefixOptionsContainer4], Field(alias='srl_nokia-ospf:prefix-options')
    ] = None
    forwarding_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-ospf:forwarding-address'),
    ] = None
    """
    Forwarding address.
    """
    external_route_tag: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:external-route-tag', ge=0, le=4294967295),
    ] = None
    """
    Route tag.
    """
    referenced_link_state_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:referenced-link-state-id', ge=0, le=4294967295),
    ] = None
    """
    Referenced Link State ID.
    """


class PeerListEntry7(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-seamless-bfd:address'),
    ] = None
    """
    An IPv4 or IPv6 address of the farend seamless-bfd descriminator binding
    """
    discriminator: Annotated[
        Optional[int],
        Field(alias='srl_nokia-seamless-bfd:discriminator', ge=524288, le=526335),
    ] = None
    """
    Static seamless-BFD discriminator for the farend binding
    """


class PmsiTunnelContainer(BaseModel):
    """
    A container for the Provider Multicast Service Interface Tunnel Attribute (PTA) of the attribute set.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tunnel_type: Annotated[
        Optional[EnumerationEnum367], Field(alias='srl_nokia-rib-bgp:tunnel-type')
    ] = None
    """
    The value of the tunnel-type in the PMSI Tunnel Attribute
    """
    flags: Annotated[
        Optional[FlagsContainer18], Field(alias='srl_nokia-rib-bgp:flags')
    ] = None
    label: Annotated[
        Optional[LabelContainer9], Field(alias='srl_nokia-rib-bgp:label')
    ] = None
    tunnel_endpoint: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:tunnel-endpoint'),
    ] = None
    """
    The value of the tunnel-endpoint in the PMSI Tunnel Attribute.
    """


class PrefixListEntry(BaseModel):
    """
    IPv4 prefixes and internal reachability attributes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$',
        ),
    ] = None
    """
    IPv4 prefix contained within reachability TLVs.
    """
    up_down: Annotated[Optional[bool], Field(alias='srl_nokia-isis:up-down')] = None
    """
    The up/down bit

    Set if a prefix is advertised from a higher level to a lower level (e.g., level 2 to level 1), indicating that the prefix has traveled down the hierarchy. Prefixes that have the up/down bit set may only be advertised down the hierarchy, i.e., to lower levels. When a prefix is first injected into IS-IS, the bit is UNSET.
    """
    default_metric: Annotated[
        Optional[DefaultMetricContainer2], Field(alias='srl_nokia-isis:default-metric')
    ] = None
    delay_metric: Annotated[
        Optional[DelayMetricContainer2], Field(alias='srl_nokia-isis:delay-metric')
    ] = None
    expense_metric: Annotated[
        Optional[ExpenseMetricContainer2], Field(alias='srl_nokia-isis:expense-metric')
    ] = None
    error_metric: Annotated[
        Optional[ErrorMetricContainer2], Field(alias='srl_nokia-isis:error-metric')
    ] = None


class PrefixListEntry2(BaseModel):
    """
    IPv4 external prefixes and reachability attributes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$',
        ),
    ] = None
    """
    IPv4 prefix contained within reachability TLVs.
    """
    up_down: Annotated[Optional[bool], Field(alias='srl_nokia-isis:up-down')] = None
    """
    The up/down bit

    Set if a prefix is advertised from a higher level to a lower level (e.g., level 2 to level 1), indicating that the prefix has traveled down the hierarchy. Prefixes that have the up/down bit set may only be advertised down the hierarchy, i.e., to lower levels. When a prefix is first injected into IS-IS, the bit is UNSET.
    """
    default_metric: Annotated[
        Optional[DefaultMetricContainer3], Field(alias='srl_nokia-isis:default-metric')
    ] = None
    delay_metric: Annotated[
        Optional[DelayMetricContainer3], Field(alias='srl_nokia-isis:delay-metric')
    ] = None
    expense_metric: Annotated[
        Optional[ExpenseMetricContainer3], Field(alias='srl_nokia-isis:expense-metric')
    ] = None
    error_metric: Annotated[
        Optional[ErrorMetricContainer3], Field(alias='srl_nokia-isis:error-metric')
    ] = None


class PrefixListEntry3(BaseModel):
    """
    This list describes IPv4 extended prefixes and attributes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    up_down: Annotated[Optional[bool], Field(alias='srl_nokia-isis:up-down')] = None
    """
    The up/down bit. Set if a prefix is advertised from a higher level to a lower level (e.g., level 2 to level 1), indicating that the prefix has traveled down the hierarchy. Prefixes that have the up/down bit set may only be advertised down the hierarchy, i.e., to lower levels. When a prefix is first injected into IS-IS, the bit is UNSET.
    """
    s_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:s-bit')] = None
    """
    The Sub-TLV present bit. If UNSET, the octets of Sub-TLVs are not present. Otherwise, the bit is set and the octet following the prefix will contain the length of the Sub-TLV portion of the structure.
    """
    prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$',
        ),
    ] = None
    """
    IPv4 prefix contained within extended reachability TLVs.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=0, le=16777215)
    ] = None
    """
    ISIS metric value.
    """
    subtlvs: Annotated[
        Optional[SubtlvsContainer3], Field(alias='srl_nokia-isis:subtlvs')
    ] = None
    undefined_subtlvs: Annotated[
        Optional[UndefinedSubtlvsContainer2],
        Field(alias='srl_nokia-isis:undefined-subtlvs'),
    ] = None


class PrefixListEntry4(BaseModel):
    """
    This list defines IPv6 extended prefix attributes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    up_down: Annotated[Optional[bool], Field(alias='srl_nokia-isis:up-down')] = None
    """
    The up/down bit. Set if a prefix is advertised from a higher level to a lower level (e.g., level 2 to level 1), indicating that the prefix has traveled down the hierarchy. Prefixes that have the up/down bit set may only be advertised down the hierarchy, i.e., to lower levels. When a prefix is first injected into IS-IS, the bit is UNSET.
    """
    x_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:x-bit')] = None
    """
    The external bit. Set when the prefix was distributed into IS-IS from another routing protocol.
    """
    s_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:s-bit')] = None
    """
    The sub-tlv present bit. If UNSET, the octets of Sub-TLVs are not present. Otherwise, the bit is set and the octet following the prefix will contain the length of the Sub-TLV portion of the structure.
    """
    prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:prefix',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))$).*$',
        ),
    ] = None
    """
    IPv6 prefix contained within extended reachability TLVs.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=0, le=16777215)
    ] = None
    """
    ISIS metric value.
    """
    subtlvs: Annotated[
        Optional[SubtlvsContainer4], Field(alias='srl_nokia-isis:subtlvs')
    ] = None
    undefined_subtlvs: Annotated[
        Optional[UndefinedSubtlvsContainer3],
        Field(alias='srl_nokia-isis:undefined-subtlvs'),
    ] = None


class PrefixListEntry5(BaseModel):
    """
    IPv4 prefixes that are contained within MT reachability TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    up_down: Annotated[Optional[bool], Field(alias='srl_nokia-isis:up-down')] = None
    """
    The up/down bit. Set if a prefix is advertised from a higher level to a lower level (e.g., level 2 to level 1), indicating that the prefix has traveled down the hierarchy. Prefixes that have the up/down bit set may only be advertised down the hierarchy, i.e., to lower levels. When a prefix is first injected into IS-IS, the bit is UNSET.
    """
    s_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:s-bit')] = None
    """
    The Sub-TLV present bit. If UNSET, the octets of Sub-TLVs are not present. Otherwise, the bit is set and the octet following the prefix will contain the length of the Sub-TLV portion of the structure.
    """
    prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$',
        ),
    ] = None
    """
    IPv4 prefix contained within extended reachability TLVs.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=0, le=16777215)
    ] = None
    """
    ISIS metric value.
    """
    mt_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:mt-id', ge=0, le=4095)
    ] = None
    """
    Multi-topology ID
    """
    subtlvs: Annotated[
        Optional[SubtlvsContainer8], Field(alias='srl_nokia-isis:subtlvs')
    ] = None
    undefined_subtlvs: Annotated[
        Optional[UndefinedSubtlvsContainer7],
        Field(alias='srl_nokia-isis:undefined-subtlvs'),
    ] = None


class PrefixListEntry6(BaseModel):
    """
    List of IPv6 prefixes contained within MT reachability TLV.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    up_down: Annotated[Optional[bool], Field(alias='srl_nokia-isis:up-down')] = None
    """
    The up/down bit. Set if a prefix is advertised from a higher level to a lower level (e.g., level 2 to level 1), indicating that the prefix has traveled down the hierarchy. Prefixes that have the up/down bit set may only be advertised down the hierarchy, i.e., to lower levels. When a prefix is first injected into IS-IS, the bit is UNSET.
    """
    x_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:x-bit')] = None
    """
    The external bit. Set when the prefix was distributed into IS-IS from another routing protocol.
    """
    s_bit: Annotated[Optional[bool], Field(alias='srl_nokia-isis:s-bit')] = None
    """
    The sub-tlv present bit. If UNSET, the octets of Sub-TLVs are not present. Otherwise, the bit is set and the octet following the prefix will contain the length of the Sub-TLV portion of the structure.
    """
    prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:prefix',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))$).*$',
        ),
    ] = None
    """
    IPv6 prefix contained within extended reachability TLVs.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=0, le=16777215)
    ] = None
    """
    ISIS metric value.
    """
    mt_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:mt-id', ge=0, le=4095)
    ] = None
    """
    Multi-topology ID
    """
    subtlvs: Annotated[
        Optional[SubtlvsContainer9], Field(alias='srl_nokia-isis:subtlvs')
    ] = None
    undefined_subtlvs: Annotated[
        Optional[UndefinedSubtlvsContainer8],
        Field(alias='srl_nokia-isis:undefined-subtlvs'),
    ] = None


class PrefixesContainer(BaseModel):
    """
    This container describes IS prefixes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[List[PrefixListEntry]], Field(alias='srl_nokia-isis:prefix')
    ] = None


class PrefixesContainer2(BaseModel):
    """
    This container describes IS neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[List[PrefixListEntry2]], Field(alias='srl_nokia-isis:prefix')
    ] = None


class PrefixesContainer3(BaseModel):
    """
    This container describes IS prefixes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[List[PrefixListEntry3]], Field(alias='srl_nokia-isis:prefix')
    ] = None


class PrefixesContainer4(BaseModel):
    """
    This container describes IS prefixes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[List[PrefixListEntry4]], Field(alias='srl_nokia-isis:prefix')
    ] = None


class PrefixesContainer5(BaseModel):
    """
    This container describes IS prefixes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[List[PrefixListEntry5]], Field(alias='srl_nokia-isis:prefix')
    ] = None


class PrefixesContainer6(BaseModel):
    """
    This container describes IS prefixes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix: Annotated[
        Optional[List[PrefixListEntry6]], Field(alias='srl_nokia-isis:prefix')
    ] = None


class ProxyArpContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:admin-state'),
    ] = 'enable'
    """
    Configurable state of the layer-2 proxy ARP/ND table
    """
    table_size: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:table-size', ge=1, le=8192),
    ] = 250
    """
    Maximum number of entries allowed in the proxy table of the network-instance
    """
    oper_down_reason: Annotated[
        Optional[EnumerationEnum271],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:oper-down-reason'),
    ] = None
    """
    The reason the proxy-type is down on the network-instance
    """
    dynamic_learning: Annotated[
        Optional[DynamicLearningContainer],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:dynamic-learning'),
    ] = None
    ip_duplication: Annotated[
        Optional[IpDuplicationContainer],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:ip-duplication'),
    ] = None
    evpn: Annotated[
        Optional[EvpnContainer4],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:evpn'),
    ] = None
    trace_options: Annotated[
        Optional[TraceOptionsContainer19],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:trace-options'),
    ] = None
    process_arp_probes: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:process-arp-probes'),
    ] = True
    """
    Determines whether the router processes ARP probe messages.

    When set to true, ARP probe messages used by the hosts for Duplicate Address Detection
    are processed, replied if a proxy-arp entry is hit or reinjected into the data path.
    When set to false, ARP probe messages are flooded to the remote nodes if unknown-arp-requests
    are configured to be flooded. ARP probe messages are identified as ARP Requests that use IP
    address 0.0.0.0 as sender's address.
    """
    static_entries: Annotated[
        Optional[StaticEntriesContainer],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:static-entries'),
    ] = None
    duplicate_entries: Annotated[
        Optional[DuplicateEntriesContainer2],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:duplicate-entries'),
    ] = None
    dynamic_entries: Annotated[
        Optional[DynamicEntriesContainer],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:dynamic-entries'),
    ] = None
    table_entries: Annotated[
        Optional[TableEntriesContainer],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:table-entries'),
    ] = None
    evpn_entries: Annotated[
        Optional[EvpnEntriesContainer],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:evpn-entries'),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer31],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:statistics'),
    ] = None


class ProxyEvpnMembershipGroupsContainer(BaseModel):
    """
    EVPN Proxy Database created for the network-instance

    The content of this table is used by the router to proxy the
    reports towards the remote PEs via BGP EVPN SMET (Selective
    Multicast Ethernet Tag) routes .
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry9]], Field(alias='srl_nokia-igmp-snooping:group')
    ] = None


class ProxyEvpnMembershipGroupsContainer2(BaseModel):
    """
    EVPN Proxy Database created for the network-instance

    The content of this table is used by the router to proxy the
    reports towards the remote PEs via BGP EVPN SMET (Selective
    Multicast Ethernet Tag) routes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry14]], Field(alias='srl_nokia-mld-snooping:group')
    ] = None


class ProxyMembershipGroupsContainer(BaseModel):
    """
    Proxy Database created for the network-instance

    The content of this table is used by the router to proxy the
    reports towards the Querier, when the Querier is attached to a
    sub-interface.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry8]], Field(alias='srl_nokia-igmp-snooping:group')
    ] = None


class ProxyMembershipGroupsContainer2(BaseModel):
    """
    Proxy Database created for the network-instance

    The content of this table is used by the router to proxy the
    reports towards the Querier, when the Querier is attached to a
    sub-interface.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry13]], Field(alias='srl_nokia-mld-snooping:group')
    ] = None


class ProxyNdContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:admin-state'),
    ] = 'enable'
    """
    Configurable state of the layer-2 proxy ARP/ND table
    """
    table_size: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:table-size', ge=1, le=8192),
    ] = 250
    """
    Maximum number of entries allowed in the proxy table of the network-instance
    """
    oper_down_reason: Annotated[
        Optional[EnumerationEnum281],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:oper-down-reason'),
    ] = None
    """
    The reason the proxy-type is down on the network-instance
    """
    dynamic_learning: Annotated[
        Optional[DynamicLearningContainer2],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:dynamic-learning'),
    ] = None
    ip_duplication: Annotated[
        Optional[IpDuplicationContainer2],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:ip-duplication'),
    ] = None
    evpn: Annotated[
        Optional[EvpnContainer5],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:evpn'),
    ] = None
    trace_options: Annotated[
        Optional[TraceOptionsContainer20],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:trace-options'),
    ] = None
    process_dad_neighbor_solicitations: Annotated[
        Optional[bool],
        Field(
            alias='srl_nokia-bridge-table-proxy-arp-nd:process-dad-neighbor-solicitations'
        ),
    ] = True
    """
    Determines whether the router processes Neighbor Soliciation DAD messages

    When set to true, Neighbor Soliciation DAD messages used by the hosts for Duplicate Address Detection
    are processed, replied if a proxy ND entry is hit, or reinjected into the data path. When set to false,
    Neighbor Solicitation DAD messages are flooded to the remote nodes if unknown-neighbor-solicitation
    is configured so that unknown Neighbor Solicitation messages are flooded.
    """
    static_entries: Annotated[
        Optional[StaticEntriesContainer2],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:static-entries'),
    ] = None
    duplicate_entries: Annotated[
        Optional[DuplicateEntriesContainer3],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:duplicate-entries'),
    ] = None
    dynamic_entries: Annotated[
        Optional[DynamicEntriesContainer2],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:dynamic-entries'),
    ] = None
    table_entries: Annotated[
        Optional[TableEntriesContainer2],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:table-entries'),
    ] = None
    evpn_entries: Annotated[
        Optional[EvpnEntriesContainer2],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:evpn-entries'),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer32],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:statistics'),
    ] = None


class RegisterStopContainer(BaseModel):
    """
    Enable tracing for register-stop packets
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Optional[Union[AllInterfacesCase4, InterfaceNameCase4]],
        Field(alias='srl_nokia-pim:interface'),
    ] = None
    ipv4: Annotated[Optional[bool], Field(alias='srl_nokia-pim:ipv4')] = True
    """
    Enable tracing for PIM ipv4 packets
    """
    ipv6: Annotated[Optional[bool], Field(alias='srl_nokia-pim:ipv6')] = True
    """
    Enable tracing for PIM ipv6 packets
    """
    ingress: Annotated[Optional[bool], Field(alias='srl_nokia-pim:ingress')] = True
    """
    Enable tracing for received packets
    """
    egress: Annotated[Optional[bool], Field(alias='srl_nokia-pim:egress')] = True
    """
    Enable tracing for sent packets
    """


class RegisterContainer(BaseModel):
    """
    Enable tracing for register events
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:group-address'),
    ] = None
    """
    The IP multicast group address for which to trace events
    """
    source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:source-address'),
    ] = None
    """
    The source address for which to trace events
    """
    detail: Annotated[Optional[bool], Field(alias='srl_nokia-pim:detail')] = False
    """
    Enable detail tracing.
    """


class RegisterContainer2(BaseModel):
    """
    Enable tracing for register packets
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Optional[Union[AllInterfacesCase3, InterfaceNameCase3]],
        Field(alias='srl_nokia-pim:interface'),
    ] = None
    ipv4: Annotated[Optional[bool], Field(alias='srl_nokia-pim:ipv4')] = True
    """
    Enable tracing for PIM ipv4 packets
    """
    ipv6: Annotated[Optional[bool], Field(alias='srl_nokia-pim:ipv6')] = True
    """
    Enable tracing for PIM ipv6 packets
    """
    ingress: Annotated[Optional[bool], Field(alias='srl_nokia-pim:ingress')] = True
    """
    Enable tracing for received packets
    """
    egress: Annotated[Optional[bool], Field(alias='srl_nokia-pim:egress')] = True
    """
    Enable tracing for sent packets
    """


class RendezvousPointListEntry(BaseModel):
    """
    List of static rendezvous points
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:address'),
    ] = None
    """
    IP address of the rendezvous point
    """
    group: Annotated[
        Optional[List[GroupListEntry4]], Field(alias='srl_nokia-pim:group')
    ] = None


class RibInPostContainer(BaseModel):
    """
    Container for the post-import-policy version of BGP routes learned from BGP neighbors
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry5]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibInPostContainer2(BaseModel):
    """
    Container for the post-import-policy version of BGP routes learned from BGP neighbors
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry9]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibInPostContainer3(BaseModel):
    """
    Container for the post-import-policy version of BGP routes learned from BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry13]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibInPostContainer4(BaseModel):
    """
    Container for the post-import-policy version of BGP routes learned from BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry17]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibInPostContainer5(BaseModel):
    """
    Container for the post-import-policy version of BGP routes learned from BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry21]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibInPostContainer6(BaseModel):
    """
    Container for the post-import-policy version of BGP routes learned from BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry25]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibInPostContainer7(BaseModel):
    """
    Container for the post-import-policy version of BGP routes learned from BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ethernet_ad_route: Annotated[
        Optional[List[EthernetAdRouteListEntry3]],
        Field(alias='srl_nokia-rib-bgp:ethernet-ad-route'),
    ] = None
    mac_ip_route: Annotated[
        Optional[List[MacIpRouteListEntry3]],
        Field(alias='srl_nokia-rib-bgp:mac-ip-route'),
    ] = None
    imet_route: Annotated[
        Optional[List[ImetRouteListEntry3]], Field(alias='srl_nokia-rib-bgp:imet-route')
    ] = None
    ethernet_segment_route: Annotated[
        Optional[List[EthernetSegmentRouteListEntry3]],
        Field(alias='srl_nokia-rib-bgp:ethernet-segment-route'),
    ] = None
    ip_prefix_route: Annotated[
        Optional[List[IpPrefixRouteListEntry3]],
        Field(alias='srl_nokia-rib-bgp:ip-prefix-route'),
    ] = None
    smet_route: Annotated[
        Optional[List[SmetRouteListEntry3]], Field(alias='srl_nokia-rib-bgp:smet-route')
    ] = None
    multicast_membership_report_synch_route: Annotated[
        Optional[List[MulticastMembershipReportSynchRouteListEntry3]],
        Field(alias='srl_nokia-rib-bgp:multicast-membership-report-synch-route'),
    ] = None
    multicast_leave_synch_route: Annotated[
        Optional[List[MulticastLeaveSynchRouteListEntry3]],
        Field(alias='srl_nokia-rib-bgp:multicast-leave-synch-route'),
    ] = None


class RibInPostContainer8(BaseModel):
    """
    Container for the post-import-policy version of BGP routes learned from BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry28]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibInPreContainer3(BaseModel):
    """
    Container for the pre-import-policy version of BGP routes learned from BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry12]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibInPreContainer4(BaseModel):
    """
    Container for the pre-import-policy version of BGP routes learned from BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry16]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibInPreContainer7(BaseModel):
    """
    Container for the pre-import-policy version of BGP routes learned from BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ethernet_ad_route: Annotated[
        Optional[List[EthernetAdRouteListEntry2]],
        Field(alias='srl_nokia-rib-bgp:ethernet-ad-route'),
    ] = None
    mac_ip_route: Annotated[
        Optional[List[MacIpRouteListEntry2]],
        Field(alias='srl_nokia-rib-bgp:mac-ip-route'),
    ] = None
    imet_route: Annotated[
        Optional[List[ImetRouteListEntry2]], Field(alias='srl_nokia-rib-bgp:imet-route')
    ] = None
    ethernet_segment_route: Annotated[
        Optional[List[EthernetSegmentRouteListEntry2]],
        Field(alias='srl_nokia-rib-bgp:ethernet-segment-route'),
    ] = None
    ip_prefix_route: Annotated[
        Optional[List[IpPrefixRouteListEntry2]],
        Field(alias='srl_nokia-rib-bgp:ip-prefix-route'),
    ] = None
    smet_route: Annotated[
        Optional[List[SmetRouteListEntry2]], Field(alias='srl_nokia-rib-bgp:smet-route')
    ] = None
    multicast_membership_report_synch_route: Annotated[
        Optional[List[MulticastMembershipReportSynchRouteListEntry2]],
        Field(alias='srl_nokia-rib-bgp:multicast-membership-report-synch-route'),
    ] = None
    multicast_leave_synch_route: Annotated[
        Optional[List[MulticastLeaveSynchRouteListEntry2]],
        Field(alias='srl_nokia-rib-bgp:multicast-leave-synch-route'),
    ] = None


class RibOutPostContainer2(BaseModel):
    """
    Container for the post-export-policy version of BGP routes advertised to BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry10]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibOutPostContainer3(BaseModel):
    """
    Container for the post-export-policy version of BGP routes advertised to BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry14]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibOutPostContainer4(BaseModel):
    """
    Container for the post-export-policy version of BGP routes advertised to BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry18]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibOutPostContainer6(BaseModel):
    """
    Container for the post-export-policy version of BGP routes advertised to BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry26]], Field(alias='srl_nokia-rib-bgp:route')
    ] = None


class RibOutPostContainer7(BaseModel):
    """
    Container for the post-export-policy version of BGP routes advertised to BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ethernet_ad_route: Annotated[
        Optional[List[EthernetAdRouteListEntry4]],
        Field(alias='srl_nokia-rib-bgp:ethernet-ad-route'),
    ] = None
    mac_ip_route: Annotated[
        Optional[List[MacIpRouteListEntry4]],
        Field(alias='srl_nokia-rib-bgp:mac-ip-route'),
    ] = None
    imet_route: Annotated[
        Optional[List[ImetRouteListEntry4]], Field(alias='srl_nokia-rib-bgp:imet-route')
    ] = None
    ethernet_segment_route: Annotated[
        Optional[List[EthernetSegmentRouteListEntry4]],
        Field(alias='srl_nokia-rib-bgp:ethernet-segment-route'),
    ] = None
    ip_prefix_route: Annotated[
        Optional[List[IpPrefixRouteListEntry4]],
        Field(alias='srl_nokia-rib-bgp:ip-prefix-route'),
    ] = None
    smet_route: Annotated[
        Optional[List[SmetRouteListEntry4]], Field(alias='srl_nokia-rib-bgp:smet-route')
    ] = None
    multicast_membership_report_synch_route: Annotated[
        Optional[List[MulticastMembershipReportSynchRouteListEntry4]],
        Field(alias='srl_nokia-rib-bgp:multicast-membership-report-synch-route'),
    ] = None
    multicast_leave_synch_route: Annotated[
        Optional[List[MulticastLeaveSynchRouteListEntry4]],
        Field(alias='srl_nokia-rib-bgp:multicast-leave-synch-route'),
    ] = None


class RouteTableContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mac_ip: Annotated[
        Optional[MacIpContainer2], Field(alias='srl_nokia-bgp-evpn:mac-ip')
    ] = None
    ip_prefix: Annotated[
        Optional[IpPrefixContainer], Field(alias='srl_nokia-bgp-evpn:ip-prefix')
    ] = None


class RouteListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ip-route-tables:ipv4-prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$',
        ),
    ] = None
    """
    The IPv4 prefix associated with the route.
    """
    id: Annotated[
        Optional[int], Field(alias='srl_nokia-ip-route-tables:id', ge=0, le=4294967295)
    ] = None
    """
    An owner-assigned index value that is unique for each of the routes for a given prefix.
    """
    route_type: Annotated[
        Optional[str], Field(alias='srl_nokia-ip-route-tables:route-type')
    ] = None
    """
    The type of the IP route
    """
    route_owner: Annotated[
        Optional[str], Field(alias='srl_nokia-ip-route-tables:route-owner')
    ] = None
    """
    The application name of the owner of the IP route
    """
    origin_network_instance: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ip-route-tables:origin-network-instance',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$',
        ),
    ] = None
    """
    Origin network instance of the route (where it was originally learned or configured)

    If the route was leaked from another network instance, the value of this leaf reflects the network-instance from which it was learned. If it was not leaked the value is the same as the parent network-instance.
    """
    leakable: Annotated[
        Optional[bool], Field(alias='srl_nokia-ip-route-tables:leakable')
    ] = None
    """
    Reads true when the route was matched and accepted by the route-leaking inter-instance export-policy
    """
    target_network_instances: Annotated[
        Optional[List[TargetNetworkInstancesLeafList]],
        Field(alias='srl_nokia-ip-route-tables:target-network-instances'),
    ] = []
    """
    List of network-instances that have imported this route as a result of matching and accepting it in their inter-instance import-policy
    """
    metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ip-route-tables:metric', ge=0, le=4294967295),
    ] = None
    """
    The metric of the IP route. In general, when comparing two routes with the same owner and preference, the route with the lower metric is the one that is activated and used for forwarding.
    """
    preference: Annotated[
        Optional[int], Field(alias='srl_nokia-ip-route-tables:preference', ge=0, le=255)
    ] = None
    """
    The IP route table preference. This is sometimes called the administrative distance of the route. In general, when comparing any two routes, the route with the lower preference is the one that is activated and used for forwarding.
    """
    active: Annotated[
        Optional[bool], Field(alias='srl_nokia-ip-route-tables:active')
    ] = None
    """
    If set to true then the route is installed as the active route for the IP prefix in the FIB. A route can be inactive because there is a more preferred route for the same prefix or else its next-hops are unresolved.
    """
    last_app_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ip-route-tables:last-app-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this route by the owning application or protocol.
    """
    next_hop_group: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ip-route-tables:next-hop-group',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    The next-hop-group indirection object used by this route.
    """
    next_hop_group_network_instance: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ip-route-tables:next-hop-group-network-instance',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$',
        ),
    ] = None
    """
    The network instance where the next-hop-group can be found.  If unspecified, the next hop group is in the local network instance.
    """
    gribi_metadata: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ip-route-tables:gribi-metadata', max_length=8, min_length=0
        ),
    ] = None
    """
    Metadata persistently stored with the entry.
    """
    resilient_hash: Annotated[
        Optional[bool], Field(alias='srl_nokia-ip-route-tables:resilient-hash')
    ] = None
    """
    Set to true if the route is covered by a resilient-hash-prefix entry
    """
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-ip-route-tables:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """
    fib_programming: Annotated[
        Optional[FibProgrammingContainer],
        Field(alias='srl_nokia-ip-route-tables:fib-programming'),
    ] = None


class RouteListEntry2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv6_prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ip-route-tables:ipv6-prefix',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))$).*$',
        ),
    ] = None
    """
    The IPv6 prefix associated with the route.
    """
    id: Annotated[
        Optional[int], Field(alias='srl_nokia-ip-route-tables:id', ge=0, le=4294967295)
    ] = None
    """
    An owner-assigned index value that is unique for each of the routes for a given prefix.
    """
    route_type: Annotated[
        Optional[str], Field(alias='srl_nokia-ip-route-tables:route-type')
    ] = None
    """
    The type of the IP route
    """
    route_owner: Annotated[
        Optional[str], Field(alias='srl_nokia-ip-route-tables:route-owner')
    ] = None
    """
    The application name of the owner of the IP route
    """
    origin_network_instance: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ip-route-tables:origin-network-instance',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$',
        ),
    ] = None
    """
    Origin network instance of the route (where it was originally learned or configured)

    If the route was leaked from another network instance, the value of this leaf reflects the network-instance from which it was learned. If it was not leaked the value is the same as the parent network-instance.
    """
    leakable: Annotated[
        Optional[bool], Field(alias='srl_nokia-ip-route-tables:leakable')
    ] = None
    """
    Reads true when the route was matched and accepted by the route-leaking inter-instance export-policy
    """
    target_network_instances: Annotated[
        Optional[List[TargetNetworkInstancesLeafList2]],
        Field(alias='srl_nokia-ip-route-tables:target-network-instances'),
    ] = []
    """
    List of network-instances that have imported this route as a result of matching and accepting it in their inter-instance import-policy
    """
    metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ip-route-tables:metric', ge=0, le=4294967295),
    ] = None
    """
    The metric of the IP route. In general, when comparing two routes with the same owner and preference, the route with the lower metric is the one that is activated and used for forwarding.
    """
    preference: Annotated[
        Optional[int], Field(alias='srl_nokia-ip-route-tables:preference', ge=0, le=255)
    ] = None
    """
    The IP route table preference. This is sometimes called the administrative distance of the route. In general, when comparing any two routes, the route with the lower preference is the one that is activated and used for forwarding.
    """
    active: Annotated[
        Optional[bool], Field(alias='srl_nokia-ip-route-tables:active')
    ] = None
    """
    If set to true then the route is installed as the active route for the IP prefix in the FIB. A route can be inactive because there is a more preferred route for the same prefix or else its next-hops are unresolved.
    """
    last_app_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ip-route-tables:last-app-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this route by the owning application or protocol.
    """
    next_hop_group: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ip-route-tables:next-hop-group',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    The next-hop-group indirection object used by this route.
    """
    next_hop_group_network_instance: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ip-route-tables:next-hop-group-network-instance',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$',
        ),
    ] = None
    """
    The network instance where the next-hop-group can be found.  If unspecified, the next hop group is in the local network instance.
    """
    gribi_metadata: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ip-route-tables:gribi-metadata', max_length=8, min_length=0
        ),
    ] = None
    """
    Metadata persistently stored with the entry.
    """
    resilient_hash: Annotated[
        Optional[bool], Field(alias='srl_nokia-ip-route-tables:resilient-hash')
    ] = None
    """
    Set to true if the route is covered by a resilient-hash-prefix entry
    """
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-ip-route-tables:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """
    fib_programming: Annotated[
        Optional[FibProgrammingContainer2],
        Field(alias='srl_nokia-ip-route-tables:fib-programming'),
    ] = None


class RouterCapabilitiesContainer(BaseModel):
    """
    This container defines router capabilities.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    capability: Annotated[
        Optional[List[CapabilityListEntry]], Field(alias='srl_nokia-isis:capability')
    ] = None


class RouterCapabilityContainer(BaseModel):
    """
    Allows a router to announce its capabilities within an IS-IS level or the entire routing domain. TLV = 242.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:router-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Router ID indicating the source of the TLV
    """
    scope_is_domain_wide: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:scope-is-domain-wide')
    ] = None
    """
    When true, the TLV MUST be flooded across the entire routing domain. When false, the TLV MUST NOT be leaked between levels.
    """
    leaked_down: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:leaked-down')
    ] = None
    """
    When true, the TLV was leaked down from Level 2 to Level 1 and must not be leaked back up to L2
    """
    sub_tlvs: Annotated[
        Optional[SubTlvsContainer8], Field(alias='srl_nokia-isis:sub-tlvs')
    ] = None


class RouterInformationContainer(BaseModel):
    """
    The router information LSA is utilised to advertise capabilities
    of a system to other systems who receive the LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlvs: Annotated[Optional[TlvsContainer3], Field(alias='srl_nokia-ospf:tlvs')] = None


class RouterInformationContainer2(BaseModel):
    """
    The router information LSA is utilised to advertise capabilities
    of a system to other systems who receive the LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlvs: Annotated[Optional[TlvsContainer7], Field(alias='srl_nokia-ospf:tlvs')] = None


class RouterInformationContainer3(BaseModel):
    """
    The router information LSA is utilised to advertise capabilities
    of a system to other systems who receive the LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlvs: Annotated[Optional[TlvsContainer11], Field(alias='srl_nokia-ospf:tlvs')] = (
        None
    )


class RoutesContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    dest_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-ospf:dest-address'),
    ] = None
    """
    An IPv4 or IPv6 address with no prefix specified.
    """


class SeamlessBfdContainer(BaseModel):
    """
    Container for BFD related network-instance related configuration
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    peer: Annotated[
        Optional[List[PeerListEntry7]], Field(alias='srl_nokia-seamless-bfd:peer')
    ] = None
    reflector: Annotated[
        Optional[List[ReflectorListEntry]],
        Field(alias='srl_nokia-seamless-bfd:reflector'),
    ] = None


class SegmentRoutingContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mpls: Annotated[Optional[MplsContainer4], Field(alias='srl_nokia-isis:mpls')] = None


class SegmentRoutingContainer2(BaseModel):
    """
    Container with interface-specific segment routing options
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mpls: Annotated[Optional[MplsContainer5], Field(alias='srl_nokia-isis:mpls')] = None


class SegmentRoutingContainer3(BaseModel):
    """
    Container with segment routing configuration options
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mpls: Annotated[
        Optional[MplsContainer8], Field(alias='srl_nokia-segment-routing:mpls')
    ] = None


class ServiceFec128ListEntry(BaseModel):
    """
    Service FEC128 binding
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    virtual_circuit_type: Annotated[
        Optional[EnumerationEnum100], Field(alias='srl_nokia-ldp:virtual-circuit-type')
    ] = None
    """
    The virtual circuit (VC) type of the pseudowire
    """
    virtual_circuit_identifier: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:virtual-circuit-identifier', ge=1, le=4294967295),
    ] = None
    """
    The virtual circuit identifier of the pseudowire
    """
    peer_lsr_id: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-ldp:peer-lsr-id'),
    ] = None
    """
    Peer IP address, LSR-id
    """
    binding_oper_state: Annotated[
        Optional[EnumerationEnum101], Field(alias='srl_nokia-ldp:binding-oper-state')
    ] = None
    """
    Operational state of the binding
    """
    binding_oper_down_reason: Annotated[
        Optional[EnumerationEnum102],
        Field(alias='srl_nokia-ldp:binding-oper-down-reason'),
    ] = None
    """
    The reason why the binding is operationally down
    """
    advertised: Annotated[
        Optional[AdvertisedContainer], Field(alias='srl_nokia-ldp:advertised')
    ] = None
    received: Annotated[
        Optional[ReceivedContainer6], Field(alias='srl_nokia-ldp:received')
    ] = None


class ServiceFec128ListEntry2(BaseModel):
    """
    Service FEC128 binding
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    virtual_circuit_type: Annotated[
        Optional[EnumerationEnum100], Field(alias='srl_nokia-ldp:virtual-circuit-type')
    ] = None
    """
    The virtual circuit (VC) type of the pseudowire
    """
    virtual_circuit_identifier: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:virtual-circuit-identifier', ge=1, le=4294967295),
    ] = None
    """
    The virtual circuit identifier of the pseudowire
    """
    peer_lsr_id: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-ldp:peer-lsr-id'),
    ] = None
    """
    Peer IP address, LSR-id
    """
    binding_oper_state: Annotated[
        Optional[EnumerationEnum111], Field(alias='srl_nokia-ldp:binding-oper-state')
    ] = None
    """
    Operational state of the binding
    """
    binding_oper_down_reason: Annotated[
        Optional[EnumerationEnum112],
        Field(alias='srl_nokia-ldp:binding-oper-down-reason'),
    ] = None
    """
    The reason why the binding is operationally down
    """
    advertised: Annotated[
        Optional[AdvertisedContainer2], Field(alias='srl_nokia-ldp:advertised')
    ] = None
    received: Annotated[
        Optional[ReceivedContainer7], Field(alias='srl_nokia-ldp:received')
    ] = None


class SourceListEntry17(BaseModel):
    """
    Source addresses of multicast
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp:source',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Source address of multicast
    """
    forwarding_interface: Annotated[
        Optional[List[ForwardingInterfaceListEntry2]],
        Field(alias='srl_nokia-igmp:forwarding-interface'),
    ] = None
    blocked_interface: Annotated[
        Optional[List[BlockedInterfaceListEntry2]],
        Field(alias='srl_nokia-igmp:blocked-interface'),
    ] = None


class SourceListEntry2(BaseModel):
    """
    Source addresses of multicast
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld:source',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Source address of multicast
    """
    forwarding_interface: Annotated[
        Optional[List[ForwardingInterfaceListEntry]],
        Field(alias='srl_nokia-mld:forwarding-interface'),
    ] = None
    blocked_interface: Annotated[
        Optional[List[BlockedInterfaceListEntry]],
        Field(alias='srl_nokia-mld:blocked-interface'),
    ] = None


class SpfContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    dest_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-ospf:dest-address'),
    ] = None
    """
    An IPv4 or IPv6 address with no prefix specified.
    """


class SsmRangesContainer(BaseModel):
    """
    List of accepted Source Specific Multicast (SSM) address ranges
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group_range: Annotated[
        Optional[List[GroupRangeListEntry]], Field(alias='srl_nokia-pim:group-range')
    ] = None


class SsmContainer(BaseModel):
    """
    Source Specific Multicast (SSM) configuration
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ssm_ranges: Annotated[
        Optional[SsmRangesContainer], Field(alias='srl_nokia-pim:ssm-ranges')
    ] = None


class StaticMembershipGroupsContainer(BaseModel):
    """
    Container to configure static <S,G>s for this interface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group_range: Annotated[
        Optional[List[GroupRangeListEntry4]], Field(alias='srl_nokia-mld:group-range')
    ] = None


class StaticMembershipGroupsContainer2(BaseModel):
    """
    Container to configure static <S,G>s for this interface.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry10]], Field(alias='srl_nokia-igmp-snooping:group')
    ] = None


class StaticMembershipGroupsContainer3(BaseModel):
    """
    Container to configure static <S,G>s for this interface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry15]], Field(alias='srl_nokia-mld-snooping:group')
    ] = None


class StaticMembershipGroupsContainer4(BaseModel):
    """
    Container to configure static <S,G>s for this interface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group_range: Annotated[
        Optional[List[GroupRangeListEntry7]], Field(alias='srl_nokia-igmp:group-range')
    ] = None


class StaticContainer(BaseModel):
    """
    Static rendezvous point (RP) configuration
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rendezvous_point: Annotated[
        Optional[List[RendezvousPointListEntry]],
        Field(alias='srl_nokia-pim:rendezvous-point'),
    ] = None


class StatisticsContainer18(BaseModel):
    """
    Statistics objects
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received_messages: Annotated[
        Optional[ReceivedMessagesContainer2],
        Field(alias='srl_nokia-ldp:received-messages'),
    ] = None
    sent_messages: Annotated[
        Optional[SentMessagesContainer2], Field(alias='srl_nokia-ldp:sent-messages')
    ] = None
    address_statistics: Annotated[
        Optional[AddressStatisticsContainer],
        Field(alias='srl_nokia-ldp:address-statistics'),
    ] = None
    fec_statistics: Annotated[
        Optional[FecStatisticsContainer], Field(alias='srl_nokia-ldp:fec-statistics')
    ] = None


class StatisticsContainer19(BaseModel):
    """
    LDP instance level statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4: Annotated[Optional[Ipv4Container7], Field(alias='srl_nokia-ldp:ipv4')] = None
    ipv6: Annotated[Optional[Ipv6Container7], Field(alias='srl_nokia-ldp:ipv6')] = None
    sessions_terminated_holdtime_expiry: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-ldp:sessions-terminated-holdtime-expiry', ge=0, le=65535
        ),
    ] = None
    """
    The total number of LDP sessions that were terminated due to keepalive holdtime expiry
    """
    fec_statistics: Annotated[
        Optional[FecStatisticsContainer2], Field(alias='srl_nokia-ldp:fec-statistics')
    ] = None
    protocol_errors: Annotated[
        Optional[ProtocolErrorsContainer], Field(alias='srl_nokia-ldp:protocol-errors')
    ] = None


class StatisticsContainer24(BaseModel):
    """
    IGMP sub-interface statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received: Annotated[
        Optional[ReceivedContainer8], Field(alias='srl_nokia-igmp-snooping:received')
    ] = None
    transmitted: Annotated[
        Optional[TransmittedContainer6],
        Field(alias='srl_nokia-igmp-snooping:transmitted'),
    ] = None
    forwarded: Annotated[
        Optional[ForwardedContainer], Field(alias='srl_nokia-igmp-snooping:forwarded')
    ] = None
    error: Annotated[
        Optional[ErrorContainer2], Field(alias='srl_nokia-igmp-snooping:error')
    ] = None
    multicast_states: Annotated[
        Optional[MulticastStatesContainer2],
        Field(alias='srl_nokia-igmp-snooping:multicast-states'),
    ] = None


class StatisticsContainer26(BaseModel):
    """
    MLD sub-interface statistics
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received: Annotated[
        Optional[ReceivedContainer9], Field(alias='srl_nokia-mld-snooping:received')
    ] = None
    transmitted: Annotated[
        Optional[TransmittedContainer7],
        Field(alias='srl_nokia-mld-snooping:transmitted'),
    ] = None
    forwarded: Annotated[
        Optional[ForwardedContainer2], Field(alias='srl_nokia-mld-snooping:forwarded')
    ] = None
    error: Annotated[
        Optional[ErrorContainer3], Field(alias='srl_nokia-mld-snooping:error')
    ] = None
    multicast_states: Annotated[
        Optional[MulticastStatesContainer3],
        Field(alias='srl_nokia-mld-snooping:multicast-states'),
    ] = None


class SubTlvsContainer(BaseModel):
    """
    SubTLVs of TLV 22 and TLV 222
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_group: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:admin-group', ge=0, le=4294967295)
    ] = None
    """
    A bit mask representing the administrative groups to which the interface belongs. Sub-TLV = 3.
    """
    ipv4_interface_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv4-interface-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The IPv4 address of the interface to the neighbor. Sub-TLV = 6.
    """
    ipv4_neighbor_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv4-neighbor-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The IPv4 address of the neighbor. Sub-TLV = 8.
    """
    maximum_link_bandwidth: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:maximum-link-bandwidth', ge=0, le=4294967295),
    ] = None
    """
    The (LAG aware) bandwidth of the interface to the neighbor. Sub-TLV = 9.
    """
    ipv6_interface_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv6-interface-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    The IPv6 address of the interface to the neighbor. Sub-TLV = 12.
    """
    ipv6_neighbor_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv6-neighbor-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    The IPv4 address of the neighbor. Sub-TLV = 13.
    """
    link_msd: Annotated[
        Optional[LinkMsdContainer], Field(alias='srl_nokia-isis:link-msd')
    ] = None
    application_specific_link_attributes: Annotated[
        Optional[ApplicationSpecificLinkAttributesContainer4],
        Field(alias='srl_nokia-isis:application-specific-link-attributes'),
    ] = None
    te_default_metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:te-default-metric', ge=0, le=16777215),
    ] = None
    """
    An administratively assigned metric used as an alternative to the normal SPF metric based (typically) on link bandwidth. Sub-TLV = 18.
    """
    segment_routing_adjacency_sid: Annotated[
        Optional[List[SegmentRoutingAdjacencySidListEntry]],
        Field(alias='srl_nokia-isis:segment-routing-adjacency-sid'),
    ] = None
    segment_routing_lan_adjacency_sid: Annotated[
        Optional[List[SegmentRoutingLanAdjacencySidListEntry]],
        Field(alias='srl_nokia-isis:segment-routing-lan-adjacency-sid'),
    ] = None
    min_max_unidirectional_link_delay: Annotated[
        Optional[MinMaxUnidirectionalLinkDelayContainer5],
        Field(alias='srl_nokia-isis:min-max-unidirectional-link-delay'),
    ] = None


class SubTlvsContainer4(BaseModel):
    """
    SubTLVs of TLV 22 and TLV 222
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_group: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:admin-group', ge=0, le=4294967295)
    ] = None
    """
    A bit mask representing the administrative groups to which the interface belongs. Sub-TLV = 3.
    """
    ipv4_interface_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv4-interface-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The IPv4 address of the interface to the neighbor. Sub-TLV = 6.
    """
    ipv4_neighbor_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv4-neighbor-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The IPv4 address of the neighbor. Sub-TLV = 8.
    """
    maximum_link_bandwidth: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:maximum-link-bandwidth', ge=0, le=4294967295),
    ] = None
    """
    The (LAG aware) bandwidth of the interface to the neighbor. Sub-TLV = 9.
    """
    ipv6_interface_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv6-interface-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    The IPv6 address of the interface to the neighbor. Sub-TLV = 12.
    """
    ipv6_neighbor_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv6-neighbor-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    The IPv4 address of the neighbor. Sub-TLV = 13.
    """
    link_msd: Annotated[
        Optional[LinkMsdContainer2], Field(alias='srl_nokia-isis:link-msd')
    ] = None
    application_specific_link_attributes: Annotated[
        Optional[ApplicationSpecificLinkAttributesContainer5],
        Field(alias='srl_nokia-isis:application-specific-link-attributes'),
    ] = None
    te_default_metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:te-default-metric', ge=0, le=16777215),
    ] = None
    """
    An administratively assigned metric used as an alternative to the normal SPF metric based (typically) on link bandwidth. Sub-TLV = 18.
    """
    segment_routing_adjacency_sid: Annotated[
        Optional[List[SegmentRoutingAdjacencySidListEntry2]],
        Field(alias='srl_nokia-isis:segment-routing-adjacency-sid'),
    ] = None
    segment_routing_lan_adjacency_sid: Annotated[
        Optional[List[SegmentRoutingLanAdjacencySidListEntry2]],
        Field(alias='srl_nokia-isis:segment-routing-lan-adjacency-sid'),
    ] = None
    min_max_unidirectional_link_delay: Annotated[
        Optional[MinMaxUnidirectionalLinkDelayContainer7],
        Field(alias='srl_nokia-isis:min-max-unidirectional-link-delay'),
    ] = None


class TcpContainer(BaseModel):
    """
    State for TCP connections that have been established or could be established using the route tables of this network instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    statistics: Annotated[
        Optional[StatisticsContainer40], Field(alias='srl_nokia-tcp-udp:statistics')
    ] = None
    connection: Annotated[
        Optional[List[ConnectionListEntry]], Field(alias='srl_nokia-tcp-udp:connection')
    ] = None
    listening_application: Annotated[
        Optional[List[ListeningApplicationListEntry]],
        Field(alias='srl_nokia-tcp-udp:listening-application'),
    ] = None


class TldpCase(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tldp: Annotated[
        Optional[TldpContainer], Field(alias='srl_nokia-network-instance:tldp')
    ] = None


class TraceOptionsContainer14(BaseModel):
    """
    Enter the trace-options context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    trace: Annotated[
        Optional[TraceContainer3], Field(alias='srl_nokia-igmp-snooping:trace')
    ] = None


class TraceOptionsContainer15(BaseModel):
    """
    Enter the trace-options context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    trace: Annotated[
        Optional[TraceContainer4], Field(alias='srl_nokia-mld-snooping:trace')
    ] = None


class TraceOptionsContainer17(BaseModel):
    """
    Enter the trace-options context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    trace: Annotated[Optional[TraceContainer6], Field(alias='srl_nokia-ospf:trace')] = (
        None
    )


class TraceContainer5(BaseModel):
    """
    Tracing parameter flags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    adjacencies: Annotated[
        Optional[AdjacenciesLeaf], Field(alias='srl_nokia-ospf:adjacencies')
    ] = None
    graceful_restart: Annotated[
        Optional[GracefulRestartLeaf], Field(alias='srl_nokia-ospf:graceful-restart')
    ] = None
    interfaces: Annotated[
        Optional[InterfacesLeaf], Field(alias='srl_nokia-ospf:interfaces')
    ] = None
    spf: Annotated[Optional[SpfContainer2], Field(alias='srl_nokia-ospf:spf')] = None
    routes: Annotated[
        Optional[RoutesContainer2], Field(alias='srl_nokia-ospf:routes')
    ] = None
    misc: Annotated[Optional[MiscLeaf], Field(alias='srl_nokia-ospf:misc')] = None
    packet: Annotated[
        Optional[PacketContainer5], Field(alias='srl_nokia-ospf:packet')
    ] = None
    lsdb: Annotated[Optional[LsdbContainer], Field(alias='srl_nokia-ospf:lsdb')] = None


class TrafficEngineeringContainer(BaseModel):
    """
    container for traffic engineering information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertisement: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:advertisement')
    ] = False
    """
    A setting of false means that no TE-related TLVs and subTLVs should be added to LSAs or LSPs originated by this IGP instance.
    A setting of true means that TE-related TLVs and subTLVs should be added to LSAs or LSPs originated by this IGP instance.
    """
    legacy_link_attribute_advertisement: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-isis:legacy-link-attribute-advertisement'),
    ] = True
    """
    The advertisement mode for TE link attributes.

    A setting of true means that TE properties should be advertised in legacy mode as defined in RFC 8919 and RFC 8920.
    """
    ipv4_te_router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv4-te-router-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    A routable IPv4 address to identify the router uniquely in a TE domain. TLV = 134.

    The ipv4-te-router-id contains the 4-octet router ID of the router originating the LSP.
    The ipv4-te-router-id guarantees a single stable address that can always be referenced
    in a path that will be reachable from multiple hops away, regardless of the state
    of the node's interfaces.

    The configured ipv4-te-router-id address must be active and reachable within the routing
    instance and must be associated to either a system or loopback interface. The state
    value represents the operational advertised of ipv4-te-router-id
    """
    ipv6_te_router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv6-te-router-id',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    A routable IPv6 address to identify the router uniquely in a TE domain. TLV = 140.

    The ipv6-te-router-id contains the 4-octet router ID of the router originating the LSP.
    The ipv6-te-router-id guarantees a single stable address that can always be referenced
    in a path that will be reachable from multiple hops away, regardless of the state
    of the node's interfaces.

    The configured ipv6-te-router-id address must be active and reachable within the routing
    instance and must be associated to either a system or loopback interface. The state
    value represents the operational advertised of ipv6-te-router-id
    """


class TrafficEngineeringContainer3(BaseModel):
    """
    Container with traffic engineering options for the network-instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    autonomous_system: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-traffic-engineering:autonomous-system', ge=1, le=4294967295
        ),
    ] = None
    """
    The autonomous system number of the network-instance, for protocols and pseudo-protocols that do not have their own configuration of AS number.
    """
    ipv4_te_router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-traffic-engineering:ipv4-te-router-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    A routable IPv4 address to identify the router uniquely in a TE domain.
    """
    ipv6_te_router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-traffic-engineering:ipv6-te-router-id',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    A routable IPv6 address to identify the router uniquely in a TE domain.
    """
    admin_groups: Annotated[
        Optional[AdminGroupsContainer],
        Field(alias='srl_nokia-traffic-engineering:admin-groups'),
    ] = None
    shared_risk_link_groups: Annotated[
        Optional[SharedRiskLinkGroupsContainer],
        Field(alias='srl_nokia-traffic-engineering:shared-risk-link-groups'),
    ] = None
    interface: Annotated[
        Optional[List[InterfaceListEntry16]],
        Field(alias='srl_nokia-traffic-engineering:interface'),
    ] = None


class UdpContainer(BaseModel):
    """
    State for UDP datagrams routed using the route tables of this network instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    statistics: Annotated[
        Optional[StatisticsContainer41], Field(alias='srl_nokia-tcp-udp:statistics')
    ] = None
    listening_application: Annotated[
        Optional[List[ListeningApplicationListEntry2]],
        Field(alias='srl_nokia-tcp-udp:listening-application'),
    ] = None


class VxlanDestinationListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    vtep: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-igmp-snooping:vtep'),
    ] = None
    """
    The IP address that identifies the remote VXLAN Termination Endpoint (VTEP).
    """
    vni: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp-snooping:vni', ge=1, le=16777215)
    ] = None
    """
    VXLAN Network Identifier of the destination.
    """
    index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:index', ge=0, le=18446744073709551615),
    ] = None
    """
    the next-hop-group-id (system allocated) for resolving the VXLAN termination endpoint
    """
    is_mrouter_port: Annotated[
        Optional[bool], Field(alias='srl_nokia-igmp-snooping:is-mrouter-port')
    ] = None
    """
    vxlan-interface is a multicast router port
    """
    is_evpn_proxy: Annotated[
        Optional[bool], Field(alias='srl_nokia-igmp-snooping:is-evpn-proxy')
    ] = None
    """
    vxlan-interface supports evpn-proxy
    """
    is_sbd: Annotated[Optional[bool], Field(alias='srl_nokia-igmp-snooping:is-sbd')] = (
        None
    )
    """
    vxlan-interface is a supplementary broadcast domain
    """
    membership_group_count: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:membership-group-count', ge=0, le=4294967295
        ),
    ] = None
    """
    The number of multicast groups which have been learned
    """
    membership_groups: Annotated[
        Optional[MembershipGroupsContainer4],
        Field(alias='srl_nokia-igmp-snooping:membership-groups'),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer25],
        Field(alias='srl_nokia-igmp-snooping:statistics'),
    ] = None


class VxlanDestinationListEntry2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    vtep: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-mld-snooping:vtep'),
    ] = None
    """
    The IP address that identifies the remote VXLAN Termination Endpoint (VTEP).
    """
    vni: Annotated[
        Optional[int], Field(alias='srl_nokia-mld-snooping:vni', ge=1, le=16777215)
    ] = None
    """
    VXLAN Network Identifier of the destination.
    """
    index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:index', ge=0, le=18446744073709551615),
    ] = None
    """
    the next-hop-group-id (system allocated) for resolving the VXLAN termination endpoint
    """
    is_mrouter_port: Annotated[
        Optional[bool], Field(alias='srl_nokia-mld-snooping:is-mrouter-port')
    ] = None
    """
    vxlan-interface is a multicast router port
    """
    is_evpn_proxy: Annotated[
        Optional[bool], Field(alias='srl_nokia-mld-snooping:is-evpn-proxy')
    ] = None
    """
    vxlan-interface supports evpn-proxy
    """
    is_sbd: Annotated[Optional[bool], Field(alias='srl_nokia-mld-snooping:is-sbd')] = (
        None
    )
    membership_group_count: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:membership-group-count', ge=0, le=4294967295
        ),
    ] = None
    """
    The number of multicast groups which have been learned
    """
    membership_groups: Annotated[
        Optional[MembershipGroupsContainer6],
        Field(alias='srl_nokia-mld-snooping:membership-groups'),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer27],
        Field(alias='srl_nokia-mld-snooping:statistics'),
    ] = None


class VxlanContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    destination_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-tunnel-tables:destination-address'),
    ] = None
    """
    The IP address that identifies the remote VXLAN Termination Endpoint (VTEP).
    """
    source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-tunnel-tables:source-address'),
    ] = None
    """
    The IP address that identifies the local VXLAN Termination Endpoint (VTEP).
    """
    time_to_live: Annotated[
        Optional[int], Field(alias='srl_nokia-tunnel-tables:time-to-live', ge=0, le=255)
    ] = None
    """
    The Time To Live (TTL) value written into the outer IP header of VXLAN packets associated with this tunnel and originated by this router.
    """
    destination_udp_port: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tunnel-tables:destination-udp-port', ge=0, le=65535),
    ] = None
    """
    The destination UDP port number written into the outer IP/UDP header of VXLAN packets associated with this tunnel and originated by this router.
    """


class VxlanContainer3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    destination_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-tunnel-tables:destination-address'),
    ] = None
    """
    The IP address that identifies the remote VXLAN Termination Endpoint (VTEP).
    """
    source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-tunnel-tables:source-address'),
    ] = None
    """
    The IP address that identifies the local VXLAN Termination Endpoint (VTEP).
    """
    time_to_live: Annotated[
        Optional[int], Field(alias='srl_nokia-tunnel-tables:time-to-live', ge=0, le=255)
    ] = None
    """
    The Time To Live (TTL) value written into the outer IP header of VXLAN packets associated with this tunnel and originated by this router.
    """
    destination_udp_port: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tunnel-tables:destination-udp-port', ge=0, le=65535),
    ] = None
    """
    The destination UDP port number written into the outer IP/UDP header of VXLAN packets associated with this tunnel and originated by this router.
    """


class ActionContainer(BaseModel):
    """
    Container for the actions to be applied to packets matching the policy forwarding rule.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    network_instance: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-policy-forwarding:network-instance',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$',
        ),
    ] = None
    """
    When this leaf is set, packets matching the match criteria for the forwarding rule should be looked up in the network-instance that is referenced rather than the network-instance with which the interface is associated.
    """
    encapsulate_gre: Annotated[
        Optional[EncapsulateGreContainer],
        Field(alias='srl_nokia-policy-forwarding:encapsulate-gre'),
    ] = None
    decap_network_instance: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-policy-forwarding:decap-network-instance',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$',
        ),
    ] = None
    """
    Matching packets should be looked up in the referenced network-instance that is expected to contain 'routes' that perform IP tunnel decapsulation

    If there is a match, the packet should be decapsulated and route lookup on the new header should happen in the post-decap-network-instance.
    If there is no match, the packet should be looked up in the decap-fallback-network-instance.
    Configuration of this leaf is not valid without configuration for decap-fallback-network-instance and post-decap-network-instance.

    Configuration of this leaf is mutually exclusive with the network-instance action.

    Note: The only entries in the decap-network-instance that are relevant to this PBF action are special decap entries programmed by gRIBI.
    """
    decap_fallback_network_instance: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-policy-forwarding:decap-fallback-network-instance',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$',
        ),
    ] = None
    """
    Specifies the network-instance used as a fallback instance for lookup when applying the decap-network-instance action results in no match for the packet
    """
    post_decap_network_instance: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-policy-forwarding:post-decap-network-instance',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$',
        ),
    ] = None
    """
    Specifies the network-instance used for lookup on the new header when applying the decap-network-instance action results in a match for the packet
    """
    next_hop: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-policy-forwarding:next-hop'),
    ] = None
    """
    When this leaf is set, packets matching the match criteria for the forwarding rule will be routed as if their destination address had been the specified next-hop.
    """


class AfiSafiListEntry2(BaseModel):
    """
    List of address families supported by the BGP peer group
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    afi_safi_name: Annotated[
        Optional[str], Field(alias='srl_nokia-bgp:afi-safi-name')
    ] = None
    """
    The name of a BGP address family, which translates to a specific AFI value and a specific SAFI value
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = None
    """
    This leaf indicates whether the AFI-SAFI is enabled for the peer group
    """
    export_policy: Annotated[
        Optional[List[ExportPolicyLeafList4]],
        Field(alias='srl_nokia-bgp:export-policy'),
    ] = []
    """
    Apply an export policy to advertised BGP routes
    """
    import_policy: Annotated[
        Optional[List[ImportPolicyLeafList4]],
        Field(alias='srl_nokia-bgp:import-policy'),
    ] = []
    """
    Apply an import policy to received BGP routes
    """
    add_paths: Annotated[
        Optional[AddPathsContainer2], Field(alias='srl_nokia-bgp:add-paths')
    ] = None
    multipath: Annotated[
        Optional[MultipathContainer2], Field(alias='srl_nokia-bgp:multipath')
    ] = None
    ipv4_unicast: Annotated[
        Optional[Ipv4UnicastContainer2], Field(alias='srl_nokia-bgp:ipv4-unicast')
    ] = None
    ipv4_labeled_unicast: Annotated[
        Optional[Ipv4LabeledUnicastContainer2],
        Field(alias='srl_nokia-bgp:ipv4-labeled-unicast'),
    ] = None
    l3vpn_ipv4_unicast: Annotated[
        Optional[L3vpnIpv4UnicastContainer2],
        Field(alias='srl_nokia-bgp:l3vpn-ipv4-unicast'),
    ] = None
    ipv6_unicast: Annotated[
        Optional[Ipv6UnicastContainer2], Field(alias='srl_nokia-bgp:ipv6-unicast')
    ] = None
    ipv6_labeled_unicast: Annotated[
        Optional[Ipv6LabeledUnicastContainer2],
        Field(alias='srl_nokia-bgp:ipv6-labeled-unicast'),
    ] = None
    l3vpn_ipv6_unicast: Annotated[
        Optional[L3vpnIpv6UnicastContainer2],
        Field(alias='srl_nokia-bgp:l3vpn-ipv6-unicast'),
    ] = None
    evpn: Annotated[Optional[EvpnContainer2], Field(alias='srl_nokia-bgp:evpn')] = None
    route_target: Annotated[
        Optional[RouteTargetContainer], Field(alias='srl_nokia-bgp:route-target')
    ] = None


class AllEventTypesContainer(BaseModel):
    """
    Enable tracing for all events
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:group-address'),
    ] = None
    """
    The IP multicast group address for which to trace events
    """
    source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:source-address'),
    ] = None
    """
    The source address for which to trace events
    """
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-pim:interface-name')
    ] = None
    """
    Enable interface event tracing for a specific interface
    """
    detail: Annotated[Optional[bool], Field(alias='srl_nokia-pim:detail')] = False
    """
    Enable detail tracing.
    """


class AllPacketTypesContainer(BaseModel):
    """
    Enable tracing for all packet types
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Optional[Union[AllInterfacesCase, InterfaceNameCase]],
        Field(alias='srl_nokia-pim:interface'),
    ] = None
    ipv4: Annotated[Optional[bool], Field(alias='srl_nokia-pim:ipv4')] = True
    """
    Enable tracing for PIM ipv4 packets
    """
    ipv6: Annotated[Optional[bool], Field(alias='srl_nokia-pim:ipv6')] = True
    """
    Enable tracing for PIM ipv6 packets
    """
    ingress: Annotated[Optional[bool], Field(alias='srl_nokia-pim:ingress')] = True
    """
    Enable tracing for received packets
    """
    egress: Annotated[Optional[bool], Field(alias='srl_nokia-pim:egress')] = True
    """
    Enable tracing for sent packets
    """


class AllTypesCase(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    all_event_types: Annotated[
        Optional[AllEventTypesContainer], Field(alias='srl_nokia-pim:all-event-types')
    ] = None


class AllTypesCase2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    all_packet_types: Annotated[
        Optional[AllPacketTypesContainer], Field(alias='srl_nokia-pim:all-packet-types')
    ] = None


class AssertContainer(BaseModel):
    """
    Enable tracing for assert events
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:group-address'),
    ] = None
    """
    The IP multicast group address for which to trace events
    """
    source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:source-address'),
    ] = None
    """
    The source address for which to trace events
    """
    detail: Annotated[Optional[bool], Field(alias='srl_nokia-pim:detail')] = False
    """
    Enable detail tracing.
    """


class AttrSetListEntry(BaseModel):
    """
    List of attribute sets.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:index', ge=0, le=18446744073709551615),
    ] = None
    """
    A unique internal identifier of the attribute set.
    """
    as_path: Annotated[
        Optional[AsPathContainer], Field(alias='srl_nokia-rib-bgp:as-path')
    ] = None
    origin: Annotated[
        Optional[EnumerationEnum366], Field(alias='srl_nokia-rib-bgp:origin')
    ] = None
    """
    The value of the ORIGIN path attribute
    """
    atomic_aggregate: Annotated[
        Optional[bool], Field(alias='srl_nokia-rib-bgp:atomic-aggregate')
    ] = None
    """
    Set to true to indicate the presence of the ATOMIC_AGGREGATE path attribute.
    """
    next_hop: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-rib-bgp:next-hop'),
    ] = None
    """
    The IPv4 or IPv6 address of the BGP next-hop (extracted from the
    NEXT_HOP field of the UPDATE or the MP_REACH_NLRI next-hop).
    """
    med: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:med', ge=0, le=4294967295)
    ] = None
    """
    The value of the MULTI_EXIT_DISC path attribute.
    """
    local_pref: Annotated[
        Optional[int], Field(alias='srl_nokia-rib-bgp:local-pref', ge=0, le=4294967295)
    ] = None
    """
    The value of the LOCAL_PREF path attribute.
    """
    originator_id: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-rib-bgp:originator-id'),
    ] = None
    """
    The address in the ORIGINATOR_ID attribute added by a route reflector.
    """
    cluster_list: Annotated[
        Optional[List[Union[Ipv4AddressType, Ipv6AddressType]]],
        Field(alias='srl_nokia-rib-bgp:cluster-list'),
    ] = []
    """
    The list of IPv4 addresses in the CLUSTER_LIST path attribute.
    """
    aigp: Annotated[
        Optional[int],
        Field(alias='srl_nokia-rib-bgp:aigp', ge=0, le=18446744073709551615),
    ] = None
    """
    The value in the AIGP path attribute.
    """
    aggregator: Annotated[
        Optional[AggregatorContainer], Field(alias='srl_nokia-rib-bgp:aggregator')
    ] = None
    pmsi_tunnel: Annotated[
        Optional[PmsiTunnelContainer], Field(alias='srl_nokia-rib-bgp:pmsi-tunnel')
    ] = None
    communities: Annotated[
        Optional[CommunitiesContainer], Field(alias='srl_nokia-rib-bgp:communities')
    ] = None
    prefix_sid: Annotated[
        Optional[PrefixSidContainer], Field(alias='srl_nokia-rib-bgp:prefix-sid')
    ] = None
    unknown_attributes: Annotated[
        Optional[UnknownAttributesContainer],
        Field(alias='srl_nokia-rib-bgp:unknown-attributes'),
    ] = None


class AttrSetsContainer(BaseModel):
    """
    Container for BGP RIB path attribute sets that can be shared by one or more
    BGP routes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    attr_set: Annotated[
        Optional[List[AttrSetListEntry]], Field(alias='srl_nokia-rib-bgp:attr-set')
    ] = None


class AuthenticationContainer4(BaseModel):
    """
    Container for specifying authetication options that apply to the entire IS-IS instance or to an entire level.

    The settings in this container only apply to PDUs without an authentication behavior specified at a more granular level.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    csnp_authentication: Annotated[
        Optional[CsnpAuthenticationContainer],
        Field(alias='srl_nokia-isis:csnp-authentication'),
    ] = None
    psnp_authentication: Annotated[
        Optional[PsnpAuthenticationContainer],
        Field(alias='srl_nokia-isis:psnp-authentication'),
    ] = None
    hello_authentication: Annotated[
        Optional[HelloAuthenticationContainer],
        Field(alias='srl_nokia-isis:hello-authentication'),
    ] = None
    lsp_authentication: Annotated[
        Optional[LspAuthenticationContainer],
        Field(alias='srl_nokia-isis:lsp-authentication'),
    ] = None
    auth_type: Annotated[
        Optional[Union[KeychainCase, DirectKeyCase]],
        Field(alias='srl_nokia-isis:auth-type'),
    ] = None


class AuthenticationContainer5(BaseModel):
    """
    Container for specifying authetication options that apply to the IS-IS instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    hello_authentication: Annotated[
        Optional[HelloAuthenticationContainer2],
        Field(alias='srl_nokia-isis:hello-authentication'),
    ] = None
    auth_type: Annotated[
        Optional[Union[KeychainCase2, DirectKeyCase2]],
        Field(alias='srl_nokia-isis:auth-type'),
    ] = None


class AuthenticationContainer6(BaseModel):
    """
    Container for specifying authetication options that apply to the IS-IS instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    hello_authentication: Annotated[
        Optional[HelloAuthenticationContainer3],
        Field(alias='srl_nokia-isis:hello-authentication'),
    ] = None
    auth_type: Annotated[
        Optional[Union[KeychainCase3, DirectKeyCase3]],
        Field(alias='srl_nokia-isis:auth-type'),
    ] = None


class AuthenticationContainer7(BaseModel):
    """
    Container for specifying authetication options that apply to the entire IS-IS instance or to an entire level.

    The settings in this container only apply to PDUs without an authentication behavior specified at a more granular level.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    csnp_authentication: Annotated[
        Optional[CsnpAuthenticationContainer2],
        Field(alias='srl_nokia-isis:csnp-authentication'),
    ] = None
    psnp_authentication: Annotated[
        Optional[PsnpAuthenticationContainer2],
        Field(alias='srl_nokia-isis:psnp-authentication'),
    ] = None
    hello_authentication: Annotated[
        Optional[HelloAuthenticationContainer4],
        Field(alias='srl_nokia-isis:hello-authentication'),
    ] = None
    lsp_authentication: Annotated[
        Optional[LspAuthenticationContainer2],
        Field(alias='srl_nokia-isis:lsp-authentication'),
    ] = None
    auth_type: Annotated[
        Optional[Union[KeychainCase4, DirectKeyCase4]],
        Field(alias='srl_nokia-isis:auth-type'),
    ] = None


class BfdContainer(BaseModel):
    """
    Container for BFD related network-instance related configuration
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    seamless_bfd: Annotated[
        Optional[SeamlessBfdContainer],
        Field(alias='srl_nokia-seamless-bfd:seamless-bfd'),
    ] = None


class BgpInstanceListEntry2(BaseModel):
    """
    bgp ipvpn instances configured in net-instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    id: Annotated[Optional[int], Field(alias='srl_nokia-bgp-ipvpn:id', ge=1, le=2)] = (
        None
    )
    """
    The index of the bgp-vpn instance
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp-ipvpn:admin-state')
    ] = 'enable'
    """
    Configurable state of the bgp-ipvpn instance.
    """
    encapsulation_type: Annotated[
        Optional[EnumerationEnum23],
        Field(alias='srl_nokia-bgp-ipvpn:encapsulation-type'),
    ] = 'mpls'
    """
    Encap type of the bgp ipvpn instance.
    """
    ecmp: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp-ipvpn:ecmp', ge=1, le=64)
    ] = 1
    """
    The supported range of ECMP values for layer-3 ecmp.
    """
    internal_tags: Annotated[
        Optional[InternalTagsContainer2],
        Field(alias='srl_nokia-bgp-ipvpn:internal-tags'),
    ] = None
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-bgp-ipvpn:oper-state')
    ] = None
    """
    This leaf contains the operational state of bgp-instance.
    """
    oper_down_reason: Annotated[
        Optional[EnumerationEnum24], Field(alias='srl_nokia-bgp-ipvpn:oper-down-reason')
    ] = None
    """
    The reason for the bgp-instance being down
    """
    mpls: Annotated[
        Optional[MplsContainer3], Field(alias='srl_nokia-bgp-ipvpn:mpls')
    ] = None


class BgpIpvpnContainer(BaseModel):
    """
    Top-level configuration and operational state for BGP IP Virtual Private Networks (IPVPN)
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bgp_instance: Annotated[
        Optional[List[BgpInstanceListEntry2]],
        Field(alias='srl_nokia-bgp-ipvpn:bgp-instance'),
    ] = None


class BgpIpvpnContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    next_hop_resolution: Annotated[
        Optional[NextHopResolutionContainer3],
        Field(alias='srl_nokia-bgp:next-hop-resolution'),
    ] = None


class BgpLabelContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    labeled_unicast: Annotated[
        Optional[LabeledUnicastContainer], Field(alias='srl_nokia-bgp:labeled-unicast')
    ] = None
    bgp_vpn: Annotated[
        Optional[BgpVpnContainer], Field(alias='srl_nokia-bgp:bgp-vpn')
    ] = None
    bgp_ipvpn: Annotated[
        Optional[BgpIpvpnContainer2], Field(alias='srl_nokia-bgp:bgp-ipvpn')
    ] = None


class BridgeTableContainer3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mac_ip: Annotated[
        Optional[MacIpContainer], Field(alias='srl_nokia-bgp-evpn:mac-ip')
    ] = None
    inclusive_mcast: Annotated[
        Optional[InclusiveMcastContainer],
        Field(alias='srl_nokia-bgp-evpn:inclusive-mcast'),
    ] = None
    next_hop: Annotated[
        Optional[Union[EnumerationEnum21, Union[Ipv4AddressType, Ipv6AddressType]]],
        Field(alias='srl_nokia-bgp-evpn:next-hop'),
    ] = 'use-system-ipv4-address'
    """
    The ip-address that will be used as the bgp next-hop for all routes advertised in this evpn instance.
    """
    vlan_aware_bundle_eth_tag: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp-evpn:vlan-aware-bundle-eth-tag', ge=0, le=16777215),
    ] = 0
    """
    Configures the Ethernet Tag ID to be encoded in the EVPN routes for control-plane interoperability mode
    with VLAN-aware bundle services.

    When set to a non-zero value, all the EVPN routes advertised for the MAC-VRF will be advertised with this value
    into the ethernet-tag-id field of the routes.

    On reception of EVPN routes with non-zero ethernet-tag-id, BGP will import the routes based on the import
    route-target as usual. However, the system checks the received ethernet-tag-id field and will process only
    those routes whose ethernet-tag-id match the local vlan-aware-bundle-eth-tag value.
    """


class BridgeTableContainer4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    discard_unknown_dest_mac: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-network-instance:discard-unknown-dest-mac'),
    ] = False
    """
    Discard frames with unknown destination mac addresses. The source mac address of the discarded
    frame is learned as long as the mac is valid, mac-learning is enabled, and the number of entries
    has not reached the maximum-entries threshold.
    """
    protect_anycast_gw_mac: Annotated[
        Optional[bool], Field(alias='srl_nokia-network-instance:protect-anycast-gw-mac')
    ] = False
    """
    Protect anycast gateway mac's installed in the FDB, when this mac-vrf is part of an IRB.
    """
    tldp_mac_flush: Annotated[
        Optional[TldpMacFlushContainer],
        Field(alias='srl_nokia-network-instance:tldp-mac-flush'),
    ] = None
    mac_learning: Annotated[
        Optional[MacLearningContainer],
        Field(alias='srl_nokia-network-instance:mac-learning'),
    ] = None
    mac_duplication: Annotated[
        Optional[MacDuplicationContainer],
        Field(alias='srl_nokia-network-instance:mac-duplication'),
    ] = None
    mac_limit: Annotated[
        Optional[MacLimitContainer], Field(alias='srl_nokia-network-instance:mac-limit')
    ] = None
    split_horizon_group: Annotated[
        Optional[List[SplitHorizonGroupListEntry]],
        Field(alias='srl_nokia-network-instance:split-horizon-group'),
    ] = None
    proxy_arp: Annotated[
        Optional[ProxyArpContainer],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:proxy-arp'),
    ] = None
    proxy_nd: Annotated[
        Optional[ProxyNdContainer],
        Field(alias='srl_nokia-bridge-table-proxy-arp-nd:proxy-nd'),
    ] = None
    static_mac: Annotated[
        Optional[StaticMacContainer],
        Field(alias='srl_nokia-bridge-table-static-mac:static-mac'),
    ] = None
    mac_table: Annotated[
        Optional[MacTableContainer3],
        Field(alias='srl_nokia-bridge-table-mac-table:mac-table'),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer33],
        Field(alias='srl_nokia-bridge-table-mac-table:statistics'),
    ] = None
    reserved_macs: Annotated[
        Optional[ReservedMacsContainer],
        Field(alias='srl_nokia-bridge-table-reserved-macs:reserved-macs'),
    ] = None


class BridgeTableContainer5(BaseModel):
    """
    Enable the Bridge Table on the connection-point and configure associated parameters
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    discard_unknown_src_mac: Annotated[
        Optional[bool],
        Field(alias='srl_nokia-network-instance:discard-unknown-src-mac'),
    ] = False
    """
    Discard frames with unknown source mac addresses

    The source mac address of the discarded frame is never learned when this command
    is enabled.
    """
    split_horizon_group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-network-instance:split-horizon-group',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Split-horizon-group created in the network-instance

    Multiple split-horizon-groups can be configured within the
    same network-instance of type mac-vrf. Only objects associated
    to different split-horizon-groups can forward packets among
    each other.
    """
    mac_limit: Annotated[
        Optional[MacLimitContainer2],
        Field(alias='srl_nokia-network-instance:mac-limit'),
    ] = None
    mac_learning: Annotated[
        Optional[MacLearningContainer2],
        Field(alias='srl_nokia-network-instance:mac-learning'),
    ] = None
    mac_duplication: Annotated[
        Optional[MacDuplicationContainer2],
        Field(alias='srl_nokia-network-instance:mac-duplication'),
    ] = None
    mac_table: Annotated[
        Optional[MacTableContainer4],
        Field(alias='srl_nokia-connection-point-bridge-table-mac-table:mac-table'),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer39],
        Field(alias='srl_nokia-connection-point-bridge-table-statistics:statistics'),
    ] = None


class CustomerSourceGroupListEntry(BaseModel):
    """
    The list of the (C-S,C-G) mapped to the Data Multicast Tunnel (MT)
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:group'),
    ] = None
    """
    Multicast group IP address
    """
    source: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:source'),
    ] = None
    """
    Source IP address
    """
    current_forwarding_rate: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:current-forwarding-rate', ge=0, le=18446744073709551615
        ),
    ] = 0
    """
    Current forwarding rate for this (C-S, C-G) entry in bps
    """
    cscg_state: Annotated[
        Optional[EnumerationEnum84], Field(alias='srl_nokia-pim:cscg-state')
    ] = None
    """
    The state of this PMSI (C-S,C-G)

    If the S-PMSI is bound to a (C-S,C-G) on the ingress PE and if the PE is allocating a PMSI, the state will be 'tx-join-pending'.
    The state will change to 'tx-joined' when the (C-S,C-G) traffic is switched over to the new S-PMSI.
    If the S-PMSI is not bound to a (C-S,C-G) on the egress PE, the state will be 'rx-not-joined'.
    The state will be 'rx-joined' if the (C-S,C-G) has bound to the S-PMSI.
    Egress PE state will be 'rx-joined-tracking' if it receives SPMSI-AD with no tunnel information.
    """
    data_rate_threshold: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:data-rate-threshold', ge=0, le=4294967295),
    ] = None
    """
    The threshold in kilobits per second (kbps) for (C-S,C-G) to switch to S-PMSI
    """
    join_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:join-timer', ge=0, le=4294967295)
    ] = None
    """
    The time interval before the Provider Edge (PE) router connected to the source, switches to the S-PMSI group

    After providing sufficient time for all PE's to join the S-PMSI, the transmitting PE switches the given multicast stream to the S-PMSI.
    The PE router connected to the source then starts encapsulating traffic using the S-PMSI group.
    """
    hold_down_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:hold-down-timer', ge=0, le=4294967295)
    ] = None
    """
    The time interval before the PE router will switch back to the Default I-PMSI after it traffic rate goes below the data-rate-threshold

    This is used to avoid (C-S, C-G) switching back and forth between SPMSI and IPMSI when traffic is bursty.
    """
    expiry_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:expiry-timer', ge=0, le=4294967295)
    ] = None
    """
    The time interval after which the Provider Edge (PE) router connected to the receivers time out SPMSI Join Tag Length Value (TLV) received and leave the S-PMSI group

    This value must be consistent among all PE routers.
    """
    up_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-pim:up-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time elapsed since this (C-S,C-G) entry was created
    """


class DataExceptionContainer(BaseModel):
    """
    Enable tracing for data events
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:group-address'),
    ] = None
    """
    The IP multicast group address for which to trace events
    """
    source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:source-address'),
    ] = None
    """
    The source address for which to trace events
    """
    detail: Annotated[Optional[bool], Field(alias='srl_nokia-pim:detail')] = False
    """
    Enable detail tracing.
    """


class DatabaseContainer(BaseModel):
    """
    Database of PIM (S,G) (*,G), (*,*,RP) for the interface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry2]], Field(alias='srl_nokia-pim:group')
    ] = None


class DatabaseContainer2(BaseModel):
    """
    Database of PIM (S,G) (*,G), (*,*,RP)
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry3]], Field(alias='srl_nokia-pim:group')
    ] = None


class DatabaseContainer3(BaseModel):
    """
    Enable tracing for db events
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:group-address'),
    ] = None
    """
    The IP multicast group address for which to trace events
    """
    source_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:source-address'),
    ] = None
    """
    The source address for which to trace events
    """
    detail: Annotated[Optional[bool], Field(alias='srl_nokia-pim:detail')] = False
    """
    Enable detail tracing.
    """


class DestinationListEntry4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tep: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:tep'
        ),
    ] = None
    """
    The IP address that identifies the remote EVPN Termination Endpoint (TEP).
    """
    evi_label: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:evi-label',
            ge=16,
            le=1048575,
        ),
    ] = None
    """
    EVI label of the destination.
    """
    tunnel_id: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:tunnel-id',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    tunnel identitier of the destination.
    """
    destination_index: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:destination-index',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    A system-wide unique identifier of this evpn-mpls destination object (system allocated).
    """
    not_programmed_reason: Annotated[
        Optional[EnumerationEnum18],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:not-programmed-reason'
        ),
    ] = None
    """
    The reason why the evpn-mpls destination is not programmed.
    """
    statistics: Annotated[
        Optional[StatisticsContainer4],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:statistics'
        ),
    ] = None
    mac_table: Annotated[
        Optional[MacTableContainer],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:mac-table'
        ),
    ] = None


class DestinationsContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mpls: Annotated[
        Optional[MplsContainer],
        Field(alias='srl_nokia-bgp-evpn-bgp-instance-vpws-destinations-remote-ac:mpls'),
    ] = None


class EsDestinationListEntry2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    esi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:esi',
            pattern='^(?=^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){9}$).*$',
        ),
    ] = None
    """
    The 10-byte Ethernet Segment Identifier of the ethernet segment.
    ESI-0 or MAX-ESI values are not allowed.
    """
    destination_index: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:destination-index',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    A system-wide unique identifier of this evpn-mpls destination object (system allocated).
    """
    destination: Annotated[
        Optional[List[DestinationListEntry5]],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:destination'
        ),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer5],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:statistics'
        ),
    ] = None
    mac_table: Annotated[
        Optional[MacTableContainer2],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:mac-table'
        ),
    ] = None


class EventTypesContainer(BaseModel):
    """
    Enable tracing for selected event types only
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    adjacency: Annotated[
        Optional[AdjacencyContainer], Field(alias='srl_nokia-pim:adjacency')
    ] = None
    assert_: Annotated[
        Optional[AssertContainer], Field(alias='srl_nokia-pim:assert')
    ] = None
    data_exception: Annotated[
        Optional[DataExceptionContainer], Field(alias='srl_nokia-pim:data-exception')
    ] = None
    database: Annotated[
        Optional[DatabaseContainer3], Field(alias='srl_nokia-pim:database')
    ] = None
    interface: Annotated[
        Optional[InterfaceContainer], Field(alias='srl_nokia-pim:interface')
    ] = None
    join_prune: Annotated[
        Optional[JoinPruneContainer], Field(alias='srl_nokia-pim:join-prune')
    ] = None
    messaging: Annotated[
        Optional[MessagingContainer], Field(alias='srl_nokia-pim:messaging')
    ] = None
    register: Annotated[
        Optional[RegisterContainer], Field(alias='srl_nokia-pim:register')
    ] = None
    pim_route_table: Annotated[
        Optional[PimRouteTableContainer], Field(alias='srl_nokia-pim:pim-route-table')
    ] = None


class EvpnContainer(BaseModel):
    """
    Options related to the EVPN address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:advertise-ipv6-next-hops')
    ] = False
    """
    Enables advertisement of EVPN routes with IPv6 next-hops to peers

    If this is set to true and the local-address used towards the peer is an IPv6 address and BGP is supposed to apply next-hop-self then the route is advertised with the IPv6 local-address as the BGP next-hop. If this is set to false, then the EVPN route is advertised with an IPv4 next-hop.
    """
    keep_all_routes: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:keep-all-routes')
    ] = False
    """
    When this is set to true all received EVPN routes are retained in the RIB-IN, even those not imported by any network-instance; these routes display as 'rejected' and cannot be propagated to other peers.

    When this is false, EVPN routes that are not imported by any network-instance are dropped and not retained in the BGP RIB-IN; policy changes affecting received EVPN routes will trigger the sending of ROUTE_REFRESH messages towards all EVPN family peers.
    """
    next_hop_resolution: Annotated[
        Optional[NextHopResolutionContainer8],
        Field(alias='srl_nokia-bgp:next-hop-resolution'),
    ] = None
    next_hop_self_route_reflector: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:next-hop-self-route-reflector')
    ] = False
    """
    When set to true, received EVPN MPLS routes are kept in the RIB and readvertised to the other route reflector clients with a local next-hop and EVI label

    This command triggers the programming of an EVI label swap operation for each received EVPN MPLS route.
    """
    inter_as_vpn: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:inter-as-vpn')
    ] = False
    """
    When set to true, received EVPN routes that are not imported by any network-instance are retained in the BGP RIB and considered 'used' so that they can be propagated to any EBGP or IBGP peer.

    This command supersedes the effect of keep-all-routes.
    """
    rapid_update: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:rapid-update')
    ] = False
    """
    When this is set to true, EVPN UPDATEs advertising reachability and withdrawals are advertised immediately, bypassing the session level min-route-advertisement-interval. When this is false, reachability updates and withdrawals are subject to the MRAI interval.
    """
    default_received_encapsulation: Annotated[
        Optional[EnumerationEnum40],
        Field(alias='srl_nokia-bgp:default-received-encapsulation'),
    ] = 'vxlan'
    """
    Indicates the encapsulation considered when the routes are received without BGP encapsulation extended community

    Most EVPN routes are usually received with a BGP encapsulation extended community that indicates the encapsulation
    and therefore how to interpret the value in the received Label fields of the routes. If no encapsulation is
    received, BGP will validate the route as MPLS or VXLAN or SRv6 depending on how this command is configured.
    """


class ExtendedIpv4ReachabilityContainer(BaseModel):
    """
    This container defines list of IPv4 extended reachability information.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefixes: Annotated[
        Optional[PrefixesContainer3], Field(alias='srl_nokia-isis:prefixes')
    ] = None


class ExtendedIsReachabilityContainer(BaseModel):
    """
    This container defines list of ISIS extended reachability neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbors: Annotated[
        Optional[NeighborsContainer3], Field(alias='srl_nokia-isis:neighbors')
    ] = None


class ExtendedIsReachabilityListEntry(BaseModel):
    """
    Each TLV encodes the identity of an adjacent IS neighbor. TLV type = 22
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:neighbor',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{2}$).*$',
        ),
    ] = None
    """
    An adjacent IS neighbor
    """
    default_metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:default-metric', ge=0, le=16777215)
    ] = None
    """
    The default metric to reach this adjacent neighbor.
    """
    sub_tlvs: Annotated[
        Optional[SubTlvsContainer], Field(alias='srl_nokia-isis:sub-tlvs')
    ] = None


class GreContainer(BaseModel):
    """
    Parameters relating to GRE encapsulation
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    source_ip: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastType]],
        Field(alias='srl_nokia-next-hop-groups:source-ip'),
    ] = None
    """
    Source IP address to use for the encapsulated packet.
    """
    destination_ip: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastType]],
        Field(alias='srl_nokia-next-hop-groups:destination-ip'),
    ] = None
    """
    Destination IP address to use for the encapsulated packet.
    """


class GroupListEntry(BaseModel):
    """
    Peer group templates
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group_name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp:group-name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The configured name of the peer group
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = 'enable'
    """
    Administratively enable or disable the peer group

    Disable will tear down all the BGP sessions in the group, even if they are administratively enabled at the neighbor level.
    """
    description: Annotated[
        Optional[str],
        Field(alias='srl_nokia-bgp:description', max_length=255, min_length=1),
    ] = None
    """
    A user provided description string for the peer group
    """
    under_maintenance: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:under-maintenance')
    ] = None
    """
    Indicates if this BGP group is in maintenance mode
    """
    maintenance_group: Annotated[
        Optional[str], Field(alias='srl_nokia-bgp:maintenance-group')
    ] = None
    """
    State field to display the maintenance group to which this group belongs to.
    """
    export_policy: Annotated[
        Optional[List[ExportPolicyLeafList3]],
        Field(alias='srl_nokia-bgp:export-policy'),
    ] = []
    """
    Apply an export policy to advertised BGP routes
    """
    import_policy: Annotated[
        Optional[List[ImportPolicyLeafList3]],
        Field(alias='srl_nokia-bgp:import-policy'),
    ] = []
    """
    Apply an import policy to received BGP routes
    """
    local_preference: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:local-preference', ge=0, le=4294967295),
    ] = None
    """
    The value of the local-preference attribute that is added to received routes from EBGP peers in the group

    It is also used to encode the local preference attribute for locally generated BGP routes.
    """
    next_hop_self: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:next-hop-self')
    ] = False
    """
    When set to true, the next-hop in all IPv4-unicast, IPv6-unicast, EVPN, VPN-IPv4 and VPN-IPv6 BGP routes advertised to all IBGP peers in the peer-group is set equal to the local-address used on each session (or to the router ID if the NLRI is IPv6 and there is no IPv6 local address to use). This is independent of the route origin (EBGP, IBGP-client, IBGP-non-client or redistributed direct/static/aggregate route).

    When set to false, normal BGP rules from RFC 4271 apply.
    """
    peer_as: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp:peer-as', ge=1, le=4294967295)
    ] = None
    """
    The autonomous system number expected from each peer in the group

    A configured session with a peer does not come up if this value does not match the AS value reported by the peer in its OPEN message.
    """
    as_path_options: Annotated[
        Optional[AsPathOptionsContainer2], Field(alias='srl_nokia-bgp:as-path-options')
    ] = None
    authentication: Annotated[
        Optional[AuthenticationContainer2], Field(alias='srl_nokia-bgp:authentication')
    ] = None
    failure_detection: Annotated[
        Optional[FailureDetectionContainer2],
        Field(alias='srl_nokia-bgp:failure-detection'),
    ] = None
    multihop: Annotated[
        Optional[MultihopContainer], Field(alias='srl_nokia-bgp:multihop')
    ] = None
    optional_attributes: Annotated[
        Optional[OptionalAttributesContainer],
        Field(alias='srl_nokia-bgp:optional-attributes'),
    ] = None
    graceful_restart: Annotated[
        Optional[GracefulRestartContainer2],
        Field(alias='srl_nokia-bgp:graceful-restart'),
    ] = None
    afi_safi: Annotated[
        Optional[List[AfiSafiListEntry2]], Field(alias='srl_nokia-bgp:afi-safi')
    ] = None
    local_as: Annotated[
        Optional[LocalAsContainer], Field(alias='srl_nokia-bgp:local-as')
    ] = None
    route_flap_damping: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:route-flap-damping')
    ] = False
    """
    Enable/disable route flap damping procedures for routes received from EBGP peers in the peer group

    This has no effect on routes received from IBGP peers within the peer group.
    """
    route_reflector: Annotated[
        Optional[RouteReflectorContainer2], Field(alias='srl_nokia-bgp:route-reflector')
    ] = None
    send_community_type: Annotated[
        Optional[List[EnumerationEnum41]],
        Field(alias='srl_nokia-bgp:send-community-type'),
    ] = []
    """
    Specify the types of community that should be sent to peers in the group.

    If value none is included in the leaf-list, then other values are ignored
    """
    send_default_route: Annotated[
        Optional[SendDefaultRouteContainer],
        Field(alias='srl_nokia-bgp:send-default-route'),
    ] = None
    timers: Annotated[
        Optional[TimersContainer], Field(alias='srl_nokia-bgp:timers')
    ] = None
    trace_options: Annotated[
        Optional[TraceOptionsContainer2], Field(alias='srl_nokia-bgp:trace-options')
    ] = None
    transport: Annotated[
        Optional[TransportContainer2], Field(alias='srl_nokia-bgp:transport')
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer7], Field(alias='srl_nokia-bgp:statistics')
    ] = None


class GroupListEntry18(BaseModel):
    """
    Multicast group membership
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp:group',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Multicast address
    """
    source: Annotated[
        Optional[List[SourceListEntry17]], Field(alias='srl_nokia-igmp:source')
    ] = None


class GroupListEntry6(BaseModel):
    """
    Multicast group membership
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld:group',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Multicast address
    """
    source: Annotated[
        Optional[List[SourceListEntry2]], Field(alias='srl_nokia-mld:source')
    ] = None


class HelloContainer(BaseModel):
    """
    Enable tracing for hello packets
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Optional[Union[AllInterfacesCase2, InterfaceNameCase2]],
        Field(alias='srl_nokia-pim:interface'),
    ] = None
    ipv4: Annotated[Optional[bool], Field(alias='srl_nokia-pim:ipv4')] = True
    """
    Enable tracing for PIM ipv4 packets
    """
    ipv6: Annotated[Optional[bool], Field(alias='srl_nokia-pim:ipv6')] = True
    """
    Enable tracing for PIM ipv6 packets
    """
    ingress: Annotated[Optional[bool], Field(alias='srl_nokia-pim:ingress')] = True
    """
    Enable tracing for received packets
    """
    egress: Annotated[Optional[bool], Field(alias='srl_nokia-pim:egress')] = True
    """
    Enable tracing for sent packets
    """


class InterLevelPropagationPoliciesContainer(BaseModel):
    """
    Container with options to control the propagation of prefixes between levels
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    level1_to_level2: Annotated[
        Optional[Level1ToLevel2Container],
        Field(alias='srl_nokia-isis:level1-to-level2'),
    ] = None


class InterfaceNameCase5(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-pim:interface-name')
    ] = None
    """
    Enable packet tracing for a specific interface
    """


class InterfaceNameCase6(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-pim:interface-name')
    ] = None
    """
    Enable packet tracing for a specific interface
    """


class InterfaceContainer2(BaseModel):
    """
    Enable tracing interface events.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Union[NameCase, AllCase], Field(alias='srl_nokia-mld:interface')
    ]


class InterfaceContainer3(BaseModel):
    """
    Enable interface filter for packets
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Union[NameCase2, AllCase2], Field(alias='srl_nokia-mld:interface')
    ]


class InterfaceContainer4(BaseModel):
    """
    Enable tracing interface events
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Union[NameCase3, AllCase3], Field(alias='srl_nokia-igmp:interface')
    ]


class InterfaceContainer5(BaseModel):
    """
    Enable interface filter for packets
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Union[NameCase4, AllCase4], Field(alias='srl_nokia-igmp:interface')
    ]


class InterfaceListEntry10(BaseModel):
    """
    List of MLD interfaces
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-mld-snooping:interface-name')
    ] = None
    """
    Reference to a specific subinterface of the form <interface-name>.<subinterface-index>
    """
    router_alert_check: Annotated[
        Optional[bool], Field(alias='srl_nokia-mld-snooping:router-alert-check')
    ] = True
    """
    Enable or disable router alert checking for MLD messages received on this interface
    """
    version: Annotated[
        Optional[int], Field(alias='srl_nokia-mld-snooping:version', ge=1, le=2)
    ] = 2
    """
    MLD Version
    """
    maximum_number_groups: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:maximum-number-groups', ge=1, le=4096),
    ] = None
    """
    Maximum number of MLD Groups for this interface
    """
    maximum_number_sources: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:maximum-number-sources', ge=1, le=512),
    ] = None
    """
    Maximum number of MLD sources per group for this interface
    """
    maximum_number_group_sources: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:maximum-number-group-sources', ge=1, le=4096
        ),
    ] = None
    """
    Maximum number of MLD group/source combinations for this interface
    """
    query_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:query-interval', ge=0, le=4294967295),
    ] = 125
    """
    Interval at which the router sends the MLD membership queries
    """
    query_last_member_interval: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:query-last-member-interval',
            ge=0,
            le=4294967295,
        ),
    ] = 1
    """
    Interval at which Group-Specific-Query packets are transmitted

    When used along with EVPN multi-homing, the result of this value multipled
    by the interface robust-count must be a value equal to or less than 25.5 seconds.
    This is due to the fact that the maximum response time field in the EVPN Multicast
    Leave Synch route has a limit of 255 units of 1/10 second, and this field encodes
    the result of [(query-last-member-interval* 10) * robust-count].

    If the result of that operation is greater than 255, the maximum response time
    in the EVPN Multicast Leave Synch route is still 255.
    """
    query_response_interval: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:query-response-interval', ge=0, le=4294967295
        ),
    ] = 10
    """
    Time to wait to receive a response to the MLD membership query from the host
    """
    robust_count: Annotated[
        Optional[int], Field(alias='srl_nokia-mld-snooping:robust-count', ge=2, le=10)
    ] = 2
    """
    Tune MLD robustness to allow for expected packet loss

    The robust-count variable allows tuning for the expected packet
    loss on a subnet. If a subnet anticipates losses, the robust-count
    variable can be increased.

    When used along with EVPN multi-homing, the result of this value multipled
    by the interface query-last-member-interval must be a value equal to or less
    than 25.5 seconds. This is due to the fact that the maximum response time
    field in the EVPN Multicast Leave Synch route has a limit of 255 units of
    1/10 second, and this field encodes the result of
    [(query-last-member-interval* 10) * robust-count].

    If the result of that operation is greater than 255, the maximum response time
    in the EVPN Multicast Leave Synch route is still 255.
    """
    fast_leave: Annotated[
        Optional[bool], Field(alias='srl_nokia-mld-snooping:fast-leave')
    ] = False
    """
    Allow MLD fast leave processing

    When enabled, the multicast state is removed immediately upon receiving an MLD
    leave message.
    """
    mrouter_port: Annotated[
        Optional[bool], Field(alias='srl_nokia-mld-snooping:mrouter-port')
    ] = False
    """
    Operate port as a multicast router port
    """
    send_queries: Annotated[
        Optional[bool], Field(alias='srl_nokia-mld-snooping:send-queries')
    ] = False
    """
    Generate MLD general queries
    """
    import_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:import-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Apply an import policy. The lenght of the policy name should not exceed 32 charachters.
    """
    static_membership_groups: Annotated[
        Optional[StaticMembershipGroupsContainer3],
        Field(alias='srl_nokia-mld-snooping:static-membership-groups'),
    ] = None
    membership_group_count: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:membership-group-count', ge=0, le=4294967295
        ),
    ] = None
    """
    The number of multicast groups which have been learned
    """
    membership_groups: Annotated[
        Optional[MembershipGroupsContainer5],
        Field(alias='srl_nokia-mld-snooping:membership-groups'),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer26],
        Field(alias='srl_nokia-mld-snooping:statistics'),
    ] = None
    is_mrouter_port: Annotated[
        Optional[bool], Field(alias='srl_nokia-mld-snooping:is-mrouter-port')
    ] = None
    """
    Interface Is a multicast router port
    """


class InterfaceListEntry12(BaseModel):
    """
    List of IGMP interfaces
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-igmp:interface-name')
    ] = None
    """
    Reference to a specific subinterface of the form <interface-name>.<subinterface-index>
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-igmp:admin-state')
    ] = 'enable'
    """
    Administratively enable or disable the IGMP protocol for this interface

    Used to administratively enable or disable the IGMP protocol on a
    routed subinterface
    """
    version: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:version', ge=1, le=3)
    ] = 3
    """
    IGMP Version
    """
    router_alert_check: Annotated[
        Optional[bool], Field(alias='srl_nokia-igmp:router-alert-check')
    ] = True
    """
    Enable or disable router alert checking for IGMP messages received on this interface
    """
    maximum_number_groups: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp:maximum-number-groups', ge=1, le=4096),
    ] = None
    """
    MAX number of IGMP Groups for this interface, 0 means no limit
    """
    maximum_number_sources: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp:maximum-number-sources', ge=1, le=512),
    ] = None
    """
    MAX number of IGMP sources per group for this interface, 0 means no limit
    """
    maximum_number_group_sources: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp:maximum-number-group-sources', ge=1, le=4096),
    ] = None
    """
    MAX number of IGMP group/source combinations for this interface, 0 means no limit
    """
    query_interval: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:query-interval', ge=0, le=4294967295)
    ] = None
    """
    Interval at which the router sends the IGMP membership queries
    """
    query_last_member_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp:query-last-member-interval', ge=0, le=4294967295),
    ] = None
    """
    Interval at which Group-Specific-Query packets are transmitted
    """
    query_response_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp:query-response-interval', ge=0, le=4294967295),
    ] = None
    """
    Time to wait to receive a response to the IGMP membership query from the host
    """
    import_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp:import-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Apply an import policy.  The lenght of the policy name should not exceed 32 charachters
    """
    ssm: Annotated[Optional[SsmContainer5], Field(alias='srl_nokia-igmp:ssm')] = None
    static_membership_groups: Annotated[
        Optional[StaticMembershipGroupsContainer4],
        Field(alias='srl_nokia-igmp:static-membership-groups'),
    ] = None
    subnet_check: Annotated[
        Optional[bool], Field(alias='srl_nokia-igmp:subnet-check')
    ] = True
    """
    This command enables subnet checking for IGMP messages received on this interface

    All IGMP packets with a source address that is not in the local subnet are dropped.
    """
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-igmp:oper-state')
    ] = None
    """
    The operational state of the IGMP interface. This simply tracks the operational state of the subinterface
    """
    oper_version: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:oper-version', ge=1, le=3)
    ] = None
    """
    The operational IGMP version on this interface
    """
    querier: Annotated[
        Optional[QuerierContainer4], Field(alias='srl_nokia-igmp:querier')
    ] = None
    group_count: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:group-count', ge=0, le=4294967295)
    ] = None
    """
    The number of multicast groups which have been learned on this interface
    """
    membership_groups: Annotated[
        Optional[MembershipGroupsContainer8],
        Field(alias='srl_nokia-igmp:membership-groups'),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer30], Field(alias='srl_nokia-igmp:statistics')
    ] = None


class InterfaceListEntry13(BaseModel):
    """
    List of Provider Tunnel Interface used in L3 Multicast VPN as Inclusive PMSI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[Optional[str], Field(alias='srl_nokia-mvpn-l3:name')] = None
    """
    Provider Tunnel Interface name
    """
    pmsi_type: Annotated[
        Optional[EnumerationEnum83], Field(alias='srl_nokia-mvpn-l3:pmsi-type')
    ] = None
    """
    Provider tunnel multicast tunnel type
    """
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-mvpn-l3:oper-state')
    ] = None
    """
    The operational state of the destination PMSI.
    """
    mldp: Annotated[Optional[MldpContainer2], Field(alias='srl_nokia-mvpn-l3:mldp')] = (
        None
    )


class InterfaceListEntry14(BaseModel):
    """
    List of Provider Tunnel Interface used in L3 Multicast VPN as Inclusive PMSI
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[Optional[str], Field(alias='srl_nokia-mvpn-l3:name')] = None
    """
    Provider Tunnel Interface name
    """
    pmsi_type: Annotated[
        Optional[EnumerationEnum83], Field(alias='srl_nokia-mvpn-l3:pmsi-type')
    ] = None
    """
    Provider tunnel multicast tunnel type
    """
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-mvpn-l3:oper-state')
    ] = None
    """
    The operational state of the destination PMSI.
    """
    mldp: Annotated[Optional[MldpContainer4], Field(alias='srl_nokia-mvpn-l3:mldp')] = (
        None
    )


class InterfaceListEntry3(BaseModel):
    """
    List of PIM interfaces
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-pim:interface-name')
    ] = None
    """
    Reference to a specific subinterface of the form <interface-name>.<subinterface-index>
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-pim:admin-state')
    ] = 'enable'
    """
    Administratively enable or disable the PIM protocol for this interface
    """
    ipv4_admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-pim:ipv4-admin-state')
    ] = 'enable'
    """
    Administratively enable or disable PIM IPv4 address family
    """
    ipv6_admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-pim:ipv6-admin-state')
    ] = 'enable'
    """
    Administratively enable or disable PIM IPv6 address family
    """
    maximum_number_groups: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pim:maximum-number-groups', ge=1, le=16000),
    ] = None
    """
    Limit the number of accepted (S, G) and (*, G) PIM join states on the interface
    """
    assert_interval: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:assert-interval', ge=1, le=300)
    ] = 60
    """
    Interval at which the router sends PIM assert messages
    """
    hello_interval: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:hello-interval', ge=0, le=255)
    ] = 30
    """
    Interval at which the router sends the PIM hello messages
    """
    improved_assert: Annotated[
        Optional[bool], Field(alias='srl_nokia-pim:improved-assert')
    ] = True
    """
    Whether the improved assert processing is enabled.
    """
    hello_multiplier: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:hello-multiplier', ge=20, le=100)
    ] = 35
    """
    Number of hello multiplier to determine the hold time

    This command configures the multiplier to determine the holdtime for a PIM neighbor on this interface.
    The hello-multiplier in conjunction with the hello-interval determines the holdtime for a PIM neighbor.
    The formula used to calculate the hello-holdtime is: (hello-interval * hello-multiplier) / 10.
    """
    dr_priority: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:dr-priority', ge=0, le=4294967295)
    ] = 1
    """
    Designated Router (DR) priority value on this interface

    The value of this object specifies the value sent in PIM Hello messages and used by routers to elect the Designated Router (DR).
    """
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-pim:oper-state')
    ] = None
    """
    The operational state of the PIM interface

    This simply tracks the operational state of the subinterface.
    """
    ipv4: Annotated[Optional[Ipv4Container2], Field(alias='srl_nokia-pim:ipv4')] = None
    ipv6: Annotated[Optional[Ipv6Container2], Field(alias='srl_nokia-pim:ipv6')] = None
    neighbors: Annotated[
        Optional[NeighborsContainer], Field(alias='srl_nokia-pim:neighbors')
    ] = None
    database: Annotated[
        Optional[DatabaseContainer], Field(alias='srl_nokia-pim:database')
    ] = None


class InterfaceListEntry4(BaseModel):
    """
    List of MLD interfaces
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-mld:interface-name')
    ] = None
    """
    Reference to a specific subinterface of the form <interface-name>.<subinterface-index>
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-mld:admin-state')
    ] = 'enable'
    """
    Administratively enable or disable the MLD protocol for this interface

    Used to administratively enable or disable the MLD protocol on a
    routed subinterface
    """
    version: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:version', ge=1, le=2)
    ] = 2
    """
    MLD Version
    """
    router_alert_check: Annotated[
        Optional[bool], Field(alias='srl_nokia-mld:router-alert-check')
    ] = True
    """
    Enable or disable router alert checking for MLD messages received on this interface
    """
    maximum_number_groups: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:maximum-number-groups', ge=1, le=4096)
    ] = None
    """
    MAX number of MLD Groups for this interface, 0 means no limit
    """
    maximum_number_sources: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:maximum-number-sources', ge=1, le=512)
    ] = None
    """
    MAX number of MLD sources per group for this interface, 0 means no limit
    """
    maximum_number_group_sources: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld:maximum-number-group-sources', ge=1, le=4096),
    ] = None
    """
    MAX number of MLD group/source combinations for this interface, 0 means no limit
    """
    query_interval: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:query-interval', ge=0, le=4294967295)
    ] = None
    """
    Interval at which the router sends the mld membership queries
    """
    query_last_member_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld:query-last-member-interval', ge=0, le=4294967295),
    ] = None
    """
    Interval at which Group-Specific-Query packets are transmitted
    """
    query_response_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld:query-response-interval', ge=0, le=4294967295),
    ] = None
    """
    Time to wait to receive a response to the MLD membership query from the host
    """
    import_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld:import-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Apply an import policy.  The lenght of the policy name should not exceed 32 charachters
    """
    ssm: Annotated[Optional[SsmContainer3], Field(alias='srl_nokia-mld:ssm')] = None
    static_membership_groups: Annotated[
        Optional[StaticMembershipGroupsContainer],
        Field(alias='srl_nokia-mld:static-membership-groups'),
    ] = None
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-mld:oper-state')
    ] = None
    """
    The operational state of the MLD interface. This simply tracks the operational state of the subinterface
    """
    oper_version: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:oper-version', ge=1, le=2)
    ] = None
    """
    The operational MLD version on this interface
    """
    querier: Annotated[
        Optional[QuerierContainer], Field(alias='srl_nokia-mld:querier')
    ] = None
    group_count: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:group-count', ge=0, le=4294967295)
    ] = None
    """
    The number of multicast groups which have been learned on this interface
    """
    membership_groups: Annotated[
        Optional[MembershipGroupsContainer2],
        Field(alias='srl_nokia-mld:membership-groups'),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer13], Field(alias='srl_nokia-mld:statistics')
    ] = None


class InterfaceListEntry8(BaseModel):
    """
    List of IGMP interfaces
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-igmp-snooping:interface-name')
    ] = None
    """
    Reference to a specific subinterface of the form <interface-name>.<subinterface-index>
    """
    router_alert_check: Annotated[
        Optional[bool], Field(alias='srl_nokia-igmp-snooping:router-alert-check')
    ] = True
    """
    Enable or disable router alert checking for IGMP messages received on this interface
    """
    version: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp-snooping:version', ge=1, le=3)
    ] = 3
    """
    IGMP Version
    """
    maximum_number_groups: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:maximum-number-groups', ge=1, le=4096),
    ] = None
    """
    Maximum number of IGMP Groups for this interface
    """
    maximum_number_sources: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:maximum-number-sources', ge=1, le=512),
    ] = None
    """
    Maximum number of IGMP sources per group for this interface
    """
    maximum_number_group_sources: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:maximum-number-group-sources', ge=1, le=4096
        ),
    ] = None
    """
    Maximum number of IGMP group/source combinations for this interface
    """
    query_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:query-interval', ge=0, le=4294967295),
    ] = 125
    """
    Interval at which the router sends the IGMP membership queries
    """
    query_last_member_interval: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:query-last-member-interval',
            ge=0,
            le=4294967295,
        ),
    ] = 1
    """
    Interval at which Group-Specific-Query packets are transmitted

    When used along with EVPN multi-homing, the result of this value multipled
    by the interface robust-count must be a value equal to or less than 25.5 seconds.
    This is due to the fact that the maximum response time field in the EVPN Multicast
    Leave Synch route has a limit of 255 units of 1/10 second, and this field encodes
    the result of [(query-last-member-interval* 10) * robust-count].

    If the result of that operation is greater than 255, the maximum response time
    in the EVPN Multicast Leave Synch route is still 255.
    """
    query_response_interval: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:query-response-interval', ge=0, le=4294967295
        ),
    ] = 10
    """
    Time to wait to receive a response to the IGMP membership query from the host
    """
    robust_count: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp-snooping:robust-count', ge=2, le=10)
    ] = 2
    """
    Tune IGMP robustness to allow for expected packet loss

    The robust-count variable allows tuning for the expected packet
    loss on a subnet. If a subnet anticipates losses, the robust-count
    variable can be increased.

    When used along with EVPN multi-homing, the result of this value multipled
    by the interface query-last-member-interval must be a value equal to or less
    than 25.5 seconds. This is due to the fact that the maximum response time
    field in the EVPN Multicast Leave Synch route has a limit of 255 units of
    1/10 second, and this field encodes the result of
    [(query-last-member-interval* 10) * robust-count].

    If the result of that operation is greater than 255, the maximum response time
    in the EVPN Multicast Leave Synch route is still 255.
    """
    fast_leave: Annotated[
        Optional[bool], Field(alias='srl_nokia-igmp-snooping:fast-leave')
    ] = False
    """
    Allow IGMP fast leave processing

    When enabled, the multicast state is removed immediately upon receiving an IGMP
    leave message.
    """
    mrouter_port: Annotated[
        Optional[bool], Field(alias='srl_nokia-igmp-snooping:mrouter-port')
    ] = False
    """
    Operate port as a multicast router port
    """
    send_queries: Annotated[
        Optional[bool], Field(alias='srl_nokia-igmp-snooping:send-queries')
    ] = False
    """
    Generate IGMP general queries
    """
    import_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:import-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Apply an import policy. The lenght of the policy name should not exceed 32 charachters.
    """
    static_membership_groups: Annotated[
        Optional[StaticMembershipGroupsContainer2],
        Field(alias='srl_nokia-igmp-snooping:static-membership-groups'),
    ] = None
    membership_group_count: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:membership-group-count', ge=0, le=4294967295
        ),
    ] = None
    """
    The number of multicast groups which have been learned
    """
    membership_groups: Annotated[
        Optional[MembershipGroupsContainer3],
        Field(alias='srl_nokia-igmp-snooping:membership-groups'),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer24],
        Field(alias='srl_nokia-igmp-snooping:statistics'),
    ] = None
    is_mrouter_port: Annotated[
        Optional[bool], Field(alias='srl_nokia-igmp-snooping:is-mrouter-port')
    ] = None
    """
    Interface is a multicast router port
    """


class IpContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ip_address: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-te-policies:ip-address'),
    ] = None
    """
    An IPv4 or IPv6 address that is a hop to be visited on the way to the destination
    """
    hop_type: Annotated[
        Optional[EnumerationEnum376], Field(alias='srl_nokia-te-policies:hop-type')
    ] = 'loose'


class Ipv4ExternalReachabilityContainer(BaseModel):
    """
    This container defines list of IPv4 external reachability information.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefixes: Annotated[
        Optional[PrefixesContainer2], Field(alias='srl_nokia-isis:prefixes')
    ] = None


class Ipv4InternalReachabilityContainer(BaseModel):
    """
    This container defines list of IPv4 internal reachability information.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefixes: Annotated[
        Optional[PrefixesContainer], Field(alias='srl_nokia-isis:prefixes')
    ] = None


class Ipv4LabeledUnicastContainer(BaseModel):
    """
    Options related to the labeled IPv4-unicast address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertise_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:advertise-ipv6-next-hops')
    ] = False
    """
    Enables advertisement of IPv4 routes with IPv6 next-hops
    """
    receive_ipv6_next_hops: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:receive-ipv6-next-hops')
    ] = False
    """
    Enables the advertisement of the RFC 8950 capability to receive IPv4 routes with IPv6 next-hops

    When set to true, BGP advertises an extended NH encoding (RFC 8950) capability to its peers. This capability indicates that local router is prepared to accept BGP routes for the AFI/SAFI with IPv6 next-hops from  peers in the scope of the command. When set to false, BGP handles received AFI/SAFI routes with IPv6 next-hops as an error and applies treat-as-withdraw.
    """
    backup_paths: Annotated[
        Optional[BackupPathsContainer2], Field(alias='srl_nokia-bgp:backup-paths')
    ] = None
    convergence: Annotated[
        Optional[ConvergenceContainer3], Field(alias='srl_nokia-bgp:convergence')
    ] = None
    next_hop_resolution: Annotated[
        Optional[NextHopResolutionContainer5],
        Field(alias='srl_nokia-bgp:next-hop-resolution'),
    ] = None
    rapid_update: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:rapid-update')
    ] = False
    """
    When true, label-ipv4 update messages are advertised immediately, bypassing the MRAI

    When this is false, reachability updates and withdrawals are subject to the MRAI interval.
    """


class Ipv4UnicastContainer7(BaseModel):
    """
    The container for the IPv4 unicast routing table of the network instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry]], Field(alias='srl_nokia-ip-route-tables:route')
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer34],
        Field(alias='srl_nokia-ip-route-tables:statistics'),
    ] = None
    route_summary: Annotated[
        Optional[RouteSummaryContainer],
        Field(alias='srl_nokia-ip-route-tables:route-summary'),
    ] = None


class Ipv6LabeledUnicastContainer(BaseModel):
    """
    Options related to the labeled IPv6-unicast address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    backup_paths: Annotated[
        Optional[BackupPathsContainer4], Field(alias='srl_nokia-bgp:backup-paths')
    ] = None
    convergence: Annotated[
        Optional[ConvergenceContainer6], Field(alias='srl_nokia-bgp:convergence')
    ] = None
    next_hop_resolution: Annotated[
        Optional[NextHopResolutionContainer7],
        Field(alias='srl_nokia-bgp:next-hop-resolution'),
    ] = None
    rapid_update: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:rapid-update')
    ] = False
    """
    When true, label-ipv6 update messages are advertised immediately, bypassing the MRAI

    When this is false, reachability updates and withdrawals are subject to the MRAI interval.
    """


class Ipv6ReachabilityContainer(BaseModel):
    """
    This container defines list of IPv6 reachability information.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefixes: Annotated[
        Optional[PrefixesContainer4], Field(alias='srl_nokia-isis:prefixes')
    ] = None


class Ipv6UnicastContainer7(BaseModel):
    """
    The container for the IPv6 unicast routing table of the network instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route: Annotated[
        Optional[List[RouteListEntry2]], Field(alias='srl_nokia-ip-route-tables:route')
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer35],
        Field(alias='srl_nokia-ip-route-tables:statistics'),
    ] = None
    route_summary: Annotated[
        Optional[RouteSummaryContainer2],
        Field(alias='srl_nokia-ip-route-tables:route-summary'),
    ] = None


class IsReachabilityContainer(BaseModel):
    """
    This container describes list of ISIS neighbors and attributes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbors: Annotated[
        Optional[NeighborsContainer2], Field(alias='srl_nokia-isis:neighbors')
    ] = None


class IsisNeighborAttributeContainer(BaseModel):
    """
    This container defines list of ISIS topology neighbors for extended ISIS LSP (multiple system IDs).
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbors: Annotated[
        Optional[NeighborsContainer4], Field(alias='srl_nokia-isis:neighbors')
    ] = None


class JoinPruneContainer2(BaseModel):
    """
    Enable tracing for join-prune packets
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Optional[Union[AllInterfacesCase5, InterfaceNameCase5]],
        Field(alias='srl_nokia-pim:interface'),
    ] = None
    ipv4: Annotated[Optional[bool], Field(alias='srl_nokia-pim:ipv4')] = True
    """
    Enable tracing for PIM ipv4 packets
    """
    ipv6: Annotated[Optional[bool], Field(alias='srl_nokia-pim:ipv6')] = True
    """
    Enable tracing for PIM ipv6 packets
    """
    ingress: Annotated[Optional[bool], Field(alias='srl_nokia-pim:ingress')] = True
    """
    Enable tracing for received packets
    """
    egress: Annotated[Optional[bool], Field(alias='srl_nokia-pim:egress')] = True
    """
    Enable tracing for sent packets
    """


class LevelListEntry(BaseModel):
    """
    List of IS-IS levels supported by this interface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    level_number: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:level-number', ge=1, le=2)
    ] = None
    """
    Specifies the IS-IS protocol level to which these attributes are applied.
    """
    disable: Annotated[Optional[bool], Field(alias='srl_nokia-isis:disable')] = False
    """
    Disable the Level for the interface.
    """
    ipv6_unicast_metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:ipv6-unicast-metric', ge=0, le=16777215),
    ] = None
    """
    Specifies the interface metric associated with the IPv6-unicast multi-topology.
    The default is based on reference-bandwidth, or else if this is not configured the default is 10.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:metric', ge=0, le=16777215)
    ] = None
    """
    Specifies the interface metric associated with the native routing topology.
    The default is based on reference-bandwidth, or else if this is not configured the default is 10.
    """
    priority: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:priority', ge=0, le=127)
    ] = 64
    """
    ISIS neighbor priority for becoming Designated IS (LAN hello PDU only).
    """
    passive: Annotated[Optional[bool], Field(alias='srl_nokia-isis:passive')] = None
    """
    When set to true the interface is configured as a passive interface for this level and does not send IIH PDUs or try to form an adjacency with other routers.
    """
    timers: Annotated[
        Optional[TimersContainer5], Field(alias='srl_nokia-isis:timers')
    ] = None
    authentication: Annotated[
        Optional[AuthenticationContainer5], Field(alias='srl_nokia-isis:authentication')
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer21], Field(alias='srl_nokia-isis:statistics')
    ] = None


class LocalRibContainer7(BaseModel):
    """
    Container for local RIB state of EVPN routes

    Includes the post import-policy RIB-INs corresponding to EVPN routes received from default net-instance BGP peers
    (post import-policy means after processing by the BGP import policy attached to the default net-instance peer and
    after processing by the vrf-import policy of importing network instances) plus the post vrf-export policy “imported”
    routes from local network instances.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ethernet_ad_route: Annotated[
        Optional[List[EthernetAdRouteListEntry]],
        Field(alias='srl_nokia-rib-bgp:ethernet-ad-route'),
    ] = None
    mac_ip_route: Annotated[
        Optional[List[MacIpRouteListEntry]],
        Field(alias='srl_nokia-rib-bgp:mac-ip-route'),
    ] = None
    imet_route: Annotated[
        Optional[List[ImetRouteListEntry]], Field(alias='srl_nokia-rib-bgp:imet-route')
    ] = None
    ethernet_segment_route: Annotated[
        Optional[List[EthernetSegmentRouteListEntry]],
        Field(alias='srl_nokia-rib-bgp:ethernet-segment-route'),
    ] = None
    ip_prefix_route: Annotated[
        Optional[List[IpPrefixRouteListEntry]],
        Field(alias='srl_nokia-rib-bgp:ip-prefix-route'),
    ] = None
    smet_route: Annotated[
        Optional[List[SmetRouteListEntry]], Field(alias='srl_nokia-rib-bgp:smet-route')
    ] = None
    multicast_membership_report_synch_route: Annotated[
        Optional[List[MulticastMembershipReportSynchRouteListEntry]],
        Field(alias='srl_nokia-rib-bgp:multicast-membership-report-synch-route'),
    ] = None
    multicast_leave_synch_route: Annotated[
        Optional[List[MulticastLeaveSynchRouteListEntry]],
        Field(alias='srl_nokia-rib-bgp:multicast-leave-synch-route'),
    ] = None


class MembershipGroupsContainer(BaseModel):
    """
    List of MLD Membership information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry6]], Field(alias='srl_nokia-mld:group')
    ] = None


class MembershipGroupsContainer7(BaseModel):
    """
    List of IGMP Membership information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry18]], Field(alias='srl_nokia-igmp:group')
    ] = None


class MldSnoopingContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-mld-snooping:admin-state')
    ] = 'disable'
    """
    Administratively enable or disable the MLD instance
    """
    query_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld-snooping:query-interval', ge=0, le=4294967295),
    ] = 125
    """
    Interval at which the router sends the MLD membership queries
    """
    robust_count: Annotated[
        Optional[int], Field(alias='srl_nokia-mld-snooping:robust-count', ge=1, le=255)
    ] = 2
    """
    Configures the MLD robustness to allow for the expected MLD packet loss

    The robust-count variable allows tuning for the expected packet
    loss on a subnet. If a subnet anticipates losses, the robust-count
    variable can be increased.
    """
    query_source_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:query-source-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Source IP address used when generating MLD queries
    """
    report_source_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-mld-snooping:report-source-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Source IP address used when generating MLD reports
    """
    trace_options: Annotated[
        Optional[TraceOptionsContainer15],
        Field(alias='srl_nokia-mld-snooping:trace-options'),
    ] = None
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-mld-snooping:oper-state')
    ] = None
    """
    Used to report operational state of the MLD instance
    """
    transmitted_bgp_smet_routes: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:transmitted-bgp-smet-routes',
            ge=0,
            le=4294967295,
        ),
    ] = None
    """
    Transmitted BGP SMET routes
    """
    querier: Annotated[
        Optional[QuerierContainer3], Field(alias='srl_nokia-mld-snooping:querier')
    ] = None
    multicast_routers: Annotated[
        Optional[List[MulticastRoutersListEntry2]],
        Field(alias='srl_nokia-mld-snooping:multicast-routers'),
    ] = None
    proxy_membership_group_count: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:proxy-membership-group-count',
            ge=0,
            le=4294967295,
        ),
    ] = None
    """
    The number of multicast groups which have been learned
    """
    proxy_evpn_membership_group_count: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-mld-snooping:proxy-evpn-membership-group-count',
            ge=0,
            le=4294967295,
        ),
    ] = None
    """
    The number of multicast groups in proxy-evpn-membership-groups
    """
    proxy_membership_groups: Annotated[
        Optional[ProxyMembershipGroupsContainer2],
        Field(alias='srl_nokia-mld-snooping:proxy-membership-groups'),
    ] = None
    proxy_evpn_membership_groups: Annotated[
        Optional[ProxyEvpnMembershipGroupsContainer2],
        Field(alias='srl_nokia-mld-snooping:proxy-evpn-membership-groups'),
    ] = None
    interface: Annotated[
        Optional[List[InterfaceListEntry10]],
        Field(alias='srl_nokia-mld-snooping:interface'),
    ] = None
    vxlan_destination: Annotated[
        Optional[List[VxlanDestinationListEntry2]],
        Field(alias='srl_nokia-mld-snooping:vxlan-destination'),
    ] = None


class MldpListEntry(BaseModel):
    """
    List of mLDP S-PMSI tunnels
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    root_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-pim:root-address'),
    ] = None
    """
    The extended tunnel address for the PMSI
    """
    lsp_id: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:lsp-id', ge=0, le=4294967295)
    ] = None
    """
    LSP Identifier for the S-PMSI
    """
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-pim:interface-name')
    ] = None
    """
    Interface name of the S-PMSI
    """
    interface_type: Annotated[
        Optional[EnumerationEnum83], Field(alias='srl_nokia-pim:interface-type')
    ] = None
    """
    PMSI tunnel type, either receiver or transmitter
    """
    customer_source_group: Annotated[
        Optional[List[CustomerSourceGroupListEntry]],
        Field(alias='srl_nokia-pim:customer-source-group'),
    ] = None


class MtIpv4ReachabilityContainer(BaseModel):
    """
    This container defines list of IPv4 reachability Information in multi-topology environment.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefixes: Annotated[
        Optional[PrefixesContainer5], Field(alias='srl_nokia-isis:prefixes')
    ] = None


class MtIpv6ReachabilityContainer(BaseModel):
    """
    This container defines list of IPv6 reachability information in multi - topology environment.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefixes: Annotated[
        Optional[PrefixesContainer6], Field(alias='srl_nokia-isis:prefixes')
    ] = None


class MtIsReachabilityListEntry(BaseModel):
    """
    Each TLV encodes the identity of an adjacent IS neighbor in a specific topology. TLV type = 222
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbor: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:neighbor',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{2}$).*$',
        ),
    ] = None
    """
    An adjacent IS neighbor
    """
    mt_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:mt-id', ge=0, le=4095)
    ] = None
    """
    A multi-topology ID.
    """
    default_metric: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:default-metric', ge=0, le=16777215)
    ] = None
    """
    The default metric to reach this adjacent neighbor.
    """
    sub_tlvs: Annotated[
        Optional[SubTlvsContainer4], Field(alias='srl_nokia-isis:sub-tlvs')
    ] = None


class MtIsisNeighborAttributeContainer(BaseModel):
    """
    This container defines list of ISIS multi-topology neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbors: Annotated[
        Optional[NeighborsContainer6], Field(alias='srl_nokia-isis:neighbors')
    ] = None


class MtIsnContainer(BaseModel):
    """
    This container defines list of ISIS multi-topology neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    neighbors: Annotated[
        Optional[NeighborsContainer5], Field(alias='srl_nokia-isis:neighbors')
    ] = None


class MulticastForwardingInformationBaseContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    multicast_route: Annotated[
        Optional[List[MulticastRouteListEntry]],
        Field(alias='srl_nokia-multicast-mfib-tables:multicast-route'),
    ] = None


class NexthopListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    index: Annotated[
        Optional[int], Field(alias='srl_nokia-next-hop-groups:index', ge=0, le=65535)
    ] = None
    """
    Numerical index of the next-hop member
    """
    ip_address: Annotated[
        Optional[Union[Ipv4AddressWithZoneType, Ipv6AddressWithZoneType]],
        Field(alias='srl_nokia-next-hop-groups:ip-address'),
    ] = None
    """
    The next-hop IPv4 or IPv6 address

    If the IPv6 address is a link-local address then the zoned format must be used
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-next-hop-groups:admin-state')
    ] = 'enable'
    """
    Administratively enable or disable this next-hop.
    """
    resolve: Annotated[
        Optional[bool], Field(alias='srl_nokia-next-hop-groups:resolve')
    ] = True
    """
    When set to true, the router is allowed to use any route to resolve the nexthop address to an outgoing interface

    When set to false the router is only allowed to use a local route to resolve the next-hop address.
    """
    pushed_mpls_label_stack: Annotated[
        Optional[List[Union[MplsLabelNonReservedType, EnumerationEnum95]]],
        Field(alias='srl_nokia-next-hop-groups:pushed-mpls-label-stack'),
    ] = []
    """
    A list of MPLS labels to push onto the packet when forwarding to this particular next-hop

    Default is none/empty. Pushing an MPLS label stack is not supported unless the resolve flag is set to false.
    """
    failure_detection: Annotated[
        Optional[FailureDetectionContainer5],
        Field(alias='srl_nokia-next-hop-groups:failure-detection'),
    ] = None
    encapsulate_header: Annotated[
        Optional[EnumerationEnum320],
        Field(alias='srl_nokia-next-hop-groups:encapsulate-header'),
    ] = None
    """
    When forwarding a packet to the specified next-hop the local system performs an encapsulation of the packet, adding the specified header type
    """
    gre: Annotated[
        Optional[GreContainer], Field(alias='srl_nokia-next-hop-groups:gre')
    ] = None


class OpaqueLsaContainer(BaseModel):
    """
    Contents of the opaque LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    scope: Annotated[
        Optional[EnumerationEnum217], Field(alias='srl_nokia-ospf:scope')
    ] = None
    """
    The scope of the opaque LSA. The type of the LSA
    indicates its scope - the value of this leaf
    determines both the flooding domain, and the type
    of the LSA.
    """
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The Opaque Type of the LSA. This value is used to
    indicate the type of data carried by the opaque LSA
    """
    grace_lsa: Annotated[
        Optional[GraceLsaContainer], Field(alias='srl_nokia-ospf:grace-lsa')
    ] = None
    router_information: Annotated[
        Optional[RouterInformationContainer],
        Field(alias='srl_nokia-ospf:router-information'),
    ] = None
    extended_prefix: Annotated[
        Optional[ExtendedPrefixContainer], Field(alias='srl_nokia-ospf:extended-prefix')
    ] = None
    extended_link: Annotated[
        Optional[ExtendedLinkContainer], Field(alias='srl_nokia-ospf:extended-link')
    ] = None
    unknown_tlv: Annotated[
        Optional[UnknownTlvContainer5], Field(alias='srl_nokia-ospf:unknown-tlv')
    ] = None


class OpaqueLsaContainer2(BaseModel):
    """
    Contents of the opaque LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    scope: Annotated[
        Optional[EnumerationEnum231], Field(alias='srl_nokia-ospf:scope')
    ] = None
    """
    The scope of the opaque LSA. The type of the LSA
    indicates its scope - the value of this leaf
    determines both the flooding domain, and the type
    of the LSA.
    """
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The Opaque Type of the LSA. This value is used to
    indicate the type of data carried by the opaque LSA
    """
    grace_lsa: Annotated[
        Optional[GraceLsaContainer2], Field(alias='srl_nokia-ospf:grace-lsa')
    ] = None
    router_information: Annotated[
        Optional[RouterInformationContainer2],
        Field(alias='srl_nokia-ospf:router-information'),
    ] = None
    extended_prefix: Annotated[
        Optional[ExtendedPrefixContainer2],
        Field(alias='srl_nokia-ospf:extended-prefix'),
    ] = None
    extended_link: Annotated[
        Optional[ExtendedLinkContainer2], Field(alias='srl_nokia-ospf:extended-link')
    ] = None
    unknown_tlv: Annotated[
        Optional[UnknownTlvContainer10], Field(alias='srl_nokia-ospf:unknown-tlv')
    ] = None


class OpaqueLsaContainer3(BaseModel):
    """
    Contents of the opaque LSA
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    scope: Annotated[
        Optional[EnumerationEnum239], Field(alias='srl_nokia-ospf:scope')
    ] = None
    """
    The scope of the opaque LSA. The type of the LSA
    indicates its scope - the value of this leaf
    determines both the flooding domain, and the type
    of the LSA.
    """
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The Opaque Type of the LSA. This value is used to
    indicate the type of data carried by the opaque LSA
    """
    grace_lsa: Annotated[
        Optional[GraceLsaContainer3], Field(alias='srl_nokia-ospf:grace-lsa')
    ] = None
    router_information: Annotated[
        Optional[RouterInformationContainer3],
        Field(alias='srl_nokia-ospf:router-information'),
    ] = None
    extended_prefix: Annotated[
        Optional[ExtendedPrefixContainer3],
        Field(alias='srl_nokia-ospf:extended-prefix'),
    ] = None
    extended_link: Annotated[
        Optional[ExtendedLinkContainer3], Field(alias='srl_nokia-ospf:extended-link')
    ] = None
    unknown_tlv: Annotated[
        Optional[UnknownTlvContainer15], Field(alias='srl_nokia-ospf:unknown-tlv')
    ] = None


class PacketContainer2(BaseModel):
    """
    Trace MLD Packet types
    Only one type can be enabled at a time
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Optional[InterfaceContainer3], Field(alias='srl_nokia-mld:interface')
    ] = None
    type: Annotated[Optional[EnumerationEnum87], Field(alias='srl_nokia-mld:type')] = (
        None
    )
    modifier: Annotated[
        Optional[EnumerationEnum88], Field(alias='srl_nokia-mld:modifier')
    ] = 'egress-ingress-and-dropped'


class PacketContainer7(BaseModel):
    """
    Trace IGMP Packet types
    Only one type can be enabled at a time
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Optional[InterfaceContainer5], Field(alias='srl_nokia-igmp:interface')
    ] = None
    type: Annotated[
        Optional[EnumerationEnum263], Field(alias='srl_nokia-igmp:type')
    ] = None
    modifier: Annotated[
        Optional[EnumerationEnum264], Field(alias='srl_nokia-igmp:modifier')
    ] = 'egress-ingress-and-dropped'


class PeerListEntry2(BaseModel):
    """
    List of LDP peers towards which IPv4 address bindings have been sent
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsr_id: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-ldp:lsr-id'),
    ] = None
    """
    The LSR ID of the peer, as a portion of the peer LDP ID
    """
    label_space_id: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:label-space-id', ge=0, le=65535)
    ] = None
    """
    The Label Space ID of the peer, as a portion of the peer LDP ID
    """
    ip_address: Annotated[
        Optional[List[IpAddressLeafList2]], Field(alias='srl_nokia-ldp:ip-address')
    ] = []
    """
    The list of IPv4 address bindings sent to the peer
    """


class PeerListEntry3(BaseModel):
    """
    List of LDP peers from which IPv6 address bindings have been received
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsr_id: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-ldp:lsr-id'),
    ] = None
    """
    The LSR ID of the peer, as a portion of the peer LDP ID
    """
    label_space_id: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:label-space-id', ge=0, le=65535)
    ] = None
    """
    The Label Space ID of the peer, as a portion of the peer LDP ID
    """
    ip_address: Annotated[
        Optional[List[IpAddressLeafList3]], Field(alias='srl_nokia-ldp:ip-address')
    ] = []
    """
    The list of IPv6 address bindings received from the peer
    """


class PeerListEntry4(BaseModel):
    """
    List of LDP peers towards which IPv6 address bindings have been sent
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsr_id: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-ldp:lsr-id'),
    ] = None
    """
    The LSR ID of the peer, as a portion of the peer LDP ID
    """
    label_space_id: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:label-space-id', ge=0, le=65535)
    ] = None
    """
    The Label Space ID of the peer, as a portion of the peer LDP ID
    """
    ip_address: Annotated[
        Optional[List[IpAddressLeafList4]], Field(alias='srl_nokia-ldp:ip-address')
    ] = []
    """
    The list of IPv6 address bindings sent to the peer
    """


class PeerListEntry5(BaseModel):
    """
    List of peers
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsr_id: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-ldp:lsr-id'),
    ] = None
    """
    The LSR ID of the peer, to identify the globally unique LSR. This leaf is used together with the leaf 'label-space-id' to form the LDP ID
    """
    label_space_id: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:label-space-id', ge=0, le=65535)
    ] = None
    """
    The Label Space ID of the peer, to identify a specific label space within the LSR. This is the last two octets of the LDP ID. This leaf is used together with the leaf 'lsr-id' to form the LDP ID
    """
    tcp_transport: Annotated[
        Optional[TcpTransportContainer], Field(alias='srl_nokia-ldp:tcp-transport')
    ] = None
    trace_options: Annotated[
        Optional[TraceOptionsContainer10], Field(alias='srl_nokia-ldp:trace-options')
    ] = None
    fec_limit: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:fec-limit', ge=0, le=4294967295)
    ] = 0
    """
    The maximum number of FECs of all types combined that will be accepted from the peer

    The value 0 implies no limit
    """
    fec_limit_exceeded: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:fec-limit-exceeded')
    ] = None
    """
    Reads true when the peer has sent more FECs than the configured limit
    """
    adv_local_lsr_id: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:adv-local-lsr-id')
    ] = False
    """
    When set to true, the FEC for the local LSR ID is advertised.

    When set to false, the FEC for the local LSR ID is not advertised
    """
    export_prefix_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:export-prefix-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Apply an export prefix policy to filter advertised label bindings
    """
    import_prefix_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:import-prefix-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Apply an import prefix policy to filter received label bindings
    """
    adjacency_type: Annotated[
        Optional[EnumerationEnum129], Field(alias='srl_nokia-ldp:adjacency-type')
    ] = None
    """
    The value indicates the adjacency type
    """
    end_of_lib: Annotated[
        Optional[EndOfLibContainer], Field(alias='srl_nokia-ldp:end-of-lib')
    ] = None
    label_advertisement_mode: Annotated[
        Optional[LabelAdvertisementModeContainer],
        Field(alias='srl_nokia-ldp:label-advertisement-mode'),
    ] = None
    graceful_restart: Annotated[
        Optional[GracefulRestartContainer5],
        Field(alias='srl_nokia-ldp:graceful-restart'),
    ] = None
    overload: Annotated[
        Optional[OverloadContainer], Field(alias='srl_nokia-ldp:overload')
    ] = None
    received_capabilities: Annotated[
        Optional[ReceivedCapabilitiesContainer],
        Field(alias='srl_nokia-ldp:received-capabilities'),
    ] = None
    session_holdtime: Annotated[
        Optional[SessionHoldtimeContainer],
        Field(alias='srl_nokia-ldp:session-holdtime'),
    ] = None
    session_state: Annotated[
        Optional[EnumerationEnum131], Field(alias='srl_nokia-ldp:session-state')
    ] = None
    """
    Representing the operational status of the LDP session
    """
    last_oper_state_change: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:last-oper-state-change',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Last time the peer state changed
    """
    statistics: Annotated[
        Optional[StatisticsContainer18], Field(alias='srl_nokia-ldp:statistics')
    ] = None


class PeerListEntry6(BaseModel):
    """
    Configure peer parameters for PCC
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ip_address: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:ip-address'),
    ] = None
    """
    The address of the PCE peer
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-pcep:admin-state')
    ] = 'disable'
    """
    Administrative state of PCC peer
    """
    local_address: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:local-address'),
    ] = None
    """
    Configure local IP to be used for PCE peering
    """
    preference: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:preference', ge=0, le=100)
    ] = 0
    """
    The preference value of this peer

    If a higher preference PCE is unavailable or not connected, the PCE with the next preference is used. 
    """
    network_instance: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-pcep:network-instance',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$',
        ),
    ] = None
    """
    Reference to a configured network-instance used for reachability to PCE
    This network-instance must already exist in the system.
    """
    speaker_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-pcep:speaker-id',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    A unique speaker identifier for the peer that does change during lifetime of the speaker
    """
    capabilities: Annotated[
        Optional[List[EnumerationEnum248]], Field(alias='srl_nokia-pcep:capabilities')
    ] = []
    """
    The capabilities supported by this peer
    """
    sync_state: Annotated[
        Optional[EnumerationEnum262], Field(alias='srl_nokia-pcep:sync-state')
    ] = None
    """
    The synchronization state of this peer.
    """
    session_established_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-pcep:session-established-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Indicates when the session with this peer entered into the established state
    """
    oper_keepalive: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:oper-keepalive', ge=0, le=4294967295)
    ] = None
    """
    The operational value of keepalive interval in use by this entity's peer

    This is the maximum time between two consecutive messages sent to a peer
    """
    oper_dead_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pcep:oper-dead-timer', ge=0, le=4294967295),
    ] = None
    """
    The operational value of dead timer interval in use by this peer

    This is the time after which a peer should declare a session down if it is does not receive any PCEP messages
    """
    oper_local_address: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:oper-local-address'),
    ] = None
    """
    The value indicates the internet address being used by this PCEP Peer.
    """
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-pcep:oper-state')
    ] = None
    """
    Details the operational state of the Pcep Pcc Peer
    """
    is_overloaded: Annotated[
        Optional[bool], Field(alias='srl_nokia-pcep:is-overloaded')
    ] = None
    """
    The value indicates whether this peer is overloaded with the processing of existing requests and is unable to handle
    new requests leading to unacceptable response times
    """
    statistics: Annotated[
        Optional[StatisticsContainer29], Field(alias='srl_nokia-pcep:statistics')
    ] = None


class PeersContainer(BaseModel):
    """
    Configuration and state related to peers
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    session_keepalive_holdtime: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:session-keepalive-holdtime', ge=45, le=3600),
    ] = 180
    """
    The time interval after which an inactive LDP session terminates and the corresponding TCP session closes. Inactivity is defined as not receiving LDP packets from the peer
    """
    session_keepalive_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:session-keepalive-interval', ge=15, le=1200),
    ] = 60
    """
    The interval between successive transmissions of keepalive packets. Keepalive packets are only sent in the absence of other LDP packets transmitted over the LDP session
    """
    trace_options: Annotated[
        Optional[TraceOptionsContainer9], Field(alias='srl_nokia-ldp:trace-options')
    ] = None
    peer: Annotated[
        Optional[List[PeerListEntry5]], Field(alias='srl_nokia-ldp:peer')
    ] = None


class PrefixFecListEntry(BaseModel):
    """
    List of IPv4 FEC-label bindings received from LDP peers
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    fec: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:fec',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$',
        ),
    ] = None
    """
    The prefix FEC value in the FEC-label binding, learned in a Label Mapping message received from a peer
    """
    lsr_id: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-ldp:lsr-id'),
    ] = None
    """
    The LSR ID of the peer, as a portion of the peer LDP ID
    """
    label_space_id: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:label-space-id', ge=0, le=65535)
    ] = None
    """
    The Label Space ID of the peer, as a portion of the peer LDP ID
    """
    label: Annotated[
        Optional[Union[MplsLabelNonReservedType, EnumerationEnum95]],
        Field(alias='srl_nokia-ldp:label'),
    ] = None
    """
    Received label value
    """
    entropy_label_transmit: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:entropy-label-transmit')
    ] = None
    """
    Entropy label (EL/ELI) is pushed when transmitting to this peer
    """
    ingress_lsr_fec: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:ingress-lsr-fec')
    ] = None
    """
    When set true, the router is an ingress LSR for the FEC
    """
    next_hop: Annotated[
        Optional[List[NextHopListEntry]], Field(alias='srl_nokia-ldp:next-hop')
    ] = None
    used_in_forwarding: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:used-in-forwarding')
    ] = None
    """
    Reads true if the label is used in forwarding and has been programmed for a push operation
    """
    not_used_reason: Annotated[
        Optional[EnumerationEnum97], Field(alias='srl_nokia-ldp:not-used-reason')
    ] = None
    """
    The reason why the label mapping is not being used in the dataplane
    """


class PrefixFecListEntry2(BaseModel):
    """
    List of IPv4 FEC-label bindings advertised to LDP peers
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    fec: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:fec',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$',
        ),
    ] = None
    """
    The prefix FEC value in the FEC-label binding, advertised in a Label Mapping message sent to a peer
    """
    egress_lsr_fec: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:egress-lsr-fec')
    ] = None
    """
    When set true, the router is the egress LSR for the FEC (the FEC is locally originated)
    """
    lsr_id: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-ldp:lsr-id'),
    ] = None
    """
    The LSR ID of the peer, as a portion of the peer LDP ID
    """
    label_space_id: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:label-space-id', ge=0, le=65535)
    ] = None
    """
    The Label Space ID of the peer, as a portion of the peer LDP ID
    """
    label: Annotated[
        Optional[Union[MplsLabelNonReservedType, EnumerationEnum95]],
        Field(alias='srl_nokia-ldp:label'),
    ] = None
    """
    Advertised label value
    """
    label_type: Annotated[
        Optional[EnumerationEnum98], Field(alias='srl_nokia-ldp:label-type')
    ] = None
    """
    The label type of the advertised label
    """
    label_status: Annotated[
        Optional[List[EnumerationEnum99]], Field(alias='srl_nokia-ldp:label-status')
    ] = []
    """
    Label status
    """


class ReceivedAddressContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    peer: Annotated[
        Optional[List[PeerListEntry3]], Field(alias='srl_nokia-ldp:peer')
    ] = None


class ReceivedPrefixFecContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_fec: Annotated[
        Optional[List[PrefixFecListEntry]], Field(alias='srl_nokia-ldp:prefix-fec')
    ] = None


class RemoteAttachmentCircuitListEntry(BaseModel):
    """
    A remote attachment circuit in the VPWS

    Each remote attachment circuit is identified in EVPN with an
    Ethernet Tag that is received in the Auto Discovery per EVI
    route from the remote PE. Configurable on network instances
    of type vpws.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp-evpn:name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The list of remote attachment circuits in the network instance
    """
    ethernet_tag: Annotated[
        int, Field(alias='srl_nokia-bgp-evpn:ethernet-tag', ge=0, le=16777215)
    ]
    """
    The Ethernet Tag ID received in the Auto Discovery per EVI route

    The Ethernet Tag ID identifies the remote attachment circuit in the
    EVPN control plane.
    """
    connection_point: Annotated[
        str,
        Field(
            alias='srl_nokia-bgp-evpn:connection-point',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ]
    """
    The connection-point associated to the local attachement circuit
    """
    destinations: Annotated[
        Optional[DestinationsContainer],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-vpws-destinations-remote-ac:destinations'
        ),
    ] = None


class RemoteContainer(BaseModel):
    """
    The remote parameters of the VPWS
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    remote_attachment_circuit: Annotated[
        Optional[List[RemoteAttachmentCircuitListEntry]],
        Field(alias='srl_nokia-bgp-evpn:remote-attachment-circuit'),
    ] = None


class RendezvousPointsContainer(BaseModel):
    """
    Define rendezvous points for sparse mode multicast
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    static: Annotated[
        Optional[StaticContainer], Field(alias='srl_nokia-pim:static')
    ] = None


class RibInOutContainer(BaseModel):
    """
    Container for BGP routes learned and advertised to BGP neighbors
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rib_in_pre: Annotated[
        Optional[RibInPreContainer], Field(alias='srl_nokia-rib-bgp:rib-in-pre')
    ] = None
    rib_in_post: Annotated[
        Optional[RibInPostContainer], Field(alias='srl_nokia-rib-bgp:rib-in-post')
    ] = None
    rib_out_post: Annotated[
        Optional[RibOutPostContainer], Field(alias='srl_nokia-rib-bgp:rib-out-post')
    ] = None


class RibInOutContainer2(BaseModel):
    """
    Container for BGP routes learned and advertised to BGP neighbors
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rib_in_pre: Annotated[
        Optional[RibInPreContainer2], Field(alias='srl_nokia-rib-bgp:rib-in-pre')
    ] = None
    rib_in_post: Annotated[
        Optional[RibInPostContainer2], Field(alias='srl_nokia-rib-bgp:rib-in-post')
    ] = None
    rib_out_post: Annotated[
        Optional[RibOutPostContainer2], Field(alias='srl_nokia-rib-bgp:rib-out-post')
    ] = None


class RibInOutContainer3(BaseModel):
    """
    Container for BGP routes learned and advertised to BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rib_in_pre: Annotated[
        Optional[RibInPreContainer3], Field(alias='srl_nokia-rib-bgp:rib-in-pre')
    ] = None
    rib_in_post: Annotated[
        Optional[RibInPostContainer3], Field(alias='srl_nokia-rib-bgp:rib-in-post')
    ] = None
    rib_out_post: Annotated[
        Optional[RibOutPostContainer3], Field(alias='srl_nokia-rib-bgp:rib-out-post')
    ] = None


class RibInOutContainer4(BaseModel):
    """
    Container for BGP routes learned and advertised to BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rib_in_pre: Annotated[
        Optional[RibInPreContainer4], Field(alias='srl_nokia-rib-bgp:rib-in-pre')
    ] = None
    rib_in_post: Annotated[
        Optional[RibInPostContainer4], Field(alias='srl_nokia-rib-bgp:rib-in-post')
    ] = None
    rib_out_post: Annotated[
        Optional[RibOutPostContainer4], Field(alias='srl_nokia-rib-bgp:rib-out-post')
    ] = None


class RibInOutContainer5(BaseModel):
    """
    Container for BGP routes learned and advertised to BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rib_in_pre: Annotated[
        Optional[RibInPreContainer5], Field(alias='srl_nokia-rib-bgp:rib-in-pre')
    ] = None
    rib_in_post: Annotated[
        Optional[RibInPostContainer5], Field(alias='srl_nokia-rib-bgp:rib-in-post')
    ] = None
    rib_out_post: Annotated[
        Optional[RibOutPostContainer5], Field(alias='srl_nokia-rib-bgp:rib-out-post')
    ] = None


class RibInOutContainer6(BaseModel):
    """
    Container for BGP routes learned and advertised to BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rib_in_pre: Annotated[
        Optional[RibInPreContainer6], Field(alias='srl_nokia-rib-bgp:rib-in-pre')
    ] = None
    rib_in_post: Annotated[
        Optional[RibInPostContainer6], Field(alias='srl_nokia-rib-bgp:rib-in-post')
    ] = None
    rib_out_post: Annotated[
        Optional[RibOutPostContainer6], Field(alias='srl_nokia-rib-bgp:rib-out-post')
    ] = None


class RibInOutContainer7(BaseModel):
    """
    Container for BGP routes learned and advertised to BGP neighbors
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rib_in_pre: Annotated[
        Optional[RibInPreContainer7], Field(alias='srl_nokia-rib-bgp:rib-in-pre')
    ] = None
    rib_in_post: Annotated[
        Optional[RibInPostContainer7], Field(alias='srl_nokia-rib-bgp:rib-in-post')
    ] = None
    rib_out_post: Annotated[
        Optional[RibOutPostContainer7], Field(alias='srl_nokia-rib-bgp:rib-out-post')
    ] = None


class RibInOutContainer8(BaseModel):
    """
    Container for BGP routes learned and advertised to BGP neighbors.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rib_in_pre: Annotated[
        Optional[RibInPreContainer8], Field(alias='srl_nokia-rib-bgp:rib-in-pre')
    ] = None
    rib_in_post: Annotated[
        Optional[RibInPostContainer8], Field(alias='srl_nokia-rib-bgp:rib-in-post')
    ] = None
    rib_out_post: Annotated[
        Optional[RibOutPostContainer8], Field(alias='srl_nokia-rib-bgp:rib-out-post')
    ] = None


class RouteTableContainer3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_unicast: Annotated[
        Optional[Ipv4UnicastContainer7],
        Field(alias='srl_nokia-ip-route-tables:ipv4-unicast'),
    ] = None
    ipv6_unicast: Annotated[
        Optional[Ipv6UnicastContainer7],
        Field(alias='srl_nokia-ip-route-tables:ipv6-unicast'),
    ] = None
    next_hop_group: Annotated[
        Optional[List[NextHopGroupListEntry]],
        Field(alias='srl_nokia-ip-route-tables:next-hop-group'),
    ] = None
    next_hop: Annotated[
        Optional[List[NextHopListEntry4]],
        Field(alias='srl_nokia-ip-route-tables:next-hop'),
    ] = None
    mpls: Annotated[
        Optional[MplsContainer7], Field(alias='srl_nokia-mpls-route-tables:mpls')
    ] = None


class RouteTargetContainer5(BaseModel):
    """
    Container for RIB state of RTC routes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    rib_in_out: Annotated[
        Optional[RibInOutContainer8], Field(alias='srl_nokia-rib-bgp:rib-in-out')
    ] = None


class RoutesContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bridge_table: Annotated[
        Optional[BridgeTableContainer3], Field(alias='srl_nokia-bgp-evpn:bridge-table')
    ] = None
    route_table: Annotated[
        Optional[RouteTableContainer2], Field(alias='srl_nokia-bgp-evpn:route-table')
    ] = None


class RuleListEntry(BaseModel):
    """
    List of policy forwarding rules.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    sequence_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-policy-forwarding:sequence-id', ge=0, le=128),
    ] = None
    """
    A number to indicate the relative evaluation order of the different entries; lower numbered entries are evaluated before higher numbered entries
    """
    description: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-policy-forwarding:description',
            max_length=255,
            min_length=1,
        ),
    ] = None
    """
    Description string for the rule
    """
    tcam_entries: Annotated[
        Optional[TcamEntriesContainer],
        Field(alias='srl_nokia-policy-forwarding:tcam-entries'),
    ] = None
    action: Annotated[
        Optional[ActionContainer], Field(alias='srl_nokia-policy-forwarding:action')
    ] = None
    match: Annotated[
        Optional[MatchContainer], Field(alias='srl_nokia-policy-forwarding:match')
    ] = None


class SPmsiContainer(BaseModel):
    """
    Selective Provider Multicast Service Interface (S-PMSI) tunnel state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mldp: Annotated[
        Optional[List[MldpListEntry]], Field(alias='srl_nokia-pim:mldp')
    ] = None


class SegmentListEntry2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    segment_index: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:segment-index', ge=0, le=255)
    ] = None
    """
    Index to enumerate the different segments in a segment-list
    """
    hop_type: Annotated[
        Optional[EnumerationEnum394], Field(alias='srl_nokia-te-policies:hop-type')
    ] = None
    """
    Hop type.
    """
    ip_address: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-te-policies:ip-address'),
    ] = None
    """
    IP Address for this hop.
    """
    is_loose: Annotated[
        Optional[bool], Field(alias='srl_nokia-te-policies:is-loose')
    ] = None
    """
    Indicates if this tunnel hop is loose.
    """
    unnumbered_if_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:unnumbered-if-id', ge=0, le=4294967295),
    ] = None
    """
    The value of unnumbered interface identifier of this hop.
    """
    router_id: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-te-policies:router-id'),
    ] = None
    """
    The value of router ID.
    """
    sid_value: Annotated[
        Optional[SidValueContainer], Field(alias='srl_nokia-te-policies:sid-value')
    ] = None
    sid_type: Annotated[
        Optional[EnumerationEnum395], Field(alias='srl_nokia-te-policies:sid-type')
    ] = None
    """
    Type of Segment Identifier (SID).
    """


class SegmentListEntry3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    segment_index: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:segment-index', ge=0, le=255)
    ] = None
    """
    Index to enumerate the different segments in a segment-list
    """
    hop_type: Annotated[
        Optional[EnumerationEnum403], Field(alias='srl_nokia-te-policies:hop-type')
    ] = None
    """
    Hop type.
    """
    ip_address: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-te-policies:ip-address'),
    ] = None
    """
    IP Address for this hop.
    """
    is_loose: Annotated[
        Optional[bool], Field(alias='srl_nokia-te-policies:is-loose')
    ] = None
    """
    Indicates if this tunnel hop is loose.
    """
    unnumbered_if_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:unnumbered-if-id', ge=0, le=4294967295),
    ] = None
    """
    The value of unnumbered interface identifier of this hop.
    """
    router_id: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-te-policies:router-id'),
    ] = None
    """
    The value of router ID.
    """
    sid_value: Annotated[
        Optional[SidValueContainer2], Field(alias='srl_nokia-te-policies:sid-value')
    ] = None
    sid_type: Annotated[
        Optional[EnumerationEnum404], Field(alias='srl_nokia-te-policies:sid-type')
    ] = None
    """
    Type of Segment Identifier (SID).
    """


class SelectedTypesCase(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    event_types: Annotated[
        Optional[EventTypesContainer], Field(alias='srl_nokia-pim:event-types')
    ] = None


class SelectiveContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mldp: Annotated[Optional[MldpContainer3], Field(alias='srl_nokia-mvpn-l3:mldp')] = (
        None
    )
    data_rate_threshold: Annotated[
        Optional[DataRateThresholdContainer],
        Field(alias='srl_nokia-mvpn-l3:data-rate-threshold'),
    ] = None
    interface: Annotated[
        Optional[List[InterfaceListEntry14]], Field(alias='srl_nokia-mvpn-l3:interface')
    ] = None


class SignalingContainer(BaseModel):
    """
    Signaling configuration for the pseudowire
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    virtual_circuit_identifier: Annotated[
        int,
        Field(
            alias='srl_nokia-network-instance:virtual-circuit-identifier',
            ge=1,
            le=4294967295,
        ),
    ]
    """
    The virtual circuit identifier of the pseudowire
    """
    signaling: Annotated[
        Union[StaticCase, TldpCase], Field(alias='srl_nokia-network-instance:signaling')
    ]


class TlvListEntry(BaseModel):
    """
    List of TLV types in the LSDB for the specified LSP.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-isis:type')] = None
    """
    The type of TLV being described. The type of TLV is expressed as a canonical name.
    """
    area_address: Annotated[
        Optional[AreaAddressContainer], Field(alias='srl_nokia-isis:area-address')
    ] = None
    lsp_buffer_size: Annotated[
        Optional[LspBufferSizeContainer], Field(alias='srl_nokia-isis:lsp-buffer-size')
    ] = None
    nlpid: Annotated[Optional[NlpidContainer], Field(alias='srl_nokia-isis:nlpid')] = (
        None
    )
    hostname: Annotated[
        Optional[HostnameContainer], Field(alias='srl_nokia-isis:hostname')
    ] = None
    ipv4_interface_addresses: Annotated[
        Optional[Ipv4InterfaceAddressesContainer],
        Field(alias='srl_nokia-isis:ipv4-interface-addresses'),
    ] = None
    ipv6_interface_addresses: Annotated[
        Optional[Ipv6InterfaceAddressesContainer],
        Field(alias='srl_nokia-isis:ipv6-interface-addresses'),
    ] = None
    ipv4_te_router_id: Annotated[
        Optional[Ipv4TeRouterIdContainer],
        Field(alias='srl_nokia-isis:ipv4-te-router-id'),
    ] = None
    ipv6_te_router_id: Annotated[
        Optional[Ipv6TeRouterIdContainer],
        Field(alias='srl_nokia-isis:ipv6-te-router-id'),
    ] = None
    instance_ids: Annotated[
        Optional[InstanceIdsContainer], Field(alias='srl_nokia-isis:instance-ids')
    ] = None
    ipv4_srlgs: Annotated[
        Optional[Ipv4SrlgsContainer], Field(alias='srl_nokia-isis:ipv4-srlgs')
    ] = None
    ipv6_srlgs: Annotated[
        Optional[Ipv6SrlgsContainer], Field(alias='srl_nokia-isis:ipv6-srlgs')
    ] = None
    purge_oi: Annotated[
        Optional[PurgeOiContainer], Field(alias='srl_nokia-isis:purge-oi')
    ] = None
    router_capabilities: Annotated[
        Optional[RouterCapabilitiesContainer],
        Field(alias='srl_nokia-isis:router-capabilities'),
    ] = None
    is_reachability: Annotated[
        Optional[IsReachabilityContainer], Field(alias='srl_nokia-isis:is-reachability')
    ] = None
    ipv4_internal_reachability: Annotated[
        Optional[Ipv4InternalReachabilityContainer],
        Field(alias='srl_nokia-isis:ipv4-internal-reachability'),
    ] = None
    ipv4_external_reachability: Annotated[
        Optional[Ipv4ExternalReachabilityContainer],
        Field(alias='srl_nokia-isis:ipv4-external-reachability'),
    ] = None
    authentication: Annotated[
        Optional[AuthenticationContainer8], Field(alias='srl_nokia-isis:authentication')
    ] = None
    extended_is_reachability: Annotated[
        Optional[ExtendedIsReachabilityContainer],
        Field(alias='srl_nokia-isis:extended-is-reachability'),
    ] = None
    extended_ipv4_reachability: Annotated[
        Optional[ExtendedIpv4ReachabilityContainer],
        Field(alias='srl_nokia-isis:extended-ipv4-reachability'),
    ] = None
    ipv6_reachability: Annotated[
        Optional[Ipv6ReachabilityContainer],
        Field(alias='srl_nokia-isis:ipv6-reachability'),
    ] = None
    multi_topology: Annotated[
        Optional[MultiTopologyContainer], Field(alias='srl_nokia-isis:multi-topology')
    ] = None
    isis_neighbor_attribute: Annotated[
        Optional[IsisNeighborAttributeContainer],
        Field(alias='srl_nokia-isis:isis-neighbor-attribute'),
    ] = None
    is_alias_id: Annotated[
        Optional[IsAliasIdContainer], Field(alias='srl_nokia-isis:is-alias-id')
    ] = None
    mt_isn: Annotated[
        Optional[MtIsnContainer], Field(alias='srl_nokia-isis:mt-isn')
    ] = None
    mt_isis_neighbor_attribute: Annotated[
        Optional[MtIsisNeighborAttributeContainer],
        Field(alias='srl_nokia-isis:mt-isis-neighbor-attribute'),
    ] = None
    mt_ipv4_reachability: Annotated[
        Optional[MtIpv4ReachabilityContainer],
        Field(alias='srl_nokia-isis:mt-ipv4-reachability'),
    ] = None
    mt_ipv6_reachability: Annotated[
        Optional[MtIpv6ReachabilityContainer],
        Field(alias='srl_nokia-isis:mt-ipv6-reachability'),
    ] = None


class TlvsContainer(BaseModel):
    """
    This container defines Link State PDU State TLVs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tlv: Annotated[Optional[List[TlvListEntry]], Field(alias='srl_nokia-isis:tlv')] = (
        None
    )


class TraceOptionsContainer16(BaseModel):
    """
    Enter the trace-options context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    trace: Annotated[Optional[TraceContainer5], Field(alias='srl_nokia-ospf:trace')] = (
        None
    )


class TraceContainer2(BaseModel):
    """
    Tracing parameter flags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Optional[InterfaceContainer2], Field(alias='srl_nokia-mld:interface')
    ] = None
    packet: Annotated[
        Optional[PacketContainer2], Field(alias='srl_nokia-mld:packet')
    ] = None


class TraceContainer7(BaseModel):
    """
    Tracing parameter flags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Optional[InterfaceContainer4], Field(alias='srl_nokia-igmp:interface')
    ] = None
    packet: Annotated[
        Optional[PacketContainer7], Field(alias='srl_nokia-igmp:packet')
    ] = None


class TunnelListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4_prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-tunnel-tables:ipv4-prefix',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))$).*$',
        ),
    ] = None
    """
    The IPv4 prefix associated with the endpoint of the tunnel.
    """
    type: Annotated[Optional[str], Field(alias='srl_nokia-tunnel-tables:type')] = None
    """
    The tunnel (encapsulation) type
    """
    owner: Annotated[Optional[str], Field(alias='srl_nokia-tunnel-tables:owner')] = None
    """
    The name of the application that submitted the tunnel to TTM
    """
    id: Annotated[
        Optional[int], Field(alias='srl_nokia-tunnel-tables:id', ge=0, le=4294967295)
    ] = None
    """
    An owner-assigned index value that is unique for each of the tunnels terminating at a particular prefix.
    """
    encapsulation_type: Annotated[
        Optional[EnumerationEnum298],
        Field(alias='srl_nokia-tunnel-tables:encapsulation-type'),
    ] = None
    """
    The type of encapsulation used by the tunnel.
    """
    next_hop_group: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-tunnel-tables:next-hop-group',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    Leaf reference to a next-hop-group that has the direct next-hops towards the tunnel far-end
    """
    metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tunnel-tables:metric', ge=0, le=4294967295),
    ] = None
    """
    The metric of the tunnel.
    """
    preference: Annotated[
        Optional[int], Field(alias='srl_nokia-tunnel-tables:preference', ge=0, le=255)
    ] = None
    """
    The tunnel table preference.
    """
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-tunnel-tables:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """
    last_app_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-tunnel-tables:last-app-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this tunnel by the owning application or protocol.
    """
    fib_programming: Annotated[
        Optional[FibProgrammingContainer4],
        Field(alias='srl_nokia-tunnel-tables:fib-programming'),
    ] = None
    vxlan: Annotated[
        Optional[VxlanContainer2], Field(alias='srl_nokia-tunnel-tables:vxlan')
    ] = None
    ip_in_ip: Annotated[
        Optional[IpInIpContainer2], Field(alias='srl_nokia-tunnel-tables:ip-in-ip')
    ] = None


class TunnelListEntry2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv6_prefix: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-tunnel-tables:ipv6-prefix',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))$).*$',
        ),
    ] = None
    """
    The IPv6 prefix associated with the endpoint of the tunnel.
    """
    type: Annotated[Optional[str], Field(alias='srl_nokia-tunnel-tables:type')] = None
    """
    The tunnel (encapsulation) type
    """
    owner: Annotated[Optional[str], Field(alias='srl_nokia-tunnel-tables:owner')] = None
    """
    The name of the application that submitted the tunnel to TTM
    """
    id: Annotated[
        Optional[int], Field(alias='srl_nokia-tunnel-tables:id', ge=0, le=4294967295)
    ] = None
    """
    An owner-assigned index value that is unique for each of the tunnels terminating at a particular prefix.
    """
    encapsulation_type: Annotated[
        Optional[EnumerationEnum301],
        Field(alias='srl_nokia-tunnel-tables:encapsulation-type'),
    ] = None
    """
    The type of encapsulation used by the tunnel.
    """
    next_hop_group: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-tunnel-tables:next-hop-group',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    Leaf reference to a next-hop-group that has the direct next-hops towards the tunnel far-end
    """
    metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-tunnel-tables:metric', ge=0, le=4294967295),
    ] = None
    """
    The metric of the tunnel.
    """
    preference: Annotated[
        Optional[int], Field(alias='srl_nokia-tunnel-tables:preference', ge=0, le=255)
    ] = None
    """
    The tunnel table preference.
    """
    internal_tags: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-tunnel-tables:internal-tags')
    ] = []
    """
    Internal route tag written in the route/tunnel tables or BGP rib

    The internal-tag value is shown with the format 'type-string = hex-value-string'.
    For example:
    - tag-value = ff:ff
    - tag-value = 20
    """
    last_app_update: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-tunnel-tables:last-app-update',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the last update of this tunnel by the owning application or protocol.
    """
    fib_programming: Annotated[
        Optional[FibProgrammingContainer5],
        Field(alias='srl_nokia-tunnel-tables:fib-programming'),
    ] = None
    vxlan: Annotated[
        Optional[VxlanContainer3], Field(alias='srl_nokia-tunnel-tables:vxlan')
    ] = None
    ip_in_ip: Annotated[
        Optional[IpInIpContainer3], Field(alias='srl_nokia-tunnel-tables:ip-in-ip')
    ] = None


class UnicastDestinationsContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    destination: Annotated[
        Optional[List[DestinationListEntry4]],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:destination'
        ),
    ] = None
    es_destination: Annotated[
        Optional[List[EsDestinationListEntry2]],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:es-destination'
        ),
    ] = None


class VpwsAttachmentCircuitsContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local: Annotated[
        Optional[LocalContainer], Field(alias='srl_nokia-bgp-evpn:local')
    ] = None
    remote: Annotated[
        Optional[RemoteContainer], Field(alias='srl_nokia-bgp-evpn:remote')
    ] = None


class AdvertisedAddressContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    peer: Annotated[
        Optional[List[PeerListEntry2]], Field(alias='srl_nokia-ldp:peer')
    ] = None


class AdvertisedAddressContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    peer: Annotated[
        Optional[List[PeerListEntry4]], Field(alias='srl_nokia-ldp:peer')
    ] = None


class AdvertisedPrefixFecContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_fec: Annotated[
        Optional[List[PrefixFecListEntry2]], Field(alias='srl_nokia-ldp:prefix-fec')
    ] = None


class AfiSafiListEntry(BaseModel):
    """
    List of address families supported by the BGP instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    afi_safi_name: Annotated[
        Optional[str], Field(alias='srl_nokia-bgp:afi-safi-name')
    ] = None
    """
    The name of a BGP address family, which translates to a specific AFI value and a specific SAFI value
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = 'disable'
    """
    This leaf indicates whether the AFI-SAFI is enabled for the instance
    """
    export_policy: Annotated[
        Optional[List[ExportPolicyLeafList2]],
        Field(alias='srl_nokia-bgp:export-policy'),
    ] = []
    """
    Apply an export policy to advertised BGP routes
    """
    import_policy: Annotated[
        Optional[List[ImportPolicyLeafList2]],
        Field(alias='srl_nokia-bgp:import-policy'),
    ] = []
    """
    Apply an import policy to received BGP routes
    """
    add_paths: Annotated[
        Optional[AddPathsContainer], Field(alias='srl_nokia-bgp:add-paths')
    ] = None
    multipath: Annotated[
        Optional[MultipathContainer], Field(alias='srl_nokia-bgp:multipath')
    ] = None
    best_path_selection: Annotated[
        Optional[BestPathSelectionContainer2],
        Field(alias='srl_nokia-bgp:best-path-selection'),
    ] = None
    received_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:received-routes', ge=0, le=18446744073709551615),
    ] = 0
    """
    The total number of routes belonging to this AFI/SAFI received from all peers of the BGP instance
    """
    active_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:active-routes', ge=0, le=18446744073709551615),
    ] = 0
    """
    The total number of routes belonging to this AFI/SAFI that are installed and used, being best routes
    """
    ipv4_unicast: Annotated[
        Optional[Ipv4UnicastContainer], Field(alias='srl_nokia-bgp:ipv4-unicast')
    ] = None
    ipv4_labeled_unicast: Annotated[
        Optional[Ipv4LabeledUnicastContainer],
        Field(alias='srl_nokia-bgp:ipv4-labeled-unicast'),
    ] = None
    l3vpn_ipv4_unicast: Annotated[
        Optional[L3vpnIpv4UnicastContainer],
        Field(alias='srl_nokia-bgp:l3vpn-ipv4-unicast'),
    ] = None
    ipv6_unicast: Annotated[
        Optional[Ipv6UnicastContainer], Field(alias='srl_nokia-bgp:ipv6-unicast')
    ] = None
    ipv6_labeled_unicast: Annotated[
        Optional[Ipv6LabeledUnicastContainer],
        Field(alias='srl_nokia-bgp:ipv6-labeled-unicast'),
    ] = None
    l3vpn_ipv6_unicast: Annotated[
        Optional[L3vpnIpv6UnicastContainer],
        Field(alias='srl_nokia-bgp:l3vpn-ipv6-unicast'),
    ] = None
    evpn: Annotated[Optional[EvpnContainer], Field(alias='srl_nokia-bgp:evpn')] = None


class AssertContainer2(BaseModel):
    """
    Enable tracing for assert packets
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface: Annotated[
        Optional[Union[AllInterfacesCase6, InterfaceNameCase6]],
        Field(alias='srl_nokia-pim:interface'),
    ] = None
    ipv4: Annotated[Optional[bool], Field(alias='srl_nokia-pim:ipv4')] = True
    """
    Enable tracing for PIM ipv4 packets
    """
    ipv6: Annotated[Optional[bool], Field(alias='srl_nokia-pim:ipv6')] = True
    """
    Enable tracing for PIM ipv6 packets
    """
    ingress: Annotated[Optional[bool], Field(alias='srl_nokia-pim:ingress')] = True
    """
    Enable tracing for received packets
    """
    egress: Annotated[Optional[bool], Field(alias='srl_nokia-pim:egress')] = True
    """
    Enable tracing for sent packets
    """


class BgpContainer(BaseModel):
    """
    Top-level configuration and operational state for Border Gateway Protocol (BGP)
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp:admin-state')
    ] = 'enable'
    """
    Administratively enable or disable the entire BGP instance

    Disable causes all BGP sessions to be taken down immediately, even if admin-state at the group or neighbor level of some of these sessions is still set as enable.
    """
    oper_state: Annotated[
        Optional[EnumerationEnum25], Field(alias='srl_nokia-bgp:oper-state')
    ] = None
    under_maintenance: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp:under-maintenance')
    ] = None
    """
    State field to determine if the bgp instance is in maintenance mode.
    """
    maintenance_group: Annotated[
        Optional[str], Field(alias='srl_nokia-bgp:maintenance-group')
    ] = None
    """
    State field to display the maintenance group to which this bgp instance belongs to.
    """
    autonomous_system: Annotated[
        int, Field(alias='srl_nokia-bgp:autonomous-system', ge=1, le=4294967295)
    ]
    """
    The global AS number of the BGP instance

    Values greater than 65535 must be entered in ASPLAIN format.
    """
    export_policy: Annotated[
        Optional[List[ExportPolicyLeafList]], Field(alias='srl_nokia-bgp:export-policy')
    ] = []
    """
    Apply an export policy to advertised BGP routes
    """
    import_policy: Annotated[
        Optional[List[ImportPolicyLeafList]], Field(alias='srl_nokia-bgp:import-policy')
    ] = []
    """
    Apply an import policy to received BGP routes
    """
    local_preference: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp:local-preference', ge=0, le=4294967295),
    ] = 100
    """
    The value of the local-preference attribute that is added to received routes from EBGP peers

    It is also used to encode the local preference attribute for locally generated BGP routes.
    """
    router_id: Annotated[
        Union[Ipv4AddressType, Ipv6AddressType], Field(alias='srl_nokia-bgp:router-id')
    ]
    """
    The BGP identifier used by this BGP instance in all of its OPEN messages

    Any non-zero value is supported.
    """
    as_path_options: Annotated[
        Optional[AsPathOptionsContainer], Field(alias='srl_nokia-bgp:as-path-options')
    ] = None
    authentication: Annotated[
        Optional[AuthenticationContainer], Field(alias='srl_nokia-bgp:authentication')
    ] = None
    best_path_selection: Annotated[
        Optional[BestPathSelectionContainer],
        Field(alias='srl_nokia-bgp:best-path-selection'),
    ] = None
    bgp_label: Annotated[
        Optional[BgpLabelContainer], Field(alias='srl_nokia-bgp:bgp-label')
    ] = None
    convergence: Annotated[
        Optional[ConvergenceContainer], Field(alias='srl_nokia-bgp:convergence')
    ] = None
    dynamic_neighbors: Annotated[
        Optional[DynamicNeighborsContainer],
        Field(alias='srl_nokia-bgp:dynamic-neighbors'),
    ] = None
    ebgp_default_policy: Annotated[
        Optional[EbgpDefaultPolicyContainer],
        Field(alias='srl_nokia-bgp:ebgp-default-policy'),
    ] = None
    failure_detection: Annotated[
        Optional[FailureDetectionContainer],
        Field(alias='srl_nokia-bgp:failure-detection'),
    ] = None
    graceful_restart: Annotated[
        Optional[GracefulRestartContainer],
        Field(alias='srl_nokia-bgp:graceful-restart'),
    ] = None
    max_ecmp_hash_buckets_per_next_hop_group: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp:max-ecmp-hash-buckets-per-next-hop-group', ge=1, le=256
        ),
    ] = None
    """
    Specifies the maximum number of ECMP hash buckets per next-hop-group

    Weighted ECMP weights are normalized based on this number of hash buckets.
    """
    afi_safi: Annotated[
        Optional[List[AfiSafiListEntry]], Field(alias='srl_nokia-bgp:afi-safi')
    ] = None
    preference: Annotated[
        Optional[PreferenceContainer], Field(alias='srl_nokia-bgp:preference')
    ] = None
    rib_management: Annotated[
        Optional[RibManagementContainer], Field(alias='srl_nokia-bgp:rib-management')
    ] = None
    route_advertisement: Annotated[
        Optional[RouteAdvertisementContainer],
        Field(alias='srl_nokia-bgp:route-advertisement'),
    ] = None
    route_flap_damping: Annotated[
        Optional[RouteFlapDampingContainer],
        Field(alias='srl_nokia-bgp:route-flap-damping'),
    ] = None
    route_reflector: Annotated[
        Optional[RouteReflectorContainer], Field(alias='srl_nokia-bgp:route-reflector')
    ] = None
    segment_routing_mpls: Annotated[
        Optional[SegmentRoutingMplsContainer],
        Field(alias='srl_nokia-bgp:segment-routing-mpls'),
    ] = None
    send_community_type: Annotated[
        Optional[List[EnumerationEnum41]],
        Field(alias='srl_nokia-bgp:send-community-type'),
    ] = []
    """
    Specify the types of community that should be sent to all peers

    By default all three community types are sent to all peers.
    If value none is included in the leaf-list, then other values are ignored
    """
    transport: Annotated[
        Optional[TransportContainer], Field(alias='srl_nokia-bgp:transport')
    ] = None
    trace_options: Annotated[
        Optional[TraceOptionsContainer], Field(alias='srl_nokia-bgp:trace-options')
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer6], Field(alias='srl_nokia-bgp:statistics')
    ] = None
    group: Annotated[
        Optional[List[GroupListEntry]], Field(alias='srl_nokia-bgp:group')
    ] = None
    neighbor: Annotated[
        Optional[List[NeighborListEntry]], Field(alias='srl_nokia-bgp:neighbor')
    ] = None


class BridgeTableContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    split_horizon_group: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp-evpn:split-horizon-group',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The split-horizon-group associated to the evpn-mpls instance
    """
    ingress_multicast_mpls_label: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-bgp-evpn:ingress-multicast-mpls-label', ge=16, le=1048575
        ),
    ] = None
    """
    The ingress label allocated for Broadcast, Unknown unicast and Multicast traffic

    The ingress multicast mpls label is advertised by the EVPN Inclusive
    Multicast Ethernet Tag (IMET) route and it is expected on received
    EVPN packets that were generated as BUM packets.
    """
    ingress_unicast_mpls_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-bgp-evpn:ingress-unicast-mpls-label', ge=16, le=1048575),
    ] = None
    """
    The ingress label allocated for unicast traffic

    The ingress unicast mpls label is advertised by the EVPN MAC/IP
    Advertisement routes and it is expected on received EVPN packets
    that were generated as unicast packets.
    """
    multicast_destinations: Annotated[
        Optional[MulticastDestinationsContainer],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations:multicast-destinations'
        ),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer3],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics:statistics'
        ),
    ] = None
    unicast_destinations: Annotated[
        Optional[UnicastDestinationsContainer],
        Field(
            alias='srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations:unicast-destinations'
        ),
    ] = None


class ComputedSegmentsContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    segment: Annotated[
        Optional[List[SegmentListEntry2]], Field(alias='srl_nokia-te-policies:segment')
    ] = None


class ComputedSegmentsContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    segment: Annotated[
        Optional[List[SegmentListEntry3]], Field(alias='srl_nokia-te-policies:segment')
    ] = None


class DefinedTlvsContainer(BaseModel):
    """
    List of defined TLV-s contained in LSP.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    area_addresses: Annotated[
        Optional[List[AreaAddressesLeafList]],
        Field(alias='srl_nokia-isis:area-addresses'),
    ] = []
    """
    Each item represents an area address advertised by the LSP.
    """
    nlpid: Annotated[
        Optional[List[EnumerationEnum153]], Field(alias='srl_nokia-isis:nlpid')
    ] = []
    """
    Each item represents a network layer protocol supported by the IS-IS Instance.
    """
    hostname: Annotated[Optional[str], Field(alias='srl_nokia-isis:hostname')] = None
    """
    Host name that advertised this LSP.
    """
    ipv4_interface_addresses: Annotated[
        Optional[List[Union[Ipv4AddressType, Ipv6AddressType]]],
        Field(alias='srl_nokia-isis:ipv4-interface-addresses'),
    ] = []
    """
    Each item represents an IPv4 address configured on an interface in this IS-IS instance.
    """
    ipv6_interface_addresses: Annotated[
        Optional[List[Union[Ipv4AddressType, Ipv6AddressType]]],
        Field(alias='srl_nokia-isis:ipv6-interface-addresses'),
    ] = []
    """
    Each item represents an IPv6 address configured on an interface in this IS-IS instance.
    """
    purge_oi: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:purge-oi',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    This indicates System ID that originated a purge.
    """
    authentication: Annotated[
        Optional[AuthenticationContainer9], Field(alias='srl_nokia-isis:authentication')
    ] = None
    is_reachability: Annotated[
        Optional[List[IsReachabilityListEntry]],
        Field(alias='srl_nokia-isis:is-reachability'),
    ] = None
    extended_is_reachability: Annotated[
        Optional[List[ExtendedIsReachabilityListEntry]],
        Field(alias='srl_nokia-isis:extended-is-reachability'),
    ] = None
    ipv4_internal_reachability: Annotated[
        Optional[List[Ipv4InternalReachabilityListEntry]],
        Field(alias='srl_nokia-isis:ipv4-internal-reachability'),
    ] = None
    ipv4_external_reachability: Annotated[
        Optional[List[Ipv4ExternalReachabilityListEntry]],
        Field(alias='srl_nokia-isis:ipv4-external-reachability'),
    ] = None
    te_router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:te-router-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    A single stable address that can always be referenced in a path that will be reachable from multiple hops away. TLV = 134.
    """
    extended_ipv4_reachability: Annotated[
        Optional[List[ExtendedIpv4ReachabilityListEntry]],
        Field(alias='srl_nokia-isis:extended-ipv4-reachability'),
    ] = None
    ipv4_srlg: Annotated[
        Optional[List[Ipv4SrlgListEntry2]], Field(alias='srl_nokia-isis:ipv4-srlg')
    ] = None
    ipv6_srlg: Annotated[
        Optional[List[Ipv6SrlgListEntry2]], Field(alias='srl_nokia-isis:ipv6-srlg')
    ] = None
    ipv6_te_router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:ipv6-te-router-id',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    A single stable address that can always be referenced in a path that will be reachable from multiple hops away. TLV = 140.
    """
    ipv6_reachability: Annotated[
        Optional[List[Ipv6ReachabilityListEntry]],
        Field(alias='srl_nokia-isis:ipv6-reachability'),
    ] = None
    multi_topology: Annotated[
        Optional[MultiTopologyContainer2], Field(alias='srl_nokia-isis:multi-topology')
    ] = None
    mt_is_reachability: Annotated[
        Optional[List[MtIsReachabilityListEntry]],
        Field(alias='srl_nokia-isis:mt-is-reachability'),
    ] = None
    mt_ipv4_reachability: Annotated[
        Optional[List[MtIpv4ReachabilityListEntry]],
        Field(alias='srl_nokia-isis:mt-ipv4-reachability'),
    ] = None
    mt_ipv6_reachability: Annotated[
        Optional[List[MtIpv6ReachabilityListEntry]],
        Field(alias='srl_nokia-isis:mt-ipv6-reachability'),
    ] = None
    application_specific_srlg: Annotated[
        Optional[List[ApplicationSpecificSrlgListEntry]],
        Field(alias='srl_nokia-isis:application-specific-srlg'),
    ] = None
    router_capability: Annotated[
        Optional[RouterCapabilityContainer],
        Field(alias='srl_nokia-isis:router-capability'),
    ] = None


class DiversityListEntry(BaseModel):
    """
    List of diversity association parameters
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    association_name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-pcep:association-name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Association name
    """
    association_id: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:association-id', ge=0, le=65535)
    ] = 0
    """
    Association-id for the associaiton group
    """
    association_source: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:association-source'),
    ] = None
    """
    Associaiton Source for the association
    """
    disjointness_reference: Annotated[
        Optional[bool], Field(alias='srl_nokia-pcep:disjointness-reference')
    ] = False
    """
    Refers to shortest path or not
    """
    disjointness_type: Annotated[
        Optional[EnumerationEnum246], Field(alias='srl_nokia-pcep:disjointness-type')
    ] = 'loose'
    """
    Refers to strict or loose path
    """
    diversity_type: Annotated[
        Optional[EnumerationEnum247], Field(alias='srl_nokia-pcep:diversity-type')
    ] = 'none'
    """
    Refers to the choice of path node / link / srlg-node / srlg-link
    """


class EventsContainer(BaseModel):
    """
    Enable the tracing of PIM events
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[Union[AllTypesCase, SelectedTypesCase]],
        Field(alias='srl_nokia-pim:type'),
    ] = None


class EvpnContainer6(BaseModel):
    """
    Container for RIB state of EVPN routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_rib: Annotated[
        Optional[LocalRibContainer7], Field(alias='srl_nokia-rib-bgp:local-rib')
    ] = None
    rib_in_out: Annotated[
        Optional[RibInOutContainer7], Field(alias='srl_nokia-rib-bgp:rib-in-out')
    ] = None


class ExplicitRouteObjectsListEntry(BaseModel):
    """
    Path EROs details.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_object_index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pcep:route-object-index', ge=0, le=4294967295),
    ] = None
    """
    The unique identifier for RRO/ERO entries
    """
    sid_label: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:sid-label', ge=16, le=1048575)
    ] = None
    """
    Unique Segment Identifier label value
    """
    sid_type: Annotated[
        Optional[EnumerationEnum255], Field(alias='srl_nokia-pcep:sid-type')
    ] = None
    """
    Refers to strict or loose hop
    """
    prefix: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:prefix'),
    ] = None
    """
    IP address for a given segment in ERO or RRO
    """
    router_id: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:router-id'),
    ] = None
    """
    Router-id for a given unnumbered segment in ERO or RRO
    """
    as_number: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:as-number', ge=0, le=4294967295)
    ] = None
    """
    AS-Number for a given segment in ERO or RRO
    """
    local_interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-pcep:local-interface-name')
    ] = None
    """
    Local interface name for a given unnumbered/link-local segment in ERO or RRO
    """
    local_interface_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pcep:local-interface-id', ge=0, le=4294967295),
    ] = None
    """
    Local interface-id for a given unnumbered/link-local segment in ERO or RRO
    """
    remote_interface_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pcep:remote-interface-id', ge=0, le=4294967295),
    ] = None
    """
    Remote interface-id for a given unnumbered/link-local segment in ERO or RRO
    """
    local_prefix: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:local-prefix'),
    ] = None
    """
    Local IP address for a given segment in ERO or RRO
    """
    remote_prefix: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:remote-prefix'),
    ] = None
    """
    Remote IP address for a given segment in ERO or RRO
    """


class GroupListEntry22(BaseModel):
    """
    Specifies the next hop group.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-next-hop-groups:name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Specifies the next hop group name
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-next-hop-groups:admin-state')
    ] = 'enable'
    """
    Administratively enable or disable this next-hop-group.
    """
    blackhole: Annotated[
        Optional[BlackholeContainer], Field(alias='srl_nokia-next-hop-groups:blackhole')
    ] = None
    nexthop: Annotated[
        Optional[List[NexthopListEntry]],
        Field(alias='srl_nokia-next-hop-groups:nexthop'),
    ] = None


class HopListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    index: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:index', ge=0, le=255)
    ] = None
    """
    The index number of the hop. Hops are processed in ascending sequence.
    """
    ip: Annotated[Optional[IpContainer], Field(alias='srl_nokia-te-policies:ip')] = None
    mpls_label: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:mpls-label', ge=16, le=1048575),
    ] = None
    """
    An MPLS label value representing a segment routing instruction
    """


class IgmpSnoopingContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-igmp-snooping:admin-state')
    ] = 'disable'
    """
    Administratively enable or disable the IGMP instance
    """
    query_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp-snooping:query-interval', ge=0, le=4294967295),
    ] = 125
    """
    Interval at which the router sends the IGMP membership queries
    """
    robust_count: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp-snooping:robust-count', ge=1, le=255)
    ] = 2
    """
    Configures the IGMP robustness to allow for the expected IGMP packet loss

    The robust-count variable allows tuning for the expected packet
    loss on a subnet. If a subnet anticipates losses, the robust-count
    variable can be increased.
    """
    query_source_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:query-source-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Source IP address used when generating IGMP queries
    """
    report_source_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-igmp-snooping:report-source-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Source IP address used when generating IGMP reports
    """
    trace_options: Annotated[
        Optional[TraceOptionsContainer14],
        Field(alias='srl_nokia-igmp-snooping:trace-options'),
    ] = None
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-igmp-snooping:oper-state')
    ] = None
    """
    Used to report operational state of the IGMP instance.
    """
    transmitted_bgp_smet_routes: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:transmitted-bgp-smet-routes',
            ge=0,
            le=4294967295,
        ),
    ] = None
    """
    Transmitted BGP SMET routes
    """
    querier: Annotated[
        Optional[QuerierContainer2], Field(alias='srl_nokia-igmp-snooping:querier')
    ] = None
    multicast_routers: Annotated[
        Optional[List[MulticastRoutersListEntry]],
        Field(alias='srl_nokia-igmp-snooping:multicast-routers'),
    ] = None
    proxy_membership_group_count: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:proxy-membership-group-count',
            ge=0,
            le=4294967295,
        ),
    ] = None
    """
    The number of multicast groups which have been learned
    """
    proxy_evpn_membership_group_count: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-igmp-snooping:proxy-evpn-membership-group-count',
            ge=0,
            le=4294967295,
        ),
    ] = None
    """
    The number of multicast groups proxy-evpn-membership-groups
    """
    proxy_membership_groups: Annotated[
        Optional[ProxyMembershipGroupsContainer],
        Field(alias='srl_nokia-igmp-snooping:proxy-membership-groups'),
    ] = None
    proxy_evpn_membership_groups: Annotated[
        Optional[ProxyEvpnMembershipGroupsContainer],
        Field(alias='srl_nokia-igmp-snooping:proxy-evpn-membership-groups'),
    ] = None
    interface: Annotated[
        Optional[List[InterfaceListEntry8]],
        Field(alias='srl_nokia-igmp-snooping:interface'),
    ] = None
    vxlan_destination: Annotated[
        Optional[List[VxlanDestinationListEntry]],
        Field(alias='srl_nokia-igmp-snooping:vxlan-destination'),
    ] = None


class InclusiveContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    mldp: Annotated[Optional[MldpContainer], Field(alias='srl_nokia-mvpn-l3:mldp')] = (
        None
    )
    interface: Annotated[
        Optional[List[InterfaceListEntry13]], Field(alias='srl_nokia-mvpn-l3:interface')
    ] = None


class InterfaceListEntry6(BaseModel):
    """
    List of IS-IS interfaces
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:interface-name', max_length=255, min_length=1),
    ] = None
    """
    Name of the IS-IS interface
    """
    interface_ref: Annotated[
        Optional[InterfaceRefContainer2], Field(alias='srl_nokia-isis:interface-ref')
    ] = None
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-isis:admin-state')
    ] = 'enable'
    """
    Used to administratively enable or disable the IS-IS protocol on a
    routed subinterface
    """
    circuit_type: Annotated[
        Optional[EnumerationEnum143], Field(alias='srl_nokia-isis:circuit-type')
    ] = None
    """
    Specifies the circuit type as either point-to-point or broadcast
    """
    delay: Annotated[Optional[DelayContainer], Field(alias='srl_nokia-isis:delay')] = (
        None
    )
    hello_padding: Annotated[
        Optional[EnumerationEnum134], Field(alias='srl_nokia-isis:hello-padding')
    ] = None
    """
    Specifies the use of IS-IS Hello PDU padding on the interface
    """
    passive: Annotated[Optional[bool], Field(alias='srl_nokia-isis:passive')] = False
    """
    When set to true the interface is configured as a passive interface and does not send IIH PDUs or try to form an adjacency with other routers.
    """
    loopfree_alternate_exclude: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:loopfree-alternate-exclude')
    ] = False
    """
    Enable/disable Loopfree Alternative at interface level.
    """
    timers: Annotated[
        Optional[TimersContainer4], Field(alias='srl_nokia-isis:timers')
    ] = None
    ipv4_unicast: Annotated[
        Optional[Ipv4UnicastContainer6], Field(alias='srl_nokia-isis:ipv4-unicast')
    ] = None
    ipv6_unicast: Annotated[
        Optional[Ipv6UnicastContainer6], Field(alias='srl_nokia-isis:ipv6-unicast')
    ] = None
    trace_options: Annotated[
        Optional[TraceOptionsContainer12], Field(alias='srl_nokia-isis:trace-options')
    ] = None
    segment_routing: Annotated[
        Optional[SegmentRoutingContainer2],
        Field(alias='srl_nokia-isis:segment-routing'),
    ] = None
    weighted_ecmp: Annotated[
        Optional[WeightedEcmpContainer7], Field(alias='srl_nokia-isis:weighted-ecmp')
    ] = None
    level: Annotated[
        Optional[List[LevelListEntry]], Field(alias='srl_nokia-isis:level')
    ] = None
    authentication: Annotated[
        Optional[AuthenticationContainer6], Field(alias='srl_nokia-isis:authentication')
    ] = None
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-isis:oper-state')
    ] = None
    """
    The operational state of the IS-IS interface. This simply tracks the operational state of the subinterface.
    """
    circuit_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:circuit-id', ge=0, le=4294967295)
    ] = None
    """
    The circuit ID assigned by this IS-IS router to its interface.
    """
    statistics: Annotated[
        Optional[StatisticsContainer22], Field(alias='srl_nokia-isis:statistics')
    ] = None
    adjacency: Annotated[
        Optional[List[AdjacencyListEntry5]], Field(alias='srl_nokia-isis:adjacency')
    ] = None
    ldp_synchronization: Annotated[
        Optional[LdpSynchronizationContainer2],
        Field(alias='srl_nokia-isis:ldp-synchronization'),
    ] = None


class Ipv4LabeledUnicastContainer4(BaseModel):
    """
    Container for RIB state of labeled IPv4-unicast routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_rib: Annotated[
        Optional[LocalRibContainer2], Field(alias='srl_nokia-rib-bgp:local-rib')
    ] = None
    rib_in_out: Annotated[
        Optional[RibInOutContainer2], Field(alias='srl_nokia-rib-bgp:rib-in-out')
    ] = None


class Ipv4UnicastContainer8(BaseModel):
    """
    Container for RIB state of IPv4-unicast routes
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_rib: Annotated[
        Optional[LocalRibContainer], Field(alias='srl_nokia-rib-bgp:local-rib')
    ] = None
    rib_in_out: Annotated[
        Optional[RibInOutContainer], Field(alias='srl_nokia-rib-bgp:rib-in-out')
    ] = None


class Ipv4Container8(BaseModel):
    """
    The container for the IPv4 tunnels associated with the network instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tunnel: Annotated[
        Optional[List[TunnelListEntry]], Field(alias='srl_nokia-tunnel-tables:tunnel')
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer37],
        Field(alias='srl_nokia-tunnel-tables:statistics'),
    ] = None
    tunnel_summary: Annotated[
        Optional[TunnelSummaryContainer],
        Field(alias='srl_nokia-tunnel-tables:tunnel-summary'),
    ] = None


class Ipv6LabeledUnicastContainer4(BaseModel):
    """
    Container for RIB state of labeled IPv6-unicast routes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_rib: Annotated[
        Optional[LocalRibContainer6], Field(alias='srl_nokia-rib-bgp:local-rib')
    ] = None
    rib_in_out: Annotated[
        Optional[RibInOutContainer6], Field(alias='srl_nokia-rib-bgp:rib-in-out')
    ] = None


class Ipv6UnicastContainer8(BaseModel):
    """
    Container for RIB state of IPv6-unicast routes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_rib: Annotated[
        Optional[LocalRibContainer5], Field(alias='srl_nokia-rib-bgp:local-rib')
    ] = None
    rib_in_out: Annotated[
        Optional[RibInOutContainer5], Field(alias='srl_nokia-rib-bgp:rib-in-out')
    ] = None


class Ipv6Container8(BaseModel):
    """
    The container for the IPv6 tunnels associated with the network instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    tunnel: Annotated[
        Optional[List[TunnelListEntry2]], Field(alias='srl_nokia-tunnel-tables:tunnel')
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer38],
        Field(alias='srl_nokia-tunnel-tables:statistics'),
    ] = None
    tunnel_summary: Annotated[
        Optional[TunnelSummaryContainer2],
        Field(alias='srl_nokia-tunnel-tables:tunnel-summary'),
    ] = None


class L3vpnIpv4UnicastContainer4(BaseModel):
    """
    Container for RIB state of VPN-IPv4 unicast routes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_rib: Annotated[
        Optional[LocalRibContainer3], Field(alias='srl_nokia-rib-bgp:local-rib')
    ] = None
    rib_in_out: Annotated[
        Optional[RibInOutContainer3], Field(alias='srl_nokia-rib-bgp:rib-in-out')
    ] = None


class L3vpnIpv6UnicastContainer4(BaseModel):
    """
    Container for RIB state of VPN-IPv6 unicast routes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    local_rib: Annotated[
        Optional[LocalRibContainer4], Field(alias='srl_nokia-rib-bgp:local-rib')
    ] = None
    rib_in_out: Annotated[
        Optional[RibInOutContainer4], Field(alias='srl_nokia-rib-bgp:rib-in-out')
    ] = None


class LevelDatabaseListEntry(BaseModel):
    """
    Link State database
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    level_number: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:level-number', ge=1, le=2)
    ] = None
    """
    Specifies the IS-IS protocol level to which these attributes are applied.
    """
    lsp_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:lsp-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f][0-9A-Fa-f]-[0-9A-Fa-f][0-9A-Fa-f]$).*$',
        ),
    ] = None
    """
    The value specifies the LSP Id and is given in the format as 6 octets of adjacency system-id followed by 1 octet Lan-ID and 1 octet LSP Number.
    """
    version: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:version', ge=0, le=4294967295)
    ] = None
    """
    The value indicates the version of the ISIS protocol that has generated the LSP
    """
    pkt_version: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:pkt-version', ge=0, le=4294967295)
    ] = None
    """
    The value indicates the version of the ISIS protocol that has generated the Packet.
    """
    checksum: Annotated[
        Optional[str],
        Field(alias='srl_nokia-isis:checksum', pattern='^(?=^0x[0-9a-fA-F]+$).*$'),
    ] = None
    """
    The value indicates the checksum of contents of LSP from the SourceID field in the LSP till the end.
    The checksum is computed using the Fletcher checksum algorithm. 
    """
    maximum_area_addresses: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:maximum-area-addresses', ge=0, le=4294967295),
    ] = None
    """
    The value indicates the maximum number of areas supported by the originator of the LSP.
    A value of 0 indicates a default of 3 areas. 
    """
    sequence_number: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:sequence-number', pattern='^(?=^0x[0-9a-fA-F]+$).*$'
        ),
    ] = None
    """
    The value indicates the sequence number of an LSP and is a four byte quantity that represents the version of an LSP.
    The higher the sequence number, the more up to date the information.
    The sequence number is always incremented by the system that originated the LSP and ensures that there is only one version of that LSP in the entire network.
    """
    system_id_len: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:system-id-len', ge=0, le=4294967295)
    ] = None
    """
    The value indicates the length of the system-id as used by the originator.
    """
    pdu_type: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:pdu-type', ge=-2147483648, le=2147483647),
    ] = None
    """
    The value indicates the PDU type for instance LSPs, CSNPs OR PSNPs at both IS-IS protocol levels i.e. L1 and L2 as maintained in of the object packet-type.
    """
    pdu_length: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:pdu-length', ge=0, le=4294967295)
    ] = None
    """
    The value indicates the PDU length for instance LSPs, CSNPs OR PSNPs at both IS-IS protocol levels i.e. L1 and L2 as maintained in the database.
    """
    remaining_lifetime: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:remaining-lifetime', ge=0, le=65535)
    ] = None
    """
    The value indicates the remaining lifetime of this LSP and is a decrementing counter that decrements in seconds starting from the value as received in the LSP if not self-originated OR from lsp-life-time for self originated LSPs.
    When the remaining lifetime becomes zero, the contents of the LSP should not be considered for SPF calculation.
    """
    attributes: Annotated[
        Optional[AttributesContainer], Field(alias='srl_nokia-isis:attributes')
    ] = None
    defined_tlvs: Annotated[
        Optional[DefinedTlvsContainer], Field(alias='srl_nokia-isis:defined-tlvs')
    ] = None
    undefined_tlvs: Annotated[
        Optional[List[UndefinedTlvsLeafList]],
        Field(alias='srl_nokia-isis:undefined-tlvs'),
    ] = []
    """
    Undefined TLV-s as contents of the LSP.
    """


class LsaListEntry(BaseModel):
    """
    List of the LSAs of a specified type in the
    LSDB for the specified AS
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertising_router: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:advertising-router',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The router ID of the router that originated the LSA
    """
    link_state_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:link-state-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The Link State ID for the specified LSA type. The exact
    defined value of the Link State ID is dependent on the LSA
    type.
    """
    advertisement: Annotated[
        Optional[str], Field(alias='srl_nokia-ospf:advertisement')
    ] = None
    """
    Contents of the link state advertisement in hex, including the header.
    """
    sequence_number: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:sequence-number', pattern='^(?=^0x[0-9a-fA-F]+$).*$'
        ),
    ] = None
    """
    A signed 32-bit integer used to detect old and duplicate
    LSAs. The greater the sequence number the more recent the
    LSA.
    """
    checksum: Annotated[
        Optional[str],
        Field(alias='srl_nokia-ospf:checksum', pattern='^(?=^0x[0-9a-fA-F]+$).*$'),
    ] = None
    """
    The checksum of the complete contents of the LSA excluding
    the age field.
    """
    age: Annotated[Optional[int], Field(alias='srl_nokia-ospf:age', ge=0, le=65535)] = (
        None
    )
    """
    The time since the LSA's generation in seconds
    """
    options: Annotated[
        Optional[str],
        Field(alias='srl_nokia-ospf:options', pattern='^(?=^0x[0-9a-fA-F]+$).*$'),
    ] = None
    """
    Contents of the options field
    """
    as_external_lsa: Annotated[
        Optional[AsExternalLsaContainer], Field(alias='srl_nokia-ospf:as-external-lsa')
    ] = None
    opaque_lsa: Annotated[
        Optional[OpaqueLsaContainer], Field(alias='srl_nokia-ospf:opaque-lsa')
    ] = None
    ospfv3_external_lsa: Annotated[
        Optional[Ospfv3ExternalLsaContainer],
        Field(alias='srl_nokia-ospf:ospfv3-external-lsa'),
    ] = None


class LsaListEntry2(BaseModel):
    """
    List of the link local LSAs of a specified type in the
    LSDB for the specified interface
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertising_router: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:advertising-router',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The router ID of the router that originated the LSA
    """
    link_state_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:link-state-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The Link State ID for the specified LSA type. The exact
     defined value of the Link State ID is dependent on the LSA
     type.
    """
    advertisement: Annotated[
        Optional[str], Field(alias='srl_nokia-ospf:advertisement')
    ] = None
    """
    Contents of the link state advertisement in hex, including the header.
    """
    sequence_number: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:sequence-number', pattern='^(?=^0x[0-9a-fA-F]+$).*$'
        ),
    ] = None
    """
    A signed 32-bit integer used to detect old and duplicate
    LSAs. The greater the sequence number the more recent the
    LSA.
    """
    checksum: Annotated[
        Optional[str],
        Field(alias='srl_nokia-ospf:checksum', pattern='^(?=^0x[0-9a-fA-F]+$).*$'),
    ] = None
    """
    The checksum of the complete contents of the LSA excluding
    the age field.
    """
    age: Annotated[Optional[int], Field(alias='srl_nokia-ospf:age', ge=0, le=65535)] = (
        None
    )
    """
    The time since the LSA's generation in seconds
    """
    options: Annotated[
        Optional[str],
        Field(alias='srl_nokia-ospf:options', pattern='^(?=^0x[0-9a-fA-F]+$).*$'),
    ] = None
    """
    Contents of the options field
    """
    opaque_lsa: Annotated[
        Optional[OpaqueLsaContainer2], Field(alias='srl_nokia-ospf:opaque-lsa')
    ] = None
    ospfv3_link_lsa: Annotated[
        Optional[Ospfv3LinkLsaContainer], Field(alias='srl_nokia-ospf:ospfv3-link-lsa')
    ] = None


class LsaListEntry3(BaseModel):
    """
    List of the LSAs of a specified type in the
    LSDB for the specified area
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    advertising_router: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:advertising-router',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The router ID of the router that originated the LSA
    """
    link_state_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:link-state-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    The Link State ID for the specified LSA type. The exact
    defined value of the Link State ID is dependent on the LSA
    type.
    """
    advertisement: Annotated[
        Optional[str], Field(alias='srl_nokia-ospf:advertisement')
    ] = None
    """
    Contents of the link state advertisement in hex, including the header.
    """
    sequence_number: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:sequence-number', pattern='^(?=^0x[0-9a-fA-F]+$).*$'
        ),
    ] = None
    """
    A signed 32-bit integer used to detect old and duplicate
    LSAs. The greater the sequence number the more recent the
    LSA.
    """
    checksum: Annotated[
        Optional[str],
        Field(alias='srl_nokia-ospf:checksum', pattern='^(?=^0x[0-9a-fA-F]+$).*$'),
    ] = None
    """
    The checksum of the complete contents of the LSA excluding
    the age field.
    """
    age: Annotated[Optional[int], Field(alias='srl_nokia-ospf:age', ge=0, le=65535)] = (
        None
    )
    """
    The time since the LSA's generation in seconds
    """
    options: Annotated[
        Optional[str],
        Field(alias='srl_nokia-ospf:options', pattern='^(?=^0x[0-9a-fA-F]+$).*$'),
    ] = None
    """
    Contents of the options field
    """
    router_lsa: Annotated[
        Optional[RouterLsaContainer], Field(alias='srl_nokia-ospf:router-lsa')
    ] = None
    network_lsa: Annotated[
        Optional[NetworkLsaContainer], Field(alias='srl_nokia-ospf:network-lsa')
    ] = None
    summary_lsa: Annotated[
        Optional[SummaryLsaContainer], Field(alias='srl_nokia-ospf:summary-lsa')
    ] = None
    nssa_external_lsa: Annotated[
        Optional[NssaExternalLsaContainer],
        Field(alias='srl_nokia-ospf:nssa-external-lsa'),
    ] = None
    opaque_lsa: Annotated[
        Optional[OpaqueLsaContainer3], Field(alias='srl_nokia-ospf:opaque-lsa')
    ] = None
    ospfv3_router_lsa: Annotated[
        Optional[Ospfv3RouterLsaContainer],
        Field(alias='srl_nokia-ospf:ospfv3-router-lsa'),
    ] = None
    ospfv3_network_lsa: Annotated[
        Optional[Ospfv3NetworkLsaContainer],
        Field(alias='srl_nokia-ospf:ospfv3-network-lsa'),
    ] = None
    ospfv3_inter_area_prefix_lsa: Annotated[
        Optional[Ospfv3InterAreaPrefixLsaContainer],
        Field(alias='srl_nokia-ospf:ospfv3-inter-area-prefix-lsa'),
    ] = None
    ospfv3_inter_area_router_lsa: Annotated[
        Optional[Ospfv3InterAreaRouterLsaContainer],
        Field(alias='srl_nokia-ospf:ospfv3-inter-area-router-lsa'),
    ] = None
    ospfv3_external_lsa: Annotated[
        Optional[Ospfv3ExternalLsaContainer2],
        Field(alias='srl_nokia-ospf:ospfv3-external-lsa'),
    ] = None
    ospfv3_intra_area_prefix_lsa: Annotated[
        Optional[Ospfv3IntraAreaPrefixLsaContainer],
        Field(alias='srl_nokia-ospf:ospfv3-intra-area-prefix-lsa'),
    ] = None


class LsasContainer(BaseModel):
    """
    Enclosing container for a list of the LSAs of
    the specified type received by the system
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsa: Annotated[Optional[List[LsaListEntry]], Field(alias='srl_nokia-ospf:lsa')] = (
        None
    )


class LsasContainer2(BaseModel):
    """
    Enclosing container for a list of the LSAs of
    the specified type received by the system
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsa: Annotated[Optional[List[LsaListEntry2]], Field(alias='srl_nokia-ospf:lsa')] = (
        None
    )


class LsasContainer3(BaseModel):
    """
    Enclosing container for a list of the LSAs of
    the specified type received by the system
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsa: Annotated[Optional[List[LsaListEntry3]], Field(alias='srl_nokia-ospf:lsa')] = (
        None
    )


class LspListEntry(BaseModel):
    """
    List of LSPs in the LSDB.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsp_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:lsp-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f][0-9A-Fa-f]-[0-9A-Fa-f][0-9A-Fa-f]$).*$',
        ),
    ] = None
    """
    The value specifies the LSP Id and is given in the format as 6 octets of adjacency system-id followed by 1 octet Lan-ID and 1 octet LSP Number.
    """
    maximum_area_addresses: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:maximum-area-addresses', ge=0, le=255),
    ] = None
    """
    Number of area addresses permitted for this ISs area

    0 indicates the IS only supports three area addresses (by default). Any number inclusive of 1 and 254 indicates the number of areas allowed.
    """
    version: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:version', ge=0, le=255)
    ] = None
    """
    PDU version. This is set to 1.
    """
    version2: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:version2', ge=0, le=255)
    ] = None
    """
    PDU version2. This is set to 1
    """
    id_length: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:id-length', ge=0, le=255)
    ] = None
    """
    Length of the ID field of NSAP addresses and NETs used in this routing domain.
    """
    pdu_type: Annotated[
        Optional[EnumerationEnum157], Field(alias='srl_nokia-isis:pdu-type')
    ] = None
    """
    Link State PDU type.
    """
    remaining_lifetime: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:remaining-lifetime', ge=0, le=65535)
    ] = None
    """
    Remaining lifetime in seconds before the LSP expiration.
    """
    sequence_number: Annotated[
        Optional[int],
        Field(alias='srl_nokia-isis:sequence-number', ge=0, le=4294967295),
    ] = None
    """
    Sequence number of the LSP.
    """
    checksum: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:checksum', ge=0, le=65535)
    ] = None
    """
    Checksum of the LSP.
    """
    pdu_length: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:pdu-length', ge=0, le=65535)
    ] = None
    """
    Total length of the LSP.
    """
    flags: Annotated[
        Optional[List[EnumerationEnum158]], Field(alias='srl_nokia-isis:flags')
    ] = []
    """
    LSP Type-Block flags.
    """
    is_type: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:is-type', ge=1, le=3)
    ] = None
    """
    Type of neighboring system.
    """
    tlvs: Annotated[Optional[TlvsContainer], Field(alias='srl_nokia-isis:tlvs')] = None
    undefined_tlvs: Annotated[
        Optional[UndefinedTlvsContainer], Field(alias='srl_nokia-isis:undefined-tlvs')
    ] = None


class MplsContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    control_word: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp-evpn:control-word')
    ] = False
    """
    Configures the use of control-word for EVPN MPLS packets

    When set to true, the router pushes the control-word below the bottom of the stack label. This
    prevents the Provider routers from mistakenly decode the payload of EVPN packets as an IP header
    and misorder packets of the same flow.
    """
    flow_label: Annotated[
        Optional[bool], Field(alias='srl_nokia-bgp-evpn:flow-label')
    ] = False
    """
    Configures the use of flow-label for EVPN MPLS packets

    When set to true, the router signals the use of the Flow Aware Transport (FAT) label in the F flag
    of the Layer 2 attributes extended community sent along with the EVPN routes (AD per EVI for VPWS or
    Inclusive Multicast Ethernet Tag route for MAC-VRF). For EVPN VPWS network instances, if the local
    and remote flags are set to 1 and match, the flow label is pushed at the bottom of the stack. On
    reception, the flow label is also expected and packets without it are dropped. If there is a
    mismatch between the local and remote F flags, the EVPN destination is removed.
    """
    bridge_table: Annotated[
        Optional[BridgeTableContainer2], Field(alias='srl_nokia-bgp-evpn:bridge-table')
    ] = None
    route_table: Annotated[
        Optional[RouteTableContainer], Field(alias='srl_nokia-bgp-evpn:route-table')
    ] = None
    next_hop_resolution: Annotated[
        Optional[NextHopResolutionContainer],
        Field(alias='srl_nokia-bgp-evpn:next-hop-resolution'),
    ] = None


class NextHopGroupsContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    group: Annotated[
        Optional[List[GroupListEntry22]], Field(alias='srl_nokia-next-hop-groups:group')
    ] = None


class PacketTypesContainer(BaseModel):
    """
    Enable tracing for selected packet types only
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    hello: Annotated[Optional[HelloContainer], Field(alias='srl_nokia-pim:hello')] = (
        None
    )
    register: Annotated[
        Optional[RegisterContainer2], Field(alias='srl_nokia-pim:register')
    ] = None
    register_stop: Annotated[
        Optional[RegisterStopContainer], Field(alias='srl_nokia-pim:register-stop')
    ] = None
    join_prune: Annotated[
        Optional[JoinPruneContainer2], Field(alias='srl_nokia-pim:join-prune')
    ] = None
    assert_: Annotated[
        Optional[AssertContainer2], Field(alias='srl_nokia-pim:assert')
    ] = None


class PathRequestListEntry(BaseModel):
    """
    List of Path Computation Request (PCReq) messages sent by the PCC to request a path computation.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    request_id: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:request-id', ge=1, le=4294967295)
    ] = None
    """
    The unique path computation request identifier represented in PCReq message
    """
    lsp_type: Annotated[
        Optional[EnumerationEnum250], Field(alias='srl_nokia-pcep:lsp-type')
    ] = None
    """
    The type of LSP
    """
    tunnel_id: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:tunnel-id', ge=0, le=4294967295)
    ] = None
    """
    The unique tunnel identifier that remains constant  over the life time of a tunnel.
    """
    lsp_id: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:lsp-id', ge=0, le=4294967295)
    ] = None
    """
    The unique identifier for the LSP
    """
    extended_tunnel_id: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastType]],
        Field(alias='srl_nokia-pcep:extended-tunnel-id'),
    ] = None
    """
    The extended tunnel identifier
    """
    lsp_name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-pcep:lsp-name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The LSP path name that is unique in the PCC and remains constant throughout a path's life time.
    """
    source_address: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:source-address'),
    ] = None
    """
    The source address of the path for which path computation is requested

    It is the END-POINTS object used in PCReq message.
    """
    destination_address: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:destination-address'),
    ] = None
    """
    The destination address of the path for which the path computation is requested

    It is the END-POINTS object used in PCReq message.
    """
    message_state: Annotated[
        Optional[EnumerationEnum260], Field(alias='srl_nokia-pcep:message-state')
    ] = None
    """
    The state of the PCReq message
    """
    sync_vector_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pcep:sync-vector-id', ge=0, le=18446744073709551615),
    ] = None
    """
    The Synchronization Vector (svec) identifier for Synchronized Dependent Path Computations
    """
    metric_bound: Annotated[
        Optional[List[EnumerationEnum261]], Field(alias='srl_nokia-pcep:metric-bound')
    ] = []
    """
    Indicates  whether the metric-value specifies a bound (a maximum)for the path metric that must not be exceeded for the PCC to consider the computed path as acceptable

    It is the METRIC object used in PCReq message.
    """
    metric_compute: Annotated[
        Optional[List[EnumerationEnum261]], Field(alias='srl_nokia-pcep:metric-compute')
    ] = []
    """
    Indicates whether PCE must provide the computed path metric value in Path Computation Response (PCRep) message for the corresponding metric

    It is the METRIC object used in PCReq message.
    """
    local_protection_desired: Annotated[
        Optional[bool], Field(alias='srl_nokia-pcep:local-protection-desired')
    ] = None
    """
    Indicates whether local protection is desired or not

    It is the LSPA (LSP Attribute) object used in PCReq message. When the value of this object is set to 'true', it indicates that the computed path must include links protected with Fast Reroute as defined in the maximum number of hops to be transversed that must not be exceeded to consider computed path as acceptable.
    """
    msg_priority: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:msg-priority', ge=0, le=4294967295)
    ] = None
    """
    The priority of the PCReq message

    It is RP object used in PCReq message.
    """
    reoptimization: Annotated[
        Optional[bool], Field(alias='srl_nokia-pcep:reoptimization')
    ] = None
    """
    Indicates whether the PCReq message relates to the reoptimization of an existing TE LSP

    It is the RP object used in PCReq message.
    """
    loose_path_acceptable: Annotated[
        Optional[bool], Field(alias='srl_nokia-pcep:loose-path-acceptable')
    ] = None
    """
    Indicates whether a loose path is acceptable (true) or not (false)

    It is the RP object used in PCReq message.

    When the value of this object is set to 'true', it indicates that a loose path is acceptable. When the value of this object is set to 'false', it indicates that a path exclusively made of strict hops is required.
    """
    bidirectional: Annotated[
        Optional[bool], Field(alias='srl_nokia-pcep:bidirectional')
    ] = None
    """
    Indicates whether the PCReq message relates to a bi-directional TE LSP that has the same traffic engineering requirements in each direction

    It is the RP object used in PCReq message. TE requirements include fate sharing, protection and restoration, LSRs, TE links, and resource requirements (e.g., latency and jitter) 
    """
    max_lsr_labels: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:max-lsr-labels', ge=1, le=10)
    ] = None
    """
    The maximum segment routing label stack size for this LSP.
    """
    profiles: Annotated[
        Optional[List[ProfilesLeafList]], Field(alias='srl_nokia-pcep:profiles')
    ] = []
    """
    List of path profile identifiers
    """
    extended_profiles: Annotated[
        Optional[List[ExtendedProfilesLeafList]],
        Field(alias='srl_nokia-pcep:extended-profiles'),
    ] = []
    """
    List of extended identifiers associated with the path profile identifier.
    """
    igp_metric: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:igp-metric', ge=0, le=4294967295)
    ] = None
    """
    The Interior Gateway Protocol (IGP) metric that must be optimized by the path computation algorithm for providing the cost of computed path

    It is the METRIC object used in PCReq message.
    """
    te_metric: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:te-metric', ge=0, le=4294967295)
    ] = None
    """
    The Traffic Engineering (TE) metric that must be optimized by the path computation algorithm for providing the cost of computed path

    It is the METRIC object used in PCReq messages.
    """
    hop_count: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:hop-count', ge=0, le=4294967295)
    ] = None
    """
    The number of hops that are traversed via the TE tunnel

    It is the METRIC object in PCReq message.
    """
    setup_priority: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:setup-priority', ge=0, le=7)
    ] = None
    """
    The priority of the TE LSP with respect to holding resources

    The value of 0 represents highest priority. The holding priority indicates whether this session can be in PCReq message.
    """
    holding_priority: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:holding-priority', ge=0, le=7)
    ] = None
    """
    The priority of the TE LSP with respect to holding resources

    The value of 0 represents highest priority.The holding priority indicates whether this session can be preempted by another session. It is the LSPA object used in PCReq message.
    """
    exclude_any: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:exclude-any', ge=0, le=4294967295)
    ] = None
    """
    Set of attribute filters associated with a tunnel, any of which renders a link unacceptable

    It is the LSPA object used in PCReq message.
    """
    include_any: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:include-any', ge=0, le=4294967295)
    ] = None
    """
    Set of attribute filters associated with a tunne,  any of which renders a link acceptable

    It is the LSPA object used in PCReq message.
    """
    include_all: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:include-all', ge=0, le=4294967295)
    ] = None
    """
    Set of attribute filters associated with a tunnel, all of which much be present for a link to be acceptable

    It is the LSPA object used in PCReq message.
    """
    lsp_bandwidth: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:lsp-bandwidth', ge=0, le=4294967295)
    ] = None
    """
    The bandwidth that is being requested by the LSP.
    """


class PathListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    explicit_path_name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:explicit-path-name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    A unique name to identify the explicit path
    """
    hop: Annotated[
        Optional[List[HopListEntry]], Field(alias='srl_nokia-te-policies:hop')
    ] = None


class PeerListEntry(BaseModel):
    """
    List of LDP peers from which IPv4 address bindings have been received
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsr_id: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-ldp:lsr-id'),
    ] = None
    """
    The LSR ID of the peer, as a portion of the peer LDP ID
    """
    label_space_id: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:label-space-id', ge=0, le=65535)
    ] = None
    """
    The Label Space ID of the peer, as a portion of the peer LDP ID
    """
    ip_address: Annotated[
        Optional[List[IpAddressLeafList]], Field(alias='srl_nokia-ldp:ip-address')
    ] = []
    """
    The list of IPv4 address bindings received from the peer
    """


class PolicyListEntry(BaseModel):
    """
    List of policies for PCC
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    association_name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-pcep:association-name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Association name
    """
    association_id: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:association-id', ge=0, le=65535)
    ] = 0
    """
    Association-id for the associaiton group
    """
    association_source: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:association-source'),
    ] = None
    """
    Associaiton Source for the association
    """


class PolicyListEntry2(BaseModel):
    """
    A forwarding policy is defined to have a set of match criteria, allowing particular fields of a packet's header to be matched, and a set of forwarding actions which determines how the local system should forward the packet.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    policy_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-policy-forwarding:policy-id',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    A unique name identifying the forwarding policy. This name is used when applying the policy to a particular interface.
    """
    description: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-policy-forwarding:description',
            max_length=255,
            min_length=1,
        ),
    ] = None
    """
    Description string for the policy
    """
    type: Annotated[
        Optional[EnumerationEnum316], Field(alias='srl_nokia-policy-forwarding:type')
    ] = 'vrf-selection-policy'
    """
    The type of the policy
    """
    rule: Annotated[
        Optional[List[RuleListEntry]], Field(alias='srl_nokia-policy-forwarding:rule')
    ] = None


class PrefixFecListEntry3(BaseModel):
    """
    List of IPv6 FEC-label bindings received from LDP peers
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    fec: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:fec',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))$).*$',
        ),
    ] = None
    """
    The prefix FEC value in the FEC-label binding, learned in a Label Mapping message received from a peer
    """
    lsr_id: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-ldp:lsr-id'),
    ] = None
    """
    The LSR ID of the peer, as a portion of the peer LDP ID
    """
    label_space_id: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:label-space-id', ge=0, le=65535)
    ] = None
    """
    The Label Space ID of the peer, as a portion of the peer LDP ID
    """
    label: Annotated[
        Optional[Union[MplsLabelNonReservedType, EnumerationEnum95]],
        Field(alias='srl_nokia-ldp:label'),
    ] = None
    """
    Received label value
    """
    entropy_label_transmit: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:entropy-label-transmit')
    ] = None
    """
    Entropy label (EL/ELI) is pushed when transmitting to this peer
    """
    ingress_lsr_fec: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:ingress-lsr-fec')
    ] = None
    """
    When set true, the router is an ingress LSR for the FEC
    """
    next_hop: Annotated[
        Optional[List[NextHopListEntry2]], Field(alias='srl_nokia-ldp:next-hop')
    ] = None
    used_in_forwarding: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:used-in-forwarding')
    ] = None
    """
    Reads true if the label is used in forwarding and has been programmed for a push operation
    """
    not_used_reason: Annotated[
        Optional[EnumerationEnum109], Field(alias='srl_nokia-ldp:not-used-reason')
    ] = None
    """
    The reason why the label mapping is not being used in the dataplane
    """


class PrefixFecListEntry4(BaseModel):
    """
    List of IPv6 FEC-label bindings advertised to LDP peers
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    fec: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:fec',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))$).*$',
        ),
    ] = None
    """
    The prefix FEC value in the FEC-label binding, advertised in a Label Mapping message sent to a peer
    """
    egress_lsr_fec: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:egress-lsr-fec')
    ] = None
    """
    When set true, the router is the egress LSR for the FEC (the FEC is locally originated)
    """
    lsr_id: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-ldp:lsr-id'),
    ] = None
    """
    The LSR ID of the peer, as a portion of the peer LDP ID
    """
    label_space_id: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:label-space-id', ge=0, le=65535)
    ] = None
    """
    The Label Space ID of the peer, as a portion of the peer LDP ID
    """
    label: Annotated[
        Optional[Union[MplsLabelNonReservedType, EnumerationEnum95]],
        Field(alias='srl_nokia-ldp:label'),
    ] = None
    """
    Advertised label value
    """
    label_type: Annotated[
        Optional[EnumerationEnum98], Field(alias='srl_nokia-ldp:label-type')
    ] = None
    """
    The label type of the advertised label
    """
    label_status: Annotated[
        Optional[List[EnumerationEnum110]], Field(alias='srl_nokia-ldp:label-status')
    ] = []
    """
    Label status
    """


class ProviderTunnelContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    inclusive: Annotated[
        Optional[InclusiveContainer], Field(alias='srl_nokia-mvpn-l3:inclusive')
    ] = None
    selective: Annotated[
        Optional[SelectiveContainer], Field(alias='srl_nokia-mvpn-l3:selective')
    ] = None


class PseudowireListEntry(BaseModel):
    """
    Pseudowire that can be used for this connection point

    Multiple pseudowires can be configured within the same connection point.
    The active pseudowire is selected based on the precedence that it is
    configured with the endpoint.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-network-instance:name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The identifier for the pseudowire
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-network-instance:admin-state')
    ] = 'enable'
    """
    The configured, desired state of the pseudowire
    """
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-network-instance:oper-state')
    ] = None
    """
    The operational state of the pseudowire
    """
    oper_down_reason: Annotated[
        Optional[List[EnumerationEnum309]],
        Field(alias='srl_nokia-network-instance:oper-down-reason'),
    ] = []
    """
    The reason for the pseudowire being oper down
    """
    index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-network-instance:index', ge=0, le=18446744073709551615),
    ] = 0
    """
    Network instance allocated pseudowire index
    """
    destination_index: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-network-instance:destination-index',
            ge=0,
            le=18446744073709551615,
        ),
    ] = None
    """
    A system-wide unique identifier of a pseudowire object (system allocated).
    """
    last_change: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-network-instance:last-change',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The date and time of the most recent change to the pseudowire state
    """
    pw_tunnel: Annotated[
        str,
        Field(
            alias='srl_nokia-network-instance:pw-tunnel',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ]
    """
    The tunnel over which the pseudowire is transported
    """
    control_word: Annotated[
        Optional[bool], Field(alias='srl_nokia-network-instance:control-word')
    ] = False
    """
    Whether control word is enabled for the pseudowire

    If set to true, the router signals the support of the control
    word for the pseudowires. If the remote peer signals support
    for the control word too, the router pushes the control word
    immediately below the vc label (or the flow-label if enabled).
    """
    flow_label: Annotated[
        Optional[bool], Field(alias='srl_nokia-network-instance:flow-label')
    ] = False
    """
    Whether the flow aware transport (FAT) label is enabled for the
    pseudowire. If set to true, the router signals the support of the FAT
    label for the pseudowire. If the remote peer signals support for the
    FAT label too, the router pushes the FAT label immediately below the
    vc label.
    """
    flow_label_oper_state: Annotated[
        Optional[EnumerationEnum2],
        Field(alias='srl_nokia-network-instance:flow-label-oper-state'),
    ] = None
    """
    Operational state of the flow label on the pseudowire

    The state depends on the local configuration of flow-label and the R
    flag signaled by the peer. When set to down, the flow-aware transport
    label is not used irrespective of the local configuration of the
    flow-label.
    """
    signaling: Annotated[
        Optional[SignalingContainer],
        Field(alias='srl_nokia-network-instance:signaling'),
    ] = None
    local: Annotated[
        Optional[LocalContainer2], Field(alias='srl_nokia-network-instance:local')
    ] = None
    remote: Annotated[
        Optional[RemoteContainer2], Field(alias='srl_nokia-network-instance:remote')
    ] = None


class ReceivedAddressContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    peer: Annotated[
        Optional[List[PeerListEntry]], Field(alias='srl_nokia-ldp:peer')
    ] = None


class ReceivedPrefixFecContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_fec: Annotated[
        Optional[List[PrefixFecListEntry3]], Field(alias='srl_nokia-ldp:prefix-fec')
    ] = None


class RecordRouteObjectsListEntry(BaseModel):
    """
    Path RROs details.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    route_object_index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pcep:route-object-index', ge=0, le=4294967295),
    ] = None
    """
    The unique identifier for RRO/ERO entries
    """
    sid_label: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:sid-label', ge=16, le=1048575)
    ] = None
    """
    Unique Segment Identifier label value
    """
    sid_type: Annotated[
        Optional[EnumerationEnum256], Field(alias='srl_nokia-pcep:sid-type')
    ] = None
    """
    Refers to strict or loose hop
    """
    prefix: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:prefix'),
    ] = None
    """
    IP address for a given segment in ERO or RRO
    """
    router_id: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:router-id'),
    ] = None
    """
    Router-id for a given unnumbered segment in ERO or RRO
    """
    as_number: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:as-number', ge=0, le=4294967295)
    ] = None
    """
    AS-Number for a given segment in ERO or RRO
    """
    local_interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-pcep:local-interface-name')
    ] = None
    """
    Local interface name for a given unnumbered/link-local segment in ERO or RRO
    """
    local_interface_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pcep:local-interface-id', ge=0, le=4294967295),
    ] = None
    """
    Local interface-id for a given unnumbered/link-local segment in ERO or RRO
    """
    remote_interface_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pcep:remote-interface-id', ge=0, le=4294967295),
    ] = None
    """
    Remote interface-id for a given unnumbered/link-local segment in ERO or RRO
    """
    local_prefix: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:local-prefix'),
    ] = None
    """
    Local IP address for a given segment in ERO or RRO
    """
    remote_prefix: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:remote-prefix'),
    ] = None
    """
    Remote IP address for a given segment in ERO or RRO
    """


class SelectedTypesCase2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    packet_types: Annotated[
        Optional[PacketTypesContainer], Field(alias='srl_nokia-pim:packet-types')
    ] = None


class TeConstraintsContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric_type: Annotated[
        Optional[EnumerationEnum384], Field(alias='srl_nokia-te-policies:metric-type')
    ] = 'igp'
    """
    Metric type used for segment-list computation
    """
    delay_metric_limit: Annotated[
        Optional[Union[EnumerationEnum385, DelayMetricLimitType1]],
        Field(alias='srl_nokia-te-policies:delay-metric-limit'),
    ] = 'no-limit'
    """
    The maximum acceptable delay for the segment-list used via local CSPF during path computation
    """
    hop_limit: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:hop-limit', ge=2, le=255)
    ] = 255
    """
    The maximum number of hops for the segment-list
    """
    segment_depth: Annotated[
        Optional[SegmentDepthContainer],
        Field(alias='srl_nokia-te-policies:segment-depth'),
    ] = None
    local_sr_protection: Annotated[
        Optional[EnumerationEnum386],
        Field(alias='srl_nokia-te-policies:local-sr-protection'),
    ] = 'preferred'
    """
    Protection offered for local CSPF computed segment-lists
    """
    label_stack_reduction: Annotated[
        Optional[bool], Field(alias='srl_nokia-te-policies:label-stack-reduction')
    ] = True
    """
    Set to true to enable label stack reduction for local CSPF computed segment-lists
    """
    exclude_hop: Annotated[
        Optional[
            List[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]]
        ],
        Field(alias='srl_nokia-te-policies:exclude-hop'),
    ] = []
    """
    Excluded IP addresses from path computation
    """
    exclude_srlg: Annotated[
        Optional[List[ExcludeSrlgLeafList]],
        Field(alias='srl_nokia-te-policies:exclude-srlg'),
    ] = []
    """
    Excluded SRLGs during path computation
    """
    secondary_srlg: Annotated[
        Optional[bool], Field(alias='srl_nokia-te-policies:secondary-srlg')
    ] = False
    """
    Set to to true to consider SRLG for secondary and standby segment list of uncolored type
    """


class TeConstraintsContainer2(BaseModel):
    """
    Traffic Engineering constraints for dynamic segment-lists
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric_type: Annotated[
        Optional[EnumerationEnum384], Field(alias='srl_nokia-te-policies:metric-type')
    ] = None
    """
    Metric type used for segment-list computation
    """
    delay_metric_limit: Annotated[
        Optional[Union[EnumerationEnum385, DelayMetricLimitType1]],
        Field(alias='srl_nokia-te-policies:delay-metric-limit'),
    ] = None
    """
    The maximum acceptable delay for the segment-list used via local CSPF during path computation
    """
    hop_limit: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:hop-limit', ge=0, le=255)
    ] = None
    """
    Hop limit contraint used for computation of the Segment List
    """
    local_sr_protection: Annotated[
        Optional[EnumerationEnum386],
        Field(alias='srl_nokia-te-policies:local-sr-protection'),
    ] = None
    """
    Protection offered for local CSPF computed segment-lists
    """
    label_stack_reduction: Annotated[
        Optional[bool], Field(alias='srl_nokia-te-policies:label-stack-reduction')
    ] = None
    """
    If label stack reduction is enabled for the given Segment List
    """
    secondary_srlg: Annotated[
        Optional[bool], Field(alias='srl_nokia-te-policies:secondary-srlg')
    ] = None
    """
    If SRLG constraints are taken into account while computing Secondary Segment List
    """
    exclude_hop: Annotated[
        Optional[
            List[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]]
        ],
        Field(alias='srl_nokia-te-policies:exclude-hop'),
    ] = []
    """
    Excluded IP addresses from path computation for the given Segment List
    """
    exclude_srlg: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-te-policies:exclude-srlg')
    ] = []
    """
    SRLG links excluded during path computation for the given Segment List
    """
    segment_depth: Annotated[
        Optional[SegmentDepthContainer2],
        Field(alias='srl_nokia-te-policies:segment-depth'),
    ] = None


class TeConstraintsContainer3(BaseModel):
    """
    Traffic Engineering constraints for dynamic segment-lists
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    metric_type: Annotated[
        Optional[EnumerationEnum384], Field(alias='srl_nokia-te-policies:metric-type')
    ] = None
    """
    Metric type used for segment-list computation
    """
    delay_metric_limit: Annotated[
        Optional[Union[EnumerationEnum385, DelayMetricLimitType1]],
        Field(alias='srl_nokia-te-policies:delay-metric-limit'),
    ] = None
    """
    The maximum acceptable delay for the segment-list used via local CSPF during path computation
    """
    hop_limit: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:hop-limit', ge=0, le=255)
    ] = None
    """
    Hop limit contraint used for computation of the Segment List
    """
    local_sr_protection: Annotated[
        Optional[EnumerationEnum386],
        Field(alias='srl_nokia-te-policies:local-sr-protection'),
    ] = None
    """
    Protection offered for local CSPF computed segment-lists
    """
    label_stack_reduction: Annotated[
        Optional[bool], Field(alias='srl_nokia-te-policies:label-stack-reduction')
    ] = None
    """
    If label stack reduction is enabled for the given Segment List
    """
    secondary_srlg: Annotated[
        Optional[bool], Field(alias='srl_nokia-te-policies:secondary-srlg')
    ] = None
    """
    If SRLG constraints are taken into account while computing Secondary Segment List
    """
    exclude_hop: Annotated[
        Optional[
            List[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]]
        ],
        Field(alias='srl_nokia-te-policies:exclude-hop'),
    ] = []
    """
    Excluded IP addresses from path computation for the given Segment List
    """
    exclude_srlg: Annotated[
        Optional[List[str]], Field(alias='srl_nokia-te-policies:exclude-srlg')
    ] = []
    """
    SRLG links excluded during path computation for the given Segment List
    """
    segment_depth: Annotated[
        Optional[SegmentDepthContainer3],
        Field(alias='srl_nokia-te-policies:segment-depth'),
    ] = None


class TraceOptionsContainer18(BaseModel):
    """
    Enter the trace-options context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    trace: Annotated[Optional[TraceContainer7], Field(alias='srl_nokia-igmp:trace')] = (
        None
    )


class TraceOptionsContainer5(BaseModel):
    """
    Enter the trace-options context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    trace: Annotated[Optional[TraceContainer2], Field(alias='srl_nokia-mld:trace')] = (
        None
    )


class TunnelTableContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    ipv4: Annotated[
        Optional[Ipv4Container8], Field(alias='srl_nokia-tunnel-tables:ipv4')
    ] = None
    ipv6: Annotated[
        Optional[Ipv6Container8], Field(alias='srl_nokia-tunnel-tables:ipv6')
    ] = None


class AdjacencyListEntry(BaseModel):
    """
    List of hello adjacencies
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsr_id: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-ldp:lsr-id'),
    ] = None
    """
    The LSR ID of the peer, as a portion of the peer LDP ID
    """
    label_space_id: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:label-space-id', ge=0, le=65535)
    ] = None
    """
    The Label Space ID of the peer, as a portion of the peer LDP ID
    """
    local_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:local-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Local address of the hello adjacency
    """
    remote_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:remote-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Remote address of the hello adjacency
    """
    hello_received: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:hello-received', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages received
    """
    hello_sent: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:hello-sent', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages sent
    """
    hello_holdtime: Annotated[
        Optional[HelloHoldtimeContainer], Field(alias='srl_nokia-ldp:hello-holdtime')
    ] = None


class AdjacencyListEntry2(BaseModel):
    """
    List of hello adjacencies
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsr_id: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-ldp:lsr-id'),
    ] = None
    """
    The LSR ID of the peer, as a portion of the peer LDP ID
    """
    label_space_id: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:label-space-id', ge=0, le=65535)
    ] = None
    """
    The Label Space ID of the peer, as a portion of the peer LDP ID
    """
    local_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:local-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Local address of the hello adjacency
    """
    remote_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:remote-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Remote address of the hello adjacency
    """
    hello_received: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:hello-received', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages received
    """
    hello_sent: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:hello-sent', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages sent
    """
    hello_holdtime: Annotated[
        Optional[HelloHoldtimeContainer2], Field(alias='srl_nokia-ldp:hello-holdtime')
    ] = None


class AdjacencyListEntry3(BaseModel):
    """
    List of hello adjacencies
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsr_id: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-ldp:lsr-id'),
    ] = None
    """
    The LSR ID of the peer, as a portion of the peer LDP ID
    """
    label_space_id: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:label-space-id', ge=0, le=65535)
    ] = None
    """
    The Label Space ID of the peer, as a portion of the peer LDP ID
    """
    local_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:local-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Local address of the hello adjacency
    """
    remote_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:remote-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Remote address of the hello adjacency
    """
    hello_received: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:hello-received', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages received
    """
    hello_sent: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:hello-sent', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages sent
    """
    hello_holdtime: Annotated[
        Optional[HelloHoldtimeContainer3], Field(alias='srl_nokia-ldp:hello-holdtime')
    ] = None


class AdjacencyListEntry4(BaseModel):
    """
    List of hello adjacencies
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsr_id: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-ldp:lsr-id'),
    ] = None
    """
    The LSR ID of the peer, as a portion of the peer LDP ID
    """
    label_space_id: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:label-space-id', ge=0, le=65535)
    ] = None
    """
    The Label Space ID of the peer, as a portion of the peer LDP ID
    """
    local_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:local-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Local address of the hello adjacency
    """
    remote_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:remote-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Remote address of the hello adjacency
    """
    hello_received: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:hello-received', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages received
    """
    hello_sent: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:hello-sent', ge=0, le=18446744073709551615),
    ] = 0
    """
    The number of Hello messages sent
    """
    hello_holdtime: Annotated[
        Optional[HelloHoldtimeContainer4], Field(alias='srl_nokia-ldp:hello-holdtime')
    ] = None


class AdvertisedPrefixFecContainer2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    prefix_fec: Annotated[
        Optional[List[PrefixFecListEntry4]], Field(alias='srl_nokia-ldp:prefix-fec')
    ] = None


class AfiSafiListEntry5(BaseModel):
    """
    List of address families with routes in the BGP RIB
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    afi_safi_name: Annotated[
        Optional[str], Field(alias='srl_nokia-rib-bgp:afi-safi-name')
    ] = None
    """
    The name of the address family
    """
    ipv4_unicast: Annotated[
        Optional[Ipv4UnicastContainer8], Field(alias='srl_nokia-rib-bgp:ipv4-unicast')
    ] = None
    ipv4_labeled_unicast: Annotated[
        Optional[Ipv4LabeledUnicastContainer4],
        Field(alias='srl_nokia-rib-bgp:ipv4-labeled-unicast'),
    ] = None
    l3vpn_ipv4_unicast: Annotated[
        Optional[L3vpnIpv4UnicastContainer4],
        Field(alias='srl_nokia-rib-bgp:l3vpn-ipv4-unicast'),
    ] = None
    l3vpn_ipv6_unicast: Annotated[
        Optional[L3vpnIpv6UnicastContainer4],
        Field(alias='srl_nokia-rib-bgp:l3vpn-ipv6-unicast'),
    ] = None
    ipv6_unicast: Annotated[
        Optional[Ipv6UnicastContainer8], Field(alias='srl_nokia-rib-bgp:ipv6-unicast')
    ] = None
    ipv6_labeled_unicast: Annotated[
        Optional[Ipv6LabeledUnicastContainer4],
        Field(alias='srl_nokia-rib-bgp:ipv6-labeled-unicast'),
    ] = None
    evpn: Annotated[Optional[EvpnContainer6], Field(alias='srl_nokia-rib-bgp:evpn')] = (
        None
    )
    route_target: Annotated[
        Optional[RouteTargetContainer5], Field(alias='srl_nokia-rib-bgp:route-target')
    ] = None


class AssociationDetailListEntry(BaseModel):
    """
    List of pce-associations attached to LSP path
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    association_index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pcep:association-index', ge=0, le=4294967295),
    ] = None
    """
    The unique identifier for association entries
    """
    association_id: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:association-id', ge=0, le=65535)
    ] = 0
    """
    Association-id for the associaiton group
    """
    association_source: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:association-source'),
    ] = None
    """
    Associaiton Source for the association
    """
    disjointness_reference: Annotated[
        Optional[bool], Field(alias='srl_nokia-pcep:disjointness-reference')
    ] = False
    """
    Refers to shortest path or not
    """
    disjointness_type: Annotated[
        Optional[EnumerationEnum257], Field(alias='srl_nokia-pcep:disjointness-type')
    ] = 'loose'
    """
    Refers to strict or loose path
    """
    diversity_type: Annotated[
        Optional[EnumerationEnum258], Field(alias='srl_nokia-pcep:diversity-type')
    ] = 'none'
    """
    Refers to the choice of path node / link / srlg-node / srlg-link
    """
    association_type: Annotated[
        Optional[EnumerationEnum259], Field(alias='srl_nokia-pcep:association-type')
    ] = None
    """
    Associations types
    """


class BgpInstanceListEntry(BaseModel):
    """
    bgp evpn instances configured in net-instance
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    id: Annotated[Optional[int], Field(alias='srl_nokia-bgp-evpn:id', ge=1, le=2)] = (
        None
    )
    """
    The index of the bgp-vpn instance
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-bgp-evpn:admin-state')
    ] = 'enable'
    """
    Configurable state of the bgp evpn instance.
    """
    encapsulation_type: Annotated[
        Optional[EnumerationEnum12],
        Field(alias='srl_nokia-bgp-evpn:encapsulation-type'),
    ] = 'vxlan'
    """
    encap type of the bgp evpn instance.
    """
    vpws_attachment_circuits: Annotated[
        Optional[VpwsAttachmentCircuitsContainer],
        Field(alias='srl_nokia-bgp-evpn:vpws-attachment-circuits'),
    ] = None
    vxlan_interface: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-bgp-evpn:vxlan-interface',
            pattern='^(?=^(vxlan(0|1[0-9][0-9]|2([0-4][0-9]|5[0-5])|[1-9][0-9]|[1-9])\\.(0|[1-9](\\d){0,8}))$).*$',
        ),
    ] = None
    """
    Identifier of vxlan-interface used in this bgp-instance.
    """
    evi: Annotated[int, Field(alias='srl_nokia-bgp-evpn:evi', ge=1, le=65535)]
    """
    EVPN Instance identifier associated to the bgp-evpn instance.

    Used for auto-derivation of:
    - the bgp-instance route distinguisher in the format <ip-address>:evi (where 'ip-address' is the ipv4 address
      associated to the subinterface lo0.1.
    - the bgp-instance route target in the format <asn>:<evi>, where 'asn' is the autonomous-system configured in
      the network-instance default (under /protocols/bgp/autonomous-system).

    In addition, the evi value is used for the EVPN Multi-Homing Designated Forwarder (DF) Election.
    """
    ecmp: Annotated[
        Optional[int], Field(alias='srl_nokia-bgp-evpn:ecmp', ge=1, le=64)
    ] = 1
    """
    The supported range of ECMP values for layer-2 aliasing (in mac-vrf or vpws instances) or layer-3 ecmp (in routed
    instances)
    """
    internal_tags: Annotated[
        Optional[InternalTagsContainer], Field(alias='srl_nokia-bgp-evpn:internal-tags')
    ] = None
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-bgp-evpn:oper-state')
    ] = None
    """
    This leaf contains the operational state of bgp-instance.
    """
    oper_down_reason: Annotated[
        Optional[EnumerationEnum15], Field(alias='srl_nokia-bgp-evpn:oper-down-reason')
    ] = None
    """
    The reason for the bgp-instance being down
    """
    mpls: Annotated[
        Optional[MplsContainer2], Field(alias='srl_nokia-bgp-evpn:mpls')
    ] = None
    routes: Annotated[
        Optional[RoutesContainer], Field(alias='srl_nokia-bgp-evpn:routes')
    ] = None


class BgpRibContainer(BaseModel):
    """
    Container for BGP RIB state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    afi_safi: Annotated[
        Optional[List[AfiSafiListEntry5]], Field(alias='srl_nokia-rib-bgp:afi-safi')
    ] = None
    attr_sets: Annotated[
        Optional[AttrSetsContainer], Field(alias='srl_nokia-rib-bgp:attr-sets')
    ] = None


class BindingsContainer(BaseModel):
    """
    LDP address and label binding information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received_address: Annotated[
        Optional[ReceivedAddressContainer],
        Field(alias='srl_nokia-ldp:received-address'),
    ] = None
    advertised_address: Annotated[
        Optional[AdvertisedAddressContainer],
        Field(alias='srl_nokia-ldp:advertised-address'),
    ] = None
    received_prefix_fec: Annotated[
        Optional[ReceivedPrefixFecContainer],
        Field(alias='srl_nokia-ldp:received-prefix-fec'),
    ] = None
    advertised_prefix_fec: Annotated[
        Optional[AdvertisedPrefixFecContainer],
        Field(alias='srl_nokia-ldp:advertised-prefix-fec'),
    ] = None
    service_fec128: Annotated[
        Optional[List[ServiceFec128ListEntry]],
        Field(alias='srl_nokia-ldp:service-fec128'),
    ] = None


class BindingsContainer2(BaseModel):
    """
    LDP address and label binding information
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    received_address: Annotated[
        Optional[ReceivedAddressContainer2],
        Field(alias='srl_nokia-ldp:received-address'),
    ] = None
    advertised_address: Annotated[
        Optional[AdvertisedAddressContainer2],
        Field(alias='srl_nokia-ldp:advertised-address'),
    ] = None
    received_prefix_fec: Annotated[
        Optional[ReceivedPrefixFecContainer2],
        Field(alias='srl_nokia-ldp:received-prefix-fec'),
    ] = None
    advertised_prefix_fec: Annotated[
        Optional[AdvertisedPrefixFecContainer2],
        Field(alias='srl_nokia-ldp:advertised-prefix-fec'),
    ] = None
    service_fec128: Annotated[
        Optional[List[ServiceFec128ListEntry2]],
        Field(alias='srl_nokia-ldp:service-fec128'),
    ] = None


class ConnectionPointListEntry(BaseModel):
    """
    Connection-point information.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-network-instance:name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    A unique name identifying the connection-point
    """
    bridge_table: Annotated[
        Optional[BridgeTableContainer5],
        Field(alias='srl_nokia-network-instance:bridge-table'),
    ] = None
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-network-instance:oper-state')
    ] = None
    """
    The operational state of this connection-point.
    """
    oper_down_reason: Annotated[
        Optional[EnumerationEnum308],
        Field(alias='srl_nokia-network-instance:oper-down-reason'),
    ] = None
    """
    The reason for the connection-point being down in the network-instance
    """
    index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-network-instance:index', ge=0, le=18446744073709551615),
    ] = 0
    """
    network instance allocated connection-point index
    """
    pseudowire: Annotated[
        Optional[List[PseudowireListEntry]],
        Field(alias='srl_nokia-network-instance:pseudowire'),
    ] = None


class DynamicContainer(BaseModel):
    """
    Configuration and state for dynamic segment lists
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    path_algorithm: Annotated[
        Optional[EnumerationEnum383],
        Field(alias='srl_nokia-te-policies:path-algorithm'),
    ] = 'local-cspf'
    """
    Path computation method
    """
    te_constraints: Annotated[
        Optional[TeConstraintsContainer],
        Field(alias='srl_nokia-te-policies:te-constraints'),
    ] = None


class DynamicContainer2(BaseModel):
    """
    Dynamic Segment List
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    path_algorithm: Annotated[
        Optional[EnumerationEnum383],
        Field(alias='srl_nokia-te-policies:path-algorithm'),
    ] = None
    """
    Algorithm used for computation of the Segment List
    """
    te_constraints: Annotated[
        Optional[TeConstraintsContainer2],
        Field(alias='srl_nokia-te-policies:te-constraints'),
    ] = None


class DynamicContainer3(BaseModel):
    """
    Dynamic Segment List
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    path_algorithm: Annotated[
        Optional[EnumerationEnum383],
        Field(alias='srl_nokia-te-policies:path-algorithm'),
    ] = None
    """
    Algorithm used for computation of the Segment List
    """
    te_constraints: Annotated[
        Optional[TeConstraintsContainer3],
        Field(alias='srl_nokia-te-policies:te-constraints'),
    ] = None


class ExplicitPathsContainer(BaseModel):
    """
    Named paths used to specify SR policy segment lists
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    path: Annotated[
        Optional[List[PathListEntry]], Field(alias='srl_nokia-te-policies:path')
    ] = None


class HelloAdjacenciesContainer(BaseModel):
    """
    Container with a list of hello adjacencies
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    adjacency: Annotated[
        Optional[List[AdjacencyListEntry]], Field(alias='srl_nokia-ldp:adjacency')
    ] = None


class HelloAdjacenciesContainer2(BaseModel):
    """
    Container with a list of hello adjacencies
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    adjacency: Annotated[
        Optional[List[AdjacencyListEntry2]], Field(alias='srl_nokia-ldp:adjacency')
    ] = None


class HelloAdjacenciesContainer3(BaseModel):
    """
    Container with a list of hello adjacencies
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    adjacency: Annotated[
        Optional[List[AdjacencyListEntry3]], Field(alias='srl_nokia-ldp:adjacency')
    ] = None


class HelloAdjacenciesContainer4(BaseModel):
    """
    Container with a list of hello adjacencies
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    adjacency: Annotated[
        Optional[List[AdjacencyListEntry4]], Field(alias='srl_nokia-ldp:adjacency')
    ] = None


class IgmpContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-igmp:admin-state')
    ] = 'disable'
    """
    Administratively enable or disable the IGMP instance
    """
    query_interval: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:query-interval', ge=0, le=4294967295)
    ] = 125
    """
    Interval at which the router sends the IGMP membership queries
    """
    query_last_member_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp:query-last-member-interval', ge=0, le=4294967295),
    ] = 1
    """
    Interval at which Group-Specific-Query packets are transmitted
    """
    query_response_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-igmp:query-response-interval', ge=0, le=4294967295),
    ] = 10
    """
    Time to wait to receive a response to the IGMP membership query from the host
    """
    robust_count: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:robust-count', ge=2, le=10)
    ] = 2
    """
    Tune IGMP robustness to allow for expected packet loss

    The robust-count variable allows tuning for the expected packet
    loss on a subnet. If a subnet anticipates losses, the robust-count
    variable can be increased.
    """
    trace_options: Annotated[
        Optional[TraceOptionsContainer18], Field(alias='srl_nokia-igmp:trace-options')
    ] = None
    ssm: Annotated[Optional[SsmContainer4], Field(alias='srl_nokia-igmp:ssm')] = None
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-igmp:oper-state')
    ] = None
    """
    Used to report operational state of the IGMP instance
    """
    group_count: Annotated[
        Optional[int], Field(alias='srl_nokia-igmp:group-count', ge=0, le=4294967295)
    ] = None
    """
    The number of multicast groups which have been learned on this instance
    """
    membership_groups: Annotated[
        Optional[MembershipGroupsContainer7],
        Field(alias='srl_nokia-igmp:membership-groups'),
    ] = None
    interface: Annotated[
        Optional[List[InterfaceListEntry12]], Field(alias='srl_nokia-igmp:interface')
    ] = None


class Ipv4Container3(BaseModel):
    """
    Container for configuration and state related to the IPv4 address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-ldp:oper-state')
    ] = None
    """
    The operational state of LDP for IPv4
    """
    oper_down_reason: Annotated[
        Optional[EnumerationEnum94], Field(alias='srl_nokia-ldp:oper-down-reason')
    ] = None
    """
    The reason for the LDP for IPv4 being operationally down
    """
    last_oper_state_change: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:last-oper-state-change',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The last time that the IPv4 oper-state changed
    """
    oper_up_to_down_transitions: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:oper-up-to-down-transitions', ge=0, le=65535),
    ] = None
    """
    The number of times the oper state for IPv4 has transitioned from up to down
    """
    lsr_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:lsr-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Returns the value that is being used as the LDP LSR ID
    """
    bindings: Annotated[
        Optional[BindingsContainer], Field(alias='srl_nokia-ldp:bindings')
    ] = None


class Ipv4Container4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    intf_oper_down_reason: Annotated[
        Optional[EnumerationEnum116], Field(alias='srl_nokia-ldp:intf-oper-down-reason')
    ] = None
    """
    Reason for the LDP interface being down
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-ldp:admin-state')
    ] = 'disable'
    """
    Administratively enable or disable LDP discovery for IPv4 on a particular interface
    """
    oper_state: Annotated[
        Optional[EnumerationEnum117], Field(alias='srl_nokia-ldp:oper-state')
    ] = None
    """
    Operational state of IPv4 on the LDP interface
    """
    last_oper_state_change: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:last-oper-state-change',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The last time when the IPv4 oper-state changed
    """
    override_lsr_id: Annotated[
        Optional[OverrideLsrIdContainer], Field(alias='srl_nokia-ldp:override-lsr-id')
    ] = None
    enable_bfd: Annotated[Optional[bool], Field(alias='srl_nokia-ldp:enable-bfd')] = (
        False
    )
    """
    Enable BFD
    """
    hello_adjacencies: Annotated[
        Optional[HelloAdjacenciesContainer],
        Field(alias='srl_nokia-ldp:hello-adjacencies'),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer14], Field(alias='srl_nokia-ldp:statistics')
    ] = None
    trace_options: Annotated[
        Optional[TraceOptionsContainer7], Field(alias='srl_nokia-ldp:trace-options')
    ] = None


class Ipv6Container3(BaseModel):
    """
    Container for configuration and state related to the IPv6 address family
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-ldp:oper-state')
    ] = None
    """
    The operational state of LDP for IPv6
    """
    oper_down_reason: Annotated[
        Optional[EnumerationEnum107], Field(alias='srl_nokia-ldp:oper-down-reason')
    ] = None
    """
    The reason for the LDP for IPv6 being operationally down
    """
    last_oper_state_change: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:last-oper-state-change',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The last time that the IPv6 oper-state changed
    """
    oper_up_to_down_transitions: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ldp:oper-up-to-down-transitions', ge=0, le=65535),
    ] = None
    """
    The number of times the oper state for IPv6 has transitioned from up to down
    """
    lsr_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:lsr-id',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Returns the value that is being used as the LDP LSR ID
    """
    bindings: Annotated[
        Optional[BindingsContainer2], Field(alias='srl_nokia-ldp:bindings')
    ] = None


class Ipv6Container4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    intf_oper_down_reason: Annotated[
        Optional[EnumerationEnum119], Field(alias='srl_nokia-ldp:intf-oper-down-reason')
    ] = None
    """
    Reason for the LDP interface being down
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-ldp:admin-state')
    ] = 'disable'
    """
    Administratively enable or disable LDP discovery for IPv6 on a particular interface
    """
    oper_state: Annotated[
        Optional[EnumerationEnum120], Field(alias='srl_nokia-ldp:oper-state')
    ] = None
    """
    Operational state of IPv6 on the LDP interface
    """
    last_oper_state_change: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:last-oper-state-change',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The last time when the IPv6 oper-state changed
    """
    override_lsr_id: Annotated[
        Optional[OverrideLsrIdContainer2], Field(alias='srl_nokia-ldp:override-lsr-id')
    ] = None
    enable_bfd: Annotated[Optional[bool], Field(alias='srl_nokia-ldp:enable-bfd')] = (
        False
    )
    """
    Enable BFD
    """
    hello_adjacencies: Annotated[
        Optional[HelloAdjacenciesContainer2],
        Field(alias='srl_nokia-ldp:hello-adjacencies'),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer15], Field(alias='srl_nokia-ldp:statistics')
    ] = None
    trace_options: Annotated[
        Optional[TraceOptionsContainer8], Field(alias='srl_nokia-ldp:trace-options')
    ] = None


class LinkStateDatabaseContainer(BaseModel):
    """
    State representation of the ISIS LSDB.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsp: Annotated[Optional[List[LspListEntry]], Field(alias='srl_nokia-isis:lsp')] = (
        None
    )


class LsaTypeListEntry(BaseModel):
    """
    List of LSA types in the LSDB for the AS
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The type of LSA being described. The type of the LSA is
    expressed as a canonical name.
    """
    lsas: Annotated[Optional[LsasContainer], Field(alias='srl_nokia-ospf:lsas')] = None


class LsaTypeListEntry2(BaseModel):
    """
    List of LSA types in the LSDB for the specified
    link
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The type of LSA being described. The type of the LSA is
    expressed as a canonical name.
    """
    lsas: Annotated[Optional[LsasContainer2], Field(alias='srl_nokia-ospf:lsas')] = None


class LsaTypeListEntry3(BaseModel):
    """
    List of LSA types in the LSDB for the specified
    area
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[Optional[str], Field(alias='srl_nokia-ospf:type')] = None
    """
    The type of LSA being described. The type of the LSA is
    expressed as a canonical name.
    """
    lsas: Annotated[Optional[LsasContainer3], Field(alias='srl_nokia-ospf:lsas')] = None


class LsaTypesContainer(BaseModel):
    """
    Enclosing container for a list of LSA types that are
    in the LSDB for the specified AS
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsa_type: Annotated[
        Optional[List[LsaTypeListEntry]], Field(alias='srl_nokia-ospf:lsa-type')
    ] = None


class LsaTypesContainer2(BaseModel):
    """
    Enclosing container for a list of LSA types that are
    in the LSDB for the specified link
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsa_type: Annotated[
        Optional[List[LsaTypeListEntry2]], Field(alias='srl_nokia-ospf:lsa-type')
    ] = None


class LsaTypesContainer3(BaseModel):
    """
    Enclosing container for a list of LSA types that are
    in the LSDB for the specified area
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsa_type: Annotated[
        Optional[List[LsaTypeListEntry3]], Field(alias='srl_nokia-ospf:lsa-type')
    ] = None


class LsdbContainer2(BaseModel):
    """
    The link-state database for the OSPF AS
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsa_types: Annotated[
        Optional[LsaTypesContainer], Field(alias='srl_nokia-ospf:lsa-types')
    ] = None


class LsdbContainer3(BaseModel):
    """
    The link-state database for the OSPF interface link
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    lsa_types: Annotated[
        Optional[LsaTypesContainer2], Field(alias='srl_nokia-ospf:lsa-types')
    ] = None


class LsdbContainer4(BaseModel):
    """
    The link-state database for the OSPFv2 area
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    identifier: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:identifier',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    An identifier for the area, expressed as a dotted quad or
    an unsigned 32-bit integer
    """
    lsa_types: Annotated[
        Optional[LsaTypesContainer3], Field(alias='srl_nokia-ospf:lsa-types')
    ] = None


class MldContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-mld:admin-state')
    ] = 'disable'
    """
    Administratively enable or disable the MLD instance
    """
    query_interval: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:query-interval', ge=0, le=4294967295)
    ] = 125
    """
    Interval at which the router sends the mld membership queries
    """
    query_last_member_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld:query-last-member-interval', ge=0, le=4294967295),
    ] = 1
    """
    Interval at which Group-Specific-Query packets are transmitted
    """
    query_response_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-mld:query-response-interval', ge=0, le=4294967295),
    ] = 10
    """
    Time to wait to receive a response to the MLD membership query from the host
    """
    robust_count: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:robust-count', ge=2, le=10)
    ] = 2
    """
    Tune MLD robustness to allow for expected packet loss

    The robust-count variable allows tuning for the expected packet
    loss on a subnet. If a subnet anticipates losses, the robust-count
    variable can be increased.
    """
    trace_options: Annotated[
        Optional[TraceOptionsContainer5], Field(alias='srl_nokia-mld:trace-options')
    ] = None
    ssm: Annotated[Optional[SsmContainer2], Field(alias='srl_nokia-mld:ssm')] = None
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-mld:oper-state')
    ] = None
    """
    Used to report operational state of the MLD instance
    """
    group_count: Annotated[
        Optional[int], Field(alias='srl_nokia-mld:group-count', ge=0, le=4294967295)
    ] = None
    """
    The number of multicast groups which have been learned on this instance
    """
    membership_groups: Annotated[
        Optional[MembershipGroupsContainer],
        Field(alias='srl_nokia-mld:membership-groups'),
    ] = None
    interface: Annotated[
        Optional[List[InterfaceListEntry4]], Field(alias='srl_nokia-mld:interface')
    ] = None


class MulticastL3VpnContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    auto_discovery: Annotated[
        Optional[EnumerationEnum314], Field(alias='srl_nokia-mvpn-l3:auto-discovery')
    ] = None
    """
    set the auto discovery type for this mvpn
    """
    c_multicast_route: Annotated[
        Optional[EnumerationEnum315], Field(alias='srl_nokia-mvpn-l3:c-multicast-route')
    ] = None
    """
    set the customer multicast routing type for this mvpn
    """
    bgp: Annotated[Optional[BgpContainer2], Field(alias='srl_nokia-mvpn-l3:bgp')] = None
    provider_tunnel: Annotated[
        Optional[ProviderTunnelContainer],
        Field(alias='srl_nokia-mvpn-l3:provider-tunnel'),
    ] = None


class PacketContainer(BaseModel):
    """
    Enable the tracing of PIM packets
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    type: Annotated[
        Optional[Union[AllTypesCase2, SelectedTypesCase2]],
        Field(alias='srl_nokia-pim:type'),
    ] = None


class PathDetailListEntry(BaseModel):
    """
    Path details.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    path_type: Annotated[
        Optional[EnumerationEnum253], Field(alias='srl_nokia-pcep:path-type')
    ] = None
    """
    LSP paths types
    """
    srp_id: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:srp-id', ge=0, le=4294967295)
    ] = None
    """
    Stateful PCE Request Parameters(SRP) identifier for update sent by PCE
    """
    error: Annotated[
        Optional[EnumerationEnum254], Field(alias='srl_nokia-pcep:error')
    ] = None
    """
    The reason for LSP update failure
    """
    igp_metric: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:igp-metric', ge=0, le=4294967295)
    ] = None
    """
    The Interior Gateway Protocol (IGP) metric that must be optimized by the path computation algorithm for providing the cost of computed path

    It is the METRIC object used in PCReq message.
    """
    te_metric: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:te-metric', ge=0, le=4294967295)
    ] = None
    """
    The Traffic Engineering (TE) metric that must be optimized by the path computation algorithm for providing the cost of computed path

    It is the METRIC object used in PCReq messages.
    """
    hop_count: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:hop-count', ge=0, le=4294967295)
    ] = None
    """
    The number of hops that are traversed via the TE tunnel

    It is the METRIC object in PCReq message.
    """
    setup_priority: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:setup-priority', ge=0, le=7)
    ] = None
    """
    The priority of the TE LSP with respect to holding resources

    The value of 0 represents highest priority. The holding priority indicates whether this session can be in PCReq message.
    """
    holding_priority: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:holding-priority', ge=0, le=7)
    ] = None
    """
    The priority of the TE LSP with respect to holding resources

    The value of 0 represents highest priority.The holding priority indicates whether this session can be preempted by another session. It is the LSPA object used in PCReq message.
    """
    exclude_any: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:exclude-any', ge=0, le=4294967295)
    ] = None
    """
    Set of attribute filters associated with a tunnel, any of which renders a link unacceptable

    It is the LSPA object used in PCReq message.
    """
    include_any: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:include-any', ge=0, le=4294967295)
    ] = None
    """
    Set of attribute filters associated with a tunne,  any of which renders a link acceptable

    It is the LSPA object used in PCReq message.
    """
    include_all: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:include-all', ge=0, le=4294967295)
    ] = None
    """
    Set of attribute filters associated with a tunnel, all of which much be present for a link to be acceptable

    It is the LSPA object used in PCReq message.
    """
    lsp_bandwidth: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:lsp-bandwidth', ge=0, le=4294967295)
    ] = None
    """
    The bandwidth that is being requested by the LSP.
    """
    explicit_route_objects: Annotated[
        Optional[List[ExplicitRouteObjectsListEntry]],
        Field(alias='srl_nokia-pcep:explicit-route-objects'),
    ] = None
    record_route_objects: Annotated[
        Optional[List[RecordRouteObjectsListEntry]],
        Field(alias='srl_nokia-pcep:record-route-objects'),
    ] = None


class PceAssociationsContainer(BaseModel):
    """
    Configure associations to be used with PCE
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    diversity: Annotated[
        Optional[List[DiversityListEntry]], Field(alias='srl_nokia-pcep:diversity')
    ] = None
    policy: Annotated[
        Optional[List[PolicyListEntry]], Field(alias='srl_nokia-pcep:policy')
    ] = None


class PolicyForwardingContainer(BaseModel):
    """
    Configuration and operational state relating to policy-forwarding within a network instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    policy: Annotated[
        Optional[List[PolicyListEntry2]],
        Field(alias='srl_nokia-policy-forwarding:policy'),
    ] = None
    interface: Annotated[
        Optional[List[InterfaceListEntry15]],
        Field(alias='srl_nokia-policy-forwarding:interface'),
    ] = None


class SegmentListListEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    segment_list_index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:segment-list-index', ge=1, le=32),
    ] = None
    """
    Index to enumerate the different segment lists of a TE policy.
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-te-policies:admin-state')
    ] = None
    """
    Administratively enable or disable a segment list
    """
    explicit_path: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:explicit-path',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    A unique name to identify the explicit path
    """
    segment_list_type: Annotated[
        Optional[EnumerationEnum382],
        Field(alias='srl_nokia-te-policies:segment-list-type'),
    ] = None
    """
    Segment-list type: primary, standby or secondary

    Standby is programmed in datapath, consumes resources and is ready for a failover any time. Secondary is programmed upon failure of the previous active
    """
    weight: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:weight', ge=0, le=4294967295)
    ] = None
    """
    Weight of this segment list, used for weighted ECMP between segment lists
    """
    segment_list_preference: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:segment-list-preference', ge=1, le=255),
    ] = None
    """
    Preference value of this segment-list

    For an sr-mpls-uncolored TE policy one standby segment list is preferred over another if it has a lower preference value. The implicit default value is 100.
    """
    priority: Annotated[
        Optional[PriorityContainer], Field(alias='srl_nokia-te-policies:priority')
    ] = None
    pce_control: Annotated[
        Optional[bool], Field(alias='srl_nokia-te-policies:pce-control')
    ] = None
    """
    Set to true for a PCE controlled segment-list
    """
    pce_report: Annotated[
        Optional[bool], Field(alias='srl_nokia-te-policies:pce-report')
    ] = False
    """
    seto to true to enable reporting of the segment-list to the PCE
    """
    dynamic: Annotated[
        Optional[DynamicContainer], Field(alias='srl_nokia-te-policies:dynamic')
    ] = None
    oper_state: Annotated[
        Optional[EnumerationEnum387], Field(alias='srl_nokia-te-policies:oper-state')
    ] = None
    """
    Segment list operational state
    """
    failed_reason: Annotated[
        Optional[str], Field(alias='srl_nokia-te-policies:failed-reason')
    ] = None
    """
    The reason why the segment list is invalid.

    One of the following values:
    -  unresolved-first-segment: the first SID (MPLS label value) cannot be resolved into one or more outgoing interface(s) and next-hop(s)
    -  unresolved-named-path: the most recent query to TEDB about the named path (triggered by periodic re-optimization or initially) indicated that the named path is not viable
    """
    forwarding_state: Annotated[
        Optional[EnumerationEnum388],
        Field(alias='srl_nokia-te-policies:forwarding-state'),
    ] = None
    """
    Forwarding state of the segment-list, tells about the activeness of segment-list in the data-path.
    active - enabled for forwarding traffic in data-path,
    inactive - programmed in data-path, not enabled for forwarding, could be standby or waiting for sBFD to come up,
    backup - enabled as a backup for currently active segment-list
    """
    last_oper_state_change: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:last-oper-state-change',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time elapsed since the last operational state change for the segment-list
    """
    oper_state_change_count: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-te-policies:oper-state-change-count', ge=0, le=4294967295
        ),
    ] = None
    """
    Traffic Engineering Policy segment-list operational state change count
    Operational status trnasition from up to down, down to up, etc all accounted under this counter
    """
    entropy_label_transmit: Annotated[
        Optional[bool], Field(alias='srl_nokia-te-policies:entropy-label-transmit')
    ] = None
    """
    True if an entropy label is being inserted after the labels of this segment list
    """


class SegmentListListEntry2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    segment_list_index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:segment-list-index', ge=1, le=32),
    ] = None
    """
    Index to enumerate the different segment lists.
    """
    oper_state: Annotated[
        Optional[EnumerationEnum387], Field(alias='srl_nokia-te-policies:oper-state')
    ] = None
    """
    Segment list operational state
    """
    failed_reason: Annotated[
        Optional[str], Field(alias='srl_nokia-te-policies:failed-reason')
    ] = None
    """
    The reason why the segment list is invalid.

    One of the following values:
    -  unresolved-first-segment: the first SID (MPLS label value) cannot be resolved into one or more outgoing interface(s) and next-hop(s)
    -  unresolved-named-path: the most recent query to TEDB about the named path (triggered by periodic re-optimization or initially) indicated that the named path is not viable
    """
    forwarding_state: Annotated[
        Optional[EnumerationEnum391],
        Field(alias='srl_nokia-te-policies:forwarding-state'),
    ] = None
    """
    Forwarding state of the segment-list, tells about the activeness of segment-list in the data-path.
    active - enabled for forwarding traffic in data-path,
    inactive - programmed in data-path, not enabled for forwarding, could be standby or waiting for sBFD to come up,
    backup - enabled as a backup for currently active segment-list
    """
    last_oper_state_change: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:last-oper-state-change',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time elapsed since the last operational state change for the segment-list
    """
    oper_state_change_count: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-te-policies:oper-state-change-count', ge=0, le=4294967295
        ),
    ] = None
    """
    Traffic Engineering Policy segment-list operational state change count
    Operational status trnasition from up to down, down to up, etc all accounted under this counter
    """
    entropy_label_transmit: Annotated[
        Optional[bool], Field(alias='srl_nokia-te-policies:entropy-label-transmit')
    ] = None
    """
    True if an entropy label is being inserted after the labels of this segment list
    """
    segment_list_type: Annotated[
        Optional[EnumerationEnum392],
        Field(alias='srl_nokia-te-policies:segment-list-type'),
    ] = None
    """
    Segment-list type: primary, standby or secondary
    Standby is programmed in datapath, consumes resources and is ready for a failover any time. Secondary is programmed upon failure of the previous active
    """
    pce_report: Annotated[
        Optional[bool], Field(alias='srl_nokia-te-policies:pce-report')
    ] = None
    """
    PCE Reporting for Traffic Engineering Policy Segment-list
    """
    pce_control: Annotated[
        Optional[bool], Field(alias='srl_nokia-te-policies:pce-control')
    ] = None
    """
    PCE Control status for Traffic Engineering Policy Segment-list
    """
    segment_list_preference: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:segment-list-preference', ge=0, le=255),
    ] = None
    """
    Segment List preference for a given list under Traffic Engineering Policy
    """
    explicit_path: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:explicit-path',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Explicit-path used for instantiating Segment List under Traffic Engineering Policy
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:metric', ge=0, le=4294967295)
    ] = None
    """
    Metric of a given Segment List
    """
    igp_metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:igp-metric', ge=0, le=4294967295),
    ] = None
    """
    IGP metric of given Segment List
    """
    te_metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:te-metric', ge=0, le=4294967295),
    ] = None
    """
    TE metric of given Segment List
    """
    delay_metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:delay-metric', ge=0, le=4294967295),
    ] = None
    """
    Delay metric of given Segment List
    """
    lsp_id: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:lsp-id', ge=0, le=4294967295)
    ] = None
    """
    Unique internal identifier of segment-list
    """
    retry_attempts: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:retry-attempts', ge=0, le=4294967295),
    ] = None
    """
    Number of unsuccessful attempts made to signal the segment-list
    """
    last_retry_attempt: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:last-retry-attempt',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time elapsed since the last retry attempt to re-established the segment-list
    """
    last_reoptimization_attempt: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:last-reoptimization-attempt',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time elapsed since last path re-optimization attempt on the segment-list
    """
    next_retry_attempt: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:next-retry-attempt',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time remaining for next retry attempt to re-established the segment-list
    """
    next_reoptimization_attempt: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:next-reoptimization-attempt',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time remaining for next path re-optimization attempt on the segment-list
    """
    path_computation_requests: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-te-policies:path-computation-requests', ge=0, le=4294967295
        ),
    ] = None
    """
    Number of path computation requests made for the segment-list
    """
    revert_timer_expiry: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:revert-timer-expiry',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time remanining on revert-timer
    """
    revert_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:revert-timer', ge=0, le=4294967295),
    ] = None
    """
    Revert timer for the segment-list.

    Timer till a revert to primary/best path after it is recovered from a failure. In case of uncolored te-policy, applies to primary segment-list and in case of colored te-policy applies to best candidate path.

    The default is 0 seconds.
    """
    bfd: Annotated[
        Optional[BfdContainer2], Field(alias='srl_nokia-te-policies:bfd')
    ] = None
    dynamic: Annotated[
        Optional[DynamicContainer2], Field(alias='srl_nokia-te-policies:dynamic')
    ] = None
    computed_segments: Annotated[
        Optional[ComputedSegmentsContainer],
        Field(alias='srl_nokia-te-policies:computed-segments'),
    ] = None
    mbb: Annotated[Optional[MbbContainer], Field(alias='srl_nokia-te-policies:mbb')] = (
        None
    )
    last_pce_update: Annotated[
        Optional[LastPceUpdateContainer],
        Field(alias='srl_nokia-te-policies:last-pce-update'),
    ] = None


class SegmentListListEntry3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    segment_list_index: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:segment-list-index', ge=1, le=32),
    ] = None
    """
    Index to enumerate the different segment lists.
    """
    oper_state: Annotated[
        Optional[EnumerationEnum387], Field(alias='srl_nokia-te-policies:oper-state')
    ] = None
    """
    Segment list operational state
    """
    failed_reason: Annotated[
        Optional[str], Field(alias='srl_nokia-te-policies:failed-reason')
    ] = None
    """
    The reason why the segment list is invalid.

    One of the following values:
    -  unresolved-first-segment: the first SID (MPLS label value) cannot be resolved into one or more outgoing interface(s) and next-hop(s)
    -  unresolved-named-path: the most recent query to TEDB about the named path (triggered by periodic re-optimization or initially) indicated that the named path is not viable
    """
    forwarding_state: Annotated[
        Optional[EnumerationEnum400],
        Field(alias='srl_nokia-te-policies:forwarding-state'),
    ] = None
    """
    Forwarding state of the segment-list, tells about the activeness of segment-list in the data-path.
    active - enabled for forwarding traffic in data-path,
    inactive - programmed in data-path, not enabled for forwarding, could be standby or waiting for sBFD to come up,
    backup - enabled as a backup for currently active segment-list
    """
    last_oper_state_change: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:last-oper-state-change',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time elapsed since the last operational state change for the segment-list
    """
    oper_state_change_count: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-te-policies:oper-state-change-count', ge=0, le=4294967295
        ),
    ] = None
    """
    Traffic Engineering Policy segment-list operational state change count
    Operational status trnasition from up to down, down to up, etc all accounted under this counter
    """
    entropy_label_transmit: Annotated[
        Optional[bool], Field(alias='srl_nokia-te-policies:entropy-label-transmit')
    ] = None
    """
    True if an entropy label is being inserted after the labels of this segment list
    """
    segment_list_type: Annotated[
        Optional[EnumerationEnum401],
        Field(alias='srl_nokia-te-policies:segment-list-type'),
    ] = None
    """
    Segment-list type: primary, standby or secondary
    Standby is programmed in datapath, consumes resources and is ready for a failover any time. Secondary is programmed upon failure of the previous active
    """
    pce_report: Annotated[
        Optional[bool], Field(alias='srl_nokia-te-policies:pce-report')
    ] = None
    """
    PCE Reporting for Traffic Engineering Policy Segment-list
    """
    pce_control: Annotated[
        Optional[bool], Field(alias='srl_nokia-te-policies:pce-control')
    ] = None
    """
    PCE Control status for Traffic Engineering Policy Segment-list
    """
    segment_list_preference: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:segment-list-preference', ge=0, le=255),
    ] = None
    """
    Segment List preference for a given list under Traffic Engineering Policy
    """
    explicit_path: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:explicit-path',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Explicit-path used for instantiating Segment List under Traffic Engineering Policy
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:metric', ge=0, le=4294967295)
    ] = None
    """
    Metric of a given Segment List
    """
    igp_metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:igp-metric', ge=0, le=4294967295),
    ] = None
    """
    IGP metric of given Segment List
    """
    te_metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:te-metric', ge=0, le=4294967295),
    ] = None
    """
    TE metric of given Segment List
    """
    delay_metric: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:delay-metric', ge=0, le=4294967295),
    ] = None
    """
    Delay metric of given Segment List
    """
    lsp_id: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:lsp-id', ge=0, le=4294967295)
    ] = None
    """
    Unique internal identifier of segment-list
    """
    retry_attempts: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:retry-attempts', ge=0, le=4294967295),
    ] = None
    """
    Number of unsuccessful attempts made to signal the segment-list
    """
    last_retry_attempt: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:last-retry-attempt',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time elapsed since the last retry attempt to re-established the segment-list
    """
    last_reoptimization_attempt: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:last-reoptimization-attempt',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time elapsed since last path re-optimization attempt on the segment-list
    """
    next_retry_attempt: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:next-retry-attempt',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time remaining for next retry attempt to re-established the segment-list
    """
    next_reoptimization_attempt: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:next-reoptimization-attempt',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time remaining for next path re-optimization attempt on the segment-list
    """
    path_computation_requests: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-te-policies:path-computation-requests', ge=0, le=4294967295
        ),
    ] = None
    """
    Number of path computation requests made for the segment-list
    """
    revert_timer_expiry: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:revert-timer-expiry',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time remanining on revert-timer
    """
    revert_timer: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:revert-timer', ge=0, le=4294967295),
    ] = None
    """
    Revert timer for the segment-list.

    Timer till a revert to primary/best path after it is recovered from a failure. In case of uncolored te-policy, applies to primary segment-list and in case of colored te-policy applies to best candidate path.

    The default is 0 seconds.
    """
    bfd: Annotated[
        Optional[BfdContainer3], Field(alias='srl_nokia-te-policies:bfd')
    ] = None
    dynamic: Annotated[
        Optional[DynamicContainer3], Field(alias='srl_nokia-te-policies:dynamic')
    ] = None
    computed_segments: Annotated[
        Optional[ComputedSegmentsContainer2],
        Field(alias='srl_nokia-te-policies:computed-segments'),
    ] = None
    mbb: Annotated[
        Optional[MbbContainer2], Field(alias='srl_nokia-te-policies:mbb')
    ] = None
    last_pce_update: Annotated[
        Optional[LastPceUpdateContainer2],
        Field(alias='srl_nokia-te-policies:last-pce-update'),
    ] = None


class TargetListEntry(BaseModel):
    """
    List of configured targeted LDP peers
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    target_oper_down_reason: Annotated[
        Optional[EnumerationEnum122],
        Field(alias='srl_nokia-ldp:target-oper-down-reason'),
    ] = None
    """
    Reason for the targeted LDP adjacency being down
    """
    remote_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:remote-address',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    Configuration of neighbor address of the targeted LDP adjacency
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-ldp:admin-state')
    ] = 'disable'
    """
    Administratively enable or disable the targeted LDP adjacency
    """
    oper_state: Annotated[
        Optional[EnumerationEnum123], Field(alias='srl_nokia-ldp:oper-state')
    ] = None
    """
    Operational state of the targeted LDP adjacency
    """
    oper_type: Annotated[
        Optional[EnumerationEnum124], Field(alias='srl_nokia-ldp:oper-type')
    ] = None
    """
    The value indicates the operational type of this targeted LDP session.
    Session creation can be triggered by a service or can be manually configured as an example.
    A session that is originally triggered by service configuration may change to a manual session.
    """
    last_oper_state_change: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:last-oper-state-change',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The last time when the adjacency oper-state changed
    """
    override_lsr_id: Annotated[
        Optional[OverrideLsrIdContainer3], Field(alias='srl_nokia-ldp:override-lsr-id')
    ] = None
    enable_bfd: Annotated[Optional[bool], Field(alias='srl_nokia-ldp:enable-bfd')] = (
        False
    )
    """
    Enable BFD
    """
    advertise_fec: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:advertise-fec')
    ] = False
    """
    Enable advertisement of FECs to target
    """
    hello_holdtime: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:hello-holdtime', ge=15, le=3600)
    ] = None
    """
    The time interval for which a LDP Hello adjacency is maintained in the absence of Hello messages from the LDP neighbor
    """
    hello_interval: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:hello-interval', ge=5, le=1200)
    ] = None
    """
    The interval between consecutive LDP Hello messages used in LDP discovery
    """
    hello_adjacencies: Annotated[
        Optional[HelloAdjacenciesContainer3],
        Field(alias='srl_nokia-ldp:hello-adjacencies'),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer16], Field(alias='srl_nokia-ldp:statistics')
    ] = None


class TargetListEntry2(BaseModel):
    """
    List of configured targeted LDP peers
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    target_oper_down_reason: Annotated[
        Optional[EnumerationEnum125],
        Field(alias='srl_nokia-ldp:target-oper-down-reason'),
    ] = None
    """
    Reason for the targeted LDP adjacency being down
    """
    remote_address: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:remote-address',
            pattern='^(?=^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))$).*$',
        ),
    ] = None
    """
    Configuration of IPv6 neighbor address of the targeted LDP adjacency
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-ldp:admin-state')
    ] = 'disable'
    """
    Administratively enable or disable the targeted LDP adjacency
    """
    oper_state: Annotated[
        Optional[EnumerationEnum126], Field(alias='srl_nokia-ldp:oper-state')
    ] = None
    """
    Operational state of the targeted LDP adjacency
    """
    oper_type: Annotated[
        Optional[EnumerationEnum127], Field(alias='srl_nokia-ldp:oper-type')
    ] = None
    """
    The value indicates the operational type of this targeted LDP session.
    Session creation can be triggered by a service or can be manually configured as an example.
    A session that is originally triggered by service configuration may change to a manual session.
    """
    last_oper_state_change: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:last-oper-state-change',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The last time when the adjacency oper-state changed
    """
    override_lsr_id: Annotated[
        Optional[OverrideLsrIdContainer4], Field(alias='srl_nokia-ldp:override-lsr-id')
    ] = None
    enable_bfd: Annotated[Optional[bool], Field(alias='srl_nokia-ldp:enable-bfd')] = (
        False
    )
    """
    Enable BFD
    """
    advertise_fec: Annotated[
        Optional[bool], Field(alias='srl_nokia-ldp:advertise-fec')
    ] = False
    """
    Enable advertisement of FECs to target
    """
    hello_holdtime: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:hello-holdtime', ge=15, le=3600)
    ] = None
    """
    The time interval for which a LDP Hello adjacency is maintained in the absence of Hello messages from the LDP neighbor
    """
    hello_interval: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:hello-interval', ge=5, le=1200)
    ] = None
    """
    The interval between consecutive LDP Hello messages used in LDP discovery
    """
    hello_adjacencies: Annotated[
        Optional[HelloAdjacenciesContainer4],
        Field(alias='srl_nokia-ldp:hello-adjacencies'),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer17], Field(alias='srl_nokia-ldp:statistics')
    ] = None


class TraceContainer(BaseModel):
    """
    Tracing parameter flags
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    events: Annotated[
        Optional[EventsContainer], Field(alias='srl_nokia-pim:events')
    ] = None
    packet: Annotated[
        Optional[PacketContainer], Field(alias='srl_nokia-pim:packet')
    ] = None


class BgpEvpnContainer(BaseModel):
    """
    Top-level configuration and operational state for BGP Ethernet Virtual Private Networks (EVPN)
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bgp_instance: Annotated[
        Optional[List[BgpInstanceListEntry]],
        Field(alias='srl_nokia-bgp-evpn:bgp-instance'),
    ] = None


class CandidatePathListEntry(BaseModel):
    """
    SR policy candidate paths. This list includes local static policies, but only those that have both a color and endpoint.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    protocol_origin: Annotated[
        Optional[EnumerationEnum389],
        Field(alias='srl_nokia-te-policies:protocol-origin'),
    ] = None
    """
    Instantiation mechanism used to create the candidate path
    """
    originator_asn: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:originator-asn', ge=0, le=4294967295),
    ] = None
    """
    Autonomous System (ASN) Identifier of the node that signalled/instantiated the candidate path on headend
    """
    originator_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-te-policies:originator-address'),
    ] = None
    """
    IP address Identifier of the node that signalled/instantiated the candidate path on headend
    """
    discriminator: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:discriminator', ge=0, le=4294967295),
    ] = None
    """
    Candidate path discriminator
    """
    preference: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:preference', ge=1, le=65535)
    ] = None
    """
    Candidate path preference
    """
    binding_sid: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:binding-sid', ge=16, le=1048575),
    ] = None
    """
    The binding SID of the candidate path.
    """
    path_type: Annotated[
        Optional[EnumerationEnum390], Field(alias='srl_nokia-te-policies:path-type')
    ] = None
    """
    The candidate path type.

    One of the following values:
    -  best: the policy is the best valid path but it does not have a protection policy with SBFD enabled
    -  primary: the policy is the best valid path and it has a protection policy with SBFD enabled
    -  secondary: the policy is the second best valid path and it has a protection policy with SBFD enabled
    -  tertiary: the policy is the third best valid path and it has a protection policy with SBFD enabled
    -  other: the policy is any other path
    """
    valid: Annotated[Optional[bool], Field(alias='srl_nokia-te-policies:valid')] = None
    """
    True when the candidate path is valid.
    """
    invalid_reason: Annotated[
        Optional[str], Field(alias='srl_nokia-te-policies:invalid-reason')
    ] = None
    """
    The reason why the candidate path is invalid.

    One of the following values:
    -  admin-disabled: the candidate path is administratively disabled
    -  no-valid-segment-list: the candidate path has no valid segment lists
    -  binding-sid-failed: no free labels in the label-range or ILM programming failed
    -  tunnel-programming-failed: programming failed due to exhaustion of tunnel, NHLFE or other datapath resources
    """
    protection_available: Annotated[
        Optional[bool], Field(alias='srl_nokia-te-policies:protection-available')
    ] = None
    """
    True when this (primary) candidate path is protected by another pre-programmed candidate path.

    For a primary path to be protected all of the following conditions must be met:
    -  the primary path is bound to a protection-policy with seamless-bfd set to true
    -  there is a secondary path with a protection-policy having seamless-bfd set to true and the associated SBFD session is currently up OR there is a tertiary path with a protection-policy having seamless-bfd set to true and the associated SBFD session is currently up
    """
    last_oper_state_change: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:last-oper-state-change',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time elapsed since the last operational state change for the Traffic Engineering Policy
    """
    segment_list: Annotated[
        Optional[List[SegmentListListEntry2]],
        Field(alias='srl_nokia-te-policies:segment-list'),
    ] = None


class InterfaceListEntry11(BaseModel):
    """
    List of OSPF interfaces
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interface_name: Annotated[
        Optional[str], Field(alias='srl_nokia-ospf:interface-name')
    ] = None
    """
    Router logical interface name.
    """
    advertise_router_capability: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:advertise-router-capability')
    ] = True
    """
    Allow router advertisement capabilities
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-ospf:admin-state')
    ] = 'enable'
    """
    Administrative state of the OSPF
    """
    advertise_subnet: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:advertise-subnet')
    ] = True
    """
    Advertise point-to-point interfaces as subnet routes
    """
    interface_type: Annotated[
        Optional[EnumerationEnum223], Field(alias='srl_nokia-ospf:interface-type')
    ] = None
    """
    Interface type to broadcast or point-to-point
    """
    lsa_filter_out: Annotated[
        Optional[EnumerationEnum224], Field(alias='srl_nokia-ospf:lsa-filter-out')
    ] = 'none'
    """
    LSA flooding reduction
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:metric', ge=0, le=65535)
    ] = None
    """
    Explicit route cost metric that is applied to the interface.

    Setting the value to 0 or removing the metric will cause the metric to be
    derived from the link bandwidth and the reference-bandwidth
    """
    mtu: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:mtu', ge=512, le=9486)
    ] = None
    """
    MTU for the OSPF to use on the interface. For OSPFv3 this must be minimum 1280.

    If the MTU defined here exceeds the actual IP-MTU of the interface, then the
    IP-MTU of the interface is used.
    """
    passive: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:passive')] = None
    """
    Allow interface to be advertised as an OSPF interface without running the OSPF protocol
    """
    priority: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:priority', ge=0, le=255)
    ] = 1
    """
    Priority of the interface to apply in the designated router election on the subnet
    """
    hello_interval: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:hello-interval', ge=1, le=65535)
    ] = 10
    """
    Time between OSPF Hellos of this interface
    """
    dead_interval: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:dead-interval', ge=2, le=65535)
    ] = 40
    """
    Time OSPF waits without receiving Hello packets before declaring a neighbor down
    """
    retransmit_interval: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:retransmit-interval', ge=1, le=1800)
    ] = 5
    """
    Time before OSPF retransmits an unacknowledged LSA to a neighbor
    """
    transit_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:transit-delay', ge=1, le=1800)
    ] = 1
    """
    Time required to transmit an LSA on the interface, virtual link, or sham link
    """
    authentication: Annotated[
        Optional[AuthenticationContainer10],
        Field(alias='srl_nokia-ospf:authentication'),
    ] = None
    failure_detection: Annotated[
        Optional[FailureDetectionContainer4],
        Field(alias='srl_nokia-ospf:failure-detection'),
    ] = None
    trace_options: Annotated[
        Optional[TraceOptionsContainer17], Field(alias='srl_nokia-ospf:trace-options')
    ] = None
    neighbor: Annotated[
        Optional[List[NeighborListEntry9]], Field(alias='srl_nokia-ospf:neighbor')
    ] = None
    oper_state: Annotated[
        Optional[EnumerationEnum230], Field(alias='srl_nokia-ospf:oper-state')
    ] = None
    """
    the OSPF interface state.
    """
    dr_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:dr-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    the value of DR-id indicates the router ID of the designated router.
    """
    bdr_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:bdr-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    the value of BDR-id indicates the router ID of the backup designated router.
    """
    last_enabled_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:last-enabled-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    the value of last-enabled-time indicates the sys-up-time value when ospf-if-admin-stat was last set to enabled (1) to run the ospf on this interface.
    """
    neighbor_count: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:neighbor-count', ge=0, le=4294967295)
    ] = None
    """
    The total number of OSPF neighbors adjacent on this interface, in a state of INIT or greater, since admin-state was last set to 'enabled'.
    """
    local_ip_address: Annotated[
        Optional[Union[Ipv4AddressType, Ipv6AddressType]],
        Field(alias='srl_nokia-ospf:local-ip-address'),
    ] = None
    """
    the value of local-ip-address indicates the IP address of this OSPF interface.
    """
    link_lsa_cksum_sum: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:link-lsa-cksum-sum',
            pattern='^(?=^0x[0-9a-fA-F]+$).*$',
        ),
    ] = None
    """
    the value of link-lsa-cksum-sum indicates the 32-bit unsigned sum of the link-scope link-state advertisements' LS checksums contained in this link's link-state database. the sum can be used to determine if there has been a change in a router's link-state database, and to compare the link state database of two routers.
    """
    link_lsa_count: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:link-lsa-count', ge=0, le=4294967295)
    ] = None
    """
    the value of link-lsa-count indicates the total number of link-scope link-state advertisements in this link's link-state database.
    """
    events: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:events', ge=0, le=4294967295)
    ] = None
    """
    the value of events indicates the number of times this OSPF interface has changed its state, or an error has occurred.
    """
    last_event_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:last-event-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    the value of last-event-time indicates the value of sys-up-time when an event was last associated with this OSPF interface.
    """
    packets: Annotated[
        Optional[PacketsContainer], Field(alias='srl_nokia-ospf:packets')
    ] = None
    bad_packets: Annotated[
        Optional[BadPacketsContainer], Field(alias='srl_nokia-ospf:bad-packets')
    ] = None
    lsa_totals: Annotated[
        Optional[LsaTotalsContainer3], Field(alias='srl_nokia-ospf:lsa-totals')
    ] = None
    lsdb: Annotated[Optional[LsdbContainer3], Field(alias='srl_nokia-ospf:lsdb')] = None
    ldp_synchronization: Annotated[
        Optional[LdpSynchronizationContainer4],
        Field(alias='srl_nokia-ospf:ldp-synchronization'),
    ] = None


class InterfaceListEntry5(BaseModel):
    """
    List of LDP interfaces used for LDP Basic Discovery
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[Optional[str], Field(alias='srl_nokia-ldp:name')] = None
    """
    Reference to a specific subinterface that is bound to the network instance
    """
    hello_holdtime: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:hello-holdtime', ge=15, le=3600)
    ] = None
    """
    The time interval for which a LDP Hello adjacency is maintained in the absence of Hello messages from the LDP neighbor
    """
    hello_interval: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:hello-interval', ge=5, le=1200)
    ] = None
    """
    The interval between consecutive LDP Hello messages used in LDP discovery
    """
    ipv4: Annotated[Optional[Ipv4Container4], Field(alias='srl_nokia-ldp:ipv4')] = None
    ipv6: Annotated[Optional[Ipv6Container4], Field(alias='srl_nokia-ldp:ipv6')] = None


class InterfacesContainer(BaseModel):
    """
    The complete set of interfaces used for LDP Basic Discovery
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    hello_holdtime: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:hello-holdtime', ge=15, le=3600)
    ] = 15
    """
    The time interval for which a LDP Hello adjacency is maintained in the absence of Hello messages from the LDP neighbor
    """
    hello_interval: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:hello-interval', ge=5, le=1200)
    ] = 5
    """
    The interval between consecutive LDP Hello messages used in LDP discovery
    """
    trace_options: Annotated[
        Optional[TraceOptionsContainer6], Field(alias='srl_nokia-ldp:trace-options')
    ] = None
    interface: Annotated[
        Optional[List[InterfaceListEntry5]], Field(alias='srl_nokia-ldp:interface')
    ] = None


class Ipv4Container5(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    target: Annotated[
        Optional[List[TargetListEntry]], Field(alias='srl_nokia-ldp:target')
    ] = None
    auto_rx: Annotated[
        Optional[AutoRxContainer], Field(alias='srl_nokia-ldp:auto-rx')
    ] = None
    auto_tx: Annotated[
        Optional[AutoTxContainer], Field(alias='srl_nokia-ldp:auto-tx')
    ] = None


class Ipv6Container5(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    target: Annotated[
        Optional[List[TargetListEntry2]], Field(alias='srl_nokia-ldp:target')
    ] = None


class LevelListEntry2(BaseModel):
    """
    List of IS-IS levels supported by this IS (router)
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    level_number: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:level-number', ge=1, le=2)
    ] = None
    """
    Specifies the IS-IS protocol level to which these attributes are applied.
    """
    metric_style: Annotated[
        Optional[EnumerationEnum155], Field(alias='srl_nokia-isis:metric-style')
    ] = 'wide'
    """
    Specifies the metric style to be wide or narrow for the level
    """
    loopfree_alternate_exclude: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:loopfree-alternate-exclude')
    ] = False
    """
    Enable/disable LFA at ISIS level.
    """
    route_preference: Annotated[
        Optional[RoutePreferenceContainer],
        Field(alias='srl_nokia-isis:route-preference'),
    ] = None
    trace_options: Annotated[
        Optional[TraceOptionsContainer13], Field(alias='srl_nokia-isis:trace-options')
    ] = None
    authentication: Annotated[
        Optional[AuthenticationContainer7], Field(alias='srl_nokia-isis:authentication')
    ] = None
    bgp_ls_exclude: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:bgp-ls-exclude')
    ] = False
    """
    When set to true, topology and TE information related to this area or level should nkot be imported into the TE database in a format that supports export as BGP-LS routes
    """
    statistics: Annotated[
        Optional[StatisticsContainer23], Field(alias='srl_nokia-isis:statistics')
    ] = None
    link_state_database: Annotated[
        Optional[LinkStateDatabaseContainer],
        Field(alias='srl_nokia-isis:link-state-database'),
    ] = None


class LspUpdateListEntry(BaseModel):
    """
    List of Labeled Switch Path (LSP) update information sent by a PCE to a PCC to update attributes of a LSP
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    pce_id: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:pce-id', ge=1, le=4294967295)
    ] = None
    """
    The unique identifier for PCE
    """
    lsp_id: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:lsp-id', ge=0, le=4294967295)
    ] = None
    """
    The unique identifier for the LSP
    """
    lsp_type: Annotated[
        Optional[EnumerationEnum250], Field(alias='srl_nokia-pcep:lsp-type')
    ] = None
    """
    The type of LSP
    """
    tunnel_id: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:tunnel-id', ge=1, le=65535)
    ] = None
    """
    The unique tunnel identifier that remains constant over the life time of a tunnel
    """
    extended_tunnel_id: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastType]],
        Field(alias='srl_nokia-pcep:extended-tunnel-id'),
    ] = None
    """
    The extended tunnel identifier
    """
    name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-pcep:name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The LSP path name that is unique in the PCC and remains constant throughout a path's life time
    """
    source_address: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:source-address'),
    ] = None
    """
    The sender address of the LSP
    """
    destination_address: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:destination-address'),
    ] = None
    """
    The destination address of the LSP
    """
    delegated: Annotated[Optional[bool], Field(alias='srl_nokia-pcep:delegated')] = None
    """
    Indicates whether the PCC is delegating the LSP to the PCE
    """
    delegated_peer_address: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-pcep:delegated-peer-address'),
    ] = None
    """
    The peer address to which the PCC has delegated the LSP
    """
    oper_state: Annotated[
        Optional[EnumerationEnum251], Field(alias='srl_nokia-pcep:oper-state')
    ] = None
    """
    The operational status of the LSP
    """
    state: Annotated[
        Optional[EnumerationEnum252], Field(alias='srl_nokia-pcep:state')
    ] = None
    """
    The state of the LSP
    """
    path_detail: Annotated[
        Optional[List[PathDetailListEntry]], Field(alias='srl_nokia-pcep:path-detail')
    ] = None
    association_detail: Annotated[
        Optional[List[AssociationDetailListEntry]],
        Field(alias='srl_nokia-pcep:association-detail'),
    ] = None


class PccContainer(BaseModel):
    """
    Configure Path Computation Client (PCC) parameters
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-pcep:admin-state')
    ] = 'disable'
    """
    Administrative state
    """
    keepalive: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:keepalive', ge=1, le=255)
    ] = 30
    """
    Configure keepalive
    """
    unknown_message_rate: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:unknown-message-rate', ge=1, le=255)
    ] = 10
    """
    Configure unknown message rate
    """
    report_path_constraints: Annotated[
        Optional[bool], Field(alias='srl_nokia-pcep:report-path-constraints')
    ] = True
    """
    Specify whether to enable/disable path constraints in PCC report
    """
    dead_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:dead-timer', ge=1, le=255)
    ] = 120
    """
    Configure dead timer
    """
    redelegation_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:redelegation-timer', ge=1, le=3600)
    ] = 90
    """
    Configure redelegation-timer
    """
    state_timer: Annotated[
        Optional[StateTimerContainer], Field(alias='srl_nokia-pcep:state-timer')
    ] = None
    pce_associations: Annotated[
        Optional[PceAssociationsContainer],
        Field(alias='srl_nokia-pcep:pce-associations'),
    ] = None
    capabilities: Annotated[
        Optional[List[EnumerationEnum248]], Field(alias='srl_nokia-pcep:capabilities')
    ] = []
    """
    The list of capabilities supported by this PCEP
    """
    oper_state: Annotated[
        Optional[EnumerationEnum249], Field(alias='srl_nokia-pcep:oper-state')
    ] = None
    """
    Indicates the operational status of this PCEP
    """
    open_wait_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:open-wait-timer', ge=1, le=65535)
    ] = None
    """
    The time that the PCEP entity will wait to receive an Open message from a peer after the TCP connection has come up

    If no Open message is received within this time, then PCEP terminates the TCP connection.
    """
    keep_wait_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:keep-wait-timer', ge=1, le=65535)
    ] = None
    """
    The time that the PCEP entity will wait to receive a Keepalive or PCErr message from a peer during session initialization after receiving an Open message

    If no Keepalive or PCErr message is received within this time, then PCEP terminates the TCP connection.
    """
    sync_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:sync-timer', ge=1, le=65535)
    ] = None
    """
    The value is used in the case of a synchronized path computation request using the SVEC object.
    """
    request_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:request-timer', ge=1, le=65535)
    ] = None
    """
    The maximum time that the PCEP entity will wait for a response to a PCReq message.
    """
    connect_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:connect-timer', ge=1, le=65535)
    ] = None
    """
    The time that the PCEP entity will wait to establish a TCP connection with a peer

    If a TCP connection is not established within this time, then PCEP aborts the session setup attempt.
    """
    allow_negotiation: Annotated[
        Optional[bool], Field(alias='srl_nokia-pcep:allow-negotiation')
    ] = None
    """
    Indicates whether the PCEP entity will permit negotiation of session parameters.
    """
    max_sessions: Annotated[
        Optional[int], Field(alias='srl_nokia-pcep:max-sessions', ge=0, le=4294967295)
    ] = None
    """
    The maximum number of sessions involving this PCEP entity that can exist at any time.
    """
    max_unknown_requests: Annotated[
        Optional[int],
        Field(alias='srl_nokia-pcep:max-unknown-requests', ge=0, le=4294967295),
    ] = None
    """
    The maximum number of unrecognized requests and replies that any session on this PCEP entity is willing to accept per minute before terminating the session.
    """
    lsp_update: Annotated[
        Optional[List[LspUpdateListEntry]], Field(alias='srl_nokia-pcep:lsp-update')
    ] = None
    path_request: Annotated[
        Optional[List[PathRequestListEntry]], Field(alias='srl_nokia-pcep:path-request')
    ] = None
    peer: Annotated[
        Optional[List[PeerListEntry6]], Field(alias='srl_nokia-pcep:peer')
    ] = None


class PcepContainer(BaseModel):
    """
    Top-level configuration and operational state for Path Computation Element Protocol (PCEP)
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    pcc: Annotated[Optional[PccContainer], Field(alias='srl_nokia-pcep:pcc')] = None


class PolicyListEntry4(BaseModel):
    """
    List of traffic engineering policies
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    policy_name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:policy-name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The name of the traffic engineering policy
    """
    policy_type: Annotated[
        Optional[EnumerationEnum377], Field(alias='srl_nokia-te-policies:policy-type')
    ] = 'sr-mpls-uncolored'
    """
    Specifies the TE policy type

    TE Policy can be of type sr-mpls-colored where label based segment-list or segment-lists constitute a candidate path and color with endpoint is used to configure a path. TE Policy can be of type uncolored in which case a single primary LSP can be backed by one or more secondary LSPs
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-te-policies:admin-state')
    ] = 'enable'
    """
    Enable/disable the traffic engineering policy
    """
    binding_sid: Annotated[
        Optional[BindingSidContainer2], Field(alias='srl_nokia-te-policies:binding-sid')
    ] = None
    color: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:color', ge=0, le=4294967295)
    ] = None
    """
    Color associated with the sr-mpls-colored TE policy.
    """
    endpoint: Annotated[
        Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType],
        Field(alias='srl_nokia-te-policies:endpoint'),
    ]
    """
    Destination of the TE policy
    """
    distinguisher: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:distinguisher', ge=0, le=4294967295),
    ] = None
    """
    Distinguisher value to make different sr-mpls-colored policies unique
    """
    entropy_label: Annotated[
        Optional[EntropyLabelContainer4],
        Field(alias='srl_nokia-te-policies:entropy-label'),
    ] = None
    head_end: Annotated[
        Optional[Union[Ipv4AddressExcludingAllZeroType, EnumerationEnum379]],
        Field(alias='srl_nokia-te-policies:head-end'),
    ] = 'local'
    """
    Targeted head end address for an sr-mpls-colored policy
    """
    tag_set: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:tag-set',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Tag set to associate with an sr-mpls-uncolored TE policy
    """
    re_optimization_timer: Annotated[
        Optional[Union[ReOptimizationTimerLeaf1, EnumerationEnum380]],
        Field(alias='srl_nokia-te-policies:re-optimization-timer'),
    ] = '30'
    """
    Re-optimizaion timer for the TE policy
    """
    candidate_path_preference: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:candidate-path-preference', ge=1, le=65535),
    ] = None
    """
    One sr-mpls-colored TE policy is considered better than another sr-mpls-colored for thesame (color, endpoint) if it has a higher preference than the other path.
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:metric', ge=1, le=16777215)
    ] = None
    """
    Metric for the TE Policy
    """
    retry_timer: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:retry-timer', ge=1, le=600)
    ] = 30
    """
    Time between TE policy re-establishment attempts after failure
    """
    ingress_statistics: Annotated[
        Optional[IngressStatisticsContainer],
        Field(alias='srl_nokia-te-policies:ingress-statistics'),
    ] = None
    egress_statistics: Annotated[
        Optional[EgressStatisticsContainer],
        Field(alias='srl_nokia-te-policies:egress-statistics'),
    ] = None
    maintenance: Annotated[
        Optional[MaintenanceContainer], Field(alias='srl_nokia-te-policies:maintenance')
    ] = None
    oper_state: Annotated[
        Optional[EnumerationEnum381], Field(alias='srl_nokia-te-policies:oper-state')
    ] = None
    """
    Traffic Engineering policy operational state.
    """
    oper_down_reason: Annotated[
        Optional[str], Field(alias='srl_nokia-te-policies:oper-down-reason')
    ] = None
    """
    The reason why the Traffic Engineering policy is operationally down.

    One of the following values:
    -  te-policy-admin-disabled: the TE policy is administratively disabled
    -  te-policy-no-valid-segment-list: the TE policy has no valid segment lists
    """
    oper_state_change_count: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-te-policies:oper-state-change-count', ge=0, le=4294967295
        ),
    ] = None
    """
    Traffic Engineering Policy operational state change count
    Operational status trnasition from up to down, down to up, etc all accounted under this counter
    """
    last_oper_state_change: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:last-oper-state-change',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time elapsed since the last operational state change for the Traffic Engineering Policy
    """
    segment_list: Annotated[
        Optional[List[SegmentListListEntry]],
        Field(alias='srl_nokia-te-policies:segment-list'),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer42], Field(alias='srl_nokia-te-policies:statistics')
    ] = None


class PolicyListEntry5(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    color: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:color', ge=0, le=4294967295)
    ] = None
    """
    Color associated with the SR MPLS (colored) policy
    """
    endpoint: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-te-policies:endpoint'),
    ] = None
    """
    Policy endpoint IP address
    """
    candidate_path: Annotated[
        Optional[List[CandidatePathListEntry]],
        Field(alias='srl_nokia-te-policies:candidate-path'),
    ] = None


class PolicyListEntry6(BaseModel):
    """
    Enter the Uncolored Traffic Engineering Policy Path list instance Also refered to as SR-TE LSP list
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    policy_name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:policy-name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Name of Uncolored Traffic Engineering Policy
    """
    protocol_origin: Annotated[
        Optional[EnumerationEnum389],
        Field(alias='srl_nokia-te-policies:protocol-origin'),
    ] = None
    """
    Uncolored Traffic Engrineering Policy, origination source. The method Policy path is computed. This list includes Path Computation Engine, explicitly configured paths, etc.
    """
    endpoint: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-te-policies:endpoint'),
    ] = None
    """
    Uncolored Traffic Engineering Policy endpoint IP address
    """
    head_end: Annotated[
        Optional[Union[Ipv4AddressUnicastType, Ipv6AddressUnicastWithoutLocalType]],
        Field(alias='srl_nokia-te-policies:head-end'),
    ] = None
    """
    Uncolored Traffic Engineering Policy headend IP address
    """
    policy_type: Annotated[
        Optional[EnumerationEnum377], Field(alias='srl_nokia-te-policies:policy-type')
    ] = None
    """
    Uncolored Traffic Engineering Policy type
    """
    tunnel_id: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:tunnel-id', ge=0, le=4294967295),
    ] = None
    """
    Uncolored Traffic Engineering Policy unique tunnel identifier
    """
    metric: Annotated[
        Optional[int], Field(alias='srl_nokia-te-policies:metric', ge=0, le=4294967295)
    ] = None
    """
    Uncolored Traffic Engineering Policy metric
    """
    tag_set: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:tag-set',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Tag-set associated with this uncolored te-policy
    """
    binding_sid: Annotated[
        Optional[BindingSidContainer3], Field(alias='srl_nokia-te-policies:binding-sid')
    ] = None
    created_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:created-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Uncolored Traffic Engineering Policy creation time
    """
    segment_list_count: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:segment-list-count', ge=0, le=4294967295),
    ] = None
    """
    Uncolored Traffic Engineering Policy segment-list count
    """
    active_segment_list_index: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-te-policies:active-segment-list-index', ge=0, le=4294967295
        ),
    ] = None
    """
    Uncolored Traffic Engineering Policy active segment-list index
    """
    maintenance: Annotated[
        Optional[MaintenanceContainer2],
        Field(alias='srl_nokia-te-policies:maintenance'),
    ] = None
    oper_state: Annotated[
        Optional[EnumerationEnum381], Field(alias='srl_nokia-te-policies:oper-state')
    ] = None
    """
    Traffic Engineering policy operational state.
    """
    oper_down_reason: Annotated[
        Optional[str], Field(alias='srl_nokia-te-policies:oper-down-reason')
    ] = None
    """
    The reason why the Traffic Engineering policy is operationally down.

    One of the following values:
    -  te-policy-admin-disabled: the TE policy is administratively disabled
    -  te-policy-no-valid-segment-list: the TE policy has no valid segment lists
    """
    oper_state_change_count: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-te-policies:oper-state-change-count', ge=0, le=4294967295
        ),
    ] = None
    """
    Traffic Engineering Policy operational state change count
    Operational status trnasition from up to down, down to up, etc all accounted under this counter
    """
    last_oper_state_change: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-te-policies:last-oper-state-change',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Time elapsed since the last operational state change for the Traffic Engineering Policy
    """
    segment_list: Annotated[
        Optional[List[SegmentListListEntry3]],
        Field(alias='srl_nokia-te-policies:segment-list'),
    ] = None


class SrColoredContainer(BaseModel):
    """
    SR MPLS Policy colored Traffic Engineering Paths
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    policy: Annotated[
        Optional[List[PolicyListEntry5]], Field(alias='srl_nokia-te-policies:policy')
    ] = None


class SrUncoloredContainer(BaseModel):
    """
    Uncolored Traffic Engineering Policy Paths. Also referred to as SR-TE LSPs
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    policy: Annotated[
        Optional[List[PolicyListEntry6]], Field(alias='srl_nokia-te-policies:policy')
    ] = None


class TargetedContainer(BaseModel):
    """
    List of targeted peers for extended discovery
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    hello_holdtime: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:hello-holdtime', ge=15, le=3600)
    ] = 45
    """
    The time interval for which a LDP Hello adjacency is maintained in the absence of Hello messages from the LDP neighbor
    """
    hello_interval: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:hello-interval', ge=5, le=1200)
    ] = 15
    """
    The interval between consecutive LDP Hello messages used in LDP discovery
    """
    ipv4: Annotated[Optional[Ipv4Container5], Field(alias='srl_nokia-ldp:ipv4')] = None
    ipv6: Annotated[Optional[Ipv6Container5], Field(alias='srl_nokia-ldp:ipv6')] = None


class TraceOptionsContainer4(BaseModel):
    """
    Enter the trace-options context
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    trace: Annotated[Optional[TraceContainer], Field(alias='srl_nokia-pim:trace')] = (
        None
    )


class AreaListEntry(BaseModel):
    """
    The OSPF areas within which the local system exists
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    area_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:area-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    the area identifier as a dotted-quad.
    """
    advertise_router_capability: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:advertise-router-capability')
    ] = True
    """
    Allow router advertisement capabilities
    """
    blackhole_aggregate: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:blackhole-aggregate')
    ] = True
    """
    Enables the creation of a blackhole for generated aggregates
    """
    export_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:export-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Apply an export policy when summarizing from this area to other areas..
    Summary LSAs for prefixes matching the policy will still be in the linkstate
    database but are not flooded.
    """
    stub: Annotated[Optional[StubContainer], Field(alias='srl_nokia-ospf:stub')] = None
    nssa: Annotated[Optional[NssaContainer], Field(alias='srl_nokia-ospf:nssa')] = None
    area_range: Annotated[
        Optional[List[AreaRangeListEntry2]], Field(alias='srl_nokia-ospf:area-range')
    ] = None
    bgp_ls_exclude: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:bgp-ls-exclude')
    ] = False
    """
    When set to true, topology and TE information related to this area or level should nkot be imported into the TE database in a format that supports export as BGP-LS routes
    """
    full_spf_runs: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:full-spf-runs', ge=0, le=4294967295)
    ] = None
    """
    The total number of times that complete SPF has been run on the router since OSPF was last enabled.
    """
    last_spf_run_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:last-spf-run-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The sys-up-time when intra-area SPF was last run on this area.
    """
    area_bdr_rtr_count: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:area-bdr-rtr-count', ge=0, le=4294967295),
    ] = None
    """
    The total number of area border routers reachable within this area.
    """
    as_bdr_rtr_count: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:as-bdr-rtr-count', ge=0, le=4294967295),
    ] = None
    """
    The total number of autonomous system border routers reachable within this area.
    """
    active_interfaces: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:active-interfaces', ge=0, le=4294967295),
    ] = None
    """
    The number of active interfaces in this area.
    """
    lsa_totals: Annotated[
        Optional[LsaTotalsContainer2], Field(alias='srl_nokia-ospf:lsa-totals')
    ] = None
    lsa_filter_totals: Annotated[
        Optional[LsaFilterTotalsContainer],
        Field(alias='srl_nokia-ospf:lsa-filter-totals'),
    ] = None
    interface: Annotated[
        Optional[List[InterfaceListEntry11]], Field(alias='srl_nokia-ospf:interface')
    ] = None
    lsdb: Annotated[Optional[LsdbContainer4], Field(alias='srl_nokia-ospf:lsdb')] = None


class DiscoveryContainer(BaseModel):
    """
    Neighbor discovery configuration and operational state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    interfaces: Annotated[
        Optional[InterfacesContainer], Field(alias='srl_nokia-ldp:interfaces')
    ] = None
    targeted: Annotated[
        Optional[TargetedContainer], Field(alias='srl_nokia-ldp:targeted')
    ] = None


class InstanceListEntry5(BaseModel):
    """
    List of IS-IS protocol instances associated with this
    network-instance.
    Only a single instance is supported for now
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The name of the IS-IS instance
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-isis:admin-state')
    ] = 'disable'
    """
    Used to administratively enable or disable the IS-IS instance
    """
    instance_id: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:instance-id', ge=0, le=127)
    ] = 0
    """
    ISIS instance number
    """
    net: Annotated[Optional[List[NetLeafList]], Field(alias='srl_nokia-isis:net')] = []
    """
    ISIS network entity title (NET)
    """
    level_capability: Annotated[
        Optional[EnumerationEnum133], Field(alias='srl_nokia-isis:level-capability')
    ] = 'L2'
    """
    The level-capability of the intermediate system (router)
    """
    max_ecmp_paths: Annotated[
        Optional[int], Field(alias='srl_nokia-isis:max-ecmp-paths', ge=1, le=64)
    ] = 1
    """
    The maximum number of ECMP next-hops to program into the FIB for every IP prefix
    """
    weighted_ecmp: Annotated[
        Optional[WeightedEcmpContainer6], Field(alias='srl_nokia-isis:weighted-ecmp')
    ] = None
    poi_tlv: Annotated[Optional[bool], Field(alias='srl_nokia-isis:poi-tlv')] = False
    """
    When set to true, a TLV is added to purge to record the system ID of the IS generating the purge.
    """
    iid_tlv: Annotated[Optional[bool], Field(alias='srl_nokia-isis:iid-tlv')] = False
    """
    ISIS Instance Identifier TLV. When set to true, IID-TLV identifies
    the unique instance as well as the topology/topologies to which the
    PDU applies.
    """
    advertise_router_capability: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:advertise-router-capability')
    ] = True
    """
    Allow router advertisement capabilities
    """
    prefix_attributes_tlv: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:prefix-attributes-tlv')
    ] = True
    """
    Use IS-IS Prefix Attributes TLV to exchange extended IPv4 and IPv6 reachability information
    """
    export_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:export-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Apply an export policy to redistribute non-ISIS routes into ISIS
    """
    hello_padding: Annotated[
        Optional[EnumerationEnum134], Field(alias='srl_nokia-isis:hello-padding')
    ] = 'disable'
    """
    Specifies the use of IS-IS Hello PDU padding all interfaces

    This can be overridden by interface configuration.
    """
    enable_csnp_on_p2p_links: Annotated[
        Optional[bool], Field(alias='srl_nokia-isis:enable-csnp-on-p2p-links')
    ] = True
    """
    Enable/disable the transmission of periodic CSNP PDUs on point-to-point interfaces

    When this is set to false, CSNP PDUs will only be sent on a P2P interface when the adjacency is initialized. This setting has no effect on broadcast interfaces.
    """
    attached_bit: Annotated[
        Optional[AttachedBitContainer], Field(alias='srl_nokia-isis:attached-bit')
    ] = None
    overload: Annotated[
        Optional[OverloadContainer2], Field(alias='srl_nokia-isis:overload')
    ] = None
    timers: Annotated[
        Optional[TimersContainer3], Field(alias='srl_nokia-isis:timers')
    ] = None
    trace_options: Annotated[
        Optional[TraceOptionsContainer11], Field(alias='srl_nokia-isis:trace-options')
    ] = None
    transport: Annotated[
        Optional[TransportContainer4], Field(alias='srl_nokia-isis:transport')
    ] = None
    ipv4_unicast: Annotated[
        Optional[Ipv4UnicastContainer5], Field(alias='srl_nokia-isis:ipv4-unicast')
    ] = None
    ipv6_unicast: Annotated[
        Optional[Ipv6UnicastContainer5], Field(alias='srl_nokia-isis:ipv6-unicast')
    ] = None
    graceful_restart: Annotated[
        Optional[GracefulRestartContainer6],
        Field(alias='srl_nokia-isis:graceful-restart'),
    ] = None
    auto_cost: Annotated[
        Optional[AutoCostContainer], Field(alias='srl_nokia-isis:auto-cost')
    ] = None
    loopfree_alternate: Annotated[
        Optional[LoopfreeAlternateContainer2],
        Field(alias='srl_nokia-isis:loopfree-alternate'),
    ] = None
    te_database_install: Annotated[
        Optional[TeDatabaseInstallContainer2],
        Field(alias='srl_nokia-isis:te-database-install'),
    ] = None
    authentication: Annotated[
        Optional[AuthenticationContainer4], Field(alias='srl_nokia-isis:authentication')
    ] = None
    inter_level_propagation_policies: Annotated[
        Optional[InterLevelPropagationPoliciesContainer],
        Field(alias='srl_nokia-isis:inter-level-propagation-policies'),
    ] = None
    ldp_synchronization: Annotated[
        Optional[LdpSynchronizationContainer],
        Field(alias='srl_nokia-isis:ldp-synchronization'),
    ] = None
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-isis:oper-state')
    ] = None
    """
    The value of the this object indicates the operational state of the destination.
    """
    oper_area_id: Annotated[
        Optional[List[OperAreaIdLeafList]], Field(alias='srl_nokia-isis:oper-area-id')
    ] = []
    """
    The list of area IDs associated with this IS router
    """
    oper_system_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:oper-system-id',
            pattern='^(?=^[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}$).*$',
        ),
    ] = None
    """
    The ID for this instance of the Integrated IS-IS protocol.
    """
    restarting_neighbor_list: Annotated[
        Optional[RestartingNeighborListContainer],
        Field(alias='srl_nokia-isis:restarting-neighbor-list'),
    ] = None
    statistics: Annotated[
        Optional[StatisticsContainer20], Field(alias='srl_nokia-isis:statistics')
    ] = None
    segment_routing: Annotated[
        Optional[SegmentRoutingContainer], Field(alias='srl_nokia-isis:segment-routing')
    ] = None
    traffic_engineering: Annotated[
        Optional[TrafficEngineeringContainer],
        Field(alias='srl_nokia-isis:traffic-engineering'),
    ] = None
    interface: Annotated[
        Optional[List[InterfaceListEntry6]], Field(alias='srl_nokia-isis:interface')
    ] = None
    level: Annotated[
        Optional[List[LevelListEntry2]], Field(alias='srl_nokia-isis:level')
    ] = None
    hostnames: Annotated[
        Optional[HostnamesContainer], Field(alias='srl_nokia-isis:hostnames')
    ] = None
    level_database: Annotated[
        Optional[List[LevelDatabaseListEntry]],
        Field(alias='srl_nokia-isis:level-database'),
    ] = None


class InstanceListEntry6(BaseModel):
    """
    List of OSPF protocol instances associated with this
    network-instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    The name of the OSPF instance
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-ospf:admin-state')
    ] = 'disable'
    """
    Used to administratively enable or disable the OSPF instance
    """
    version: Annotated[str, Field(alias='srl_nokia-ospf:version')]
    """
    The version that this ospf instance supports.
    """
    address_family: Annotated[
        Optional[str], Field(alias='srl_nokia-ospf:address-family')
    ] = None
    """
    The address family that this instance supports.
    Only valid for OSPFv3.
    """
    instance_id: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:instance-id', ge=0, le=255)
    ] = None
    """
    The OSPF multi instance identity as defined in RFC6549 or RFC5838.
    Supported values are:
      For OSPFv2 it is between 0 and 31, default is 0.
      For OSPFv3 address-family ipv6-unicast it is between 0 and 31,
      default is 0.
      For OSPFv3 address-family ipv4-unicast it is between 64 and 95,
      default is 64.
    """
    router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:router-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    An unsigned 32-bit number expressed in the dotted-quad
    notation, i.e., four octets written as decimal numbers
    and separated with the '.' (full stop) character.
    """
    max_ecmp_paths: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:max-ecmp-paths', ge=1, le=64)
    ] = 1
    """
    The maximum number of ECMP next-hops to program into the FIB
    for every IP prefix
    """
    advertise_router_capability: Annotated[
        Optional[EnumerationEnum208],
        Field(alias='srl_nokia-ospf:advertise-router-capability'),
    ] = None
    """
    Scope to advertise router-capability.
    """
    export_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:export-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Apply an export policy to redistribute routes into OSPF
    """
    asbr: Annotated[Optional[AsbrContainer], Field(alias='srl_nokia-ospf:asbr')] = None
    export_limit: Annotated[
        Optional[ExportLimitContainer], Field(alias='srl_nokia-ospf:export-limit')
    ] = None
    external_preference: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:external-preference', ge=0, le=255)
    ] = 150
    """
    Configure the route preference associated with OSPF external routes
    """
    external_db_overflow: Annotated[
        Optional[ExternalDbOverflowContainer],
        Field(alias='srl_nokia-ospf:external-db-overflow'),
    ] = None
    graceful_restart: Annotated[
        Optional[GracefulRestartContainer7],
        Field(alias='srl_nokia-ospf:graceful-restart'),
    ] = None
    reference_bandwidth: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:reference-bandwidth', ge=1, le=8000000000),
    ] = 400000000
    """
    Configures the reference bandwidth that provides the basis for
    interface metrics based on link Bandwidth

    If the reference bandwidth is defined, then the cost is calculated
    using the following formula:
       cost = reference-bandwidth / bandwidth

    When a large reference-bandwidth value is configured, a metric
    calculation may result in a value higher than the supported protocol
    cost value. If this occurs, OSPF automatically reverts to the
    maximum configurable cost metric.
    """
    preference: Annotated[
        Optional[int], Field(alias='srl_nokia-ospf:preference', ge=1, le=255)
    ] = 10
    """
    Sets the route prefence for OSPF sourced routes
    """
    overload: Annotated[
        Optional[OverloadContainer3], Field(alias='srl_nokia-ospf:overload')
    ] = None
    timers: Annotated[
        Optional[TimersContainer6], Field(alias='srl_nokia-ospf:timers')
    ] = None
    trace_options: Annotated[
        Optional[TraceOptionsContainer16], Field(alias='srl_nokia-ospf:trace-options')
    ] = None
    te_database_install: Annotated[
        Optional[TeDatabaseInstallContainer3],
        Field(alias='srl_nokia-ospf:te-database-install'),
    ] = None
    traffic_engineering: Annotated[
        Optional[TrafficEngineeringContainer2],
        Field(alias='srl_nokia-ospf:traffic-engineering'),
    ] = None
    oper_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-ospf:oper-state')
    ] = None
    """
    Used to report operational state of the OSPF instance
    """
    last_disabled_reason: Annotated[
        Optional[str],
        Field(alias='srl_nokia-ospf:last-disabled-reason', max_length=20, min_length=0),
    ] = None
    """
    Reason why the disabled state was entered the last time.
    """
    area_border_router: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:area-border-router')
    ] = None
    """
    This indicates whether this router is an area border router.
    """
    as_border_router: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:as-border-router')
    ] = None
    """
    This indicates whether this router is an AS border router.
    """
    backbone_router: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:backbone-router')
    ] = None
    """
    This indicates whether or not this router is configured as an OSPF back bone router.
    """
    overload_state: Annotated[
        Optional[EnumerationEnum213], Field(alias='srl_nokia-ospf:overload-state')
    ] = None
    """
    the value of overload-oper-state indicates whether or not the OSPF application is presently in overload state or not.
    """
    overload_rem_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:overload-rem-interval', ge=0, le=65535),
    ] = None
    """
    the value of overload-rem-interval indicates the time for which the system will be in overload state if OSPF is in overload state. the value of 0 implies that the system is indefinitely in overload state.
    """
    last_overload_entered_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:last-overload-entered-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    the value of last-overload-entrd-time indicates the time at which the system last went into overload state.
    """
    last_overload_exit_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:last-overload-exit-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    the value of last-overload-exit-time indicates the time at which the system last came out of overload state.
    """
    last_overload_enter_code: Annotated[
        Optional[EnumerationEnum214],
        Field(alias='srl_nokia-ospf:last-overload-enter-code'),
    ] = None
    """
    the value of last-overload-enter-code indicates the condition which caused OSPF to get into overload.
    """
    last_overload_exit_code: Annotated[
        Optional[EnumerationEnum215],
        Field(alias='srl_nokia-ospf:last-overload-exit-code'),
    ] = None
    """
    the value of last-overload-exit-code indicates the reason why OSPF came out of overload state the last time, since reset.
    """
    overflow: Annotated[Optional[bool], Field(alias='srl_nokia-ospf:overflow')] = None
    """
    The value of in-overflow-state indicates the current overflow state (true/false).
    This overflow state occurs when the number of non-default AS-external-LS-as
    entries exceed the link-state database capability.
    """
    last_overflow_entered_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:last-overflow-entered-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    The value of last-ovrflw-entered-time indicates the value of sys-up-time the last time we entered overflow state. this overflow state occurs when the number of non-default AS-external-LS-as entries exceed the link-state database capability.
    """
    last_overflow_exit_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:last-overflow-exit-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    the value of last-overflow-exit-time indicates the value of sys-up-time the last time we exited overflow state. this overflow state occurs when the number of non-default AS-external-LS-as entries exceed the link-state database capability.
    """
    opaque_lsa_support: Annotated[
        Optional[bool], Field(alias='srl_nokia-ospf:opaque-lsa-support')
    ] = None
    """
    the value of opaque-lsa-support indicates the router's support for opaque LSA types. this object is valid only when version is 'version2'.
    """
    last_enabled_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:last-enabled-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    the value of last-enabled-time indicates the value of sys-up-time when admin-state was last set to 'enabled'. when admin-state is set to 'disabled', the OSPF counters are stopped when admin-state is reset to 'enabled', the counters are reset to zero.
    """
    routes_submitted: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:routes-submitted', ge=0, le=4294967295),
    ] = None
    """
    the value of routes-submitted indicates the number of routes submitted to the route table manager (RTM) by this instance of OSPF.
    """
    total_exported_routes: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:total-exported-routes', ge=0, le=4294967295),
    ] = None
    """
    the value of total-exported-routes indicates the total number of routes exported into OSPF from the route table manager when an export policy is configured. value of total-exported-routes would be 0 when no export policy is configured.
    """
    ovld_lsa_limit_rem_interval: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:ovld-lsa-limit-rem-interval', ge=0, le=65535),
    ] = None
    """
    the value of ovld-lsa-limit-rem-interval indicates the remaining time in seconds for which the system will be in overload state due to advertising router LSA limit exceeded. the value of 0 implies that the system is either not in overload or indefinitely in overload state.
    """
    new_lsas_originated: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:new-lsas-originated', ge=0, le=4294967295),
    ] = None
    """
    The number of new link-state advertisements that have been originated. This number is incremented each time the router originates a new LSA.
    """
    new_lsas_received: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:new-lsas-received', ge=0, le=4294967295),
    ] = None
    """
    The number of link-state advertisements received determined to be new instantiations. This number does not include newer instantiations of self-originated link-state advertisements.
    """
    extern_lsa_count: Annotated[
        Optional[int],
        Field(alias='srl_nokia-ospf:extern-lsa-count', ge=0, le=4294967295),
    ] = None
    """
    the value of extern-lsa-count indicates the number of external LS-as (LS type 0x4005) in the link-state database
    """
    extern_lsa_cksum_sum: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ospf:extern-lsa-cksum-sum',
            pattern='^(?=^0x[0-9a-fA-F]+$).*$',
        ),
    ] = None
    """
    the value of extern-lsa-cksum-sum indicates the 32-bit unsigned sum of the LS checksums of the external link-state advertisements contained in the link-state database. This sum can be used to determine if there has been a change in a router's link state database, and to compare the link-state database of two routers.
    """
    spf: Annotated[Optional[SpfContainer3], Field(alias='srl_nokia-ospf:spf')] = None
    lsa_totals: Annotated[
        Optional[LsaTotalsContainer], Field(alias='srl_nokia-ospf:lsa-totals')
    ] = None
    lsdb: Annotated[Optional[LsdbContainer2], Field(alias='srl_nokia-ospf:lsdb')] = None
    ldp_synchronization: Annotated[
        Optional[LdpSynchronizationContainer3],
        Field(alias='srl_nokia-ospf:ldp-synchronization'),
    ] = None
    area: Annotated[
        Optional[List[AreaListEntry]], Field(alias='srl_nokia-ospf:area')
    ] = None


class IsisContainer(BaseModel):
    """
    Top-level configuration and operational state for Intermediate System to Intermediate System (ISIS)
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    non_stop_forwarding: Annotated[
        Optional[NonStopForwardingContainer],
        Field(alias='srl_nokia-isis:non-stop-forwarding'),
    ] = None
    dynamic_label_block: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-isis:dynamic-label-block',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Reference to a dynamic label block

    Configuration of this label block is mandatory in order to enable segment routing MPLS (SR-MPLS) in IS-IS. Dynamic adjacency SID labels come from this label block.

    This label block is not advertised as an SRLB in the router capabilities TLV.
    """
    dynamic_label_block_status: Annotated[
        Optional[EnumerationEnum132],
        Field(alias='srl_nokia-isis:dynamic-label-block-status'),
    ] = None
    """
    Status of the label block.

    The label block may show as unavailable if there is pending cleanup.
    """
    instance: Annotated[
        Optional[List[InstanceListEntry5]], Field(alias='srl_nokia-isis:instance')
    ] = None


class LdpContainer(BaseModel):
    """
    Container for LDP configuration and state
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-ldp:admin-state')
    ] = 'disable'
    """
    Administratively enable or disable LDP
    """
    dynamic_label_block: Annotated[
        str,
        Field(
            alias='srl_nokia-ldp:dynamic-label-block',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ]
    """
    Reference to a dynamic label block
    """
    dynamic_label_block_status: Annotated[
        Optional[EnumerationEnum93],
        Field(alias='srl_nokia-ldp:dynamic-label-block-status'),
    ] = None
    """
    Status of the label block

    The label block may show as unavailable if there is pending cleanup
    """
    tunnel_down_damp_time: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:tunnel-down-damp-time', ge=0, le=20)
    ] = 3
    """
    Configure the time interval that LDP damps a tunnel down event
    """
    label_withdrawal_delay: Annotated[
        Optional[int], Field(alias='srl_nokia-ldp:label-withdrawal-delay', ge=3, le=120)
    ] = None
    """
    Configure the time interval that LDP delays the withdrawal of its label
    """
    entropy_label: Annotated[
        Optional[EntropyLabelContainer2], Field(alias='srl_nokia-ldp:entropy-label')
    ] = None
    loopfree_alternate: Annotated[
        Optional[LoopfreeAlternateContainer],
        Field(alias='srl_nokia-ldp:loopfree-alternate'),
    ] = None
    fec_resolution: Annotated[
        Optional[FecResolutionContainer], Field(alias='srl_nokia-ldp:fec-resolution')
    ] = None
    static_fec: Annotated[
        Optional[List[StaticFecListEntry]], Field(alias='srl_nokia-ldp:static-fec')
    ] = None
    graceful_restart: Annotated[
        Optional[GracefulRestartContainer4],
        Field(alias='srl_nokia-ldp:graceful-restart'),
    ] = None
    export_prefix_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:export-prefix-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Apply an export prefix policy to filter advertised label bindings
    """
    import_prefix_policy: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-ldp:import-prefix-policy',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,/_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,/_:;?-]*$).*$',
        ),
    ] = None
    """
    Apply an import prefix policy to filter received label bindings
    """
    multipath: Annotated[
        Optional[MultipathContainer3], Field(alias='srl_nokia-ldp:multipath')
    ] = None
    ipv4: Annotated[Optional[Ipv4Container3], Field(alias='srl_nokia-ldp:ipv4')] = None
    ipv6: Annotated[Optional[Ipv6Container3], Field(alias='srl_nokia-ldp:ipv6')] = None
    discovery: Annotated[
        Optional[DiscoveryContainer], Field(alias='srl_nokia-ldp:discovery')
    ] = None
    peers: Annotated[Optional[PeersContainer], Field(alias='srl_nokia-ldp:peers')] = (
        None
    )
    statistics: Annotated[
        Optional[StatisticsContainer19], Field(alias='srl_nokia-ldp:statistics')
    ] = None


class OspfContainer(BaseModel):
    """
    Top-level configuration and operational state for Open Shortest Path First (OSPF)
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    instance: Annotated[
        Optional[List[InstanceListEntry6]], Field(alias='srl_nokia-ospf:instance')
    ] = None


class PimContainer(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-pim:admin-state')
    ] = 'enable'
    """
    Administratively enable or disable PIM
    """
    import_policies: Annotated[
        Optional[ImportPoliciesContainer], Field(alias='srl_nokia-pim:import-policies')
    ] = None
    ecmp_hashing: Annotated[
        Optional[EcmpHashingContainer], Field(alias='srl_nokia-pim:ecmp-hashing')
    ] = None
    ecmp_balance: Annotated[
        Optional[bool], Field(alias='srl_nokia-pim:ecmp-balance')
    ] = False
    """
    Enables hashing balance for multicast streams

    This command enables multicast balancing of traffic over ECMP links based on the number of (S, G) distributed over each link.
    When enabled, each new multicast stream that needs to be forwarded over an ECMP link is compared to the count of (S, G) already using each link, so that the link with the fewest (S, G) is chosen.
    """
    ecmp_balance_hold: Annotated[
        Optional[int], Field(alias='srl_nokia-pim:ecmp-balance-hold', ge=1, le=600)
    ] = 1
    """
    Hold period for ecmp balancing

    This command defines a hold period that applies after an interface has been added to the ECMP link.
    It is also used periodically to rebalance if channels have been removed from the ECMP link.
    If the ECMP interface has not changed in the hold period and if no multicast streams have been removed, then no action is taken when the timer triggers.
    This parameter should be used to avoid excessive changes to the multicast distribution.
    """
    multicast_ecmp_last_rebalance_time: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-pim:multicast-ecmp-last-rebalance-time',
            pattern='^(?=^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})$).*$',
        ),
    ] = None
    """
    Last system time where multicast did a ecmp rebalance on this system
    """
    multicast_ecmp_next_balance_time: Annotated[
        Optional[int],
        Field(
            alias='srl_nokia-pim:multicast-ecmp-next-balance-time', ge=0, le=4294967295
        ),
    ] = None
    """
    The time remaining until the next rebalance would occur.
    """
    multicast_ecmp_rebalance_inprogress: Annotated[
        Optional[bool], Field(alias='srl_nokia-pim:multicast-ecmp-rebalance-inprogress')
    ] = None
    """
    Whether or not multicast ECMP re-balancing is currently in progress.
    """
    multicast_ecmp_rebalance_type: Annotated[
        Optional[EnumerationEnum72],
        Field(alias='srl_nokia-pim:multicast-ecmp-rebalance-type'),
    ] = None
    """
    The value of this object indicates the type of ECMP rebalance.
    """
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-pim:oper-state')
    ] = None
    """
    Operational state of the PIM instance
    """
    ipv4: Annotated[Optional[Ipv4Container], Field(alias='srl_nokia-pim:ipv4')] = None
    ipv6: Annotated[Optional[Ipv6Container], Field(alias='srl_nokia-pim:ipv6')] = None
    interface: Annotated[
        Optional[List[InterfaceListEntry3]], Field(alias='srl_nokia-pim:interface')
    ] = None
    database: Annotated[
        Optional[DatabaseContainer2], Field(alias='srl_nokia-pim:database')
    ] = None
    s_pmsi: Annotated[Optional[SPmsiContainer], Field(alias='srl_nokia-pim:s-pmsi')] = (
        None
    )
    ssm: Annotated[Optional[SsmContainer], Field(alias='srl_nokia-pim:ssm')] = None
    rendezvous_points: Annotated[
        Optional[RendezvousPointsContainer],
        Field(alias='srl_nokia-pim:rendezvous-points'),
    ] = None
    spt_switchover: Annotated[
        Optional[SptSwitchoverContainer], Field(alias='srl_nokia-pim:spt-switchover')
    ] = None
    trace_options: Annotated[
        Optional[TraceOptionsContainer4], Field(alias='srl_nokia-pim:trace-options')
    ] = None


class PolicyDatabaseContainer(BaseModel):
    """
    Traffic Engineering Policy Database
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    sr_colored: Annotated[
        Optional[SrColoredContainer], Field(alias='srl_nokia-te-policies:sr-colored')
    ] = None
    sr_uncolored: Annotated[
        Optional[SrUncoloredContainer],
        Field(alias='srl_nokia-te-policies:sr-uncolored'),
    ] = None
    active_te_policies: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:active-te-policies', ge=0, le=4294967295),
    ] = None
    """
    Number of active Traffic Engineering Polices
    """
    total_te_policies: Annotated[
        Optional[int],
        Field(alias='srl_nokia-te-policies:total-te-policies', ge=0, le=4294967295),
    ] = None
    """
    Number of total Traffic Engineering Policies (irrespective of the operational state)
    """


class ProtocolsContainer(BaseModel):
    """
    The routing protocols that are enabled for this
    network-instance.
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    bgp_evpn: Annotated[
        Optional[BgpEvpnContainer], Field(alias='srl_nokia-network-instance:bgp-evpn')
    ] = None
    bgp_ipvpn: Annotated[
        Optional[BgpIpvpnContainer], Field(alias='srl_nokia-network-instance:bgp-ipvpn')
    ] = None
    directly_connected: Annotated[
        Optional[DirectlyConnectedContainer],
        Field(alias='srl_nokia-network-instance:directly-connected'),
    ] = None
    gribi: Annotated[Optional[GribiContainer], Field(alias='srl_nokia-gribi:gribi')] = (
        None
    )
    bgp: Annotated[Optional[BgpContainer], Field(alias='srl_nokia-bgp:bgp')] = None
    bgp_vpn: Annotated[
        Optional[BgpVpnContainer2], Field(alias='srl_nokia-bgp-vpn:bgp-vpn')
    ] = None
    pim: Annotated[Optional[PimContainer], Field(alias='srl_nokia-pim:pim')] = None
    stp: Annotated[Optional[StpContainer], Field(alias='srl_nokia-stp:stp')] = None
    mld: Annotated[Optional[MldContainer], Field(alias='srl_nokia-mld:mld')] = None
    ldp: Annotated[Optional[LdpContainer], Field(alias='srl_nokia-ldp:ldp')] = None
    isis: Annotated[Optional[IsisContainer], Field(alias='srl_nokia-isis:isis')] = None
    linux: Annotated[Optional[LinuxContainer], Field(alias='srl_nokia-linux:linux')] = (
        None
    )
    igmp_snooping: Annotated[
        Optional[IgmpSnoopingContainer],
        Field(alias='srl_nokia-igmp-snooping:igmp-snooping'),
    ] = None
    mld_snooping: Annotated[
        Optional[MldSnoopingContainer],
        Field(alias='srl_nokia-mld-snooping:mld-snooping'),
    ] = None
    ospf: Annotated[Optional[OspfContainer], Field(alias='srl_nokia-ospf:ospf')] = None
    pcep: Annotated[Optional[PcepContainer], Field(alias='srl_nokia-pcep:pcep')] = None
    igmp: Annotated[Optional[IgmpContainer], Field(alias='srl_nokia-igmp:igmp')] = None
    ptp: Annotated[Optional[PtpContainer], Field(alias='srl_nokia-sync-ptp:ptp')] = None


class TrafficEngineeringPoliciesContainer(BaseModel):
    """
    Container with traffic engineering policies
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    binding_sid: Annotated[
        Optional[BindingSidContainer], Field(alias='srl_nokia-te-policies:binding-sid')
    ] = None
    explicit_paths: Annotated[
        Optional[ExplicitPathsContainer],
        Field(alias='srl_nokia-te-policies:explicit-paths'),
    ] = None
    policy: Annotated[
        Optional[List[PolicyListEntry4]], Field(alias='srl_nokia-te-policies:policy')
    ] = None
    policy_database: Annotated[
        Optional[PolicyDatabaseContainer],
        Field(alias='srl_nokia-te-policies:policy-database'),
    ] = None


class NetworkInstanceListEntry(BaseModel):
    """
    Network instances configured on the local system
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    name: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-network-instance:name',
            pattern='^(?=^[A-Za-z0-9!@#$%^&()|+=`~.,_:;?-][A-Za-z0-9 !@#$%^&()|+=`~.,_:;?-]*$).*$',
        ),
    ] = None
    """
    A unique name identifying the network instance
    """
    type: Annotated[Optional[str], Field(alias='srl_nokia-network-instance:type')] = (
        'default'
    )
    """
    The type of network instance. The value of this leaf
    indicates the type of forwarding entries that should be
    supported by this network instance
    """
    admin_state: Annotated[
        Optional[EnumerationEnum], Field(alias='srl_nokia-network-instance:admin-state')
    ] = 'enable'
    """
    This leaf contains the configured, desired state of the
    network instance.
    """
    oper_state: Annotated[
        Optional[EnumerationEnum2], Field(alias='srl_nokia-network-instance:oper-state')
    ] = None
    """
    This leaf contains the operational state of the network instance.
    """
    oper_down_reason: Annotated[
        Optional[EnumerationEnum3],
        Field(alias='srl_nokia-network-instance:oper-down-reason'),
    ] = None
    """
    The reason the network-instance is down
    """
    oper_mac_vrf_mtu: Annotated[
        Optional[int],
        Field(alias='srl_nokia-network-instance:oper-mac-vrf-mtu', ge=1492, le=9500),
    ] = None
    """
    Operational l2-mtu of the mac-vrf network-instance. Calculated as the lowest l2-mtu of the bridged subinterfaces associated to the mac-vrf, minus the vlan tags associated
    to that subinterface (lowest mtu subinterface).

    When the mac-vrf has an associated irb subinterface, if the configured irb ip-mtu exceeds the oper-mac-vrf-mtu minus 14 bytes (Ethernet header), then the irb subinterface will remain operationally down.

    The oper-mac-vrf-mtu is only available in mac-vrf network-instances.
    """
    oper_vpws_mtu: Annotated[
        Optional[int],
        Field(alias='srl_nokia-network-instance:oper-vpws-mtu', ge=1492, le=9500),
    ] = None
    """
    Operational l2-mtu of the vpws network-instance

    Derived from the l2-mtu of the bridged subinterface
    associated to the vpws, minus the vlan tags associated
    to that subinterface.

    The oper-vpws-mtu is only available in vpws network-instances.
    """
    description: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-network-instance:description', max_length=255, min_length=1
        ),
    ] = None
    """
    A user-entered description of this network instance.
    """
    router_id: Annotated[
        Optional[str],
        Field(
            alias='srl_nokia-network-instance:router-id',
            pattern='^(?=^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$).*$',
        ),
    ] = None
    """
    A identifier for the local network instance - typically
    used within associated routing protocols or signalling
    routing information in another network instance
    """
    mpls_forwarding: Annotated[
        Optional[MplsForwardingContainer],
        Field(alias='srl_nokia-network-instance:mpls-forwarding'),
    ] = None
    ip_forwarding: Annotated[
        Optional[IpForwardingContainer],
        Field(alias='srl_nokia-network-instance:ip-forwarding'),
    ] = None
    ip_load_balancing: Annotated[
        Optional[IpLoadBalancingContainer],
        Field(alias='srl_nokia-network-instance:ip-load-balancing'),
    ] = None
    inter_instance_policies: Annotated[
        Optional[InterInstancePoliciesContainer],
        Field(alias='srl_nokia-network-instance:inter-instance-policies'),
    ] = None
    interface: Annotated[
        Optional[List[InterfaceListEntry]],
        Field(alias='srl_nokia-network-instance:interface'),
    ] = None
    system_ipv4_address: Annotated[
        Optional[SystemIpv4AddressContainer],
        Field(alias='srl_nokia-network-instance:system-ipv4-address'),
    ] = None
    system_ipv6_address: Annotated[
        Optional[SystemIpv6AddressContainer],
        Field(alias='srl_nokia-network-instance:system-ipv6-address'),
    ] = None
    vxlan_interface: Annotated[
        Optional[List[VxlanInterfaceListEntry]],
        Field(alias='srl_nokia-network-instance:vxlan-interface'),
    ] = None
    icmp: Annotated[
        Optional[IcmpContainer], Field(alias='srl_nokia-network-instance:icmp')
    ] = None
    icmp6: Annotated[
        Optional[Icmp6Container], Field(alias='srl_nokia-network-instance:icmp6')
    ] = None
    protocols: Annotated[
        Optional[ProtocolsContainer],
        Field(alias='srl_nokia-network-instance:protocols'),
    ] = None
    bridge_table: Annotated[
        Optional[BridgeTableContainer4],
        Field(alias='srl_nokia-network-instance:bridge-table'),
    ] = None
    route_table: Annotated[
        Optional[RouteTableContainer3],
        Field(alias='srl_nokia-network-instance:route-table'),
    ] = None
    tunnel_table: Annotated[
        Optional[TunnelTableContainer],
        Field(alias='srl_nokia-network-instance:tunnel-table'),
    ] = None
    multicast_forwarding_information_base: Annotated[
        Optional[MulticastForwardingInformationBaseContainer],
        Field(alias='srl_nokia-network-instance:multicast-forwarding-information-base'),
    ] = None
    connection_point: Annotated[
        Optional[List[ConnectionPointListEntry]],
        Field(alias='srl_nokia-network-instance:connection-point'),
    ] = None
    bfd: Annotated[
        Optional[BfdContainer], Field(alias='srl_nokia-seamless-bfd:bfd')
    ] = None
    segment_routing: Annotated[
        Optional[SegmentRoutingContainer3],
        Field(alias='srl_nokia-segment-routing:segment-routing'),
    ] = None
    multicast_l3_vpn: Annotated[
        Optional[MulticastL3VpnContainer],
        Field(alias='srl_nokia-mvpn-l3:multicast-l3-vpn'),
    ] = None
    policy_forwarding: Annotated[
        Optional[PolicyForwardingContainer],
        Field(alias='srl_nokia-policy-forwarding:policy-forwarding'),
    ] = None
    traffic_engineering: Annotated[
        Optional[TrafficEngineeringContainer3],
        Field(alias='srl_nokia-traffic-engineering:traffic-engineering'),
    ] = None
    next_hop_groups: Annotated[
        Optional[NextHopGroupsContainer],
        Field(alias='srl_nokia-next-hop-groups:next-hop-groups'),
    ] = None
    mpls: Annotated[Optional[MplsContainer9], Field(alias='srl_nokia-mpls:mpls')] = None
    bgp_rib: Annotated[
        Optional[BgpRibContainer], Field(alias='srl_nokia-rib-bgp:bgp-rib')
    ] = None
    afts: Annotated[Optional[AftsContainer], Field(alias='srl_nokia-aft:afts')] = None
    tcp: Annotated[Optional[TcpContainer], Field(alias='srl_nokia-tcp-udp:tcp')] = None
    udp: Annotated[Optional[UdpContainer], Field(alias='srl_nokia-tcp-udp:udp')] = None
    maintenance_policies: Annotated[
        Optional[MaintenancePoliciesContainer],
        Field(alias='srl_nokia-maintenance-policies:maintenance-policies'),
    ] = None
    traffic_engineering_policies: Annotated[
        Optional[TrafficEngineeringPoliciesContainer],
        Field(alias='srl_nokia-te-policies:traffic-engineering-policies'),
    ] = None
    aggregate_routes: Annotated[
        Optional[AggregateRoutesContainer],
        Field(alias='srl_nokia-aggregate-routes:aggregate-routes'),
    ] = None
    static_routes: Annotated[
        Optional[StaticRoutesContainer],
        Field(alias='srl_nokia-static-routes:static-routes'),
    ] = None
    ip_tunnel_decapsulation: Annotated[
        Optional[IpTunnelDecapsulationContainer],
        Field(alias='srl_nokia-ni-gre:ip-tunnel-decapsulation'),
    ] = None
    mtu: Annotated[
        Optional[MtuContainer], Field(alias='srl_nokia-network-instance-mtu:mtu')
    ] = None
    table_connections: Annotated[
        Optional[TableConnectionsContainer],
        Field(alias='srl_nokia-table-connections:table-connections'),
    ] = None


class Model(BaseModel):
    """
    Initialize an instance of this class and serialize it to JSON; this results in a RESTCONF payload.

    ## Tips
    Initialization:
    - all values have to be set via keyword arguments
    - if a class contains only a `root` field, it can be initialized as follows:
        - `member=MyNode(root=<value>)`
        - `member=<value>`

    Serialziation:
    - `exclude_defaults=True` omits fields set to their default value (recommended)
    - `by_alias=True` ensures qualified names are used (necessary)
    """

    model_config = ConfigDict(
        populate_by_name=True,
        regex_engine="python-re",
    )
    network_instance: Annotated[
        Optional[List[NetworkInstanceListEntry]],
        Field(alias='srl_nokia-network-instance:network-instance'),
    ] = None


if __name__ == "__main__":
    model = Model(
        # <Initialize model here>
    )

    restconf_payload = model.model_dump_json(
        exclude_defaults=True, by_alias=True, indent=2
    )

    print(f"Generated output: {restconf_payload}")

    # Send config to network device:
    # from pydantify.utility import restconf_patch_request
    # restconf_patch_request(url='...', user_pw_auth=('usr', 'pw'), data=restconf_payload)